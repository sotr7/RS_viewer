	var m = (function (global, env, buffer) {
		"use asm";
		var HEAP8 = new global.Int8Array(buffer); // a
		var HEAP16 = new global.Int16Array(buffer); // b
		var HEAP32 = new global.Int32Array(buffer); // c
		var HEAPU8 = new global.Uint8Array(buffer); // d
		var HEAPU16 = new global.Uint16Array(buffer); // e
		var HEAPU32 = new global.Uint32Array(buffer); // f
		var HEAPF32 = new global.Float32Array(buffer); // g
		var HEAPF64 = new global.Float64Array(buffer); // h
		var i = env.STACKTOP | 0;
		var j = env.STACK_MAX | 0;
		var k = env.tempDoublePtr | 0;
		var l = env.ABORT | 0;
		var m = env.cttz_i8 | 0;
		var n = env.ctlz_i8 | 0;
		var o = env.___dso_handle | 0;
		var p = env._stderr | 0;
		var q = env._stdin | 0;
		var r = env._stdout | 0;
		var s = 0;
		var t = 0;
		var u = 0;
		var v = 0;
		var w = +env.NaN,
		x = +env.Infinity;
		var y = 0,
		z = 0,
		A = 0,
		B = 0,
		C = 0.0,
		D = 0,
		E = 0,
		F = 0,
		G = 0.0;
		var H = 0;
		var I = 0;
		var J = 0;
		var K = 0;
		var L = 0;
		var M = 0;
		var N = 0;
		var O = 0;
		var P = 0;
		var Q = 0;
		var R = global.Math.floor;
		var S = global.Math.abs;
		var T = global.Math.sqrt;
		var U = global.Math.pow;
		var V = global.Math.cos;
		var W = global.Math.sin;
		var X = global.Math.tan;
		var Y = global.Math.acos;
		var Z = global.Math.asin;
		var _ = global.Math.atan;
		var $ = global.Math.atan2;
		var aa = global.Math.exp;
		var ba = global.Math.log;
		var ca = global.Math.ceil;
		var da = global.Math.imul;
		var ea = env.abort;
		var fa = env.assert;
		var ga = env.min;
		var ha = env.invoke_vi;
		var ia = env.invoke_iiii;
		var ja = env.invoke_vid;
		var ka = env.invoke_viiiii;
		var la = env.invoke_iiiiiiiiii;
		var ma = env.invoke_viiiiiii;
		var na = env.invoke_vii;
		var oa = env.invoke_viiiiiiiii;
		var pa = env.invoke_ii;
		var qa = env.invoke_viiiiiid;
		var ra = env.invoke_viii;
		var sa = env.invoke_viiiiid;
		var ta = env.invoke_v;
		var ua = env.invoke_iiiiiiiii;
		var va = env.invoke_iiiii;
		var wa = env.invoke_viiiiiiii;
		var xa = env.invoke_viiiiii;
		var ya = env.invoke_iii;
		var za = env.invoke_iiiiii;
		var Aa = env.invoke_viiii;
		var Ba = env._fabs;
		var Ca = env._fread;
		var Da = env.___cxa_guard_acquire;
		var Ea = env.__ZSt18uncaught_exceptionv;
		var Fa = env._longjmp;
		var Ga = env.___ctype_toupper_loc;
		var Ha = env.__addDays;
		var Ia = env._emscripten_set_main_loop_timing;
		var Ja = env._sbrk;
		var Ka = env.___cxa_begin_catch;
		var La = env._emscripten_memcpy_big;
		var Ma = env._sysconf;
		var Na = env._js_clientsock_close;
		var Oa = env._nxtwebworker_destroy_worker;
		var Pa = env._http_get_response_header;
		var Qa = env._write;
		var Ra = env.__isLeapYear;
		var Sa = env.___cxa_atexit;
		var Ta = env._js_clientsock_write;
		var Ua = env.___cxa_rethrow;
		var Va = env._catclose;
		var Wa = env._emscripten_exit_with_live_runtime;
		var Xa = env._emscripten_get_now_is_monotonic;
		var Ya = env._send;
		var Za = env.___cxa_free_exception;
		var _a = env.___cxa_find_matching_catch;
		var $a = env.___cxa_guard_release;
		var ab = env._strerror_r;
		var bb = env.___setErrNo;
		var cb = env._newlocale;
		var db = env._nxtwebworker_worker_respond;
		var eb = env.___resumeException;
		var fb = env._freelocale;
		var gb = env._putchar;
		var hb = env._pthread_once;
		var ib = env._emscripten_get_now;
		var jb = env._read;
		var kb = env._clock_gettime;
		var lb = env._js_clientsock_tidyUp;
		var mb = env._fwrite;
		var nb = env._js_clientsock_new;
		var ob = env._pthread_mutex_lock;
		var pb = env._catopen;
		var qb = env._exit;
		var rb = env._llvm_pow_f64;
		var sb = env.___ctype_b_loc;
		var tb = env._vfprintf;
		var ub = env.___cxa_allocate_exception;
		var vb = env._floor;
		var wb = env._nxtwebworker_call_worker;
		var xb = env._pwrite;
		var yb = env._emscripten_async_wget2_data;
		var zb = env._uselocale;
		var Ab = env.___cxa_end_catch;
		var Bb = env._pthread_getspecific;
		var Cb = env._floorf;
		var Db = env._pthread_key_create;
		var Eb = env._pthread_cond_broadcast;
		var Fb = env._recv;
		var Gb = env._abort;
		var Hb = env._ceil;
		var Ib = env._http_set_timeout;
		var Jb = env._strftime;
		var Kb = env._pthread_cond_wait;
		var Lb = env._llvm_bswap_i64;
		var Mb = env._ungetc;
		var Nb = env._fflush;
		var Ob = env._time;
		var Pb = env._strftime_l;
		var Qb = env._fprintf;
		var Rb = env.__reallyNegative;
		var Sb = env._catgets;
		var Tb = env._strerror;
		var Ub = env._fileno;
		var Vb = env.__exit;
		var Wb = env.__arraySum;
		var Xb = env.___ctype_tolower_loc;
		var Yb = env._pthread_mutex_unlock;
		var Zb = env._pread;
		var _b = env._mkport;
		var $b = env._getc;
		var ac = env._emscripten_set_main_loop;
		var bc = env.___errno_location;
		var cc = env._pthread_setspecific;
		var dc = env._fgetc;
		var ec = env._fputc;
		var fc = env.___cxa_throw;
		var gc = env._emscripten_cancel_main_loop;
		var hc = env._emscripten_longjmp;
		var ic = env.__formatString;
		var jc = env._atexit;
		var kc = 0.0;
		// EMSCRIPTEN_START_FUNCS
		function fl(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0;
			d = i;
			i = i + 16 | 0;
			e = d;
			HEAP32[e >> 2] = b;
			f = a + 172 | 0;
			g = HEAP32[f >> 2] | 0;
			h = a + 176 | 0;
			j = HEAP32[h >> 2] | 0;
			if (g >>> 0 < j >>> 0) {
				HEAP32[f >> 2] = g + 4;
				if (!g) {
					i = d;
					return
				}
				HEAP32[g >> 2] = b;
				i = d;
				return
			}
			if ((g | 0) == (j | 0)) {
				j = a + 168 | 0;
				a = HEAP32[j >> 2] | 0;
				k = g - a | 0;
				qy(0, a | 0, k | 0) | 0;
				l = k >> 2;
				if (l)
					HEAP32[0 + (l << 2) >> 2] = b;
				HEAP32[j >> 2] = 0;
				HEAP32[f >> 2] = 0 + (l + 1 << 2);
				HEAP32[h >> 2] = 0 + (((g | 0) == (a | 0) ? 1 : k >> 1) << 2);
				i = d;
				return
			} else {
				if (!g)
					m = 0;
				else {
					HEAP32[g >> 2] = HEAP32[g + -4 >> 2];
					m = HEAP32[f >> 2] | 0
				}
				k = m + -4 - g | 0;
				ry(m + (0 - (k >> 2) << 2) | 0, g | 0, k | 0) | 0;
				HEAP32[g >> 2] = HEAP32[e >> 2];
				HEAP32[f >> 2] = (HEAP32[f >> 2] | 0) + 4;
				i = d;
				return
			}
		}
		function gl(a) {
			a = a | 0;
			var b = 0;
			b = a + 172 | 0;
			HEAP32[b >> 2] = (HEAP32[b >> 2] | 0) + -4;
			return
		}
		function hl(a) {
			a = a | 0;
			var b = 0,
			d = 0,
			e = 0,
			f = 0,
			g = 0;
			b = i;
			d = a + 168 | 0;
			e = a + 172 | 0;
			f = HEAP32[e >> 2] | 0;
			g = a + 248 | 0;
			a = HEAP32[((HEAP32[d >> 2] | 0) == (f | 0) ? g : f + -4 | 0) >> 2] | 0;
			if (!(tc[c[(HEAP32[a >> 2] | 0) + 40 >> 2] & 127](a) | 0)) {
				i = b;
				return
			}
			a = HEAP32[e >> 2] | 0;
			e = HEAP32[((HEAP32[d >> 2] | 0) == (a | 0) ? g : a + -4 | 0) >> 2] | 0;
			lc[c[(HEAP32[e >> 2] | 0) + 44 >> 2] & 255](e);
			i = b;
			return
		}
		function il(a) {
			a = a | 0;
			var b = 0,
			d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0;
			b = i;
			if (!a) {
				d = 0;
				i = b;
				return d | 0
			}
			e = HEAP32[10376] | 0;
			f = HEAP32[e + 172 >> 2] | 0;
			g = HEAP32[((HEAP32[e + 168 >> 2] | 0) == (f | 0) ? e + 248 | 0 : f + -4 | 0) >> 2] | 0;
			f = HEAP32[e + 4 >> 2] | 0;
			h = HEAP32[e + 256 >> 2] | 0;
			d = zc[c[(HEAP32[g >> 2] | 0) + 8 >> 2] & 15](g, a, HEAP32[((HEAP32[e >> 2] | 0) == (f | 0) ? e + 80 | 0 : f + -4 | 0) >> 2] | 0, HEAP32[((HEAP32[e + 252 >> 2] | 0) == (h | 0) ? e + 332 | 0 : h + -4 | 0) >> 2] | 0) | 0;
			i = b;
			return d | 0
		}
		function jl(a) {
			a = a | 0;
			var b = 0,
			d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0;
			b = i;
			if (!a) {
				d = 0;
				i = b;
				return d | 0
			}
			e = HEAP32[10376] | 0;
			f = HEAP32[e + 172 >> 2] | 0;
			g = HEAP32[((HEAP32[e + 168 >> 2] | 0) == (f | 0) ? e + 248 | 0 : f + -4 | 0) >> 2] | 0;
			f = HEAP32[e + 4 >> 2] | 0;
			h = HEAP32[e + 256 >> 2] | 0;
			d = zc[c[(HEAP32[g >> 2] | 0) + 8 >> 2] & 15](g, a, HEAP32[((HEAP32[e >> 2] | 0) == (f | 0) ? e + 80 | 0 : f + -4 | 0) >> 2] | 0, HEAP32[((HEAP32[e + 252 >> 2] | 0) == (h | 0) ? e + 332 | 0 : h + -4 | 0) >> 2] | 0) | 0;
			i = b;
			return d | 0
		}
		function kl(a) {
			a = a | 0;
			var b = 0,
			d = 0,
			e = 0,
			f = 0;
			b = i;
			if (!a) {
				i = b;
				return
			}
			d = HEAP32[10376] | 0;
			e = HEAP32[d + 172 >> 2] | 0;
			f = HEAP32[((HEAP32[d + 168 >> 2] | 0) == (e | 0) ? d + 248 | 0 : e + -4 | 0) >> 2] | 0;
			e = HEAP32[d + 256 >> 2] | 0;
			vc[c[(HEAP32[f >> 2] | 0) + 16 >> 2] & 31](f, a, HEAP32[((HEAP32[d + 252 >> 2] | 0) == (e | 0) ? d + 332 | 0 : e + -4 | 0) >> 2] | 0);
			i = b;
			return
		}
		function ll(a) {
			a = a | 0;
			var b = 0,
			d = 0,
			e = 0,
			f = 0;
			b = i;
			if (!a) {
				i = b;
				return
			}
			d = HEAP32[10376] | 0;
			e = HEAP32[d + 172 >> 2] | 0;
			f = HEAP32[((HEAP32[d + 168 >> 2] | 0) == (e | 0) ? d + 248 | 0 : e + -4 | 0) >> 2] | 0;
			e = HEAP32[d + 256 >> 2] | 0;
			vc[c[(HEAP32[f >> 2] | 0) + 16 >> 2] & 31](f, a, HEAP32[((HEAP32[d + 252 >> 2] | 0) == (e | 0) ? d + 332 | 0 : e + -4 | 0) >> 2] | 0);
			i = b;
			return
		}
		function ml(a, b, d, e, f, g) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0;
			g = i;
			if (!a) {
				h = 0;
				i = g;
				return h | 0
			}
			f = HEAP32[10376] | 0;
			e = HEAP32[f + 172 >> 2] | 0;
			d = HEAP32[((HEAP32[f + 168 >> 2] | 0) == (e | 0) ? f + 248 | 0 : e + -4 | 0) >> 2] | 0;
			e = HEAP32[f + 4 >> 2] | 0;
			b = HEAP32[f + 256 >> 2] | 0;
			h = zc[c[(HEAP32[d >> 2] | 0) + 8 >> 2] & 15](d, a, HEAP32[((HEAP32[f >> 2] | 0) == (e | 0) ? f + 80 | 0 : e + -4 | 0) >> 2] | 0, HEAP32[((HEAP32[f + 252 >> 2] | 0) == (b | 0) ? f + 332 | 0 : b + -4 | 0) >> 2] | 0) | 0;
			i = g;
			return h | 0
		}
		function nl(a, b, c) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			return 0
		}
		function ol(d, e, f) {
			d = d | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0;
			g = i;
			i = i + 16 | 0;
			h = g;
			j = h + 4 | 0;
			k = h + 8 | 0;
			HEAP32[h >> 2] = 43112;
			HEAP32[j >> 2] = 43112;
			HEAP32[k >> 2] = 43113;
			if (!e)
				l = 0;
			else {
				pg(h, e);
				m = d;
				d = 0;
				while (1) {
					n = HEAP8[m >> 0] | 0;
					if (n << 24 >> 24 < 0 & (n & 255) < 160)
						o = HEAP16[41560 + ((n & 255) << 1) >> 1] | 0;
					else
						o = n & 255;
					yl(o & 65535, h);
					n = d + 1 | 0;
					if (n >>> 0 < e >>> 0) {
						m = m + 1 | 0;
						d = n
					} else {
						l = n;
						break
					}
				}
			}
			d = HEAP32[f >> 2] | 0;
			HEAP32[f >> 2] = HEAP32[h >> 2];
			HEAP32[h >> 2] = d;
			h = f + 4 | 0;
			m = HEAP32[h >> 2] | 0;
			HEAP32[h >> 2] = HEAP32[j >> 2];
			HEAP32[j >> 2] = m;
			m = f + 8 | 0;
			f = HEAP32[m >> 2] | 0;
			HEAP32[m >> 2] = HEAP32[k >> 2];
			HEAP32[k >> 2] = f;
			if ((f - d | 0) < 2 | (d | 0) == 0) {
				i = g;
				return l | 0
			}
			ll(d);
			i = g;
			return l | 0
		}
		function pl(a, b, c, d) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			d = d | 0;
			var e = 0,
			f = 0;
			e = i;
			f = Xx(a, b, c, d) | 0;
			i = e;
			return f | 0
		}
		function ql(a, b, d, e, f, g) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0,
			k = 0;
			g = i;
			if (!b) {
				i = g;
				return
			}
			h = (f | 0) == 0 ? 1 : f;
			f = b;
			b = 0 - h | 0;
			j = f + -1 + h & b;
			HEAP32[a + 4 >> 2] = j;
			if (e >>> 0 < 4)
				k = h + 3 & b;
			else
				k = e;
			HEAP32[a + 8 >> 2] = f + d - (((f - j + d | 0) >>> 0) % (k >>> 0) | 0);
			HEAP32[a >> 2] = 0;
			HEAP32[a + 12 >> 2] = k;
			i = g;
			return
		}
		function rl(b, d, e, f, h) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			h = h | 0;
			var j = 0,
			k = 0,
			l = 0.0,
			m = 0.0,
			n = 0.0,
			o = 0.0,
			p = 0;
			j = i;
			k = h + f | 0;
			f = d + 8 | 0;
			if (k >>> 0 <= (HEAP32[f >> 2] | 0) >>> 0) {
				HEAP8[b >> 0] = 0;
				HEAP32[b + 4 >> 2] = 0;
				i = j;
				return
			}
			h = (e | 0) == 1 ? 0 : e;
			l = +HEAPF32[d >> 2];
			m =  + (k >>> 0) / l;
			n =  + (h >>> 0);
			if (!(m > n)) {
				HEAP32[f >> 2] = ~~+ca( + ( + (h >>> 0) * +R(+l))) >>> 0;
				HEAP8[b >> 0] = 0;
				HEAP32[b + 4 >> 2] = 0;
				i = j;
				return
			}
			o = n * +HEAPF32[d + 4 >> 2];
			d = ~~(m < o ? o : m) >>> 0;
			h = 42080;
			k = 256;
			a: while (1) {
				e = k;
				while (1) {
					if ((e | 0) <= 0)
						break a;
					p = e >> 1;
					if ((HEAP32[h + (p << 2) >> 2] | 0) >>> 0 < d >>> 0)
						break;
					else
						e = p
				}
				h = h + (p + 1 << 2) | 0;
				k = e + -1 - p | 0
			}
			p = HEAP32[h >> 2] | 0;
			HEAP32[f >> 2] = ~~+ca( + ( + (p >>> 0) * +R(+l))) >>> 0;
			HEAP8[b >> 0] = 1;
			HEAP32[b + 4 >> 2] = p;
			i = j;
			return
		}
		function sl(a) {
			a = a | 0;
			var b = 0,
			d = 0,
			e = 0,
			f = 0;
			b = i;
			d = HEAP32[a >> 2] | 0;
			if (!d) {
				e = a;
				while (1) {
					f = HEAP32[e + 8 >> 2] | 0;
					if ((e | 0) == (HEAP32[f >> 2] | 0))
						e = f;
					else
						break
				}
				i = b;
				return ((HEAP32[e >> 2] | 0) == (f | 0) ? e : f) | 0
			} else {
				f = d;
				while (1) {
					d = HEAP32[f + 4 >> 2] | 0;
					if (!d)
						break;
					else
						f = d
				}
				i = b;
				return f | 0
			}
			return 0
		}
		function tl(b) {
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0;
			d = i;
			e = HEAP32[b + 8 >> 2] | 0;
			if ((HEAP32[e + 8 >> 2] | 0) == (b | 0) ? (HEAP8[b + 12 >> 0] | 0) == 0 : 0) {
				f = HEAP32[b >> 2] | 0;
				i = d;
				return f | 0
			}
			g = HEAP32[b + 4 >> 2] | 0;
			if (!g) {
				h = b;
				j = e
			} else {
				e = g;
				while (1) {
					g = HEAP32[e >> 2] | 0;
					if (!g) {
						f = e;
						break
					} else
						e = g
				}
				i = d;
				return f | 0
			}
			while (1) {
				if ((h | 0) != (HEAP32[j + 4 >> 2] | 0)) {
					f = j;
					break
				}
				e = j;
				j = HEAP32[j + 8 >> 2] | 0;
				h = e
			}
			i = d;
			return f | 0
		}
		function ul(b, d, e, f) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0;
			g = i;
			h = e + 8 | 0;
			HEAP32[b + 8 >> 2] = d;
			HEAP32[b >> 2] = 0;
			HEAP32[b + 4 >> 2] = 0;
			HEAP8[b + 12 >> 0] = 0;
			do
				if (!f) {
					HEAP32[d + 4 >> 2] = b;
					if ((d | 0) == (e | 0)) {
						HEAP32[h >> 2] = b;
						HEAP32[e >> 2] = b;
						break
					}
					j = e + 4 | 0;
					if ((HEAP32[j >> 2] | 0) == (d | 0))
						HEAP32[j >> 2] = b
				} else {
					HEAP32[d >> 2] = b;
					if ((HEAP32[e >> 2] | 0) == (d | 0))
						HEAP32[e >> 2] = b
				}
			while (0);
			e = HEAP32[h >> 2] | 0;
			if ((e | 0) == (b | 0)) {
				k = b;
				l = k + 12 | 0;
				HEAP8[l >> 0] = 1;
				i = g;
				return
			} else {
				m = b;
				n = e
			}
			while (1) {
				e = m + 8 | 0;
				b = HEAP32[e >> 2] | 0;
				d = b + 12 | 0;
				if (HEAP8[d >> 0] | 0) {
					k = n;
					o = 48;
					break
				}
				f = b + 8 | 0;
				j = HEAP32[f >> 2] | 0;
				p = j + 4 | 0;
				q = HEAP32[p >> 2] | 0;
				do
					if ((b | 0) == (q | 0)) {
						r = HEAP32[j >> 2] | 0;
						if ((r | 0) != 0 ? (s = r + 12 | 0, (HEAP8[s >> 0] | 0) == 0) : 0) {
							HEAP8[d >> 0] = 1;
							HEAP8[s >> 0] = 1;
							HEAP8[j + 12 >> 0] = 0;
							t = j;
							u = n;
							break
						}
						s = HEAP32[b >> 2] | 0;
						if ((m | 0) == (s | 0)) {
							r = m + 4 | 0;
							v = HEAP32[r >> 2] | 0;
							HEAP32[b >> 2] = v;
							if (!v)
								w = j;
							else {
								HEAP32[v + 8 >> 2] = b;
								w = HEAP32[f >> 2] | 0
							}
							HEAP32[e >> 2] = w;
							do
								if ((b | 0) != (n | 0)) {
									v = HEAP32[f >> 2] | 0;
									x = v + 4 | 0;
									if ((HEAP32[x >> 2] | 0) == (b | 0)) {
										HEAP32[x >> 2] = m;
										y = n;
										break
									} else {
										HEAP32[v >> 2] = m;
										y = n;
										break
									}
								} else
									y = m;
							while (0);
							HEAP32[r >> 2] = b;
							HEAP32[f >> 2] = m;
							HEAP32[h >> 2] = y;
							v = HEAP32[p >> 2] | 0;
							z = b;
							A = HEAP32[f >> 2] | 0;
							B = HEAP32[v >> 2] | 0;
							C = v;
							D = y
						} else {
							z = m;
							A = b;
							B = s;
							C = b;
							D = n
						}
						HEAP8[A + 12 >> 0] = 1;
						HEAP8[j + 12 >> 0] = 0;
						HEAP32[p >> 2] = B;
						if (B)
							HEAP32[B + 8 >> 2] = j;
						v = j + 8 | 0;
						HEAP32[C + 8 >> 2] = HEAP32[v >> 2];
						do
							if ((j | 0) != (D | 0)) {
								x = HEAP32[v >> 2] | 0;
								if ((HEAP32[x >> 2] | 0) == (j | 0)) {
									HEAP32[x >> 2] = C;
									E = D;
									break
								} else {
									HEAP32[x + 4 >> 2] = C;
									E = D;
									break
								}
							} else
								E = C;
						while (0);
						HEAP32[C >> 2] = j;
						HEAP32[v >> 2] = C;
						HEAP32[h >> 2] = E;
						t = z;
						u = E
					} else {
						if ((q | 0) != 0 ? (s = q + 12 | 0, (HEAP8[s >> 0] | 0) == 0) : 0) {
							HEAP8[d >> 0] = 1;
							HEAP8[s >> 0] = 1;
							HEAP8[j + 12 >> 0] = 0;
							t = j;
							u = n;
							break
						}
						s = b + 4 | 0;
						if ((m | 0) == (HEAP32[s >> 2] | 0)) {
							r = HEAP32[m >> 2] | 0;
							HEAP32[s >> 2] = r;
							if (!r)
								F = j;
							else {
								HEAP32[r + 8 >> 2] = b;
								F = HEAP32[f >> 2] | 0
							}
							HEAP32[e >> 2] = F;
							do
								if ((b | 0) != (n | 0)) {
									r = HEAP32[f >> 2] | 0;
									if ((HEAP32[r >> 2] | 0) == (b | 0)) {
										HEAP32[r >> 2] = m;
										G = n;
										break
									} else {
										HEAP32[r + 4 >> 2] = m;
										G = n;
										break
									}
								} else
									G = m;
							while (0);
							HEAP32[m >> 2] = b;
							HEAP32[f >> 2] = m;
							HEAP32[h >> 2] = G;
							H = b;
							I = HEAP32[f >> 2] | 0;
							J = G
						} else {
							H = m;
							I = b;
							J = n
						}
						HEAP8[I + 12 >> 0] = 1;
						HEAP8[j + 12 >> 0] = 0;
						v = HEAP32[j >> 2] | 0;
						r = v + 4 | 0;
						s = HEAP32[r >> 2] | 0;
						HEAP32[j >> 2] = s;
						if (s)
							HEAP32[s + 8 >> 2] = j;
						s = j + 8 | 0;
						HEAP32[v + 8 >> 2] = HEAP32[s >> 2];
						do
							if ((j | 0) != (J | 0)) {
								x = HEAP32[s >> 2] | 0;
								K = x + 4 | 0;
								if ((HEAP32[K >> 2] | 0) == (j | 0)) {
									HEAP32[K >> 2] = v;
									L = J;
									break
								} else {
									HEAP32[x >> 2] = v;
									L = J;
									break
								}
							} else
								L = v;
						while (0);
						HEAP32[r >> 2] = j;
						HEAP32[s >> 2] = v;
						HEAP32[h >> 2] = L;
						t = H;
						u = L
					}
				while (0);
				if ((t | 0) == (u | 0)) {
					k = u;
					o = 48;
					break
				} else {
					m = t;
					n = u
				}
			}
			if ((o | 0) == 48) {
				l = k + 12 | 0;
				HEAP8[l >> 0] = 1;
				i = g;
				return
			}
		}
		function vl(b, d) {
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0,
			O = 0,
			P = 0,
			Q = 0,
			R = 0,
			S = 0,
			T = 0,
			U = 0,
			V = 0,
			W = 0,
			X = 0,
			Y = 0,
			Z = 0,
			_ = 0,
			$ = 0;
			e = i;
			f = d + 8 | 0;
			g = d + 4 | 0;
			h = b + 4 | 0;
			j = HEAP32[h >> 2] | 0;
			k = HEAP32[b >> 2] | 0;
			do
				if (j) {
					if (!k) {
						l = HEAP32[b + 8 >> 2] | 0;
						m = j;
						n = 7;
						break
					} else
						o = k;
					while (1) {
						p = o + 4 | 0;
						q = HEAP32[p >> 2] | 0;
						if (!q)
							break;
						else
							o = q
					}
					q = HEAP32[o >> 2] | 0;
					if ((o | 0) == (b | 0)) {
						r = q;
						n = 6
					} else {
						HEAP32[j + 8 >> 2] = o;
						HEAP32[p >> 2] = j;
						if ((o | 0) == (k | 0))
							s = k;
						else {
							t = HEAP32[o + 8 >> 2] | 0;
							if (q)
								HEAP32[q + 8 >> 2] = t;
							HEAP32[t + 4 >> 2] = q;
							HEAP32[o >> 2] = k;
							c[(HEAP32[b >> 2] | 0) + 8 >> 2] = o;
							s = t
						}
						do
							if ((HEAP32[f >> 2] | 0) != (b | 0)) {
								t = HEAP32[b + 8 >> 2] | 0;
								u = t + 4 | 0;
								if ((HEAP32[u >> 2] | 0) == (b | 0)) {
									HEAP32[u >> 2] = o;
									v = t;
									break
								} else {
									HEAP32[t >> 2] = o;
									v = t;
									break
								}
							} else {
								HEAP32[f >> 2] = o;
								v = HEAP32[b + 8 >> 2] | 0
							}
						while (0);
						HEAP32[o + 8 >> 2] = v;
						t = o + 12 | 0;
						u = b + 12 | 0;
						w = HEAP8[t >> 0] | 0;
						HEAP8[t >> 0] = HEAP8[u >> 0] | 0;
						HEAP8[u >> 0] = w;
						x = q;
						y = s
					}
				} else {
					r = k;
					n = 6
				}
			while (0);
			if ((n | 0) == 6) {
				k = HEAP32[b + 8 >> 2] | 0;
				if (!r) {
					z = k;
					A = 0;
					n = 8
				} else {
					l = k;
					m = r;
					n = 7
				}
			}
			if ((n | 0) == 7) {
				HEAP32[m + 8 >> 2] = l;
				z = l;
				A = m;
				n = 8
			}
			do
				if ((n | 0) == 8) {
					do
						if ((HEAP32[f >> 2] | 0) != (b | 0)) {
							m = HEAP32[b + 8 >> 2] | 0;
							l = m + 4 | 0;
							if ((HEAP32[l >> 2] | 0) == (b | 0)) {
								HEAP32[l >> 2] = A;
								break
							} else {
								HEAP32[m >> 2] = A;
								break
							}
						} else
							HEAP32[f >> 2] = A;
					while (0);
					do
						if ((HEAP32[g >> 2] | 0) == (b | 0)) {
							if (!(HEAP32[b >> 2] | 0)) {
								HEAP32[g >> 2] = HEAP32[b + 8 >> 2];
								break
							} else
								B = A;
							while (1) {
								q = HEAP32[B + 4 >> 2] | 0;
								if (!q)
									break;
								else
									B = q
							}
							HEAP32[g >> 2] = B
						}
					while (0);
					if ((HEAP32[d >> 2] | 0) == (b | 0)) {
						if (!(HEAP32[h >> 2] | 0)) {
							HEAP32[d >> 2] = HEAP32[b + 8 >> 2];
							x = A;
							y = z;
							break
						} else
							C = A;
						while (1) {
							q = HEAP32[C >> 2] | 0;
							if (!q)
								break;
							else
								C = q
						}
						HEAP32[d >> 2] = C;
						x = A;
						y = z
					} else {
						x = A;
						y = z
					}
				}
			while (0);
			if ((HEAP8[b + 12 >> 0] | 0) != 1) {
				i = e;
				return
			}
			b = HEAP32[f >> 2] | 0;
			a: do
				if ((x | 0) != (b | 0)) {
					z = b;
					A = x;
					C = y;
					while (1) {
						if ((A | 0) != 0 ? (HEAP8[A + 12 >> 0] | 0) != 1 : 0) {
							D = A;
							break a
						}
						E = C + 4 | 0;
						d = HEAP32[E >> 2] | 0;
						if ((A | 0) == (d | 0)) {
							h = HEAP32[C >> 2] | 0;
							B = h + 12 | 0;
							if (!(HEAP8[B >> 0] | 0)) {
								HEAP8[B >> 0] = 1;
								HEAP8[C + 12 >> 0] = 0;
								B = h + 4 | 0;
								g = HEAP32[B >> 2] | 0;
								HEAP32[C >> 2] = g;
								if (g)
									HEAP32[g + 8 >> 2] = C;
								g = C + 8 | 0;
								HEAP32[h + 8 >> 2] = HEAP32[g >> 2];
								do
									if ((C | 0) != (z | 0)) {
										q = HEAP32[g >> 2] | 0;
										m = q + 4 | 0;
										if ((HEAP32[m >> 2] | 0) == (C | 0)) {
											HEAP32[m >> 2] = h;
											F = z;
											break
										} else {
											HEAP32[q >> 2] = h;
											F = z;
											break
										}
									} else
										F = h;
								while (0);
								HEAP32[B >> 2] = C;
								HEAP32[g >> 2] = h;
								HEAP32[f >> 2] = F;
								G = F;
								H = HEAP32[C >> 2] | 0
							} else {
								G = z;
								H = h
							}
							I = H + 4 | 0;
							J = HEAP32[I >> 2] | 0;
							if ((J | 0) != 0 ? (HEAP8[J + 12 >> 0] | 0) != 1 : 0) {
								n = 51;
								break
							}
							q = HEAP32[H >> 2] | 0;
							if ((q | 0) != 0 ? (HEAP8[q + 12 >> 0] | 0) != 1 : 0) {
								K = q;
								n = 52;
								break
							}
							HEAP8[H + 12 >> 0] = 0;
							L = G
						} else {
							q = d + 12 | 0;
							if (!(HEAP8[q >> 0] | 0)) {
								HEAP8[q >> 0] = 1;
								HEAP8[C + 12 >> 0] = 0;
								q = HEAP32[d >> 2] | 0;
								HEAP32[E >> 2] = q;
								if (q)
									HEAP32[q + 8 >> 2] = C;
								q = C + 8 | 0;
								HEAP32[d + 8 >> 2] = HEAP32[q >> 2];
								do
									if ((C | 0) != (z | 0)) {
										m = HEAP32[q >> 2] | 0;
										if ((HEAP32[m >> 2] | 0) == (C | 0)) {
											HEAP32[m >> 2] = d;
											M = z;
											break
										} else {
											HEAP32[m + 4 >> 2] = d;
											M = z;
											break
										}
									} else
										M = d;
								while (0);
								HEAP32[d >> 2] = C;
								HEAP32[q >> 2] = d;
								HEAP32[f >> 2] = M;
								N = M;
								O = HEAP32[E >> 2] | 0
							} else {
								N = z;
								O = d
							}
							P = HEAP32[O >> 2] | 0;
							if ((P | 0) != 0 ? (HEAP8[P + 12 >> 0] | 0) != 1 : 0) {
								n = 83;
								break
							}
							h = HEAP32[O + 4 >> 2] | 0;
							if ((h | 0) != 0 ? (HEAP8[h + 12 >> 0] | 0) != 1 : 0) {
								Q = h;
								n = 84;
								break
							}
							HEAP8[O + 12 >> 0] = 0;
							L = N
						}
						if ((C | 0) == (L | 0)) {
							R = C;
							n = 101;
							break a
						} else {
							h = C;
							z = L;
							C = HEAP32[C + 8 >> 2] | 0;
							A = h
						}
					}
					if ((n | 0) == 51) {
						z = HEAP32[H >> 2] | 0;
						if (!z)
							n = 53;
						else {
							K = z;
							n = 52
						}
					} else if ((n | 0) == 83) {
						z = HEAP32[O + 4 >> 2] | 0;
						if (!z)
							n = 85;
						else {
							Q = z;
							n = 84
						}
					}
					if ((n | 0) == 52)
						if ((HEAP8[K + 12 >> 0] | 0) == 1)
							n = 53;
						else {
							S = H;
							T = K;
							U = G;
							n = 60
						}
					else if ((n | 0) == 84)
						if ((HEAP8[Q + 12 >> 0] | 0) == 1)
							n = 85;
						else {
							V = O;
							W = Q;
							X = N;
							n = 92
						}
					if ((n | 0) == 53) {
						HEAP8[J + 12 >> 0] = 1;
						HEAP8[H + 12 >> 0] = 0;
						z = HEAP32[J >> 2] | 0;
						HEAP32[I >> 2] = z;
						if (z)
							HEAP32[z + 8 >> 2] = H;
						z = H + 8 | 0;
						HEAP32[J + 8 >> 2] = HEAP32[z >> 2];
						do
							if ((H | 0) != (G | 0)) {
								h = HEAP32[z >> 2] | 0;
								if ((HEAP32[h >> 2] | 0) == (H | 0)) {
									HEAP32[h >> 2] = J;
									Y = G;
									break
								} else {
									HEAP32[h + 4 >> 2] = J;
									Y = G;
									break
								}
							} else
								Y = J;
						while (0);
						HEAP32[J >> 2] = H;
						HEAP32[z >> 2] = J;
						HEAP32[f >> 2] = Y;
						h = HEAP32[C >> 2] | 0;
						S = h;
						T = HEAP32[h >> 2] | 0;
						U = Y;
						n = 60
					} else if ((n | 0) == 85) {
						HEAP8[P + 12 >> 0] = 1;
						HEAP8[O + 12 >> 0] = 0;
						h = P + 4 | 0;
						g = HEAP32[h >> 2] | 0;
						HEAP32[O >> 2] = g;
						if (g)
							HEAP32[g + 8 >> 2] = O;
						g = O + 8 | 0;
						HEAP32[P + 8 >> 2] = HEAP32[g >> 2];
						do
							if ((O | 0) != (N | 0)) {
								B = HEAP32[g >> 2] | 0;
								m = B + 4 | 0;
								if ((HEAP32[m >> 2] | 0) == (O | 0)) {
									HEAP32[m >> 2] = P;
									Z = N;
									break
								} else {
									HEAP32[B >> 2] = P;
									Z = N;
									break
								}
							} else
								Z = P;
						while (0);
						HEAP32[h >> 2] = O;
						HEAP32[g >> 2] = P;
						HEAP32[f >> 2] = Z;
						z = HEAP32[E >> 2] | 0;
						V = z;
						W = HEAP32[z + 4 >> 2] | 0;
						X = Z;
						n = 92
					}
					if ((n | 0) == 60) {
						z = C + 12 | 0;
						HEAP8[S + 12 >> 0] = HEAP8[z >> 0] | 0;
						HEAP8[z >> 0] = 1;
						if (T)
							HEAP8[T + 12 >> 0] = 1;
						z = S + 4 | 0;
						B = HEAP32[z >> 2] | 0;
						HEAP32[C >> 2] = B;
						if (B)
							HEAP32[B + 8 >> 2] = C;
						B = C + 8 | 0;
						HEAP32[S + 8 >> 2] = HEAP32[B >> 2];
						do
							if ((C | 0) != (U | 0)) {
								m = HEAP32[B >> 2] | 0;
								l = m + 4 | 0;
								if ((HEAP32[l >> 2] | 0) == (C | 0)) {
									HEAP32[l >> 2] = S;
									_ = U;
									break
								} else {
									HEAP32[m >> 2] = S;
									_ = U;
									break
								}
							} else
								_ = S;
						while (0);
						HEAP32[z >> 2] = C;
						HEAP32[B >> 2] = S;
						HEAP32[f >> 2] = _;
						R = A;
						n = 101;
						break
					} else if ((n | 0) == 92) {
						g = C + 12 | 0;
						HEAP8[V + 12 >> 0] = HEAP8[g >> 0] | 0;
						HEAP8[g >> 0] = 1;
						if (W)
							HEAP8[W + 12 >> 0] = 1;
						g = HEAP32[V >> 2] | 0;
						HEAP32[E >> 2] = g;
						if (g)
							HEAP32[g + 8 >> 2] = C;
						g = C + 8 | 0;
						HEAP32[V + 8 >> 2] = HEAP32[g >> 2];
						do
							if ((C | 0) != (X | 0)) {
								h = HEAP32[g >> 2] | 0;
								if ((HEAP32[h >> 2] | 0) == (C | 0)) {
									HEAP32[h >> 2] = V;
									$ = X;
									break
								} else {
									HEAP32[h + 4 >> 2] = V;
									$ = X;
									break
								}
							} else
								$ = V;
						while (0);
						HEAP32[V >> 2] = C;
						HEAP32[g >> 2] = V;
						HEAP32[f >> 2] = $;
						R = A;
						n = 101;
						break
					}
				} else {
					R = x;
					n = 101
				}
			while (0);
			if ((n | 0) == 101)
				if (!R) {
					i = e;
					return
				} else
					D = R;
			HEAP8[D + 12 >> 0] = 1;
			i = e;
			return
		}
		function wl() {
			var a = 0,
			b = 0;
			a = i;
			i = i + 16 | 0;
			b = a;
			HEAP32[b + 0 >> 2] = 0;
			HEAP32[b + 4 >> 2] = 0;
			HEAP32[b + 8 >> 2] = 0;
			HEAP32[b + 12 >> 2] = 0;
			HEAP32[10382] = 41544;
			HEAP32[10384] = 41560;
			HEAP32[10386] = HEAP32[b + 0 >> 2];
			HEAP32[10387] = HEAP32[b + 4 >> 2];
			HEAP32[10388] = HEAP32[b + 8 >> 2];
			HEAP32[10389] = HEAP32[b + 12 >> 2];
			HEAP32[10383] = 41560;
			Sa(167, 41528, o | 0) | 0;
			HEAP32[10780] = 43112;
			HEAP32[10781] = 43112;
			HEAP32[10782] = 43113;
			Sa(182, 43120, o | 0) | 0;
			i = a;
			return
		}
		function xl(a) {
			a = a | 0;
			var b = 0,
			d = 0;
			b = i;
			d = HEAP32[a >> 2] | 0;
			if ((d | 0) == 0 ? 1 : ((HEAP32[a + 8 >> 2] | 0) - d | 0) < 2) {
				i = b;
				return
			}
			ll(d);
			i = b;
			return
		}
		function yl(b, d) {
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0;
			e = i;
			if (!b) {
				i = e;
				return
			}
			if (b >>> 0 < 128) {
				f = b & 255;
				g = d + 4 | 0;
				h = HEAP32[g >> 2] | 0;
				j = HEAP32[d >> 2] | 0;
				k = h - j | 0;
				l = (HEAP32[d + 8 >> 2] | 0) - j | 0;
				j = l + -1 | 0;
				m = k + 1 | 0;
				if (m >>> 0 > j >>> 0 ? (n = j >>> 0 > 8 ? j << 1 : 8, j = n >>> 0 < m >>> 0 ? m : n, n = k >>> 0 > j >>> 0 ? k : j, n >>> 0 >= l >>> 0) : 0) {
					pg(d, n);
					o = HEAP32[g >> 2] | 0
				} else
					o = h;
				HEAP8[o >> 0] = f;
				f = (HEAP32[g >> 2] | 0) + 1 | 0;
				HEAP32[g >> 2] = f;
				HEAP8[f >> 0] = 0;
				i = e;
				return
			}
			if (b >>> 0 < 2048) {
				f = (b >>> 6 & 31 | 192) & 255;
				g = d + 4 | 0;
				o = HEAP32[g >> 2] | 0;
				h = HEAP32[d >> 2] | 0;
				n = o - h | 0;
				l = d + 8 | 0;
				j = (HEAP32[l >> 2] | 0) - h | 0;
				h = j + -1 | 0;
				k = n + 1 | 0;
				if (k >>> 0 > h >>> 0 ? (m = h >>> 0 > 8 ? h << 1 : 8, h = m >>> 0 < k >>> 0 ? k : m, m = n >>> 0 > h >>> 0 ? n : h, m >>> 0 >= j >>> 0) : 0) {
					pg(d, m);
					p = HEAP32[g >> 2] | 0
				} else
					p = o;
				HEAP8[p >> 0] = f;
				f = (HEAP32[g >> 2] | 0) + 1 | 0;
				HEAP32[g >> 2] = f;
				HEAP8[f >> 0] = 0;
				f = (b & 63 | 128) & 255;
				p = HEAP32[g >> 2] | 0;
				o = HEAP32[d >> 2] | 0;
				m = p - o | 0;
				j = (HEAP32[l >> 2] | 0) - o | 0;
				o = j + -1 | 0;
				l = m + 1 | 0;
				if (l >>> 0 > o >>> 0 ? (h = o >>> 0 > 8 ? o << 1 : 8, o = h >>> 0 < l >>> 0 ? l : h, h = m >>> 0 > o >>> 0 ? m : o, h >>> 0 >= j >>> 0) : 0) {
					pg(d, h);
					q = HEAP32[g >> 2] | 0
				} else
					q = p;
				HEAP8[q >> 0] = f;
				f = (HEAP32[g >> 2] | 0) + 1 | 0;
				HEAP32[g >> 2] = f;
				HEAP8[f >> 0] = 0;
				i = e;
				return
			}
			if (b >>> 0 >= 65536) {
				i = e;
				return
			}
			f = (b >>> 12 & 15 | 224) & 255;
			g = d + 4 | 0;
			q = HEAP32[g >> 2] | 0;
			p = HEAP32[d >> 2] | 0;
			h = q - p | 0;
			j = d + 8 | 0;
			o = (HEAP32[j >> 2] | 0) - p | 0;
			p = o + -1 | 0;
			m = h + 1 | 0;
			if (m >>> 0 > p >>> 0 ? (l = p >>> 0 > 8 ? p << 1 : 8, p = l >>> 0 < m >>> 0 ? m : l, l = h >>> 0 > p >>> 0 ? h : p, l >>> 0 >= o >>> 0) : 0) {
				pg(d, l);
				r = HEAP32[g >> 2] | 0
			} else
				r = q;
			HEAP8[r >> 0] = f;
			f = (HEAP32[g >> 2] | 0) + 1 | 0;
			HEAP32[g >> 2] = f;
			HEAP8[f >> 0] = 0;
			f = (b >>> 6 & 63 | 128) & 255;
			r = HEAP32[g >> 2] | 0;
			q = HEAP32[d >> 2] | 0;
			l = r - q | 0;
			o = (HEAP32[j >> 2] | 0) - q | 0;
			q = o + -1 | 0;
			p = l + 1 | 0;
			if (p >>> 0 > q >>> 0 ? (h = q >>> 0 > 8 ? q << 1 : 8, q = h >>> 0 < p >>> 0 ? p : h, h = l >>> 0 > q >>> 0 ? l : q, h >>> 0 >= o >>> 0) : 0) {
				pg(d, h);
				s = HEAP32[g >> 2] | 0
			} else
				s = r;
			HEAP8[s >> 0] = f;
			f = (HEAP32[g >> 2] | 0) + 1 | 0;
			HEAP32[g >> 2] = f;
			HEAP8[f >> 0] = 0;
			f = (b & 63 | 128) & 255;
			b = HEAP32[g >> 2] | 0;
			s = HEAP32[d >> 2] | 0;
			r = b - s | 0;
			h = (HEAP32[j >> 2] | 0) - s | 0;
			s = h + -1 | 0;
			j = r + 1 | 0;
			if (j >>> 0 > s >>> 0 ? (o = s >>> 0 > 8 ? s << 1 : 8, s = o >>> 0 < j >>> 0 ? j : o, o = r >>> 0 > s >>> 0 ? r : s, o >>> 0 >= h >>> 0) : 0) {
				pg(d, o);
				t = HEAP32[g >> 2] | 0
			} else
				t = b;
			HEAP8[t >> 0] = f;
			f = (HEAP32[g >> 2] | 0) + 1 | 0;
			HEAP32[g >> 2] = f;
			HEAP8[f >> 0] = 0;
			i = e;
			return
		}
		function zl() {
			var b = 0,
			d = 0,
			e = 0;
			b = i;
			i = i + 16 | 0;
			d = b;
			if (HEAP8[125144] | 0) {
				i = b;
				return 43136
			}
			if (!(Da(125144) | 0)) {
				i = b;
				return 43136
			}
			HEAP32[10788] = 0;
			HEAP32[d >> 2] = 0;
			e = d + 4 | 0;
			HEAP32[e >> 2] = 0;
			HEAP32[d + 8 >> 2] = 0;
			ql(d, 0, 81920, 20, 4, 0);
			HEAP32[10791] = 0;
			HEAP32[10792] = 0;
			HEAP32[10793] = 0;
			HEAP32[10794] = 0;
			HEAP32[10795] = 0;
			d = HEAP32[e >> 2] | 0;
			HEAP32[10796] = 0;
			HEAP32[10797] = 0;
			HEAP32[10798] = 0;
			ql(43184, d, 81920, 20, 4, 0);
			HEAP32[10791] = 43164;
			HEAP32[10792] = 43164;
			HEAP32[10793] = 0;
			HEAP8[43176] = 0;
			HEAP32[10795] = 0;
			ql(43184, 43200, 81939, 20, 4, 0);
			HEAP32[31285] = 6;
			Sa(183, 43136, o | 0) | 0;
			$a(125144);
			i = b;
			return 43136
		}
		function Al(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0;
			d = i;
			if (!b) {
				i = d;
				return
			}
			e = a + 24 | 0;
			f = b;
			do {
				Al(a, HEAP32[f >> 2] | 0);
				b = f;
				f = HEAP32[f + 4 >> 2] | 0;
				HEAP32[b >> 2] = HEAP32[e >> 2];
				HEAP32[e >> 2] = b
			} while ((f | 0) != 0);
			i = d;
			return
		}
		function Bl(a) {
			a = a | 0;
			var b = 0,
			d = 0;
			b = i;
			Al(a + 24 | 0, HEAP32[a + 36 >> 2] | 0);
			d = HEAP32[a + 16 >> 2] | 0;
			if ((d | 0) == (a | 0)) {
				lc[c[(HEAP32[d >> 2] | 0) + 16 >> 2] & 255](d);
				i = b;
				return
			}
			if (!d) {
				i = b;
				return
			}
			lc[c[(HEAP32[d >> 2] | 0) + 20 >> 2] & 255](d);
			i = b;
			return
		}
		function Cl(a, b, e) {
			a = a | 0;
			b = b | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0;
			f = i;
			if (!b) {
				g = e;
				h = ~g;
				i = f;
				return h | 0
			} else {
				j = b;
				k = a;
				l = e
			}
			while (1) {
				j = j + -1 | 0;
				e = HEAP32[125168 + (((HEAPU8[k >> 0] | 0) ^ l & 255) << 2) >> 2] ^ l >>> 8;
				if (!j) {
					g = e;
					break
				} else {
					k = k + 1 | 0;
					l = e
				}
			}
			h = ~g;
			i = f;
			return h | 0
		}
		function Dl() {
			var a = 0;
			a = i;
			HEAP32[31288] = 0;
			HEAP32[31289] = 0;
			HEAP32[31290] = 0;
			Sa(184, 125152, o | 0) | 0;
			i = a;
			return
		}
		function El(a) {
			a = a | 0;
			var b = 0,
			d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0;
			b = i;
			d = HEAP32[a >> 2] | 0;
			if (!d) {
				i = b;
				return
			}
			e = a + 4 | 0;
			f = HEAP32[e >> 2] | 0;
			if ((f | 0) == (d | 0))
				g = d;
			else {
				h = f;
				do {
					HEAP32[e >> 2] = h + -8;
					f = h + -4 | 0;
					j = HEAP32[f >> 2] | 0;
					HEAP32[f >> 2] = 0;
					if (j) {
						f = HEAP32[j + 28 >> 2] | 0;
						if (f) {
							k = j + 32 | 0;
							l = HEAP32[k >> 2] | 0;
							if ((l | 0) != (f | 0))
								HEAP32[k >> 2] = l + (~(((l + -24 - f | 0) >>> 0) / 24 | 0) * 24 | 0);
							kl(f)
						}
						f = j + 24 | 0;
						l = HEAP32[f >> 2] | 0;
						HEAP32[f >> 2] = 0;
						if (l)
							ll(l);
						l = j + 20 | 0;
						f = HEAP32[l >> 2] | 0;
						HEAP32[l >> 2] = 0;
						if (f)
							ll(f);
						kl(j)
					}
					h = HEAP32[e >> 2] | 0
				} while ((h | 0) != (d | 0));
				g = HEAP32[a >> 2] | 0
			}
			kl(g);
			i = b;
			return
		}
		function Fl(a) {
			a = a | 0;
			var b = 0,
			d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0;
			a = i;
			b = HEAP32[q >> 2] | 0;
			gu(126904, b, 126960);
			HEAP32[31548] = 128148;
			HEAP32[31550] = 128168;
			HEAP32[31549] = 0;
			d = HEAP32[32034] | 0;
			Bm(126192 + d | 0, 126904);
			HEAP32[d + 126264 >> 2] = 0;
			HEAP32[d + 126268 >> 2] = -1;
			d = HEAP32[r >> 2] | 0;
			hu(127008, d, 126968 | 0);
			HEAP32[31570] = 128228;
			HEAP32[31571] = 128248;
			e = HEAP32[32054] | 0;
			Bm(126280 + e | 0, 127008);
			f = e + 72 | 0;
			HEAP32[126280 + f >> 2] = 0;
			g = e + 76 | 0;
			HEAP32[126280 + g >> 2] = -1;
			h = HEAP32[p >> 2] | 0;
			hu(127056, h, 126976 | 0);
			HEAP32[31592] = 128228;
			HEAP32[31593] = 128248;
			Bm(126368 + e | 0, 127056);
			HEAP32[126368 + f >> 2] = 0;
			HEAP32[126368 + g >> 2] = -1;
			j = HEAP32[(c[(HEAP32[31592] | 0) + -12 >> 2] | 0) + 126392 >> 2] | 0;
			HEAP32[31614] = 128228;
			HEAP32[31615] = 128248;
			Bm(126456 + e | 0, j);
			HEAP32[126456 + f >> 2] = 0;
			HEAP32[126456 + g >> 2] = -1;
			c[(c[(HEAP32[31548] | 0) + -12 >> 2] | 0) + 126264 >> 2] = 126280;
			g = (c[(HEAP32[31592] | 0) + -12 >> 2] | 0) + 126372 | 0;
			HEAP32[g >> 2] = HEAP32[g >> 2] | 8192;
			c[(c[(HEAP32[31592] | 0) + -12 >> 2] | 0) + 126440 >> 2] = 126280;
			iu(127104, b, 126984 | 0);
			HEAP32[31636] = 128188;
			HEAP32[31638] = 128208;
			HEAP32[31637] = 0;
			b = HEAP32[32044] | 0;
			Bm(126544 + b | 0, 127104);
			HEAP32[b + 126616 >> 2] = 0;
			HEAP32[b + 126620 >> 2] = -1;
			ju(127160, d, 126992 | 0);
			HEAP32[31658] = 128268;
			HEAP32[31659] = 128288;
			d = HEAP32[32064] | 0;
			Bm(126632 + d | 0, 127160);
			b = d + 72 | 0;
			HEAP32[126632 + b >> 2] = 0;
			g = d + 76 | 0;
			HEAP32[126632 + g >> 2] = -1;
			ju(127208, h, 127e3 | 0);
			HEAP32[31680] = 128268;
			HEAP32[31681] = 128288;
			Bm(126720 + d | 0, 127208);
			HEAP32[126720 + b >> 2] = 0;
			HEAP32[126720 + g >> 2] = -1;
			h = HEAP32[(c[(HEAP32[31680] | 0) + -12 >> 2] | 0) + 126744 >> 2] | 0;
			HEAP32[31702] = 128268;
			HEAP32[31703] = 128288;
			Bm(126808 + d | 0, h);
			HEAP32[126808 + b >> 2] = 0;
			HEAP32[126808 + g >> 2] = -1;
			c[(c[(HEAP32[31636] | 0) + -12 >> 2] | 0) + 126616 >> 2] = 126632;
			g = (c[(HEAP32[31680] | 0) + -12 >> 2] | 0) + 126724 | 0;
			HEAP32[g >> 2] = HEAP32[g >> 2] | 8192;
			c[(c[(HEAP32[31680] | 0) + -12 >> 2] | 0) + 126792 >> 2] = 126632;
			i = a;
			return
		}
		function Gl(a) {
			a = a | 0;
			a = i;
			mn(126280) | 0;
			mn(126456) | 0;
			sn(126632) | 0;
			sn(126808) | 0;
			i = a;
			return
		}
		function Hl(a) {
			a = a | 0;
			return
		}
		function Il(a) {
			a = a | 0;
			var b = 0;
			b = a + 4 | 0;
			HEAP32[b >> 2] = (HEAP32[b >> 2] | 0) + 1;
			return
		}
		function Jl(a) {
			a = a | 0;
			var b = 0,
			d = 0,
			e = 0,
			f = 0;
			b = i;
			d = a + 4 | 0;
			e = HEAP32[d >> 2] | 0;
			HEAP32[d >> 2] = e + -1;
			if (e) {
				f = 0;
				i = b;
				return f | 0
			}
			lc[c[(HEAP32[a >> 2] | 0) + 8 >> 2] & 255](a);
			f = 1;
			i = b;
			return f | 0
		}
		function Kl(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0;
			d = i;
			HEAP32[a >> 2] = 139240;
			ku(a + 4 | 0, b);
			i = d;
			return
		}
		function Ll(b, d) {
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0;
			e = i;
			HEAP32[b >> 2] = 139264;
			if (!(HEAP8[d >> 0] & 1))
				f = d + 1 | 0;
			else
				f = HEAP32[d + 8 >> 2] | 0;
			ku(b + 4 | 0, f);
			i = e;
			return
		}
		function Ml(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0;
			d = i;
			HEAP32[a >> 2] = 139264;
			ku(a + 4 | 0, b);
			i = d;
			return
		}
		function Nl(a, b, d) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			HEAP32[a >> 2] = d;
			HEAP32[a + 4 >> 2] = b;
			return
		}
		function Ol(a, b, d) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0;
			e = i;
			i = i + 16 | 0;
			f = e;
			vc[c[(HEAP32[a >> 2] | 0) + 12 >> 2] & 31](f, a, b);
			if ((HEAP32[f + 4 >> 2] | 0) != (HEAP32[d + 4 >> 2] | 0)) {
				g = 0;
				i = e;
				return g | 0
			}
			g = (HEAP32[f >> 2] | 0) == (HEAP32[d >> 2] | 0);
			i = e;
			return g | 0
		}
		function Pl(a, b, d) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0;
			e = i;
			if ((HEAP32[b + 4 >> 2] | 0) != (a | 0)) {
				f = 0;
				i = e;
				return f | 0
			}
			f = (HEAP32[b >> 2] | 0) == (d | 0);
			i = e;
			return f | 0
		}
		function Ql(a, b, c) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			var d = 0;
			b = i;
			d = Tb(c | 0) | 0;
			_l(a, d, py(d | 0) | 0);
			i = b;
			return
		}
		function Rl(b, d, e) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0;
			f = i;
			i = i + 16 | 0;
			g = f;
			h = HEAP32[d >> 2] | 0;
			if (h) {
				j = HEAP8[e >> 0] | 0;
				if (!(j & 1))
					k = (j & 255) >>> 1;
				else
					k = HEAP32[e + 4 >> 2] | 0;
				if (!k)
					l = h;
				else {
					hm(e, 127768) | 0;
					l = HEAP32[d >> 2] | 0
				}
				h = HEAP32[d + 4 >> 2] | 0;
				vc[c[(HEAP32[h >> 2] | 0) + 24 >> 2] & 31](g, h, l);
				l = HEAP8[g >> 0] | 0;
				if (!(l & 1)) {
					m = g + 1 | 0;
					n = (l & 255) >>> 1
				} else {
					m = HEAP32[g + 8 >> 2] | 0;
					n = HEAP32[g + 4 >> 2] | 0
				}
				jm(e, m, n) | 0;
				bm(g)
			};
			HEAP32[b + 0 >> 2] = HEAP32[e + 0 >> 2];
			HEAP32[b + 4 >> 2] = HEAP32[e + 4 >> 2];
			HEAP32[b + 8 >> 2] = HEAP32[e + 8 >> 2];
			HEAP32[e + 0 >> 2] = 0;
			HEAP32[e + 4 >> 2] = 0;
			HEAP32[e + 8 >> 2] = 0;
			i = f;
			return
		}
		function Sl(a, b, d) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0;
			e = i;
			i = i + 32 | 0;
			f = e + 12 | 0;
			g = e;
			_l(g, d, py(d | 0) | 0);
			Rl(f, b, g);
			Ll(a, f);
			bm(f);
			bm(g);
			HEAP32[a >> 2] = 127784;
			g = b;
			b = HEAP32[g + 4 >> 2] | 0;
			f = a + 8 | 0;
			HEAP32[f >> 2] = HEAP32[g >> 2];
			HEAP32[f + 4 >> 2] = b;
			i = e;
			return
		}
		function Tl(a) {
			a = a | 0;
			var b = 0;
			b = i;
			Mw(a);
			kl(a);
			i = b;
			return
		}
		function Ul(a) {
			a = a | 0;
			var b = 0;
			b = i;
			Mw(a);
			i = b;
			return
		}
		function Vl(a) {
			a = a | 0;
			return
		}
		function Wl(a, b, d) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			var e = 0;
			e = i;
			ob(127920) | 0;
			if ((HEAP32[a >> 2] | 0) == 1)
				do
					Kb(127944, 127920) | 0;
				while ((HEAP32[a >> 2] | 0) == 1);
			if (!(HEAP32[a >> 2] | 0)) {
				HEAP32[a >> 2] = 1;
				Yb(127920) | 0;
				lc[d & 255](b);
				ob(127920) | 0;
				HEAP32[a >> 2] = -1;
				Yb(127920) | 0;
				Eb(127944) | 0;
				i = e;
				return
			} else {
				Yb(127920) | 0;
				i = e;
				return
			}
		}
		function Xl(a) {
			a = a | 0;
			a = ub(8) | 0;
			Kl(a, 127992);
			HEAP32[a >> 2] = 139320;
			fc(a | 0, 139360, 148)
		}
		function Yl(b, d) {
			b = b | 0;
			d = d | 0;
			var e = 0;
			e = i;
			if (!(HEAP8[d >> 0] & 1)) {
				HEAP32[b + 0 >> 2] = HEAP32[d + 0 >> 2];
				HEAP32[b + 4 >> 2] = HEAP32[d + 4 >> 2];
				HEAP32[b + 8 >> 2] = HEAP32[d + 8 >> 2];
				i = e;
				return
			} else {
				_l(b, HEAP32[d + 8 >> 2] | 0, HEAP32[d + 4 >> 2] | 0);
				i = e;
				return
			}
		}
		function Zl(a, b) {
			a = a | 0;
			b = b | 0;
			var c = 0;
			c = i;
			Yl(a, b);
			i = c;
			return
		}
		function _l(b, d, e) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0;
			f = i;
			if (e >>> 0 > 4294967279)
				Xl(b);
			if (e >>> 0 < 11) {
				HEAP8[b >> 0] = e << 1;
				g = b + 1 | 0
			} else {
				h = e + 16 & -16;
				j = il(h) | 0;
				HEAP32[b + 8 >> 2] = j;
				HEAP32[b >> 2] = h | 1;
				HEAP32[b + 4 >> 2] = e;
				g = j
			}
			qy(g | 0, d | 0, e | 0) | 0;
			HEAP8[g + e >> 0] = 0;
			i = f;
			return
		}
		function $l(b, d, e) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0;
			f = i;
			if (d >>> 0 > 4294967279)
				Xl(b);
			if (d >>> 0 < 11) {
				HEAP8[b >> 0] = d << 1;
				g = b + 1 | 0
			} else {
				h = d + 16 & -16;
				j = il(h) | 0;
				HEAP32[b + 8 >> 2] = j;
				HEAP32[b >> 2] = h | 1;
				HEAP32[b + 4 >> 2] = d;
				g = j
			}
			sy(g | 0, e | 0, d | 0) | 0;
			HEAP8[g + d >> 0] = 0;
			i = f;
			return
		}
		function am(b) {
			b = b | 0;
			var d = 0;
			d = i;
			if (!(HEAP8[b >> 0] & 1)) {
				i = d;
				return
			}
			kl(HEAP32[b + 8 >> 2] | 0);
			i = d;
			return
		}
		function bm(a) {
			a = a | 0;
			var b = 0;
			b = i;
			am(a);
			i = b;
			return
		}
		function cm(a, b) {
			a = a | 0;
			b = b | 0;
			var c = 0,
			d = 0;
			c = i;
			d = dm(a, b, py(b | 0) | 0) | 0;
			i = c;
			return d | 0
		}
		function dm(b, d, e) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0;
			f = i;
			g = HEAP8[b >> 0] | 0;
			if (!(g & 1)) {
				h = 10;
				j = g
			} else {
				g = HEAP32[b >> 2] | 0;
				h = (g & -2) + -1 | 0;
				j = g & 255
			}
			g = (j & 1) == 0;
			if (h >>> 0 < e >>> 0) {
				if (g)
					k = (j & 255) >>> 1;
				else
					k = HEAP32[b + 4 >> 2] | 0;
				km(b, h, e - h | 0, k, 0, k, e, d);
				i = f;
				return b | 0
			}
			if (g)
				l = b + 1 | 0;
			else
				l = HEAP32[b + 8 >> 2] | 0;
			ry(l | 0, d | 0, e | 0) | 0;
			HEAP8[l + e >> 0] = 0;
			if (!(HEAP8[b >> 0] & 1)) {
				HEAP8[b >> 0] = e << 1;
				i = f;
				return b | 0
			} else {
				HEAP32[b + 4 >> 2] = e;
				i = f;
				return b | 0
			}
			return 0
		}
		function em(b, d, e) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0;
			f = i;
			g = HEAP8[b >> 0] | 0;
			h = (g & 1) == 0;
			if (h)
				j = (g & 255) >>> 1;
			else
				j = HEAP32[b + 4 >> 2] | 0;
			if (j >>> 0 < d >>> 0) {
				fm(b, d - j | 0, e) | 0;
				i = f;
				return
			}
			if (h) {
				HEAP8[b + d + 1 >> 0] = 0;
				HEAP8[b >> 0] = d << 1;
				i = f;
				return
			} else {
				a[(HEAP32[b + 8 >> 2] | 0) + d >> 0] = 0;
				HEAP32[b + 4 >> 2] = d;
				i = f;
				return
			}
		}
		function fm(b, d, e) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0;
			f = i;
			if (!d) {
				i = f;
				return b | 0
			}
			g = HEAP8[b >> 0] | 0;
			if (!(g & 1)) {
				h = 10;
				j = g
			} else {
				g = HEAP32[b >> 2] | 0;
				h = (g & -2) + -1 | 0;
				j = g & 255
			}
			if (!(j & 1))
				k = (j & 255) >>> 1;
			else
				k = HEAP32[b + 4 >> 2] | 0;
			if ((h - k | 0) >>> 0 < d >>> 0) {
				lm(b, h, d - h + k | 0, k, k, 0, 0);
				l = HEAP8[b >> 0] | 0
			} else
				l = j;
			if (!(l & 1))
				m = b + 1 | 0;
			else
				m = HEAP32[b + 8 >> 2] | 0;
			sy(m + k | 0, e | 0, d | 0) | 0;
			e = k + d | 0;
			if (!(HEAP8[b >> 0] & 1))
				HEAP8[b >> 0] = e << 1;
			else
				HEAP32[b + 4 >> 2] = e;
			HEAP8[m + e >> 0] = 0;
			i = f;
			return b | 0
		}
		function gm(b, d) {
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0;
			e = i;
			if (d >>> 0 > 4294967279)
				Xl(b);
			f = HEAP8[b >> 0] | 0;
			if (!(f & 1)) {
				g = 10;
				h = f
			} else {
				f = HEAP32[b >> 2] | 0;
				g = (f & -2) + -1 | 0;
				h = f & 255
			}
			if (!(h & 1))
				j = (h & 255) >>> 1;
			else
				j = HEAP32[b + 4 >> 2] | 0;
			f = j >>> 0 > d >>> 0 ? j : d;
			if (f >>> 0 < 11)
				k = 10;
			else
				k = (f + 16 & -16) + -1 | 0;
			if ((k | 0) == (g | 0)) {
				i = e;
				return
			}
			do
				if ((k | 0) != 10) {
					f = k + 1 | 0;
					if (k >>> 0 > g >>> 0)
						l = il(f) | 0;
					else
						l = il(f) | 0;
					f = HEAP8[b >> 0] | 0;
					if (!(f & 1)) {
						m = f;
						n = l;
						o = 1;
						p = b + 1 | 0;
						q = 0;
						break
					} else {
						m = f;
						n = l;
						o = 1;
						p = HEAP32[b + 8 >> 2] | 0;
						q = 1;
						break
					}
				} else {
					m = h;
					n = b + 1 | 0;
					o = 0;
					p = HEAP32[b + 8 >> 2] | 0;
					q = 1
				}
			while (0);
			if (!(m & 1))
				r = (m & 255) >>> 1;
			else
				r = HEAP32[b + 4 >> 2] | 0;
			qy(n | 0, p | 0, r + 1 | 0) | 0;
			if (q)
				kl(p);
			if (o) {
				HEAP32[b >> 2] = k + 1 | 1;
				HEAP32[b + 4 >> 2] = j;
				HEAP32[b + 8 >> 2] = n;
				i = e;
				return
			} else {
				HEAP8[b >> 0] = j << 1;
				i = e;
				return
			}
		}
		function hm(a, b) {
			a = a | 0;
			b = b | 0;
			var c = 0,
			d = 0;
			c = i;
			d = jm(a, b, py(b | 0) | 0) | 0;
			i = c;
			return d | 0
		}
		function im(b, d) {
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0;
			e = i;
			f = HEAP8[b >> 0] | 0;
			g = (f & 1) != 0;
			if (g) {
				h = (HEAP32[b >> 2] & -2) + -1 | 0;
				j = HEAP32[b + 4 >> 2] | 0
			} else {
				h = 10;
				j = (f & 255) >>> 1
			}
			if ((j | 0) == (h | 0)) {
				lm(b, h, 1, h, h, 0, 0);
				if (!(HEAP8[b >> 0] & 1))
					k = 7;
				else
					k = 8
			} else if (g)
				k = 8;
			else
				k = 7;
			if ((k | 0) == 7) {
				HEAP8[b >> 0] = (j << 1) + 2;
				l = b + 1 | 0;
				m = j + 1 | 0;
				n = l + j | 0;
				HEAP8[n >> 0] = d;
				o = l + m | 0;
				HEAP8[o >> 0] = 0;
				i = e;
				return
			} else if ((k | 0) == 8) {
				k = HEAP32[b + 8 >> 2] | 0;
				g = j + 1 | 0;
				HEAP32[b + 4 >> 2] = g;
				l = k;
				m = g;
				n = l + j | 0;
				HEAP8[n >> 0] = d;
				o = l + m | 0;
				HEAP8[o >> 0] = 0;
				i = e;
				return
			}
		}
		function jm(b, d, e) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0;
			f = i;
			g = HEAP8[b >> 0] | 0;
			if (!(g & 1)) {
				h = 10;
				j = g
			} else {
				g = HEAP32[b >> 2] | 0;
				h = (g & -2) + -1 | 0;
				j = g & 255
			}
			if (!(j & 1))
				k = (j & 255) >>> 1;
			else
				k = HEAP32[b + 4 >> 2] | 0;
			if ((h - k | 0) >>> 0 < e >>> 0) {
				km(b, h, e - h + k | 0, k, k, 0, e, d);
				i = f;
				return b | 0
			}
			if (!e) {
				i = f;
				return b | 0
			}
			if (!(j & 1))
				l = b + 1 | 0;
			else
				l = HEAP32[b + 8 >> 2] | 0;
			qy(l + k | 0, d | 0, e | 0) | 0;
			d = k + e | 0;
			if (!(HEAP8[b >> 0] & 1))
				HEAP8[b >> 0] = d << 1;
			else
				HEAP32[b + 4 >> 2] = d;
			HEAP8[l + d >> 0] = 0;
			i = f;
			return b | 0
		}
		function km(b, d, e, f, g, h, j, k) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			k = k | 0;
			var l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0;
			l = i;
			if ((-18 - d | 0) >>> 0 < e >>> 0)
				Xl(b);
			if (!(HEAP8[b >> 0] & 1))
				m = b + 1 | 0;
			else
				m = HEAP32[b + 8 >> 2] | 0;
			if (d >>> 0 < 2147483623) {
				n = e + d | 0;
				e = d << 1;
				o = n >>> 0 < e >>> 0 ? e : n;
				if (o >>> 0 < 11)
					p = 11;
				else
					p = o + 16 & -16
			} else
				p = -17;
			o = il(p) | 0;
			if (g)
				qy(o | 0, m | 0, g | 0) | 0;
			if (j)
				qy(o + g | 0, k | 0, j | 0) | 0;
			k = f - h | 0;
			if ((k | 0) != (g | 0))
				qy(o + (j + g) | 0, m + (h + g) | 0, k - g | 0) | 0;
			if ((d | 0) == 10) {
				q = b + 8 | 0;
				HEAP32[q >> 2] = o;
				r = p | 1;
				HEAP32[b >> 2] = r;
				s = k + j | 0;
				t = b + 4 | 0;
				HEAP32[t >> 2] = s;
				u = o + s | 0;
				HEAP8[u >> 0] = 0;
				i = l;
				return
			}
			kl(m);
			q = b + 8 | 0;
			HEAP32[q >> 2] = o;
			r = p | 1;
			HEAP32[b >> 2] = r;
			s = k + j | 0;
			t = b + 4 | 0;
			HEAP32[t >> 2] = s;
			u = o + s | 0;
			HEAP8[u >> 0] = 0;
			i = l;
			return
		}
		function lm(b, d, e, f, g, h, j) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			var k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0;
			k = i;
			if ((-17 - d | 0) >>> 0 < e >>> 0)
				Xl(b);
			if (!(HEAP8[b >> 0] & 1))
				l = b + 1 | 0;
			else
				l = HEAP32[b + 8 >> 2] | 0;
			if (d >>> 0 < 2147483623) {
				m = e + d | 0;
				e = d << 1;
				n = m >>> 0 < e >>> 0 ? e : m;
				if (n >>> 0 < 11)
					o = 11;
				else
					o = n + 16 & -16
			} else
				o = -17;
			n = il(o) | 0;
			if (g)
				qy(n | 0, l | 0, g | 0) | 0;
			m = f - h | 0;
			if ((m | 0) != (g | 0))
				qy(n + (j + g) | 0, l + (h + g) | 0, m - g | 0) | 0;
			if ((d | 0) == 10) {
				p = b + 8 | 0;
				HEAP32[p >> 2] = n;
				q = o | 1;
				HEAP32[b >> 2] = q;
				i = k;
				return
			}
			kl(l);
			p = b + 8 | 0;
			HEAP32[p >> 2] = n;
			q = o | 1;
			HEAP32[b >> 2] = q;
			i = k;
			return
		}
		function mm(b, d, e) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0;
			f = i;
			if (e >>> 0 > 1073741807)
				Xl(b);
			if (e >>> 0 < 2) {
				HEAP8[b >> 0] = e << 1;
				g = b + 4 | 0
			} else {
				h = e + 4 & -4;
				j = il(h << 2) | 0;
				HEAP32[b + 8 >> 2] = j;
				HEAP32[b >> 2] = h | 1;
				HEAP32[b + 4 >> 2] = e;
				g = j
			}
			uw(g, d, e) | 0;
			HEAP32[g + (e << 2) >> 2] = 0;
			i = f;
			return
		}
		function nm(b, d, e) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0;
			f = i;
			if (d >>> 0 > 1073741807)
				Xl(b);
			if (d >>> 0 < 2) {
				HEAP8[b >> 0] = d << 1;
				g = b + 4 | 0
			} else {
				h = d + 4 & -4;
				j = il(h << 2) | 0;
				HEAP32[b + 8 >> 2] = j;
				HEAP32[b >> 2] = h | 1;
				HEAP32[b + 4 >> 2] = d;
				g = j
			}
			ww(g, e, d) | 0;
			HEAP32[g + (d << 2) >> 2] = 0;
			i = f;
			return
		}
		function om(b) {
			b = b | 0;
			var d = 0;
			d = i;
			if (!(HEAP8[b >> 0] & 1)) {
				i = d;
				return
			}
			kl(HEAP32[b + 8 >> 2] | 0);
			i = d;
			return
		}
		function pm(a) {
			a = a | 0;
			var b = 0;
			b = i;
			om(a);
			i = b;
			return
		}
		function qm(a, b) {
			a = a | 0;
			b = b | 0;
			var c = 0,
			d = 0;
			c = i;
			d = rm(a, b, tw(b) | 0) | 0;
			i = c;
			return d | 0
		}
		function rm(b, d, e) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0;
			f = i;
			g = HEAP8[b >> 0] | 0;
			if (!(g & 1)) {
				h = 1;
				j = g
			} else {
				g = HEAP32[b >> 2] | 0;
				h = (g & -2) + -1 | 0;
				j = g & 255
			}
			g = (j & 1) == 0;
			if (h >>> 0 < e >>> 0) {
				if (g)
					k = (j & 255) >>> 1;
				else
					k = HEAP32[b + 4 >> 2] | 0;
				um(b, h, e - h | 0, k, 0, k, e, d);
				i = f;
				return b | 0
			}
			if (g)
				l = b + 4 | 0;
			else
				l = HEAP32[b + 8 >> 2] | 0;
			vw(l, d, e) | 0;
			HEAP32[l + (e << 2) >> 2] = 0;
			if (!(HEAP8[b >> 0] & 1)) {
				HEAP8[b >> 0] = e << 1;
				i = f;
				return b | 0
			} else {
				HEAP32[b + 4 >> 2] = e;
				i = f;
				return b | 0
			}
			return 0
		}
		function sm(b, d) {
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0;
			e = i;
			if (d >>> 0 > 1073741807)
				Xl(b);
			f = HEAP8[b >> 0] | 0;
			if (!(f & 1)) {
				g = 1;
				h = f
			} else {
				f = HEAP32[b >> 2] | 0;
				g = (f & -2) + -1 | 0;
				h = f & 255
			}
			if (!(h & 1))
				j = (h & 255) >>> 1;
			else
				j = HEAP32[b + 4 >> 2] | 0;
			f = j >>> 0 > d >>> 0 ? j : d;
			if (f >>> 0 < 2)
				k = 1;
			else
				k = (f + 4 & -4) + -1 | 0;
			if ((k | 0) == (g | 0)) {
				i = e;
				return
			}
			do
				if ((k | 0) != 1) {
					f = (k << 2) + 4 | 0;
					if (k >>> 0 > g >>> 0)
						l = il(f) | 0;
					else
						l = il(f) | 0;
					f = HEAP8[b >> 0] | 0;
					if (!(f & 1)) {
						m = f;
						n = l;
						o = 1;
						p = b + 4 | 0;
						q = 0;
						break
					} else {
						m = f;
						n = l;
						o = 1;
						p = HEAP32[b + 8 >> 2] | 0;
						q = 1;
						break
					}
				} else {
					m = h;
					n = b + 4 | 0;
					o = 0;
					p = HEAP32[b + 8 >> 2] | 0;
					q = 1
				}
			while (0);
			if (!(m & 1))
				r = (m & 255) >>> 1;
			else
				r = HEAP32[b + 4 >> 2] | 0;
			uw(n, p, r + 1 | 0) | 0;
			if (q)
				kl(p);
			if (o) {
				HEAP32[b >> 2] = k + 1 | 1;
				HEAP32[b + 4 >> 2] = j;
				HEAP32[b + 8 >> 2] = n;
				i = e;
				return
			} else {
				HEAP8[b >> 0] = j << 1;
				i = e;
				return
			}
		}
		function tm(b, d) {
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0;
			e = i;
			f = HEAP8[b >> 0] | 0;
			g = (f & 1) != 0;
			if (g) {
				h = (HEAP32[b >> 2] & -2) + -1 | 0;
				j = HEAP32[b + 4 >> 2] | 0
			} else {
				h = 1;
				j = (f & 255) >>> 1
			}
			if ((j | 0) == (h | 0)) {
				vm(b, h, 1, h, h, 0, 0);
				if (!(HEAP8[b >> 0] & 1))
					k = 7;
				else
					k = 8
			} else if (g)
				k = 8;
			else
				k = 7;
			if ((k | 0) == 7) {
				HEAP8[b >> 0] = (j << 1) + 2;
				l = b + 4 | 0;
				m = j + 1 | 0;
				n = l + (j << 2) | 0;
				HEAP32[n >> 2] = d;
				o = l + (m << 2) | 0;
				HEAP32[o >> 2] = 0;
				i = e;
				return
			} else if ((k | 0) == 8) {
				k = HEAP32[b + 8 >> 2] | 0;
				g = j + 1 | 0;
				HEAP32[b + 4 >> 2] = g;
				l = k;
				m = g;
				n = l + (j << 2) | 0;
				HEAP32[n >> 2] = d;
				o = l + (m << 2) | 0;
				HEAP32[o >> 2] = 0;
				i = e;
				return
			}
		}
		function um(b, d, e, f, g, h, j, k) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			k = k | 0;
			var l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0;
			l = i;
			if ((1073741806 - d | 0) >>> 0 < e >>> 0)
				Xl(b);
			if (!(HEAP8[b >> 0] & 1))
				m = b + 4 | 0;
			else
				m = HEAP32[b + 8 >> 2] | 0;
			if (d >>> 0 < 536870887) {
				n = e + d | 0;
				e = d << 1;
				o = n >>> 0 < e >>> 0 ? e : n;
				if (o >>> 0 < 2)
					p = 2;
				else
					p = o + 4 & -4
			} else
				p = 1073741807;
			o = il(p << 2) | 0;
			if (g)
				uw(o, m, g) | 0;
			if (j)
				uw(o + (g << 2) | 0, k, j) | 0;
			k = f - h | 0;
			if ((k | 0) != (g | 0))
				uw(o + (j + g << 2) | 0, m + (h + g << 2) | 0, k - g | 0) | 0;
			if ((d | 0) == 1) {
				q = b + 8 | 0;
				HEAP32[q >> 2] = o;
				r = p | 1;
				HEAP32[b >> 2] = r;
				s = k + j | 0;
				t = b + 4 | 0;
				HEAP32[t >> 2] = s;
				u = o + (s << 2) | 0;
				HEAP32[u >> 2] = 0;
				i = l;
				return
			}
			kl(m);
			q = b + 8 | 0;
			HEAP32[q >> 2] = o;
			r = p | 1;
			HEAP32[b >> 2] = r;
			s = k + j | 0;
			t = b + 4 | 0;
			HEAP32[t >> 2] = s;
			u = o + (s << 2) | 0;
			HEAP32[u >> 2] = 0;
			i = l;
			return
		}
		function vm(b, d, e, f, g, h, j) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			var k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0;
			k = i;
			if ((1073741807 - d | 0) >>> 0 < e >>> 0)
				Xl(b);
			if (!(HEAP8[b >> 0] & 1))
				l = b + 4 | 0;
			else
				l = HEAP32[b + 8 >> 2] | 0;
			if (d >>> 0 < 536870887) {
				m = e + d | 0;
				e = d << 1;
				n = m >>> 0 < e >>> 0 ? e : m;
				if (n >>> 0 < 2)
					o = 2;
				else
					o = n + 4 & -4
			} else
				o = 1073741807;
			n = il(o << 2) | 0;
			if (g)
				uw(n, l, g) | 0;
			m = f - h | 0;
			if ((m | 0) != (g | 0))
				uw(n + (j + g << 2) | 0, l + (h + g << 2) | 0, m - g | 0) | 0;
			if ((d | 0) == 1) {
				p = b + 8 | 0;
				HEAP32[p >> 2] = n;
				q = o | 1;
				HEAP32[b >> 2] = q;
				i = k;
				return
			}
			kl(l);
			p = b + 8 | 0;
			HEAP32[p >> 2] = n;
			q = o | 1;
			HEAP32[b >> 2] = q;
			i = k;
			return
		}
		function wm(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0;
			d = i;
			i = i + 16 | 0;
			e = d;
			f = (HEAP32[a + 24 >> 2] | 0) == 0;
			if (f)
				HEAP32[a + 16 >> 2] = b | 1;
			else
				HEAP32[a + 16 >> 2] = b;
			if (!((f & 1 | b) & HEAP32[a + 20 >> 2])) {
				i = d;
				return
			} else {
				d = ub(16) | 0;
				Hn() | 0;
				a = e;
				HEAP32[a >> 2] = 1;
				HEAP32[a + 4 >> 2] = 128352;
				In(d, 128408, e);
				fc(d | 0, 128456, 81)
			}
		}
		function xm(a) {
			a = a | 0;
			var b = 0;
			b = i;
			HEAP32[a >> 2] = 128400;
			zm(a, 0);
			Wr(a + 28 | 0);
			wx(HEAP32[a + 32 >> 2] | 0);
			wx(HEAP32[a + 36 >> 2] | 0);
			wx(HEAP32[a + 48 >> 2] | 0);
			wx(HEAP32[a + 60 >> 2] | 0);
			i = b;
			return
		}
		function ym(a) {
			a = a | 0;
			var b = 0;
			b = i;
			xm(a);
			i = b;
			return
		}
		function zm(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0;
			d = i;
			e = HEAP32[a + 40 >> 2] | 0;
			if (!e) {
				i = d;
				return
			}
			f = a + 32 | 0;
			g = a + 36 | 0;
			h = e;
			do {
				h = h + -1 | 0;
				vc[c[(HEAP32[f >> 2] | 0) + (h << 2) >> 2] & 31](b, a, HEAP32[(HEAP32[g >> 2] | 0) + (h << 2) >> 2] | 0)
			} while ((h | 0) != 0);
			i = d;
			return
		}
		function Am(a, b) {
			a = a | 0;
			b = b | 0;
			var c = 0;
			c = i;
			Vr(a, b + 28 | 0);
			i = c;
			return
		}
		function Bm(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0,
			e = 0;
			d = i;
			HEAP32[a + 24 >> 2] = b;
			HEAP32[a + 16 >> 2] = (b | 0) == 0 & 1;
			HEAP32[a + 20 >> 2] = 0;
			HEAP32[a + 4 >> 2] = 4098;
			HEAP32[a + 12 >> 2] = 0;
			HEAP32[a + 8 >> 2] = 6;
			b = a + 28 | 0;
			e = a + 32 | 0;
			a = e + 40 | 0;
			do {
				HEAP32[e >> 2] = 0;
				e = e + 4 | 0
			} while ((e | 0) < (a | 0));
			Ur(b);
			i = d;
			return
		}
		function Cm(a) {
			a = a | 0;
			var b = 0;
			b = i;
			xm(a);
			i = b;
			return
		}
		function Dm(a) {
			a = a | 0;
			var b = 0;
			b = i;
			HEAP32[a >> 2] = 128016;
			Wr(a + 4 | 0);
			kl(a);
			i = b;
			return
		}
		function Em(a) {
			a = a | 0;
			var b = 0;
			b = i;
			HEAP32[a >> 2] = 128016;
			Wr(a + 4 | 0);
			i = b;
			return
		}
		function Fm(a) {
			a = a | 0;
			var b = 0;
			b = i;
			HEAP32[a >> 2] = 128016;
			Wr(a + 4 | 0);
			i = b;
			return
		}
		function Gm(a) {
			a = a | 0;
			var b = 0,
			d = 0;
			b = i;
			HEAP32[a >> 2] = 128016;
			Ur(a + 4 | 0);
			d = a + 8 | 0;
			HEAP32[d + 0 >> 2] = 0;
			HEAP32[d + 4 >> 2] = 0;
			HEAP32[d + 8 >> 2] = 0;
			HEAP32[d + 12 >> 2] = 0;
			HEAP32[d + 16 >> 2] = 0;
			HEAP32[d + 20 >> 2] = 0;
			i = b;
			return
		}
		function Hm(a, b) {
			a = a | 0;
			b = b | 0;
			return
		}
		function Im(a, b, c) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			return a | 0
		}
		function Jm(a, b, d, e, f, g) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			g = a;
			HEAP32[g >> 2] = 0;
			HEAP32[g + 4 >> 2] = 0;
			g = a + 8 | 0;
			HEAP32[g >> 2] = -1;
			HEAP32[g + 4 >> 2] = -1;
			return
		}
		function Km(a, b, d, e) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			e = a;
			HEAP32[e >> 2] = 0;
			HEAP32[e + 4 >> 2] = 0;
			e = a + 8 | 0;
			HEAP32[e >> 2] = -1;
			HEAP32[e + 4 >> 2] = -1;
			return
		}
		function Lm(a) {
			a = a | 0;
			return 0
		}
		function Mm(a) {
			a = a | 0;
			return 0
		}
		function Nm(b, d, e) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0;
			f = i;
			if ((e | 0) <= 0) {
				g = 0;
				i = f;
				return g | 0
			}
			h = b + 12 | 0;
			j = b + 16 | 0;
			k = d;
			d = 0;
			while (1) {
				l = HEAP32[h >> 2] | 0;
				if (l >>> 0 < (HEAP32[j >> 2] | 0) >>> 0) {
					HEAP32[h >> 2] = l + 1;
					m = HEAP8[l >> 0] | 0
				} else {
					l = tc[c[(HEAP32[b >> 2] | 0) + 40 >> 2] & 127](b) | 0;
					if ((l | 0) == -1) {
						g = d;
						n = 8;
						break
					}
					m = l & 255
				}
				HEAP8[k >> 0] = m;
				l = d + 1 | 0;
				if ((l | 0) < (e | 0)) {
					k = k + 1 | 0;
					d = l
				} else {
					g = l;
					n = 8;
					break
				}
			}
			if ((n | 0) == 8) {
				i = f;
				return g | 0
			}
			return 0
		}
		function Om(a) {
			a = a | 0;
			return -1
		}
		function Pm(a) {
			a = a | 0;
			var b = 0,
			e = 0,
			f = 0;
			b = i;
			if ((tc[c[(HEAP32[a >> 2] | 0) + 36 >> 2] & 127](a) | 0) == -1) {
				e = -1;
				i = b;
				return e | 0
			}
			f = a + 12 | 0;
			a = HEAP32[f >> 2] | 0;
			HEAP32[f >> 2] = a + 1;
			e = HEAPU8[a >> 0] | 0;
			i = b;
			return e | 0
		}
		function Qm(a, b) {
			a = a | 0;
			b = b | 0;
			return -1
		}
		function Rm(b, e, f) {
			b = b | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0;
			g = i;
			if ((f | 0) <= 0) {
				h = 0;
				i = g;
				return h | 0
			}
			j = b + 24 | 0;
			k = b + 28 | 0;
			l = e;
			e = 0;
			while (1) {
				m = HEAP32[j >> 2] | 0;
				if (m >>> 0 >= (HEAP32[k >> 2] | 0) >>> 0) {
					if ((Cc[c[(HEAP32[b >> 2] | 0) + 52 >> 2] & 31](b, HEAPU8[l >> 0] | 0) | 0) == -1) {
						h = e;
						n = 7;
						break
					}
				} else {
					o = HEAP8[l >> 0] | 0;
					HEAP32[j >> 2] = m + 1;
					HEAP8[m >> 0] = o
				}
				o = e + 1 | 0;
				if ((o | 0) < (f | 0)) {
					l = l + 1 | 0;
					e = o
				} else {
					h = o;
					n = 7;
					break
				}
			}
			if ((n | 0) == 7) {
				i = g;
				return h | 0
			}
			return 0
		}
		function Sm(a, b) {
			a = a | 0;
			b = b | 0;
			return -1
		}
		function Tm(a) {
			a = a | 0;
			var b = 0;
			b = i;
			HEAP32[a >> 2] = 128080;
			Wr(a + 4 | 0);
			kl(a);
			i = b;
			return
		}
		function Um(a) {
			a = a | 0;
			var b = 0;
			b = i;
			HEAP32[a >> 2] = 128080;
			Wr(a + 4 | 0);
			i = b;
			return
		}
		function Vm(a) {
			a = a | 0;
			var b = 0;
			b = i;
			HEAP32[a >> 2] = 128080;
			Wr(a + 4 | 0);
			i = b;
			return
		}
		function Wm(a) {
			a = a | 0;
			var b = 0,
			d = 0;
			b = i;
			HEAP32[a >> 2] = 128080;
			Ur(a + 4 | 0);
			d = a + 8 | 0;
			HEAP32[d + 0 >> 2] = 0;
			HEAP32[d + 4 >> 2] = 0;
			HEAP32[d + 8 >> 2] = 0;
			HEAP32[d + 12 >> 2] = 0;
			HEAP32[d + 16 >> 2] = 0;
			HEAP32[d + 20 >> 2] = 0;
			i = b;
			return
		}
		function Xm(a, b) {
			a = a | 0;
			b = b | 0;
			return
		}
		function Ym(a, b, c) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			return a | 0
		}
		function Zm(a, b, d, e, f, g) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			g = a;
			HEAP32[g >> 2] = 0;
			HEAP32[g + 4 >> 2] = 0;
			g = a + 8 | 0;
			HEAP32[g >> 2] = -1;
			HEAP32[g + 4 >> 2] = -1;
			return
		}
		function _m(a, b, d, e) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			e = a;
			HEAP32[e >> 2] = 0;
			HEAP32[e + 4 >> 2] = 0;
			e = a + 8 | 0;
			HEAP32[e >> 2] = -1;
			HEAP32[e + 4 >> 2] = -1;
			return
		}
		function $m(a) {
			a = a | 0;
			return 0
		}
		function an(a) {
			a = a | 0;
			return 0
		}
		function bn(a, b, d) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0;
			e = i;
			if ((d | 0) <= 0) {
				f = 0;
				i = e;
				return f | 0
			}
			g = a + 12 | 0;
			h = a + 16 | 0;
			j = b;
			b = 0;
			while (1) {
				k = HEAP32[g >> 2] | 0;
				if (k >>> 0 >= (HEAP32[h >> 2] | 0) >>> 0) {
					l = tc[c[(HEAP32[a >> 2] | 0) + 40 >> 2] & 127](a) | 0;
					if ((l | 0) == -1) {
						f = b;
						m = 7;
						break
					} else
						n = l
				} else {
					HEAP32[g >> 2] = k + 4;
					n = HEAP32[k >> 2] | 0
				}
				HEAP32[j >> 2] = n;
				k = b + 1 | 0;
				if ((k | 0) < (d | 0)) {
					j = j + 4 | 0;
					b = k
				} else {
					f = k;
					m = 7;
					break
				}
			}
			if ((m | 0) == 7) {
				i = e;
				return f | 0
			}
			return 0
		}
		function cn(a) {
			a = a | 0;
			return -1
		}
		function dn(a) {
			a = a | 0;
			var b = 0,
			d = 0,
			e = 0;
			b = i;
			if ((tc[c[(HEAP32[a >> 2] | 0) + 36 >> 2] & 127](a) | 0) == -1) {
				d = -1;
				i = b;
				return d | 0
			}
			e = a + 12 | 0;
			a = HEAP32[e >> 2] | 0;
			HEAP32[e >> 2] = a + 4;
			d = HEAP32[a >> 2] | 0;
			i = b;
			return d | 0
		}
		function en(a, b) {
			a = a | 0;
			b = b | 0;
			return -1
		}
		function fn(a, b, d) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0;
			e = i;
			if ((d | 0) <= 0) {
				f = 0;
				i = e;
				return f | 0
			}
			g = a + 24 | 0;
			h = a + 28 | 0;
			j = b;
			b = 0;
			while (1) {
				k = HEAP32[g >> 2] | 0;
				if (k >>> 0 >= (HEAP32[h >> 2] | 0) >>> 0) {
					if ((Cc[c[(HEAP32[a >> 2] | 0) + 52 >> 2] & 31](a, HEAP32[j >> 2] | 0) | 0) == -1) {
						f = b;
						l = 7;
						break
					}
				} else {
					m = HEAP32[j >> 2] | 0;
					HEAP32[g >> 2] = k + 4;
					HEAP32[k >> 2] = m
				}
				m = b + 1 | 0;
				if ((m | 0) < (d | 0)) {
					j = j + 4 | 0;
					b = m
				} else {
					f = m;
					l = 7;
					break
				}
			}
			if ((l | 0) == 7) {
				i = e;
				return f | 0
			}
			return 0
		}
		function gn(a, b) {
			a = a | 0;
			b = b | 0;
			return -1
		}
		function hn(a) {
			a = a | 0;
			var b = 0;
			b = i;
			xm(a + 8 | 0);
			kl(a);
			i = b;
			return
		}
		function jn(a) {
			a = a | 0;
			var b = 0;
			b = i;
			xm(a + 8 | 0);
			i = b;
			return
		}
		function kn(a) {
			a = a | 0;
			var b = 0;
			b = i;
			hn(a + (c[(HEAP32[a >> 2] | 0) + -12 >> 2] | 0) | 0);
			i = b;
			return
		}
		function ln(a) {
			a = a | 0;
			var b = 0;
			b = i;
			xm(a + ((c[(HEAP32[a >> 2] | 0) + -12 >> 2] | 0) + 8) | 0);
			i = b;
			return
		}
		function mn(b) {
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0;
			d = i;
			i = i + 16 | 0;
			e = d;
			if (!(HEAP32[b + ((c[(HEAP32[b >> 2] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0)) {
				i = d;
				return b | 0
			}
			xn(e, b);
			if ((HEAP8[e >> 0] | 0) != 0 ? (f = HEAP32[b + ((c[(HEAP32[b >> 2] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0, (tc[c[(HEAP32[f >> 2] | 0) + 24 >> 2] & 127](f) | 0) == -1) : 0) {
				f = HEAP32[(HEAP32[b >> 2] | 0) + -12 >> 2] | 0;
				wm(b + f | 0, HEAP32[b + (f + 16) >> 2] | 1)
			}
			yn(e);
			i = d;
			return b | 0
		}
		function nn(a) {
			a = a | 0;
			var b = 0;
			b = a + 16 | 0;
			HEAP32[b >> 2] = HEAP32[b >> 2] | 1;
			if (!(HEAP32[a + 20 >> 2] & 1))
				return;
			else
				Ua()
		}
		function on(a) {
			a = a | 0;
			var b = 0;
			b = i;
			xm(a + 8 | 0);
			kl(a);
			i = b;
			return
		}
		function pn(a) {
			a = a | 0;
			var b = 0;
			b = i;
			xm(a + 8 | 0);
			i = b;
			return
		}
		function qn(a) {
			a = a | 0;
			var b = 0;
			b = i;
			on(a + (c[(HEAP32[a >> 2] | 0) + -12 >> 2] | 0) | 0);
			i = b;
			return
		}
		function rn(a) {
			a = a | 0;
			var b = 0;
			b = i;
			xm(a + ((c[(HEAP32[a >> 2] | 0) + -12 >> 2] | 0) + 8) | 0);
			i = b;
			return
		}
		function sn(b) {
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0;
			d = i;
			i = i + 16 | 0;
			e = d;
			if (!(HEAP32[b + ((c[(HEAP32[b >> 2] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0)) {
				i = d;
				return b | 0
			}
			Dn(e, b);
			if ((HEAP8[e >> 0] | 0) != 0 ? (f = HEAP32[b + ((c[(HEAP32[b >> 2] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0, (tc[c[(HEAP32[f >> 2] | 0) + 24 >> 2] & 127](f) | 0) == -1) : 0) {
				f = HEAP32[(HEAP32[b >> 2] | 0) + -12 >> 2] | 0;
				wm(b + f | 0, HEAP32[b + (f + 16) >> 2] | 1)
			}
			En(e);
			i = d;
			return b | 0
		}
		function tn(a) {
			a = a | 0;
			var b = 0;
			b = i;
			xm(a + 4 | 0);
			kl(a);
			i = b;
			return
		}
		function un(a) {
			a = a | 0;
			var b = 0;
			b = i;
			xm(a + 4 | 0);
			i = b;
			return
		}
		function vn(a) {
			a = a | 0;
			var b = 0;
			b = i;
			tn(a + (c[(HEAP32[a >> 2] | 0) + -12 >> 2] | 0) | 0);
			i = b;
			return
		}
		function wn(a) {
			a = a | 0;
			var b = 0;
			b = i;
			xm(a + ((c[(HEAP32[a >> 2] | 0) + -12 >> 2] | 0) + 4) | 0);
			i = b;
			return
		}
		function xn(b, d) {
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0;
			e = i;
			HEAP8[b >> 0] = 0;
			HEAP32[b + 4 >> 2] = d;
			f = HEAP32[(HEAP32[d >> 2] | 0) + -12 >> 2] | 0;
			if (HEAP32[d + (f + 16) >> 2] | 0) {
				i = e;
				return
			}
			g = HEAP32[d + (f + 72) >> 2] | 0;
			if (g)
				mn(g) | 0;
			HEAP8[b >> 0] = 1;
			i = e;
			return
		}
		function yn(a) {
			a = a | 0;
			var b = 0,
			d = 0,
			e = 0;
			b = i;
			d = a + 4 | 0;
			a = HEAP32[d >> 2] | 0;
			e = HEAP32[(HEAP32[a >> 2] | 0) + -12 >> 2] | 0;
			if (!(HEAP32[a + (e + 24) >> 2] | 0)) {
				i = b;
				return
			}
			if (HEAP32[a + (e + 16) >> 2] | 0) {
				i = b;
				return
			}
			if (!(HEAP32[a + (e + 4) >> 2] & 8192)) {
				i = b;
				return
			}
			if (Ea() | 0) {
				i = b;
				return
			}
			e = HEAP32[d >> 2] | 0;
			a = HEAP32[e + ((c[(HEAP32[e >> 2] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0;
			if ((tc[c[(HEAP32[a >> 2] | 0) + 24 >> 2] & 127](a) | 0) != -1) {
				i = b;
				return
			}
			a = HEAP32[d >> 2] | 0;
			d = HEAP32[(HEAP32[a >> 2] | 0) + -12 >> 2] | 0;
			wm(a + d | 0, HEAP32[a + (d + 16) >> 2] | 1);
			i = b;
			return
		}
		function zn(a) {
			a = a | 0;
			var b = 0;
			b = i;
			xm(a + 4 | 0);
			kl(a);
			i = b;
			return
		}
		function An(a) {
			a = a | 0;
			var b = 0;
			b = i;
			xm(a + 4 | 0);
			i = b;
			return
		}
		function Bn(a) {
			a = a | 0;
			var b = 0;
			b = i;
			zn(a + (c[(HEAP32[a >> 2] | 0) + -12 >> 2] | 0) | 0);
			i = b;
			return
		}
		function Cn(a) {
			a = a | 0;
			var b = 0;
			b = i;
			xm(a + ((c[(HEAP32[a >> 2] | 0) + -12 >> 2] | 0) + 4) | 0);
			i = b;
			return
		}
		function Dn(b, d) {
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0;
			e = i;
			HEAP8[b >> 0] = 0;
			HEAP32[b + 4 >> 2] = d;
			f = HEAP32[(HEAP32[d >> 2] | 0) + -12 >> 2] | 0;
			if (HEAP32[d + (f + 16) >> 2] | 0) {
				i = e;
				return
			}
			g = HEAP32[d + (f + 72) >> 2] | 0;
			if (g)
				sn(g) | 0;
			HEAP8[b >> 0] = 1;
			i = e;
			return
		}
		function En(a) {
			a = a | 0;
			var b = 0,
			d = 0,
			e = 0;
			b = i;
			d = a + 4 | 0;
			a = HEAP32[d >> 2] | 0;
			e = HEAP32[(HEAP32[a >> 2] | 0) + -12 >> 2] | 0;
			if (!(HEAP32[a + (e + 24) >> 2] | 0)) {
				i = b;
				return
			}
			if (HEAP32[a + (e + 16) >> 2] | 0) {
				i = b;
				return
			}
			if (!(HEAP32[a + (e + 4) >> 2] & 8192)) {
				i = b;
				return
			}
			if (Ea() | 0) {
				i = b;
				return
			}
			e = HEAP32[d >> 2] | 0;
			a = HEAP32[e + ((c[(HEAP32[e >> 2] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0;
			if ((tc[c[(HEAP32[a >> 2] | 0) + 24 >> 2] & 127](a) | 0) != -1) {
				i = b;
				return
			}
			a = HEAP32[d >> 2] | 0;
			d = HEAP32[(HEAP32[a >> 2] | 0) + -12 >> 2] | 0;
			wm(a + d | 0, HEAP32[a + (d + 16) >> 2] | 1);
			i = b;
			return
		}
		function Fn(a) {
			a = a | 0;
			return 128296
		}
		function Gn(a, b, c) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			var d = 0;
			d = i;
			if ((c | 0) != 1 & (c | 0) < 257) {
				Ql(a, b, c);
				i = d;
				return
			} else {
				_l(a, 128312, 35);
				i = d;
				return
			}
		}
		function Hn() {
			var b = 0;
			b = i;
			if ((HEAP8[128360] | 0) == 0 ? (Da(128360) | 0) != 0 : 0) {
				HEAP32[32088] = 129056;
				Sa(85, 128352, o | 0) | 0;
				$a(128360)
			}
			i = b;
			return 128352
		}
		function In(a, b, d) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0;
			e = i;
			i = i + 16 | 0;
			f = e + 8 | 0;
			g = e;
			h = d;
			d = HEAP32[h + 4 >> 2] | 0;
			j = g;
			HEAP32[j >> 2] = HEAP32[h >> 2];
			HEAP32[j + 4 >> 2] = d;
			HEAP32[f + 0 >> 2] = HEAP32[g + 0 >> 2];
			HEAP32[f + 4 >> 2] = HEAP32[g + 4 >> 2];
			Sl(a, f, b);
			HEAP32[a >> 2] = 128376;
			i = e;
			return
		}
		function Jn(a) {
			a = a | 0;
			var b = 0;
			b = i;
			Ul(a);
			kl(a);
			i = b;
			return
		}
		function Kn(a) {
			a = a | 0;
			var b = 0;
			b = i;
			Ul(a);
			i = b;
			return
		}
		function Ln(a) {
			a = a | 0;
			var b = 0;
			b = i;
			xm(a);
			kl(a);
			i = b;
			return
		}
		function Mn(a) {
			a = a | 0;
			var b = 0;
			b = i;
			kl(a);
			i = b;
			return
		}
		function Nn(a) {
			a = a | 0;
			return
		}
		function On(a) {
			a = a | 0;
			return
		}
		function Pn(b, c, d, e, f) {
			b = b | 0;
			c = c | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0;
			b = i;
			a: do
				if ((e | 0) == (f | 0)) {
					g = c;
					h = 6
				} else {
					j = e;
					k = c;
					while (1) {
						if ((k | 0) == (d | 0)) {
							l = -1;
							break a
						}
						m = HEAP8[k >> 0] | 0;
						n = HEAP8[j >> 0] | 0;
						if (m << 24 >> 24 < n << 24 >> 24) {
							l = -1;
							break a
						}
						if (n << 24 >> 24 < m << 24 >> 24) {
							l = 1;
							break a
						}
						m = k + 1 | 0;
						j = j + 1 | 0;
						if ((j | 0) == (f | 0)) {
							g = m;
							h = 6;
							break
						} else
							k = m
					}
				}
			while (0);
			if ((h | 0) == 6)
				l = (g | 0) != (d | 0) & 1;
			i = b;
			return l | 0
		}
		function Qn(a, b, c, d) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			d = d | 0;
			b = i;
			lu(a, c, d);
			i = b;
			return
		}
		function Rn(b, c, d) {
			b = b | 0;
			c = c | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0;
			b = i;
			if ((c | 0) == (d | 0)) {
				e = 0;
				i = b;
				return e | 0
			} else {
				f = 0;
				g = c
			}
			while (1) {
				c = (HEAP8[g >> 0] | 0) + (f << 4) | 0;
				h = c & -268435456;
				j = (h >>> 24 | h) ^ c;
				g = g + 1 | 0;
				if ((g | 0) == (d | 0)) {
					e = j;
					break
				} else
					f = j
			}
			i = b;
			return e | 0
		}
		function Sn(a) {
			a = a | 0;
			var b = 0;
			b = i;
			kl(a);
			i = b;
			return
		}
		function Tn(a) {
			a = a | 0;
			return
		}
		function Un(a, b, d, e, f) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0;
			a = i;
			a: do
				if ((e | 0) == (f | 0)) {
					g = b;
					h = 6
				} else {
					j = e;
					k = b;
					while (1) {
						if ((k | 0) == (d | 0)) {
							l = -1;
							break a
						}
						m = HEAP32[k >> 2] | 0;
						n = HEAP32[j >> 2] | 0;
						if ((m | 0) < (n | 0)) {
							l = -1;
							break a
						}
						if ((n | 0) < (m | 0)) {
							l = 1;
							break a
						}
						m = k + 4 | 0;
						j = j + 4 | 0;
						if ((j | 0) == (f | 0)) {
							g = m;
							h = 6;
							break
						} else
							k = m
					}
				}
			while (0);
			if ((h | 0) == 6)
				l = (g | 0) != (d | 0) & 1;
			i = a;
			return l | 0
		}
		function Vn(a, b, c, d) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			d = d | 0;
			b = i;
			mu(a, c, d);
			i = b;
			return
		}
		function Wn(a, b, d) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0;
			a = i;
			if ((b | 0) == (d | 0)) {
				e = 0;
				i = a;
				return e | 0
			} else {
				f = 0;
				g = b
			}
			while (1) {
				b = (HEAP32[g >> 2] | 0) + (f << 4) | 0;
				h = b & -268435456;
				j = (h >>> 24 | h) ^ b;
				g = g + 4 | 0;
				if ((g | 0) == (d | 0)) {
					e = j;
					break
				} else
					f = j
			}
			i = a;
			return e | 0
		}
		function Xn(a) {
			a = a | 0;
			var b = 0;
			b = i;
			kl(a);
			i = b;
			return
		}
		function Yn(a) {
			a = a | 0;
			return
		}
		function Zn(b, d, e, f, g, h, j) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			var k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0;
			k = i;
			i = i + 64 | 0;
			l = k + 60 | 0;
			m = k + 56 | 0;
			n = k + 52 | 0;
			o = k + 48 | 0;
			p = k + 44 | 0;
			q = k + 40 | 0;
			r = k + 36 | 0;
			s = k + 32 | 0;
			t = k + 8 | 0;
			u = k;
			if (HEAP32[g + 4 >> 2] & 1) {
				Am(r, g);
				v = Yr(r, 130776) | 0;
				Jl(HEAP32[r >> 2] | 0) | 0;
				Am(s, g);
				r = Yr(s, 130920) | 0;
				Jl(HEAP32[s >> 2] | 0) | 0;
				rc[c[(HEAP32[r >> 2] | 0) + 24 >> 2] & 127](t, r);
				rc[c[(HEAP32[r >> 2] | 0) + 28 >> 2] & 127](t + 12 | 0, r);
				HEAP32[u >> 2] = HEAP32[f >> 2];
				HEAP32[l + 0 >> 2] = HEAP32[u + 0 >> 2];
				HEAP8[j >> 0] = (nu(e, l, t, t + 24 | 0, v, h, 1) | 0) == (t | 0) & 1;
				HEAP32[b >> 2] = HEAP32[e >> 2];
				bm(t + 12 | 0);
				bm(t);
				i = k;
				return
			}
			HEAP32[n >> 2] = -1;
			t = HEAP32[(HEAP32[d >> 2] | 0) + 16 >> 2] | 0;
			HEAP32[p >> 2] = HEAP32[e >> 2];
			HEAP32[q >> 2] = HEAP32[f >> 2];
			HEAP32[m + 0 >> 2] = HEAP32[p + 0 >> 2];
			HEAP32[l + 0 >> 2] = HEAP32[q + 0 >> 2];
			qc[t & 63](o, d, m, l, g, h, n);
			g = HEAP32[o >> 2] | 0;
			HEAP32[e >> 2] = g;
			e = HEAP32[n >> 2] | 0;
			if ((e | 0) == 1)
				HEAP8[j >> 0] = 1;
			else if (!e)
				HEAP8[j >> 0] = 0;
			else {
				HEAP8[j >> 0] = 1;
				HEAP32[h >> 2] = 4
			}
			HEAP32[b >> 2] = g;
			i = k;
			return
		}
		function _n(a, b, d, e, f, g, h) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			var j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0;
			j = i;
			i = i + 16 | 0;
			k = j + 12 | 0;
			l = j + 8 | 0;
			m = j + 4 | 0;
			n = j;
			HEAP32[m >> 2] = HEAP32[d >> 2];
			HEAP32[n >> 2] = HEAP32[e >> 2];
			HEAP32[l + 0 >> 2] = HEAP32[m + 0 >> 2];
			HEAP32[k + 0 >> 2] = HEAP32[n + 0 >> 2];
			ou(a, b, l, k, f, g, h);
			i = j;
			return
		}
		function $n(a, b, d, e, f, g, h) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			var j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0;
			j = i;
			i = i + 16 | 0;
			k = j + 12 | 0;
			l = j + 8 | 0;
			m = j + 4 | 0;
			n = j;
			HEAP32[m >> 2] = HEAP32[d >> 2];
			HEAP32[n >> 2] = HEAP32[e >> 2];
			HEAP32[l + 0 >> 2] = HEAP32[m + 0 >> 2];
			HEAP32[k + 0 >> 2] = HEAP32[n + 0 >> 2];
			pu(a, b, l, k, f, g, h);
			i = j;
			return
		}
		function ao(a, b, d, e, f, g, h) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			var j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0;
			j = i;
			i = i + 16 | 0;
			k = j + 12 | 0;
			l = j + 8 | 0;
			m = j + 4 | 0;
			n = j;
			HEAP32[m >> 2] = HEAP32[d >> 2];
			HEAP32[n >> 2] = HEAP32[e >> 2];
			HEAP32[l + 0 >> 2] = HEAP32[m + 0 >> 2];
			HEAP32[k + 0 >> 2] = HEAP32[n + 0 >> 2];
			qu(a, b, l, k, f, g, h);
			i = j;
			return
		}
		function bo(a, b, d, e, f, g, h) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			var j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0;
			j = i;
			i = i + 16 | 0;
			k = j + 12 | 0;
			l = j + 8 | 0;
			m = j + 4 | 0;
			n = j;
			HEAP32[m >> 2] = HEAP32[d >> 2];
			HEAP32[n >> 2] = HEAP32[e >> 2];
			HEAP32[l + 0 >> 2] = HEAP32[m + 0 >> 2];
			HEAP32[k + 0 >> 2] = HEAP32[n + 0 >> 2];
			ru(a, b, l, k, f, g, h);
			i = j;
			return
		}
		function co(a, b, d, e, f, g, h) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			var j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0;
			j = i;
			i = i + 16 | 0;
			k = j + 12 | 0;
			l = j + 8 | 0;
			m = j + 4 | 0;
			n = j;
			HEAP32[m >> 2] = HEAP32[d >> 2];
			HEAP32[n >> 2] = HEAP32[e >> 2];
			HEAP32[l + 0 >> 2] = HEAP32[m + 0 >> 2];
			HEAP32[k + 0 >> 2] = HEAP32[n + 0 >> 2];
			su(a, b, l, k, f, g, h);
			i = j;
			return
		}
		function eo(a, b, d, e, f, g, h) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			var j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0;
			j = i;
			i = i + 16 | 0;
			k = j + 12 | 0;
			l = j + 8 | 0;
			m = j + 4 | 0;
			n = j;
			HEAP32[m >> 2] = HEAP32[d >> 2];
			HEAP32[n >> 2] = HEAP32[e >> 2];
			HEAP32[l + 0 >> 2] = HEAP32[m + 0 >> 2];
			HEAP32[k + 0 >> 2] = HEAP32[n + 0 >> 2];
			tu(a, b, l, k, f, g, h);
			i = j;
			return
		}
		function fo(a, b, d, e, f, g, h) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			var j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0;
			j = i;
			i = i + 16 | 0;
			k = j + 12 | 0;
			l = j + 8 | 0;
			m = j + 4 | 0;
			n = j;
			HEAP32[m >> 2] = HEAP32[d >> 2];
			HEAP32[n >> 2] = HEAP32[e >> 2];
			HEAP32[l + 0 >> 2] = HEAP32[m + 0 >> 2];
			HEAP32[k + 0 >> 2] = HEAP32[n + 0 >> 2];
			uu(a, b, l, k, f, g, h);
			i = j;
			return
		}
		function go(a, b, d, e, f, g, h) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			var j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0;
			j = i;
			i = i + 16 | 0;
			k = j + 12 | 0;
			l = j + 8 | 0;
			m = j + 4 | 0;
			n = j;
			HEAP32[m >> 2] = HEAP32[d >> 2];
			HEAP32[n >> 2] = HEAP32[e >> 2];
			HEAP32[l + 0 >> 2] = HEAP32[m + 0 >> 2];
			HEAP32[k + 0 >> 2] = HEAP32[n + 0 >> 2];
			vu(a, b, l, k, f, g, h);
			i = j;
			return
		}
		function ho(a, b, d, e, f, g, h) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			var j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0;
			j = i;
			i = i + 16 | 0;
			k = j + 12 | 0;
			l = j + 8 | 0;
			m = j + 4 | 0;
			n = j;
			HEAP32[m >> 2] = HEAP32[d >> 2];
			HEAP32[n >> 2] = HEAP32[e >> 2];
			HEAP32[l + 0 >> 2] = HEAP32[m + 0 >> 2];
			HEAP32[k + 0 >> 2] = HEAP32[n + 0 >> 2];
			wu(a, b, l, k, f, g, h);
			i = j;
			return
		}
		function io(b, e, f, g, h, j, k) {
			b = b | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			k = k | 0;
			var l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0,
			O = 0;
			e = i;
			i = i + 240 | 0;
			l = e;
			m = e + 208 | 0;
			n = e + 196 | 0;
			o = e + 192 | 0;
			p = e + 180 | 0;
			q = e + 176 | 0;
			r = e + 16 | 0;
			s = e + 8 | 0;
			t = e + 4 | 0;
			HEAP32[n + 0 >> 2] = 0;
			HEAP32[n + 4 >> 2] = 0;
			HEAP32[n + 8 >> 2] = 0;
			Am(o, h);
			h = Yr(o, 130776) | 0;
			zc[c[(HEAP32[h >> 2] | 0) + 32 >> 2] & 15](h, 129288, 129314 | 0, m) | 0;
			Jl(HEAP32[o >> 2] | 0) | 0;
			HEAP32[p + 0 >> 2] = 0;
			HEAP32[p + 4 >> 2] = 0;
			HEAP32[p + 8 >> 2] = 0;
			em(p, 10, 0);
			if (!(HEAP8[p >> 0] & 1)) {
				o = p + 1 | 0;
				u = o;
				v = p + 8 | 0;
				w = o
			} else {
				o = p + 8 | 0;
				u = p + 1 | 0;
				v = o;
				w = HEAP32[o >> 2] | 0
			}
			HEAP32[q >> 2] = w;
			HEAP32[s >> 2] = r;
			HEAP32[t >> 2] = 0;
			o = p + 4 | 0;
			h = HEAP32[f >> 2] | 0;
			x = w;
			a: while (1) {
				if (h)
					if ((HEAP32[h + 12 >> 2] | 0) == (HEAP32[h + 16 >> 2] | 0) ? (tc[c[(HEAP32[h >> 2] | 0) + 36 >> 2] & 127](h) | 0) == -1 : 0) {
						HEAP32[f >> 2] = 0;
						y = 0
					} else
						y = h;
				else
					y = 0;
				w = (y | 0) == 0;
				z = HEAP32[g >> 2] | 0;
				do
					if (z) {
						if ((HEAP32[z + 12 >> 2] | 0) != (HEAP32[z + 16 >> 2] | 0))
							if (w) {
								A = z;
								break
							} else {
								B = z;
								C = x;
								break a
							}
						if ((tc[c[(HEAP32[z >> 2] | 0) + 36 >> 2] & 127](z) | 0) != -1)
							if (w) {
								A = z;
								break
							} else {
								B = z;
								C = x;
								break a
							}
						else {
							HEAP32[g >> 2] = 0;
							D = 14;
							break
						}
					} else
						D = 14;
				while (0);
				if ((D | 0) == 14) {
					D = 0;
					if (w) {
						B = 0;
						C = x;
						break
					} else
						A = 0
				}
				z = HEAP8[p >> 0] | 0;
				E = (z & 1) == 0;
				if (E)
					F = (z & 255) >>> 1;
				else
					F = HEAP32[o >> 2] | 0;
				if ((HEAP32[q >> 2] | 0) == (x + F | 0)) {
					if (E) {
						G = (z & 255) >>> 1;
						H = (z & 255) >>> 1
					} else {
						z = HEAP32[o >> 2] | 0;
						G = z;
						H = z
					}
					em(p, G << 1, 0);
					if (!(HEAP8[p >> 0] & 1))
						I = 10;
					else
						I = (HEAP32[p >> 2] & -2) + -1 | 0;
					em(p, I, 0);
					if (!(HEAP8[p >> 0] & 1))
						J = u;
					else
						J = HEAP32[v >> 2] | 0;
					HEAP32[q >> 2] = J + H;
					K = J
				} else
					K = x;
				z = y + 12 | 0;
				E = HEAP32[z >> 2] | 0;
				L = y + 16 | 0;
				if ((E | 0) == (HEAP32[L >> 2] | 0))
					M = tc[c[(HEAP32[y >> 2] | 0) + 36 >> 2] & 127](y) | 0;
				else
					M = HEAPU8[E >> 0] | 0;
				if (jo(M & 255, 16, K, q, t, 0, n, r, s, m) | 0) {
					B = A;
					C = K;
					break
				}
				E = HEAP32[z >> 2] | 0;
				if ((E | 0) == (HEAP32[L >> 2] | 0)) {
					tc[c[(HEAP32[y >> 2] | 0) + 40 >> 2] & 127](y) | 0;
					h = y;
					x = K;
					continue
				} else {
					HEAP32[z >> 2] = E + 1;
					h = y;
					x = K;
					continue
				}
			}
			em(p, (HEAP32[q >> 2] | 0) - C | 0, 0);
			if (!(HEAP8[p >> 0] & 1))
				N = u;
			else
				N = HEAP32[v >> 2] | 0;
			v = ko() | 0;
			HEAP32[l >> 2] = k;
			if ((xu(N, v, 129328, l) | 0) != 1)
				HEAP32[j >> 2] = 4;
			if (y)
				if ((HEAP32[y + 12 >> 2] | 0) == (HEAP32[y + 16 >> 2] | 0) ? (tc[c[(HEAP32[y >> 2] | 0) + 36 >> 2] & 127](y) | 0) == -1 : 0) {
					HEAP32[f >> 2] = 0;
					O = 0
				} else
					O = y;
			else
				O = 0;
			y = (O | 0) == 0;
			do
				if (B) {
					if ((HEAP32[B + 12 >> 2] | 0) != (HEAP32[B + 16 >> 2] | 0)) {
						if (!y)
							break;
						HEAP32[b >> 2] = O;
						bm(p);
						bm(n);
						i = e;
						return
					}
					if ((tc[c[(HEAP32[B >> 2] | 0) + 36 >> 2] & 127](B) | 0) == -1) {
						HEAP32[g >> 2] = 0;
						D = 48;
						break
					}
					if (y ^ (B | 0) == 0) {
						HEAP32[b >> 2] = O;
						bm(p);
						bm(n);
						i = e;
						return
					}
				} else
					D = 48;
			while (0);
			if ((D | 0) == 48 ? !y : 0) {
				HEAP32[b >> 2] = O;
				bm(p);
				bm(n);
				i = e;
				return
			}
			HEAP32[j >> 2] = HEAP32[j >> 2] | 2;
			HEAP32[b >> 2] = O;
			bm(p);
			bm(n);
			i = e;
			return
		}
		function jo(b, d, e, f, g, h, j, k, l, m) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			k = k | 0;
			l = l | 0;
			m = m | 0;
			var n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0;
			n = i;
			o = HEAP32[f >> 2] | 0;
			p = (o | 0) == (e | 0);
			do
				if (p) {
					q = (HEAP8[m + 24 >> 0] | 0) == b << 24 >> 24;
					if (!q ? (HEAP8[m + 25 >> 0] | 0) != b << 24 >> 24 : 0)
						break;
					HEAP32[f >> 2] = e + 1;
					HEAP8[e >> 0] = q ? 43 : 45;
					HEAP32[g >> 2] = 0;
					r = 0;
					i = n;
					return r | 0
				}
			while (0);
			q = HEAP8[j >> 0] | 0;
			if (!(q & 1))
				s = (q & 255) >>> 1;
			else
				s = HEAP32[j + 4 >> 2] | 0;
			if ((s | 0) != 0 ? b << 24 >> 24 == h << 24 >> 24 : 0) {
				h = HEAP32[l >> 2] | 0;
				if ((h - k | 0) >= 160) {
					r = 0;
					i = n;
					return r | 0
				}
				k = HEAP32[g >> 2] | 0;
				HEAP32[l >> 2] = h + 4;
				HEAP32[h >> 2] = k;
				HEAP32[g >> 2] = 0;
				r = 0;
				i = n;
				return r | 0
			}
			k = m + 26 | 0;
			h = m;
			while (1) {
				if ((HEAP8[h >> 0] | 0) == b << 24 >> 24) {
					t = h;
					break
				}
				h = h + 1 | 0;
				if ((h | 0) == (k | 0)) {
					t = k;
					break
				}
			}
			k = t - m | 0;
			if ((k | 0) > 23) {
				r = -1;
				i = n;
				return r | 0
			}
			if ((d | 0) == 10 | (d | 0) == 8) {
				if ((k | 0) >= (d | 0)) {
					r = -1;
					i = n;
					return r | 0
				}
			} else if ((d | 0) == 16 ? (k | 0) >= 22 : 0) {
				if (p) {
					r = -1;
					i = n;
					return r | 0
				}
				if ((o - e | 0) >= 3) {
					r = -1;
					i = n;
					return r | 0
				}
				if ((HEAP8[o + -1 >> 0] | 0) != 48) {
					r = -1;
					i = n;
					return r | 0
				}
				HEAP32[g >> 2] = 0;
				e = HEAP8[129288 + k >> 0] | 0;
				HEAP32[f >> 2] = o + 1;
				HEAP8[o >> 0] = e;
				r = 0;
				i = n;
				return r | 0
			}
			e = HEAP8[129288 + k >> 0] | 0;
			HEAP32[f >> 2] = o + 1;
			HEAP8[o >> 0] = e;
			HEAP32[g >> 2] = (HEAP32[g >> 2] | 0) + 1;
			r = 0;
			i = n;
			return r | 0
		}
		function ko() {
			var b = 0;
			b = i;
			if ((HEAP8[130672] | 0) == 0 ? (Da(130672) | 0) != 0 : 0) {
				HEAP32[32666] = cb(2147483647, 130680, 0) | 0;
				$a(130672)
			}
			i = b;
			return HEAP32[32666] | 0
		}
		function lo(a) {
			a = a | 0;
			var b = 0;
			b = i;
			kl(a);
			i = b;
			return
		}
		function mo(a) {
			a = a | 0;
			return
		}
		function no(b, d, e, f, g, h, j) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			var k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0;
			k = i;
			i = i + 64 | 0;
			l = k + 60 | 0;
			m = k + 56 | 0;
			n = k + 52 | 0;
			o = k + 48 | 0;
			p = k + 44 | 0;
			q = k + 40 | 0;
			r = k + 36 | 0;
			s = k + 32 | 0;
			t = k + 8 | 0;
			u = k;
			if (HEAP32[g + 4 >> 2] & 1) {
				Am(r, g);
				v = Yr(r, 130768) | 0;
				Jl(HEAP32[r >> 2] | 0) | 0;
				Am(s, g);
				r = Yr(s, 130928) | 0;
				Jl(HEAP32[s >> 2] | 0) | 0;
				rc[c[(HEAP32[r >> 2] | 0) + 24 >> 2] & 127](t, r);
				rc[c[(HEAP32[r >> 2] | 0) + 28 >> 2] & 127](t + 12 | 0, r);
				HEAP32[u >> 2] = HEAP32[f >> 2];
				HEAP32[l + 0 >> 2] = HEAP32[u + 0 >> 2];
				HEAP8[j >> 0] = (yu(e, l, t, t + 24 | 0, v, h, 1) | 0) == (t | 0) & 1;
				HEAP32[b >> 2] = HEAP32[e >> 2];
				pm(t + 12 | 0);
				pm(t);
				i = k;
				return
			}
			HEAP32[n >> 2] = -1;
			t = HEAP32[(HEAP32[d >> 2] | 0) + 16 >> 2] | 0;
			HEAP32[p >> 2] = HEAP32[e >> 2];
			HEAP32[q >> 2] = HEAP32[f >> 2];
			HEAP32[m + 0 >> 2] = HEAP32[p + 0 >> 2];
			HEAP32[l + 0 >> 2] = HEAP32[q + 0 >> 2];
			qc[t & 63](o, d, m, l, g, h, n);
			g = HEAP32[o >> 2] | 0;
			HEAP32[e >> 2] = g;
			e = HEAP32[n >> 2] | 0;
			if (!e)
				HEAP8[j >> 0] = 0;
			else if ((e | 0) == 1)
				HEAP8[j >> 0] = 1;
			else {
				HEAP8[j >> 0] = 1;
				HEAP32[h >> 2] = 4
			}
			HEAP32[b >> 2] = g;
			i = k;
			return
		}
		function oo(a, b, d, e, f, g, h) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			var j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0;
			j = i;
			i = i + 16 | 0;
			k = j + 12 | 0;
			l = j + 8 | 0;
			m = j + 4 | 0;
			n = j;
			HEAP32[m >> 2] = HEAP32[d >> 2];
			HEAP32[n >> 2] = HEAP32[e >> 2];
			HEAP32[l + 0 >> 2] = HEAP32[m + 0 >> 2];
			HEAP32[k + 0 >> 2] = HEAP32[n + 0 >> 2];
			zu(a, b, l, k, f, g, h);
			i = j;
			return
		}
		function po(a, b, d, e, f, g, h) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			var j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0;
			j = i;
			i = i + 16 | 0;
			k = j + 12 | 0;
			l = j + 8 | 0;
			m = j + 4 | 0;
			n = j;
			HEAP32[m >> 2] = HEAP32[d >> 2];
			HEAP32[n >> 2] = HEAP32[e >> 2];
			HEAP32[l + 0 >> 2] = HEAP32[m + 0 >> 2];
			HEAP32[k + 0 >> 2] = HEAP32[n + 0 >> 2];
			Au(a, b, l, k, f, g, h);
			i = j;
			return
		}
		function qo(a, b, d, e, f, g, h) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			var j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0;
			j = i;
			i = i + 16 | 0;
			k = j + 12 | 0;
			l = j + 8 | 0;
			m = j + 4 | 0;
			n = j;
			HEAP32[m >> 2] = HEAP32[d >> 2];
			HEAP32[n >> 2] = HEAP32[e >> 2];
			HEAP32[l + 0 >> 2] = HEAP32[m + 0 >> 2];
			HEAP32[k + 0 >> 2] = HEAP32[n + 0 >> 2];
			Bu(a, b, l, k, f, g, h);
			i = j;
			return
		}
		function ro(a, b, d, e, f, g, h) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			var j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0;
			j = i;
			i = i + 16 | 0;
			k = j + 12 | 0;
			l = j + 8 | 0;
			m = j + 4 | 0;
			n = j;
			HEAP32[m >> 2] = HEAP32[d >> 2];
			HEAP32[n >> 2] = HEAP32[e >> 2];
			HEAP32[l + 0 >> 2] = HEAP32[m + 0 >> 2];
			HEAP32[k + 0 >> 2] = HEAP32[n + 0 >> 2];
			Cu(a, b, l, k, f, g, h);
			i = j;
			return
		}
		function so(a, b, d, e, f, g, h) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			var j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0;
			j = i;
			i = i + 16 | 0;
			k = j + 12 | 0;
			l = j + 8 | 0;
			m = j + 4 | 0;
			n = j;
			HEAP32[m >> 2] = HEAP32[d >> 2];
			HEAP32[n >> 2] = HEAP32[e >> 2];
			HEAP32[l + 0 >> 2] = HEAP32[m + 0 >> 2];
			HEAP32[k + 0 >> 2] = HEAP32[n + 0 >> 2];
			Du(a, b, l, k, f, g, h);
			i = j;
			return
		}
		function to(a, b, d, e, f, g, h) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			var j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0;
			j = i;
			i = i + 16 | 0;
			k = j + 12 | 0;
			l = j + 8 | 0;
			m = j + 4 | 0;
			n = j;
			HEAP32[m >> 2] = HEAP32[d >> 2];
			HEAP32[n >> 2] = HEAP32[e >> 2];
			HEAP32[l + 0 >> 2] = HEAP32[m + 0 >> 2];
			HEAP32[k + 0 >> 2] = HEAP32[n + 0 >> 2];
			Eu(a, b, l, k, f, g, h);
			i = j;
			return
		}
		function uo(a, b, d, e, f, g, h) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			var j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0;
			j = i;
			i = i + 16 | 0;
			k = j + 12 | 0;
			l = j + 8 | 0;
			m = j + 4 | 0;
			n = j;
			HEAP32[m >> 2] = HEAP32[d >> 2];
			HEAP32[n >> 2] = HEAP32[e >> 2];
			HEAP32[l + 0 >> 2] = HEAP32[m + 0 >> 2];
			HEAP32[k + 0 >> 2] = HEAP32[n + 0 >> 2];
			Fu(a, b, l, k, f, g, h);
			i = j;
			return
		}
		function vo(a, b, d, e, f, g, h) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			var j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0;
			j = i;
			i = i + 16 | 0;
			k = j + 12 | 0;
			l = j + 8 | 0;
			m = j + 4 | 0;
			n = j;
			HEAP32[m >> 2] = HEAP32[d >> 2];
			HEAP32[n >> 2] = HEAP32[e >> 2];
			HEAP32[l + 0 >> 2] = HEAP32[m + 0 >> 2];
			HEAP32[k + 0 >> 2] = HEAP32[n + 0 >> 2];
			Gu(a, b, l, k, f, g, h);
			i = j;
			return
		}
		function wo(a, b, d, e, f, g, h) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			var j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0;
			j = i;
			i = i + 16 | 0;
			k = j + 12 | 0;
			l = j + 8 | 0;
			m = j + 4 | 0;
			n = j;
			HEAP32[m >> 2] = HEAP32[d >> 2];
			HEAP32[n >> 2] = HEAP32[e >> 2];
			HEAP32[l + 0 >> 2] = HEAP32[m + 0 >> 2];
			HEAP32[k + 0 >> 2] = HEAP32[n + 0 >> 2];
			Hu(a, b, l, k, f, g, h);
			i = j;
			return
		}
		function xo(b, d, e, f, g, h, j) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			var k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0,
			O = 0,
			P = 0,
			Q = 0,
			R = 0,
			S = 0;
			d = i;
			i = i + 320 | 0;
			k = d;
			l = d + 208 | 0;
			m = d + 196 | 0;
			n = d + 192 | 0;
			o = d + 180 | 0;
			p = d + 176 | 0;
			q = d + 16 | 0;
			r = d + 8 | 0;
			s = d + 4 | 0;
			HEAP32[m + 0 >> 2] = 0;
			HEAP32[m + 4 >> 2] = 0;
			HEAP32[m + 8 >> 2] = 0;
			Am(n, g);
			g = Yr(n, 130768) | 0;
			zc[c[(HEAP32[g >> 2] | 0) + 48 >> 2] & 15](g, 129288, 129314 | 0, l) | 0;
			Jl(HEAP32[n >> 2] | 0) | 0;
			HEAP32[o + 0 >> 2] = 0;
			HEAP32[o + 4 >> 2] = 0;
			HEAP32[o + 8 >> 2] = 0;
			em(o, 10, 0);
			if (!(HEAP8[o >> 0] & 1)) {
				n = o + 1 | 0;
				t = n;
				u = o + 8 | 0;
				v = n
			} else {
				n = o + 8 | 0;
				t = o + 1 | 0;
				u = n;
				v = HEAP32[n >> 2] | 0
			}
			HEAP32[p >> 2] = v;
			HEAP32[r >> 2] = q;
			HEAP32[s >> 2] = 0;
			n = o + 4 | 0;
			g = HEAP32[e >> 2] | 0;
			w = v;
			a: while (1) {
				if (g) {
					v = HEAP32[g + 12 >> 2] | 0;
					if ((v | 0) == (HEAP32[g + 16 >> 2] | 0))
						x = tc[c[(HEAP32[g >> 2] | 0) + 36 >> 2] & 127](g) | 0;
					else
						x = HEAP32[v >> 2] | 0;
					if ((x | 0) == -1) {
						HEAP32[e >> 2] = 0;
						y = 1;
						z = 0
					} else {
						y = 0;
						z = g
					}
				} else {
					y = 1;
					z = 0
				}
				v = HEAP32[f >> 2] | 0;
				do
					if (v) {
						A = HEAP32[v + 12 >> 2] | 0;
						if ((A | 0) == (HEAP32[v + 16 >> 2] | 0))
							B = tc[c[(HEAP32[v >> 2] | 0) + 36 >> 2] & 127](v) | 0;
						else
							B = HEAP32[A >> 2] | 0;
						if ((B | 0) != -1)
							if (y) {
								C = v;
								break
							} else {
								D = v;
								E = w;
								break a
							}
						else {
							HEAP32[f >> 2] = 0;
							F = 17;
							break
						}
					} else
						F = 17;
				while (0);
				if ((F | 0) == 17) {
					F = 0;
					if (y) {
						D = 0;
						E = w;
						break
					} else
						C = 0
				}
				v = HEAP8[o >> 0] | 0;
				A = (v & 1) == 0;
				if (A)
					G = (v & 255) >>> 1;
				else
					G = HEAP32[n >> 2] | 0;
				if ((HEAP32[p >> 2] | 0) == (w + G | 0)) {
					if (A) {
						H = (v & 255) >>> 1;
						I = (v & 255) >>> 1
					} else {
						v = HEAP32[n >> 2] | 0;
						H = v;
						I = v
					}
					em(o, H << 1, 0);
					if (!(HEAP8[o >> 0] & 1))
						J = 10;
					else
						J = (HEAP32[o >> 2] & -2) + -1 | 0;
					em(o, J, 0);
					if (!(HEAP8[o >> 0] & 1))
						K = t;
					else
						K = HEAP32[u >> 2] | 0;
					HEAP32[p >> 2] = K + I;
					L = K
				} else
					L = w;
				v = z + 12 | 0;
				A = HEAP32[v >> 2] | 0;
				M = z + 16 | 0;
				if ((A | 0) == (HEAP32[M >> 2] | 0))
					N = tc[c[(HEAP32[z >> 2] | 0) + 36 >> 2] & 127](z) | 0;
				else
					N = HEAP32[A >> 2] | 0;
				if (yo(N, 16, L, p, s, 0, m, q, r, l) | 0) {
					D = C;
					E = L;
					break
				}
				A = HEAP32[v >> 2] | 0;
				if ((A | 0) == (HEAP32[M >> 2] | 0)) {
					tc[c[(HEAP32[z >> 2] | 0) + 40 >> 2] & 127](z) | 0;
					g = z;
					w = L;
					continue
				} else {
					HEAP32[v >> 2] = A + 4;
					g = z;
					w = L;
					continue
				}
			}
			em(o, (HEAP32[p >> 2] | 0) - E | 0, 0);
			if (!(HEAP8[o >> 0] & 1))
				O = t;
			else
				O = HEAP32[u >> 2] | 0;
			u = ko() | 0;
			HEAP32[k >> 2] = j;
			if ((xu(O, u, 129328, k) | 0) != 1)
				HEAP32[h >> 2] = 4;
			if (z) {
				k = HEAP32[z + 12 >> 2] | 0;
				if ((k | 0) == (HEAP32[z + 16 >> 2] | 0))
					P = tc[c[(HEAP32[z >> 2] | 0) + 36 >> 2] & 127](z) | 0;
				else
					P = HEAP32[k >> 2] | 0;
				if ((P | 0) == -1) {
					HEAP32[e >> 2] = 0;
					Q = 0;
					R = 1
				} else {
					Q = z;
					R = 0
				}
			} else {
				Q = 0;
				R = 1
			}
			do
				if (D) {
					z = HEAP32[D + 12 >> 2] | 0;
					if ((z | 0) == (HEAP32[D + 16 >> 2] | 0))
						S = tc[c[(HEAP32[D >> 2] | 0) + 36 >> 2] & 127](D) | 0;
					else
						S = HEAP32[z >> 2] | 0;
					if ((S | 0) == -1) {
						HEAP32[f >> 2] = 0;
						F = 54;
						break
					}
					if (R) {
						HEAP32[b >> 2] = Q;
						bm(o);
						bm(m);
						i = d;
						return
					}
				} else
					F = 54;
			while (0);
			if ((F | 0) == 54 ? !R : 0) {
				HEAP32[b >> 2] = Q;
				bm(o);
				bm(m);
				i = d;
				return
			}
			HEAP32[h >> 2] = HEAP32[h >> 2] | 2;
			HEAP32[b >> 2] = Q;
			bm(o);
			bm(m);
			i = d;
			return
		}
		function yo(b, d, e, f, g, h, j, k, l, m) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			k = k | 0;
			l = l | 0;
			m = m | 0;
			var n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0;
			n = i;
			o = HEAP32[f >> 2] | 0;
			p = (o | 0) == (e | 0);
			do
				if (p) {
					q = (HEAP32[m + 96 >> 2] | 0) == (b | 0);
					if (!q ? (HEAP32[m + 100 >> 2] | 0) != (b | 0) : 0)
						break;
					HEAP32[f >> 2] = e + 1;
					HEAP8[e >> 0] = q ? 43 : 45;
					HEAP32[g >> 2] = 0;
					r = 0;
					i = n;
					return r | 0
				}
			while (0);
			q = HEAP8[j >> 0] | 0;
			if (!(q & 1))
				s = (q & 255) >>> 1;
			else
				s = HEAP32[j + 4 >> 2] | 0;
			if ((s | 0) != 0 & (b | 0) == (h | 0)) {
				h = HEAP32[l >> 2] | 0;
				if ((h - k | 0) >= 160) {
					r = 0;
					i = n;
					return r | 0
				}
				k = HEAP32[g >> 2] | 0;
				HEAP32[l >> 2] = h + 4;
				HEAP32[h >> 2] = k;
				HEAP32[g >> 2] = 0;
				r = 0;
				i = n;
				return r | 0
			}
			k = m + 104 | 0;
			h = m;
			while (1) {
				if ((HEAP32[h >> 2] | 0) == (b | 0)) {
					t = h;
					break
				}
				h = h + 4 | 0;
				if ((h | 0) == (k | 0)) {
					t = k;
					break
				}
			}
			k = t - m | 0;
			m = k >> 2;
			if ((k | 0) > 92) {
				r = -1;
				i = n;
				return r | 0
			}
			if ((d | 0) == 16) {
				if ((k | 0) >= 88) {
					if (p) {
						r = -1;
						i = n;
						return r | 0
					}
					if ((o - e | 0) >= 3) {
						r = -1;
						i = n;
						return r | 0
					}
					if ((HEAP8[o + -1 >> 0] | 0) != 48) {
						r = -1;
						i = n;
						return r | 0
					}
					HEAP32[g >> 2] = 0;
					e = HEAP8[129288 + m >> 0] | 0;
					HEAP32[f >> 2] = o + 1;
					HEAP8[o >> 0] = e;
					r = 0;
					i = n;
					return r | 0
				}
			} else if ((d | 0) == 10 | (d | 0) == 8 ? (m | 0) >= (d | 0) : 0) {
				r = -1;
				i = n;
				return r | 0
			}
			d = HEAP8[129288 + m >> 0] | 0;
			HEAP32[f >> 2] = o + 1;
			HEAP8[o >> 0] = d;
			HEAP32[g >> 2] = (HEAP32[g >> 2] | 0) + 1;
			r = 0;
			i = n;
			return r | 0
		}
		function zo(b, d, e, f) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0;
			g = i;
			i = i + 16 | 0;
			h = g;
			Am(h, d);
			d = Yr(h, 130776) | 0;
			zc[c[(HEAP32[d >> 2] | 0) + 32 >> 2] & 15](d, 129288, 129314 | 0, e) | 0;
			e = Yr(h, 130920) | 0;
			HEAP8[f >> 0] = tc[c[(HEAP32[e >> 2] | 0) + 16 >> 2] & 127](e) | 0;
			rc[c[(HEAP32[e >> 2] | 0) + 20 >> 2] & 127](b, e);
			Jl(HEAP32[h >> 2] | 0) | 0;
			i = g;
			return
		}
		function Ao(b, d, e, f, g) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0;
			h = i;
			i = i + 16 | 0;
			j = h;
			Am(j, d);
			d = Yr(j, 130776) | 0;
			zc[c[(HEAP32[d >> 2] | 0) + 32 >> 2] & 15](d, 129288, 129320 | 0, e) | 0;
			e = Yr(j, 130920) | 0;
			HEAP8[f >> 0] = tc[c[(HEAP32[e >> 2] | 0) + 12 >> 2] & 127](e) | 0;
			HEAP8[g >> 0] = tc[c[(HEAP32[e >> 2] | 0) + 16 >> 2] & 127](e) | 0;
			rc[c[(HEAP32[e >> 2] | 0) + 20 >> 2] & 127](b, e);
			Jl(HEAP32[j >> 2] | 0) | 0;
			i = h;
			return
		}
		function Bo(b, e, f, g, h, j, k, l, m, n, o, p) {
			b = b | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			k = k | 0;
			l = l | 0;
			m = m | 0;
			n = n | 0;
			o = o | 0;
			p = p | 0;
			var q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0;
			q = i;
			if (b << 24 >> 24 == j << 24 >> 24) {
				if (!(HEAP8[e >> 0] | 0)) {
					r = -1;
					i = q;
					return r | 0
				}
				HEAP8[e >> 0] = 0;
				j = HEAP32[h >> 2] | 0;
				HEAP32[h >> 2] = j + 1;
				HEAP8[j >> 0] = 46;
				j = HEAP8[l >> 0] | 0;
				if (!(j & 1))
					s = (j & 255) >>> 1;
				else
					s = HEAP32[l + 4 >> 2] | 0;
				if (!s) {
					r = 0;
					i = q;
					return r | 0
				}
				s = HEAP32[n >> 2] | 0;
				if ((s - m | 0) >= 160) {
					r = 0;
					i = q;
					return r | 0
				}
				j = HEAP32[o >> 2] | 0;
				HEAP32[n >> 2] = s + 4;
				HEAP32[s >> 2] = j;
				r = 0;
				i = q;
				return r | 0
			}
			if (b << 24 >> 24 == k << 24 >> 24) {
				k = HEAP8[l >> 0] | 0;
				if (!(k & 1))
					t = (k & 255) >>> 1;
				else
					t = HEAP32[l + 4 >> 2] | 0;
				if (t) {
					if (!(HEAP8[e >> 0] | 0)) {
						r = -1;
						i = q;
						return r | 0
					}
					t = HEAP32[n >> 2] | 0;
					if ((t - m | 0) >= 160) {
						r = 0;
						i = q;
						return r | 0
					}
					k = HEAP32[o >> 2] | 0;
					HEAP32[n >> 2] = t + 4;
					HEAP32[t >> 2] = k;
					HEAP32[o >> 2] = 0;
					r = 0;
					i = q;
					return r | 0
				}
			}
			k = p + 32 | 0;
			t = p;
			while (1) {
				if ((HEAP8[t >> 0] | 0) == b << 24 >> 24) {
					u = t;
					break
				}
				t = t + 1 | 0;
				if ((t | 0) == (k | 0)) {
					u = k;
					break
				}
			}
			k = u - p | 0;
			if ((k | 0) > 31) {
				r = -1;
				i = q;
				return r | 0
			}
			p = HEAP8[129288 + k >> 0] | 0;
			if ((k | 0) == 24 | (k | 0) == 25) {
				u = HEAP32[h >> 2] | 0;
				if ((u | 0) != (g | 0) ? (HEAPU8[u + -1 >> 0] & 95 | 0) != (HEAPU8[f >> 0] & 127 | 0) : 0) {
					r = -1;
					i = q;
					return r | 0
				}
				HEAP32[h >> 2] = u + 1;
				HEAP8[u >> 0] = p;
				r = 0;
				i = q;
				return r | 0
			} else if ((k | 0) == 23 | (k | 0) == 22) {
				HEAP8[f >> 0] = 80;
				u = HEAP32[h >> 2] | 0;
				HEAP32[h >> 2] = u + 1;
				HEAP8[u >> 0] = p;
				r = 0;
				i = q;
				return r | 0
			} else {
				u = p & 95;
				if ((u | 0) == (HEAP8[f >> 0] | 0) ? (HEAP8[f >> 0] = u | 128, (HEAP8[e >> 0] | 0) != 0) : 0) {
					HEAP8[e >> 0] = 0;
					e = HEAP8[l >> 0] | 0;
					if (!(e & 1))
						v = (e & 255) >>> 1;
					else
						v = HEAP32[l + 4 >> 2] | 0;
					if ((v | 0) != 0 ? (v = HEAP32[n >> 2] | 0, (v - m | 0) < 160) : 0) {
						m = HEAP32[o >> 2] | 0;
						HEAP32[n >> 2] = v + 4;
						HEAP32[v >> 2] = m
					}
				}
				m = HEAP32[h >> 2] | 0;
				HEAP32[h >> 2] = m + 1;
				HEAP8[m >> 0] = p;
				if ((k | 0) > 21) {
					r = 0;
					i = q;
					return r | 0
				}
				HEAP32[o >> 2] = (HEAP32[o >> 2] | 0) + 1;
				r = 0;
				i = q;
				return r | 0
			}
			return 0
		}
		function Co(a, b, d, e) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0;
			f = i;
			i = i + 16 | 0;
			g = f;
			Am(g, b);
			b = Yr(g, 130768) | 0;
			zc[c[(HEAP32[b >> 2] | 0) + 48 >> 2] & 15](b, 129288, 129314 | 0, d) | 0;
			d = Yr(g, 130928) | 0;
			HEAP32[e >> 2] = tc[c[(HEAP32[d >> 2] | 0) + 16 >> 2] & 127](d) | 0;
			rc[c[(HEAP32[d >> 2] | 0) + 20 >> 2] & 127](a, d);
			Jl(HEAP32[g >> 2] | 0) | 0;
			i = f;
			return
		}
		function Do(a, b, d, e, f) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0;
			g = i;
			i = i + 16 | 0;
			h = g;
			Am(h, b);
			b = Yr(h, 130768) | 0;
			zc[c[(HEAP32[b >> 2] | 0) + 48 >> 2] & 15](b, 129288, 129320 | 0, d) | 0;
			d = Yr(h, 130928) | 0;
			HEAP32[e >> 2] = tc[c[(HEAP32[d >> 2] | 0) + 12 >> 2] & 127](d) | 0;
			HEAP32[f >> 2] = tc[c[(HEAP32[d >> 2] | 0) + 16 >> 2] & 127](d) | 0;
			rc[c[(HEAP32[d >> 2] | 0) + 20 >> 2] & 127](a, d);
			Jl(HEAP32[h >> 2] | 0) | 0;
			i = g;
			return
		}
		function Eo(b, e, f, g, h, j, k, l, m, n, o, p) {
			b = b | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			k = k | 0;
			l = l | 0;
			m = m | 0;
			n = n | 0;
			o = o | 0;
			p = p | 0;
			var q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0;
			q = i;
			if ((b | 0) == (j | 0)) {
				if (!(HEAP8[e >> 0] | 0)) {
					r = -1;
					i = q;
					return r | 0
				}
				HEAP8[e >> 0] = 0;
				j = HEAP32[h >> 2] | 0;
				HEAP32[h >> 2] = j + 1;
				HEAP8[j >> 0] = 46;
				j = HEAP8[l >> 0] | 0;
				if (!(j & 1))
					s = (j & 255) >>> 1;
				else
					s = HEAP32[l + 4 >> 2] | 0;
				if (!s) {
					r = 0;
					i = q;
					return r | 0
				}
				s = HEAP32[n >> 2] | 0;
				if ((s - m | 0) >= 160) {
					r = 0;
					i = q;
					return r | 0
				}
				j = HEAP32[o >> 2] | 0;
				HEAP32[n >> 2] = s + 4;
				HEAP32[s >> 2] = j;
				r = 0;
				i = q;
				return r | 0
			}
			if ((b | 0) == (k | 0)) {
				k = HEAP8[l >> 0] | 0;
				if (!(k & 1))
					t = (k & 255) >>> 1;
				else
					t = HEAP32[l + 4 >> 2] | 0;
				if (t) {
					if (!(HEAP8[e >> 0] | 0)) {
						r = -1;
						i = q;
						return r | 0
					}
					t = HEAP32[n >> 2] | 0;
					if ((t - m | 0) >= 160) {
						r = 0;
						i = q;
						return r | 0
					}
					k = HEAP32[o >> 2] | 0;
					HEAP32[n >> 2] = t + 4;
					HEAP32[t >> 2] = k;
					HEAP32[o >> 2] = 0;
					r = 0;
					i = q;
					return r | 0
				}
			}
			k = p + 128 | 0;
			t = p;
			while (1) {
				if ((HEAP32[t >> 2] | 0) == (b | 0)) {
					u = t;
					break
				}
				t = t + 4 | 0;
				if ((t | 0) == (k | 0)) {
					u = k;
					break
				}
			}
			k = u - p | 0;
			p = k >> 2;
			if ((k | 0) > 124) {
				r = -1;
				i = q;
				return r | 0
			}
			u = HEAP8[129288 + p >> 0] | 0;
			if ((p | 0) == 23 | (p | 0) == 22)
				HEAP8[f >> 0] = 80;
			else if (!((p | 0) == 24 | (p | 0) == 25)) {
				p = u & 95;
				if ((p | 0) == (HEAP8[f >> 0] | 0) ? (HEAP8[f >> 0] = p | 128, (HEAP8[e >> 0] | 0) != 0) : 0) {
					HEAP8[e >> 0] = 0;
					e = HEAP8[l >> 0] | 0;
					if (!(e & 1))
						v = (e & 255) >>> 1;
					else
						v = HEAP32[l + 4 >> 2] | 0;
					if ((v | 0) != 0 ? (v = HEAP32[n >> 2] | 0, (v - m | 0) < 160) : 0) {
						m = HEAP32[o >> 2] | 0;
						HEAP32[n >> 2] = v + 4;
						HEAP32[v >> 2] = m
					}
				}
			} else {
				m = HEAP32[h >> 2] | 0;
				if ((m | 0) != (g | 0) ? (HEAPU8[m + -1 >> 0] & 95 | 0) != (HEAPU8[f >> 0] & 127 | 0) : 0) {
					r = -1;
					i = q;
					return r | 0
				}
				HEAP32[h >> 2] = m + 1;
				HEAP8[m >> 0] = u;
				r = 0;
				i = q;
				return r | 0
			}
			m = HEAP32[h >> 2] | 0;
			HEAP32[h >> 2] = m + 1;
			HEAP8[m >> 0] = u;
			if ((k | 0) > 84) {
				r = 0;
				i = q;
				return r | 0
			}
			HEAP32[o >> 2] = (HEAP32[o >> 2] | 0) + 1;
			r = 0;
			i = q;
			return r | 0
		}
		function Fo(a) {
			a = a | 0;
			var b = 0;
			b = i;
			kl(a);
			i = b;
			return
		}
		function Go(a) {
			a = a | 0;
			return
		}
		function Ho(b, d, e, f, g, h) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			var j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0;
			j = i;
			i = i + 32 | 0;
			k = j + 20 | 0;
			l = j + 16 | 0;
			m = j + 12 | 0;
			n = j;
			if (!(HEAP32[f + 4 >> 2] & 1)) {
				o = HEAP32[(HEAP32[d >> 2] | 0) + 24 >> 2] | 0;
				HEAP32[l >> 2] = HEAP32[e >> 2];
				HEAP32[k + 0 >> 2] = HEAP32[l + 0 >> 2];
				Bc[o & 31](b, d, k, f, g, h & 1);
				i = j;
				return
			}
			Am(m, f);
			f = Yr(m, 130920) | 0;
			Jl(HEAP32[m >> 2] | 0) | 0;
			m = HEAP32[f >> 2] | 0;
			if (h)
				rc[HEAP32[m + 24 >> 2] & 127](n, f);
			else
				rc[HEAP32[m + 28 >> 2] & 127](n, f);
			f = HEAP8[n >> 0] | 0;
			if (!(f & 1)) {
				m = n + 1 | 0;
				p = m;
				q = m;
				r = n + 8 | 0
			} else {
				m = n + 8 | 0;
				p = HEAP32[m >> 2] | 0;
				q = n + 1 | 0;
				r = m
			}
			m = n + 4 | 0;
			h = f;
			f = p;
			while (1) {
				if (!(h & 1)) {
					s = q;
					t = (h & 255) >>> 1
				} else {
					s = HEAP32[r >> 2] | 0;
					t = HEAP32[m >> 2] | 0
				}
				if ((f | 0) == (s + t | 0))
					break;
				p = HEAP8[f >> 0] | 0;
				g = HEAP32[e >> 2] | 0;
				do
					if (g) {
						k = g + 24 | 0;
						d = HEAP32[k >> 2] | 0;
						if ((d | 0) != (HEAP32[g + 28 >> 2] | 0)) {
							HEAP32[k >> 2] = d + 1;
							HEAP8[d >> 0] = p;
							break
						}
						if ((Cc[c[(HEAP32[g >> 2] | 0) + 52 >> 2] & 31](g, p & 255) | 0) == -1)
							HEAP32[e >> 2] = 0
					}
				while (0);
				h = HEAP8[n >> 0] | 0;
				f = f + 1 | 0
			}
			HEAP32[b >> 2] = HEAP32[e >> 2];
			bm(n);
			i = j;
			return
		}
		function Io(b, d, e, f, g, h) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			var j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0;
			d = i;
			i = i + 64 | 0;
			j = d;
			k = d + 56 | 0;
			l = d + 44 | 0;
			m = d + 20 | 0;
			n = d + 16 | 0;
			o = d + 12 | 0;
			p = d + 8 | 0;
			q = d + 4 | 0;
			HEAP8[k + 0 >> 0] = HEAP8[129568] | 0;
			HEAP8[k + 1 >> 0] = HEAP8[129569] | 0;
			HEAP8[k + 2 >> 0] = HEAP8[129570] | 0;
			HEAP8[k + 3 >> 0] = HEAP8[129571] | 0;
			HEAP8[k + 4 >> 0] = HEAP8[129572] | 0;
			HEAP8[k + 5 >> 0] = HEAP8[129573] | 0;
			Jo(k + 1 | 0, 129472, 1, HEAP32[f + 4 >> 2] | 0);
			r = ko() | 0;
			HEAP32[j >> 2] = h;
			h = l + (Iu(l, 12, r, k, j) | 0) | 0;
			k = Ko(l, h, f) | 0;
			Am(p, f);
			Lo(l, k, h, m, n, o, p);
			Jl(HEAP32[p >> 2] | 0) | 0;
			HEAP32[q >> 2] = HEAP32[e >> 2];
			e = HEAP32[n >> 2] | 0;
			n = HEAP32[o >> 2] | 0;
			HEAP32[j + 0 >> 2] = HEAP32[q + 0 >> 2];
			Ju(b, j, m, e, n, f, g);
			i = d;
			return
		}
		function Jo(b, c, d, e) {
			b = b | 0;
			c = c | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0;
			f = i;
			if (!(e & 2048))
				g = b;
			else {
				HEAP8[b >> 0] = 43;
				g = b + 1 | 0
			}
			if (!(e & 512))
				h = g;
			else {
				HEAP8[g >> 0] = 35;
				h = g + 1 | 0
			}
			g = HEAP8[c >> 0] | 0;
			if (!(g << 24 >> 24))
				j = h;
			else {
				b = c;
				c = h;
				h = g;
				while (1) {
					b = b + 1 | 0;
					g = c + 1 | 0;
					HEAP8[c >> 0] = h;
					h = HEAP8[b >> 0] | 0;
					if (!(h << 24 >> 24)) {
						j = g;
						break
					} else
						c = g
				}
			}
			c = e & 74;
			if ((c | 0) == 8)
				if (!(e & 16384)) {
					HEAP8[j >> 0] = 120;
					i = f;
					return
				} else {
					HEAP8[j >> 0] = 88;
					i = f;
					return
				}
			else if ((c | 0) != 64)
				if (d) {
					HEAP8[j >> 0] = 100;
					i = f;
					return
				} else {
					HEAP8[j >> 0] = 117;
					i = f;
					return
				}
			else {
				HEAP8[j >> 0] = 111;
				i = f;
				return
			}
		}
		function Ko(b, d, e) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0;
			f = i;
			g = HEAP32[e + 4 >> 2] & 176;
			do
				if ((g | 0) == 32)
					h = d;
				else if ((g | 0) == 16) {
					e = HEAP8[b >> 0] | 0;
					if (e << 24 >> 24 == 43 | e << 24 >> 24 == 45) {
						h = b + 1 | 0;
						break
					}
					if ((d - b | 0) > 1 & e << 24 >> 24 == 48 ? (e = HEAP8[b + 1 >> 0] | 0, e << 24 >> 24 == 88 | e << 24 >> 24 == 120) : 0)
						h = b + 2 | 0;
					else
						j = 7
				} else
					j = 7;
			while (0);
			if ((j | 0) == 7)
				h = b;
			i = f;
			return h | 0
		}
		function Lo(b, d, e, f, g, h, j) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			var k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0;
			k = i;
			i = i + 16 | 0;
			l = k;
			m = Yr(j, 130776) | 0;
			n = Yr(j, 130920) | 0;
			rc[c[(HEAP32[n >> 2] | 0) + 20 >> 2] & 127](l, n);
			j = HEAP8[l >> 0] | 0;
			if (!(j & 1))
				o = (j & 255) >>> 1;
			else
				o = HEAP32[l + 4 >> 2] | 0;
			if (o) {
				HEAP32[h >> 2] = f;
				o = HEAP8[b >> 0] | 0;
				if (o << 24 >> 24 == 43 | o << 24 >> 24 == 45) {
					j = Cc[c[(HEAP32[m >> 2] | 0) + 28 >> 2] & 31](m, o) | 0;
					o = HEAP32[h >> 2] | 0;
					HEAP32[h >> 2] = o + 1;
					HEAP8[o >> 0] = j;
					p = b + 1 | 0
				} else
					p = b;
				if (((e - p | 0) > 1 ? (HEAP8[p >> 0] | 0) == 48 : 0) ? (j = p + 1 | 0, o = HEAP8[j >> 0] | 0, o << 24 >> 24 == 88 | o << 24 >> 24 == 120) : 0) {
					o = Cc[c[(HEAP32[m >> 2] | 0) + 28 >> 2] & 31](m, 48) | 0;
					q = HEAP32[h >> 2] | 0;
					HEAP32[h >> 2] = q + 1;
					HEAP8[q >> 0] = o;
					o = Cc[c[(HEAP32[m >> 2] | 0) + 28 >> 2] & 31](m, HEAP8[j >> 0] | 0) | 0;
					j = HEAP32[h >> 2] | 0;
					HEAP32[h >> 2] = j + 1;
					HEAP8[j >> 0] = o;
					r = p + 2 | 0
				} else
					r = p;
				if ((r | 0) != (e | 0) ? (p = e + -1 | 0, p >>> 0 > r >>> 0) : 0) {
					o = r;
					j = p;
					do {
						p = HEAP8[o >> 0] | 0;
						HEAP8[o >> 0] = HEAP8[j >> 0] | 0;
						HEAP8[j >> 0] = p;
						o = o + 1 | 0;
						j = j + -1 | 0
					} while (o >>> 0 < j >>> 0)
				}
				j = tc[c[(HEAP32[n >> 2] | 0) + 16 >> 2] & 127](n) | 0;
				if (r >>> 0 < e >>> 0) {
					n = l + 1 | 0;
					o = l + 4 | 0;
					p = l + 8 | 0;
					q = 0;
					s = 0;
					t = r;
					while (1) {
						u = (HEAP8[l >> 0] & 1) == 0;
						if ((a[(u ? n : HEAP32[p >> 2] | 0) + s >> 0] | 0) != 0 ? (q | 0) == (a[(u ? n : HEAP32[p >> 2] | 0) + s >> 0] | 0) : 0) {
							u = HEAP32[h >> 2] | 0;
							HEAP32[h >> 2] = u + 1;
							HEAP8[u >> 0] = j;
							u = HEAP8[l >> 0] | 0;
							if (!(u & 1))
								v = (u & 255) >>> 1;
							else
								v = HEAP32[o >> 2] | 0;
							w = 0;
							x = (s >>> 0 < (v + -1 | 0) >>> 0 & 1) + s | 0
						} else {
							w = q;
							x = s
						}
						u = Cc[c[(HEAP32[m >> 2] | 0) + 28 >> 2] & 31](m, HEAP8[t >> 0] | 0) | 0;
						y = HEAP32[h >> 2] | 0;
						HEAP32[h >> 2] = y + 1;
						HEAP8[y >> 0] = u;
						t = t + 1 | 0;
						if (t >>> 0 >= e >>> 0)
							break;
						else {
							q = w + 1 | 0;
							s = x
						}
					}
				}
				x = f + (r - b) | 0;
				r = HEAP32[h >> 2] | 0;
				if ((x | 0) != (r | 0) ? (s = r + -1 | 0, s >>> 0 > x >>> 0) : 0) {
					r = x;
					x = s;
					do {
						s = HEAP8[r >> 0] | 0;
						HEAP8[r >> 0] = HEAP8[x >> 0] | 0;
						HEAP8[x >> 0] = s;
						r = r + 1 | 0;
						x = x + -1 | 0
					} while (r >>> 0 < x >>> 0)
				}
			} else {
				zc[c[(HEAP32[m >> 2] | 0) + 32 >> 2] & 15](m, b, e, f) | 0;
				HEAP32[h >> 2] = f + (e - b)
			}
			if ((d | 0) == (e | 0)) {
				z = HEAP32[h >> 2] | 0;
				HEAP32[g >> 2] = z;
				bm(l);
				i = k;
				return
			} else {
				z = f + (d - b) | 0;
				HEAP32[g >> 2] = z;
				bm(l);
				i = k;
				return
			}
		}
		function Mo(a, b, d, e, f, g, h) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			var j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0;
			b = i;
			i = i + 96 | 0;
			j = b + 8 | 0;
			k = b;
			l = b + 74 | 0;
			m = b + 32 | 0;
			n = b + 28 | 0;
			o = b + 24 | 0;
			p = b + 20 | 0;
			q = b + 16 | 0;
			r = k;
			HEAP32[r >> 2] = 37;
			HEAP32[r + 4 >> 2] = 0;
			Jo(k + 1 | 0, 129480, 1, HEAP32[e + 4 >> 2] | 0);
			r = ko() | 0;
			s = j;
			HEAP32[s >> 2] = g;
			HEAP32[s + 4 >> 2] = h;
			h = l + (Iu(l, 22, r, k, j) | 0) | 0;
			k = Ko(l, h, e) | 0;
			Am(p, e);
			Lo(l, k, h, m, n, o, p);
			Jl(HEAP32[p >> 2] | 0) | 0;
			HEAP32[q >> 2] = HEAP32[d >> 2];
			d = HEAP32[n >> 2] | 0;
			n = HEAP32[o >> 2] | 0;
			HEAP32[j + 0 >> 2] = HEAP32[q + 0 >> 2];
			Ju(a, j, m, d, n, e, f);
			i = b;
			return
		}
		function No(b, d, e, f, g, h) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			var j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0;
			d = i;
			i = i + 64 | 0;
			j = d;
			k = d + 56 | 0;
			l = d + 44 | 0;
			m = d + 20 | 0;
			n = d + 16 | 0;
			o = d + 12 | 0;
			p = d + 8 | 0;
			q = d + 4 | 0;
			HEAP8[k + 0 >> 0] = HEAP8[129568] | 0;
			HEAP8[k + 1 >> 0] = HEAP8[129569] | 0;
			HEAP8[k + 2 >> 0] = HEAP8[129570] | 0;
			HEAP8[k + 3 >> 0] = HEAP8[129571] | 0;
			HEAP8[k + 4 >> 0] = HEAP8[129572] | 0;
			HEAP8[k + 5 >> 0] = HEAP8[129573] | 0;
			Jo(k + 1 | 0, 129472, 0, HEAP32[f + 4 >> 2] | 0);
			r = ko() | 0;
			HEAP32[j >> 2] = h;
			h = l + (Iu(l, 12, r, k, j) | 0) | 0;
			k = Ko(l, h, f) | 0;
			Am(p, f);
			Lo(l, k, h, m, n, o, p);
			Jl(HEAP32[p >> 2] | 0) | 0;
			HEAP32[q >> 2] = HEAP32[e >> 2];
			e = HEAP32[n >> 2] | 0;
			n = HEAP32[o >> 2] | 0;
			HEAP32[j + 0 >> 2] = HEAP32[q + 0 >> 2];
			Ju(b, j, m, e, n, f, g);
			i = d;
			return
		}
		function Oo(a, b, d, e, f, g, h) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			var j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0;
			b = i;
			i = i + 112 | 0;
			j = b + 8 | 0;
			k = b;
			l = b + 75 | 0;
			m = b + 32 | 0;
			n = b + 28 | 0;
			o = b + 24 | 0;
			p = b + 20 | 0;
			q = b + 16 | 0;
			r = k;
			HEAP32[r >> 2] = 37;
			HEAP32[r + 4 >> 2] = 0;
			Jo(k + 1 | 0, 129480, 0, HEAP32[e + 4 >> 2] | 0);
			r = ko() | 0;
			s = j;
			HEAP32[s >> 2] = g;
			HEAP32[s + 4 >> 2] = h;
			h = l + (Iu(l, 23, r, k, j) | 0) | 0;
			k = Ko(l, h, e) | 0;
			Am(p, e);
			Lo(l, k, h, m, n, o, p);
			Jl(HEAP32[p >> 2] | 0) | 0;
			HEAP32[q >> 2] = HEAP32[d >> 2];
			d = HEAP32[n >> 2] | 0;
			n = HEAP32[o >> 2] | 0;
			HEAP32[j + 0 >> 2] = HEAP32[q + 0 >> 2];
			Ju(a, j, m, d, n, e, f);
			i = b;
			return
		}
		function Po(a, b, d, e, f, g) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = +g;
			var j = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0;
			b = i;
			i = i + 144 | 0;
			j = b + 8 | 0;
			l = b;
			m = b + 102 | 0;
			n = b + 40 | 0;
			o = b + 44 | 0;
			p = b + 36 | 0;
			q = b + 32 | 0;
			r = b + 28 | 0;
			s = b + 24 | 0;
			t = b + 20 | 0;
			u = l;
			HEAP32[u >> 2] = 37;
			HEAP32[u + 4 >> 2] = 0;
			u = Qo(l + 1 | 0, 129488, HEAP32[e + 4 >> 2] | 0) | 0;
			HEAP32[n >> 2] = m;
			v = ko() | 0;
			if (u) {
				HEAP32[j >> 2] = HEAP32[e + 8 >> 2];
				u = j + 4 | 0;
				HEAPF64[k >> 3] = g;
				HEAP32[u >> 2] = HEAP32[k >> 2];
				HEAP32[u + 4 >> 2] = HEAP32[k + 4 >> 2];
				w = Iu(m, 30, v, l, j) | 0
			} else {
				HEAPF64[k >> 3] = g;
				HEAP32[j >> 2] = HEAP32[k >> 2];
				HEAP32[j + 4 >> 2] = HEAP32[k + 4 >> 2];
				w = Iu(m, 30, v, l, j) | 0
			}
			if ((w | 0) > 29) {
				v = ko() | 0;
				HEAP32[j >> 2] = HEAP32[e + 8 >> 2];
				u = j + 4 | 0;
				HEAPF64[k >> 3] = g;
				HEAP32[u >> 2] = HEAP32[k >> 2];
				HEAP32[u + 4 >> 2] = HEAP32[k + 4 >> 2];
				u = Ku(n, v, l, j) | 0;
				l = HEAP32[n >> 2] | 0;
				if (!l)
					qx();
				else {
					x = l;
					y = l;
					z = u
				}
			} else {
				x = HEAP32[n >> 2] | 0;
				y = 0;
				z = w
			}
			w = x + z | 0;
			n = Ko(x, w, e) | 0;
			if ((x | 0) != (m | 0)) {
				u = vx(z << 1) | 0;
				if (!u)
					qx();
				else {
					A = x;
					B = u;
					C = u
				}
			} else {
				A = m;
				B = 0;
				C = o
			}
			Am(r, e);
			Ro(A, n, w, C, p, q, r);
			Jl(HEAP32[r >> 2] | 0) | 0;
			HEAP32[t >> 2] = HEAP32[d >> 2];
			r = HEAP32[p >> 2] | 0;
			p = HEAP32[q >> 2] | 0;
			HEAP32[j + 0 >> 2] = HEAP32[t + 0 >> 2];
			Ju(s, j, C, r, p, e, f);
			f = HEAP32[s >> 2] | 0;
			HEAP32[d >> 2] = f;
			HEAP32[a >> 2] = f;
			if (B)
				wx(B);
			if (!y) {
				i = b;
				return
			}
			wx(y);
			i = b;
			return
		}
		function Qo(b, c, d) {
			b = b | 0;
			c = c | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0;
			e = i;
			if (!(d & 2048))
				f = b;
			else {
				HEAP8[b >> 0] = 43;
				f = b + 1 | 0
			}
			if (!(d & 1024))
				g = f;
			else {
				HEAP8[f >> 0] = 35;
				g = f + 1 | 0
			}
			f = d & 260;
			b = d >>> 14;
			d = (f | 0) == 260;
			if (d) {
				h = g;
				j = 0
			} else {
				HEAP8[g >> 0] = 46;
				HEAP8[g + 1 >> 0] = 42;
				h = g + 2 | 0;
				j = 1
			}
			g = HEAP8[c >> 0] | 0;
			if (!(g << 24 >> 24))
				k = h;
			else {
				l = c;
				c = h;
				h = g;
				while (1) {
					l = l + 1 | 0;
					g = c + 1 | 0;
					HEAP8[c >> 0] = h;
					h = HEAP8[l >> 0] | 0;
					if (!(h << 24 >> 24)) {
						k = g;
						break
					} else
						c = g
				}
			}
			do
				if ((f | 0) == 256)
					if (!(b & 1)) {
						HEAP8[k >> 0] = 101;
						break
					} else {
						HEAP8[k >> 0] = 69;
						break
					}
				else if ((f | 0) == 4)
					if (!(b & 1)) {
						HEAP8[k >> 0] = 102;
						break
					} else {
						HEAP8[k >> 0] = 70;
						break
					}
				else {
					c = (b & 1 | 0) != 0;
					if (d)
						if (c) {
							HEAP8[k >> 0] = 65;
							break
						} else {
							HEAP8[k >> 0] = 97;
							break
						}
					else if (c) {
						HEAP8[k >> 0] = 71;
						break
					} else {
						HEAP8[k >> 0] = 103;
						break
					}
				}
			while (0);
			i = e;
			return j | 0
		}
		function Ro(b, d, e, f, g, h, j) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			var k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0;
			k = i;
			i = i + 16 | 0;
			l = k;
			m = Yr(j, 130776) | 0;
			n = Yr(j, 130920) | 0;
			rc[c[(HEAP32[n >> 2] | 0) + 20 >> 2] & 127](l, n);
			HEAP32[h >> 2] = f;
			j = HEAP8[b >> 0] | 0;
			if (j << 24 >> 24 == 43 | j << 24 >> 24 == 45) {
				o = Cc[c[(HEAP32[m >> 2] | 0) + 28 >> 2] & 31](m, j) | 0;
				j = HEAP32[h >> 2] | 0;
				HEAP32[h >> 2] = j + 1;
				HEAP8[j >> 0] = o;
				p = b + 1 | 0
			} else
				p = b;
			o = e;
			a: do
				if (((o - p | 0) > 1 ? (HEAP8[p >> 0] | 0) == 48 : 0) ? (j = p + 1 | 0, q = HEAP8[j >> 0] | 0, q << 24 >> 24 == 88 | q << 24 >> 24 == 120) : 0) {
					q = Cc[c[(HEAP32[m >> 2] | 0) + 28 >> 2] & 31](m, 48) | 0;
					r = HEAP32[h >> 2] | 0;
					HEAP32[h >> 2] = r + 1;
					HEAP8[r >> 0] = q;
					q = p + 2 | 0;
					r = Cc[c[(HEAP32[m >> 2] | 0) + 28 >> 2] & 31](m, HEAP8[j >> 0] | 0) | 0;
					j = HEAP32[h >> 2] | 0;
					HEAP32[h >> 2] = j + 1;
					HEAP8[j >> 0] = r;
					if (q >>> 0 < e >>> 0) {
						r = q;
						while (1) {
							j = HEAP8[r >> 0] | 0;
							s = r + 1 | 0;
							if (!(dw(j << 24 >> 24, ko() | 0) | 0)) {
								t = q;
								u = r;
								break a
							}
							if (s >>> 0 < e >>> 0)
								r = s;
							else {
								t = q;
								u = s;
								break
							}
						}
					} else {
						t = q;
						u = q
					}
				} else
					v = 4;
			while (0);
			b: do
				if ((v | 0) == 4)
					if (p >>> 0 < e >>> 0) {
						r = p;
						while (1) {
							s = HEAP8[r >> 0] | 0;
							j = r + 1 | 0;
							if (!(cw(s << 24 >> 24, ko() | 0) | 0)) {
								t = p;
								u = r;
								break b
							}
							if (j >>> 0 < e >>> 0)
								r = j;
							else {
								t = p;
								u = j;
								break
							}
						}
					} else {
						t = p;
						u = p
					}
			while (0);
			p = HEAP8[l >> 0] | 0;
			if (!(p & 1))
				w = (p & 255) >>> 1;
			else
				w = HEAP32[l + 4 >> 2] | 0;
			if (w) {
				if ((t | 0) != (u | 0) ? (w = u + -1 | 0, w >>> 0 > t >>> 0) : 0) {
					p = t;
					v = w;
					do {
						w = HEAP8[p >> 0] | 0;
						HEAP8[p >> 0] = HEAP8[v >> 0] | 0;
						HEAP8[v >> 0] = w;
						p = p + 1 | 0;
						v = v + -1 | 0
					} while (p >>> 0 < v >>> 0)
				}
				v = tc[c[(HEAP32[n >> 2] | 0) + 16 >> 2] & 127](n) | 0;
				if (t >>> 0 < u >>> 0) {
					p = l + 1 | 0;
					w = l + 4 | 0;
					r = l + 8 | 0;
					q = 0;
					j = 0;
					s = t;
					while (1) {
						x = (HEAP8[l >> 0] & 1) == 0;
						if ((a[(x ? p : HEAP32[r >> 2] | 0) + j >> 0] | 0) > 0 ? (q | 0) == (a[(x ? p : HEAP32[r >> 2] | 0) + j >> 0] | 0) : 0) {
							x = HEAP32[h >> 2] | 0;
							HEAP32[h >> 2] = x + 1;
							HEAP8[x >> 0] = v;
							x = HEAP8[l >> 0] | 0;
							if (!(x & 1))
								y = (x & 255) >>> 1;
							else
								y = HEAP32[w >> 2] | 0;
							z = 0;
							A = (j >>> 0 < (y + -1 | 0) >>> 0 & 1) + j | 0
						} else {
							z = q;
							A = j
						}
						x = Cc[c[(HEAP32[m >> 2] | 0) + 28 >> 2] & 31](m, HEAP8[s >> 0] | 0) | 0;
						B = HEAP32[h >> 2] | 0;
						HEAP32[h >> 2] = B + 1;
						HEAP8[B >> 0] = x;
						s = s + 1 | 0;
						if (s >>> 0 >= u >>> 0)
							break;
						else {
							q = z + 1 | 0;
							j = A
						}
					}
				}
				A = f + (t - b) | 0;
				j = HEAP32[h >> 2] | 0;
				if ((A | 0) != (j | 0) ? (z = j + -1 | 0, z >>> 0 > A >>> 0) : 0) {
					j = A;
					A = z;
					do {
						z = HEAP8[j >> 0] | 0;
						HEAP8[j >> 0] = HEAP8[A >> 0] | 0;
						HEAP8[A >> 0] = z;
						j = j + 1 | 0;
						A = A + -1 | 0
					} while (j >>> 0 < A >>> 0)
				}
			} else {
				zc[c[(HEAP32[m >> 2] | 0) + 32 >> 2] & 15](m, t, u, HEAP32[h >> 2] | 0) | 0;
				HEAP32[h >> 2] = (HEAP32[h >> 2] | 0) + (u - t)
			}
			c: do
				if (u >>> 0 < e >>> 0) {
					t = u;
					while (1) {
						A = HEAP8[t >> 0] | 0;
						if (A << 24 >> 24 == 46)
							break;
						j = Cc[c[(HEAP32[m >> 2] | 0) + 28 >> 2] & 31](m, A) | 0;
						A = HEAP32[h >> 2] | 0;
						HEAP32[h >> 2] = A + 1;
						HEAP8[A >> 0] = j;
						j = t + 1 | 0;
						if (j >>> 0 < e >>> 0)
							t = j;
						else {
							C = j;
							break c
						}
					}
					j = tc[c[(HEAP32[n >> 2] | 0) + 12 >> 2] & 127](n) | 0;
					A = HEAP32[h >> 2] | 0;
					HEAP32[h >> 2] = A + 1;
					HEAP8[A >> 0] = j;
					C = t + 1 | 0
				} else
					C = u;
			while (0);
			zc[c[(HEAP32[m >> 2] | 0) + 32 >> 2] & 15](m, C, e, HEAP32[h >> 2] | 0) | 0;
			m = (HEAP32[h >> 2] | 0) + (o - C) | 0;
			HEAP32[h >> 2] = m;
			if ((d | 0) == (e | 0)) {
				D = m;
				HEAP32[g >> 2] = D;
				bm(l);
				i = k;
				return
			}
			D = f + (d - b) | 0;
			HEAP32[g >> 2] = D;
			bm(l);
			i = k;
			return
		}
		function So(a, b, d, e, f, g) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = +g;
			var j = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0;
			b = i;
			i = i + 144 | 0;
			j = b + 8 | 0;
			l = b;
			m = b + 102 | 0;
			n = b + 40 | 0;
			o = b + 44 | 0;
			p = b + 36 | 0;
			q = b + 32 | 0;
			r = b + 28 | 0;
			s = b + 24 | 0;
			t = b + 20 | 0;
			u = l;
			HEAP32[u >> 2] = 37;
			HEAP32[u + 4 >> 2] = 0;
			u = Qo(l + 1 | 0, 129496, HEAP32[e + 4 >> 2] | 0) | 0;
			HEAP32[n >> 2] = m;
			v = ko() | 0;
			if (u) {
				HEAP32[j >> 2] = HEAP32[e + 8 >> 2];
				w = j + 4 | 0;
				HEAPF64[k >> 3] = g;
				HEAP32[w >> 2] = HEAP32[k >> 2];
				HEAP32[w + 4 >> 2] = HEAP32[k + 4 >> 2];
				x = Iu(m, 30, v, l, j) | 0
			} else {
				HEAPF64[k >> 3] = g;
				HEAP32[j >> 2] = HEAP32[k >> 2];
				HEAP32[j + 4 >> 2] = HEAP32[k + 4 >> 2];
				x = Iu(m, 30, v, l, j) | 0
			}
			if ((x | 0) > 29) {
				v = ko() | 0;
				if (u) {
					HEAP32[j >> 2] = HEAP32[e + 8 >> 2];
					u = j + 4 | 0;
					HEAPF64[k >> 3] = g;
					HEAP32[u >> 2] = HEAP32[k >> 2];
					HEAP32[u + 4 >> 2] = HEAP32[k + 4 >> 2];
					y = Ku(n, v, l, j) | 0
				} else {
					HEAPF64[k >> 3] = g;
					HEAP32[j >> 2] = HEAP32[k >> 2];
					HEAP32[j + 4 >> 2] = HEAP32[k + 4 >> 2];
					y = Ku(n, v, l, j) | 0
				}
				l = HEAP32[n >> 2] | 0;
				if (!l)
					qx();
				else {
					z = l;
					A = l;
					B = y
				}
			} else {
				z = HEAP32[n >> 2] | 0;
				A = 0;
				B = x
			}
			x = z + B | 0;
			n = Ko(z, x, e) | 0;
			if ((z | 0) != (m | 0)) {
				y = vx(B << 1) | 0;
				if (!y)
					qx();
				else {
					C = z;
					D = y;
					E = y
				}
			} else {
				C = m;
				D = 0;
				E = o
			}
			Am(r, e);
			Ro(C, n, x, E, p, q, r);
			Jl(HEAP32[r >> 2] | 0) | 0;
			HEAP32[t >> 2] = HEAP32[d >> 2];
			d = HEAP32[p >> 2] | 0;
			p = HEAP32[q >> 2] | 0;
			HEAP32[j + 0 >> 2] = HEAP32[t + 0 >> 2];
			Ju(s, j, E, d, p, e, f);
			HEAP32[a >> 2] = HEAP32[s >> 2];
			wx(D);
			wx(A);
			i = b;
			return
		}
		function To(b, d, e, f, g, h) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			var j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0;
			d = i;
			i = i + 80 | 0;
			j = d;
			k = d + 72 | 0;
			l = d + 52 | 0;
			m = d + 12 | 0;
			n = d + 8 | 0;
			o = d + 4 | 0;
			HEAP8[k + 0 >> 0] = HEAP8[129576] | 0;
			HEAP8[k + 1 >> 0] = HEAP8[129577] | 0;
			HEAP8[k + 2 >> 0] = HEAP8[129578] | 0;
			HEAP8[k + 3 >> 0] = HEAP8[129579] | 0;
			HEAP8[k + 4 >> 0] = HEAP8[129580] | 0;
			HEAP8[k + 5 >> 0] = HEAP8[129581] | 0;
			p = ko() | 0;
			HEAP32[j >> 2] = h;
			h = Iu(l, 20, p, k, j) | 0;
			k = l + h | 0;
			p = Ko(l, k, f) | 0;
			Am(n, f);
			q = Yr(n, 130776) | 0;
			Jl(HEAP32[n >> 2] | 0) | 0;
			zc[c[(HEAP32[q >> 2] | 0) + 32 >> 2] & 15](q, l, k, m) | 0;
			q = m + h | 0;
			if ((p | 0) == (k | 0))
				r = q;
			else
				r = m + (p - l) | 0;
			HEAP32[o >> 2] = HEAP32[e >> 2];
			HEAP32[j + 0 >> 2] = HEAP32[o + 0 >> 2];
			Ju(b, j, m, r, q, f, g);
			i = d;
			return
		}
		function Uo(a) {
			a = a | 0;
			var b = 0;
			b = i;
			kl(a);
			i = b;
			return
		}
		function Vo(a) {
			a = a | 0;
			return
		}
		function Wo(b, d, e, f, g, h) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			var j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0;
			j = i;
			i = i + 32 | 0;
			k = j + 20 | 0;
			l = j + 16 | 0;
			m = j + 12 | 0;
			n = j;
			if (!(HEAP32[f + 4 >> 2] & 1)) {
				o = HEAP32[(HEAP32[d >> 2] | 0) + 24 >> 2] | 0;
				HEAP32[l >> 2] = HEAP32[e >> 2];
				HEAP32[k + 0 >> 2] = HEAP32[l + 0 >> 2];
				Bc[o & 31](b, d, k, f, g, h & 1);
				i = j;
				return
			}
			Am(m, f);
			f = Yr(m, 130928) | 0;
			Jl(HEAP32[m >> 2] | 0) | 0;
			m = HEAP32[f >> 2] | 0;
			if (h)
				rc[HEAP32[m + 24 >> 2] & 127](n, f);
			else
				rc[HEAP32[m + 28 >> 2] & 127](n, f);
			f = HEAP8[n >> 0] | 0;
			if (!(f & 1)) {
				m = n + 4 | 0;
				p = m;
				q = n + 8 | 0;
				r = m
			} else {
				m = n + 8 | 0;
				p = HEAP32[m >> 2] | 0;
				q = m;
				r = n + 4 | 0
			}
			m = f;
			f = p;
			while (1) {
				if (!(m & 1)) {
					s = r;
					t = (m & 255) >>> 1
				} else {
					s = HEAP32[q >> 2] | 0;
					t = HEAP32[r >> 2] | 0
				}
				if ((f | 0) == (s + (t << 2) | 0))
					break;
				p = HEAP32[f >> 2] | 0;
				h = HEAP32[e >> 2] | 0;
				if (h) {
					g = h + 24 | 0;
					k = HEAP32[g >> 2] | 0;
					if ((k | 0) == (HEAP32[h + 28 >> 2] | 0))
						u = Cc[c[(HEAP32[h >> 2] | 0) + 52 >> 2] & 31](h, p) | 0;
					else {
						HEAP32[g >> 2] = k + 4;
						HEAP32[k >> 2] = p;
						u = p
					}
					if ((u | 0) == -1)
						HEAP32[e >> 2] = 0
				}
				m = HEAP8[n >> 0] | 0;
				f = f + 4 | 0
			}
			HEAP32[b >> 2] = HEAP32[e >> 2];
			pm(n);
			i = j;
			return
		}
		function Xo(b, d, e, f, g, h) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			var j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0;
			d = i;
			i = i + 128 | 0;
			j = d;
			k = d + 116 | 0;
			l = d + 104 | 0;
			m = d + 20 | 0;
			n = d + 16 | 0;
			o = d + 12 | 0;
			p = d + 8 | 0;
			q = d + 4 | 0;
			HEAP8[k + 0 >> 0] = HEAP8[129568] | 0;
			HEAP8[k + 1 >> 0] = HEAP8[129569] | 0;
			HEAP8[k + 2 >> 0] = HEAP8[129570] | 0;
			HEAP8[k + 3 >> 0] = HEAP8[129571] | 0;
			HEAP8[k + 4 >> 0] = HEAP8[129572] | 0;
			HEAP8[k + 5 >> 0] = HEAP8[129573] | 0;
			Jo(k + 1 | 0, 129472, 1, HEAP32[f + 4 >> 2] | 0);
			r = ko() | 0;
			HEAP32[j >> 2] = h;
			h = l + (Iu(l, 12, r, k, j) | 0) | 0;
			k = Ko(l, h, f) | 0;
			Am(p, f);
			Yo(l, k, h, m, n, o, p);
			Jl(HEAP32[p >> 2] | 0) | 0;
			HEAP32[q >> 2] = HEAP32[e >> 2];
			e = HEAP32[n >> 2] | 0;
			n = HEAP32[o >> 2] | 0;
			HEAP32[j + 0 >> 2] = HEAP32[q + 0 >> 2];
			Lu(b, j, m, e, n, f, g);
			i = d;
			return
		}
		function Yo(b, d, e, f, g, h, j) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			var k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0;
			k = i;
			i = i + 16 | 0;
			l = k;
			m = Yr(j, 130768) | 0;
			n = Yr(j, 130928) | 0;
			rc[c[(HEAP32[n >> 2] | 0) + 20 >> 2] & 127](l, n);
			j = HEAP8[l >> 0] | 0;
			if (!(j & 1))
				o = (j & 255) >>> 1;
			else
				o = HEAP32[l + 4 >> 2] | 0;
			if (o) {
				HEAP32[h >> 2] = f;
				o = HEAP8[b >> 0] | 0;
				if (o << 24 >> 24 == 43 | o << 24 >> 24 == 45) {
					j = Cc[c[(HEAP32[m >> 2] | 0) + 44 >> 2] & 31](m, o) | 0;
					o = HEAP32[h >> 2] | 0;
					HEAP32[h >> 2] = o + 4;
					HEAP32[o >> 2] = j;
					p = b + 1 | 0
				} else
					p = b;
				if (((e - p | 0) > 1 ? (HEAP8[p >> 0] | 0) == 48 : 0) ? (j = p + 1 | 0, o = HEAP8[j >> 0] | 0, o << 24 >> 24 == 88 | o << 24 >> 24 == 120) : 0) {
					o = Cc[c[(HEAP32[m >> 2] | 0) + 44 >> 2] & 31](m, 48) | 0;
					q = HEAP32[h >> 2] | 0;
					HEAP32[h >> 2] = q + 4;
					HEAP32[q >> 2] = o;
					o = Cc[c[(HEAP32[m >> 2] | 0) + 44 >> 2] & 31](m, HEAP8[j >> 0] | 0) | 0;
					j = HEAP32[h >> 2] | 0;
					HEAP32[h >> 2] = j + 4;
					HEAP32[j >> 2] = o;
					r = p + 2 | 0
				} else
					r = p;
				if ((r | 0) != (e | 0) ? (p = e + -1 | 0, p >>> 0 > r >>> 0) : 0) {
					o = r;
					j = p;
					do {
						p = HEAP8[o >> 0] | 0;
						HEAP8[o >> 0] = HEAP8[j >> 0] | 0;
						HEAP8[j >> 0] = p;
						o = o + 1 | 0;
						j = j + -1 | 0
					} while (o >>> 0 < j >>> 0)
				}
				j = tc[c[(HEAP32[n >> 2] | 0) + 16 >> 2] & 127](n) | 0;
				if (r >>> 0 < e >>> 0) {
					n = l + 1 | 0;
					o = l + 4 | 0;
					p = l + 8 | 0;
					q = 0;
					s = 0;
					t = r;
					while (1) {
						u = (HEAP8[l >> 0] & 1) == 0;
						if ((a[(u ? n : HEAP32[p >> 2] | 0) + s >> 0] | 0) != 0 ? (q | 0) == (a[(u ? n : HEAP32[p >> 2] | 0) + s >> 0] | 0) : 0) {
							u = HEAP32[h >> 2] | 0;
							HEAP32[h >> 2] = u + 4;
							HEAP32[u >> 2] = j;
							u = HEAP8[l >> 0] | 0;
							if (!(u & 1))
								v = (u & 255) >>> 1;
							else
								v = HEAP32[o >> 2] | 0;
							w = 0;
							x = (s >>> 0 < (v + -1 | 0) >>> 0 & 1) + s | 0
						} else {
							w = q;
							x = s
						}
						u = Cc[c[(HEAP32[m >> 2] | 0) + 44 >> 2] & 31](m, HEAP8[t >> 0] | 0) | 0;
						y = HEAP32[h >> 2] | 0;
						z = y + 4 | 0;
						HEAP32[h >> 2] = z;
						HEAP32[y >> 2] = u;
						t = t + 1 | 0;
						if (t >>> 0 >= e >>> 0) {
							A = z;
							break
						} else {
							q = w + 1 | 0;
							s = x
						}
					}
				} else
					A = HEAP32[h >> 2] | 0;
				x = f + (r - b << 2) | 0;
				if ((x | 0) != (A | 0) ? (r = A + -4 | 0, r >>> 0 > x >>> 0) : 0) {
					s = x;
					x = r;
					do {
						r = HEAP32[s >> 2] | 0;
						HEAP32[s >> 2] = HEAP32[x >> 2];
						HEAP32[x >> 2] = r;
						s = s + 4 | 0;
						x = x + -4 | 0
					} while (s >>> 0 < x >>> 0);
					B = A
				} else
					B = A
			} else {
				zc[c[(HEAP32[m >> 2] | 0) + 48 >> 2] & 15](m, b, e, f) | 0;
				m = f + (e - b << 2) | 0;
				HEAP32[h >> 2] = m;
				B = m
			}
			if ((d | 0) == (e | 0)) {
				C = B;
				HEAP32[g >> 2] = C;
				bm(l);
				i = k;
				return
			}
			C = f + (d - b << 2) | 0;
			HEAP32[g >> 2] = C;
			bm(l);
			i = k;
			return
		}
		function Zo(a, b, d, e, f, g, h) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			var j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0;
			b = i;
			i = i + 224 | 0;
			j = b + 8 | 0;
			k = b;
			l = b + 196 | 0;
			m = b + 32 | 0;
			n = b + 28 | 0;
			o = b + 24 | 0;
			p = b + 20 | 0;
			q = b + 16 | 0;
			r = k;
			HEAP32[r >> 2] = 37;
			HEAP32[r + 4 >> 2] = 0;
			Jo(k + 1 | 0, 129480, 1, HEAP32[e + 4 >> 2] | 0);
			r = ko() | 0;
			s = j;
			HEAP32[s >> 2] = g;
			HEAP32[s + 4 >> 2] = h;
			h = l + (Iu(l, 22, r, k, j) | 0) | 0;
			k = Ko(l, h, e) | 0;
			Am(p, e);
			Yo(l, k, h, m, n, o, p);
			Jl(HEAP32[p >> 2] | 0) | 0;
			HEAP32[q >> 2] = HEAP32[d >> 2];
			d = HEAP32[n >> 2] | 0;
			n = HEAP32[o >> 2] | 0;
			HEAP32[j + 0 >> 2] = HEAP32[q + 0 >> 2];
			Lu(a, j, m, d, n, e, f);
			i = b;
			return
		}
		function _o(b, d, e, f, g, h) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			var j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0;
			d = i;
			i = i + 128 | 0;
			j = d;
			k = d + 116 | 0;
			l = d + 104 | 0;
			m = d + 20 | 0;
			n = d + 16 | 0;
			o = d + 12 | 0;
			p = d + 8 | 0;
			q = d + 4 | 0;
			HEAP8[k + 0 >> 0] = HEAP8[129568] | 0;
			HEAP8[k + 1 >> 0] = HEAP8[129569] | 0;
			HEAP8[k + 2 >> 0] = HEAP8[129570] | 0;
			HEAP8[k + 3 >> 0] = HEAP8[129571] | 0;
			HEAP8[k + 4 >> 0] = HEAP8[129572] | 0;
			HEAP8[k + 5 >> 0] = HEAP8[129573] | 0;
			Jo(k + 1 | 0, 129472, 0, HEAP32[f + 4 >> 2] | 0);
			r = ko() | 0;
			HEAP32[j >> 2] = h;
			h = l + (Iu(l, 12, r, k, j) | 0) | 0;
			k = Ko(l, h, f) | 0;
			Am(p, f);
			Yo(l, k, h, m, n, o, p);
			Jl(HEAP32[p >> 2] | 0) | 0;
			HEAP32[q >> 2] = HEAP32[e >> 2];
			e = HEAP32[n >> 2] | 0;
			n = HEAP32[o >> 2] | 0;
			HEAP32[j + 0 >> 2] = HEAP32[q + 0 >> 2];
			Lu(b, j, m, e, n, f, g);
			i = d;
			return
		}
		function $o(a, b, d, e, f, g, h) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			var j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0;
			b = i;
			i = i + 240 | 0;
			j = b + 8 | 0;
			k = b;
			l = b + 204 | 0;
			m = b + 32 | 0;
			n = b + 28 | 0;
			o = b + 24 | 0;
			p = b + 20 | 0;
			q = b + 16 | 0;
			r = k;
			HEAP32[r >> 2] = 37;
			HEAP32[r + 4 >> 2] = 0;
			Jo(k + 1 | 0, 129480, 0, HEAP32[e + 4 >> 2] | 0);
			r = ko() | 0;
			s = j;
			HEAP32[s >> 2] = g;
			HEAP32[s + 4 >> 2] = h;
			h = l + (Iu(l, 23, r, k, j) | 0) | 0;
			k = Ko(l, h, e) | 0;
			Am(p, e);
			Yo(l, k, h, m, n, o, p);
			Jl(HEAP32[p >> 2] | 0) | 0;
			HEAP32[q >> 2] = HEAP32[d >> 2];
			d = HEAP32[n >> 2] | 0;
			n = HEAP32[o >> 2] | 0;
			HEAP32[j + 0 >> 2] = HEAP32[q + 0 >> 2];
			Lu(a, j, m, d, n, e, f);
			i = b;
			return
		}
		function ap(a, b, d, e, f, g) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = +g;
			var j = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0;
			b = i;
			i = i + 304 | 0;
			j = b + 8 | 0;
			l = b;
			m = b + 272 | 0;
			n = b + 268 | 0;
			o = b + 40 | 0;
			p = b + 36 | 0;
			q = b + 32 | 0;
			r = b + 28 | 0;
			s = b + 24 | 0;
			t = b + 20 | 0;
			u = l;
			HEAP32[u >> 2] = 37;
			HEAP32[u + 4 >> 2] = 0;
			u = Qo(l + 1 | 0, 129488, HEAP32[e + 4 >> 2] | 0) | 0;
			HEAP32[n >> 2] = m;
			v = ko() | 0;
			if (u) {
				HEAP32[j >> 2] = HEAP32[e + 8 >> 2];
				u = j + 4 | 0;
				HEAPF64[k >> 3] = g;
				HEAP32[u >> 2] = HEAP32[k >> 2];
				HEAP32[u + 4 >> 2] = HEAP32[k + 4 >> 2];
				w = Iu(m, 30, v, l, j) | 0
			} else {
				HEAPF64[k >> 3] = g;
				HEAP32[j >> 2] = HEAP32[k >> 2];
				HEAP32[j + 4 >> 2] = HEAP32[k + 4 >> 2];
				w = Iu(m, 30, v, l, j) | 0
			}
			if ((w | 0) > 29) {
				v = ko() | 0;
				HEAP32[j >> 2] = HEAP32[e + 8 >> 2];
				u = j + 4 | 0;
				HEAPF64[k >> 3] = g;
				HEAP32[u >> 2] = HEAP32[k >> 2];
				HEAP32[u + 4 >> 2] = HEAP32[k + 4 >> 2];
				u = Ku(n, v, l, j) | 0;
				l = HEAP32[n >> 2] | 0;
				if (!l)
					qx();
				else {
					x = l;
					y = l;
					z = u
				}
			} else {
				x = HEAP32[n >> 2] | 0;
				y = 0;
				z = w
			}
			w = x + z | 0;
			n = Ko(x, w, e) | 0;
			if ((x | 0) != (m | 0)) {
				u = vx(z << 3) | 0;
				if (!u)
					qx();
				else {
					A = x;
					B = u;
					C = u
				}
			} else {
				A = m;
				B = 0;
				C = o
			}
			Am(r, e);
			bp(A, n, w, C, p, q, r);
			Jl(HEAP32[r >> 2] | 0) | 0;
			HEAP32[t >> 2] = HEAP32[d >> 2];
			r = HEAP32[p >> 2] | 0;
			p = HEAP32[q >> 2] | 0;
			HEAP32[j + 0 >> 2] = HEAP32[t + 0 >> 2];
			Lu(s, j, C, r, p, e, f);
			f = HEAP32[s >> 2] | 0;
			HEAP32[d >> 2] = f;
			HEAP32[a >> 2] = f;
			if (!B) {
				wx(y);
				i = b;
				return
			}
			wx(B);
			wx(y);
			i = b;
			return
		}
		function bp(b, d, e, f, g, h, j) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			var k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0;
			k = i;
			i = i + 16 | 0;
			l = k;
			m = Yr(j, 130768) | 0;
			n = Yr(j, 130928) | 0;
			rc[c[(HEAP32[n >> 2] | 0) + 20 >> 2] & 127](l, n);
			HEAP32[h >> 2] = f;
			j = HEAP8[b >> 0] | 0;
			if (j << 24 >> 24 == 43 | j << 24 >> 24 == 45) {
				o = Cc[c[(HEAP32[m >> 2] | 0) + 44 >> 2] & 31](m, j) | 0;
				j = HEAP32[h >> 2] | 0;
				HEAP32[h >> 2] = j + 4;
				HEAP32[j >> 2] = o;
				p = b + 1 | 0
			} else
				p = b;
			o = e;
			a: do
				if (((o - p | 0) > 1 ? (HEAP8[p >> 0] | 0) == 48 : 0) ? (j = p + 1 | 0, q = HEAP8[j >> 0] | 0, q << 24 >> 24 == 88 | q << 24 >> 24 == 120) : 0) {
					q = Cc[c[(HEAP32[m >> 2] | 0) + 44 >> 2] & 31](m, 48) | 0;
					r = HEAP32[h >> 2] | 0;
					HEAP32[h >> 2] = r + 4;
					HEAP32[r >> 2] = q;
					q = p + 2 | 0;
					r = Cc[c[(HEAP32[m >> 2] | 0) + 44 >> 2] & 31](m, HEAP8[j >> 0] | 0) | 0;
					j = HEAP32[h >> 2] | 0;
					HEAP32[h >> 2] = j + 4;
					HEAP32[j >> 2] = r;
					if (q >>> 0 < e >>> 0) {
						r = q;
						while (1) {
							j = HEAP8[r >> 0] | 0;
							s = r + 1 | 0;
							if (!(dw(j << 24 >> 24, ko() | 0) | 0)) {
								t = q;
								u = r;
								break a
							}
							if (s >>> 0 < e >>> 0)
								r = s;
							else {
								t = q;
								u = s;
								break
							}
						}
					} else {
						t = q;
						u = q
					}
				} else
					v = 4;
			while (0);
			b: do
				if ((v | 0) == 4)
					if (p >>> 0 < e >>> 0) {
						r = p;
						while (1) {
							s = HEAP8[r >> 0] | 0;
							j = r + 1 | 0;
							if (!(cw(s << 24 >> 24, ko() | 0) | 0)) {
								t = p;
								u = r;
								break b
							}
							if (j >>> 0 < e >>> 0)
								r = j;
							else {
								t = p;
								u = j;
								break
							}
						}
					} else {
						t = p;
						u = p
					}
			while (0);
			p = HEAP8[l >> 0] | 0;
			if (!(p & 1))
				w = (p & 255) >>> 1;
			else
				w = HEAP32[l + 4 >> 2] | 0;
			if (w) {
				if ((t | 0) != (u | 0) ? (w = u + -1 | 0, w >>> 0 > t >>> 0) : 0) {
					p = t;
					v = w;
					do {
						w = HEAP8[p >> 0] | 0;
						HEAP8[p >> 0] = HEAP8[v >> 0] | 0;
						HEAP8[v >> 0] = w;
						p = p + 1 | 0;
						v = v + -1 | 0
					} while (p >>> 0 < v >>> 0)
				}
				v = tc[c[(HEAP32[n >> 2] | 0) + 16 >> 2] & 127](n) | 0;
				if (t >>> 0 < u >>> 0) {
					p = l + 1 | 0;
					w = l + 4 | 0;
					r = l + 8 | 0;
					q = 0;
					j = 0;
					s = t;
					while (1) {
						x = (HEAP8[l >> 0] & 1) == 0;
						if ((a[(x ? p : HEAP32[r >> 2] | 0) + j >> 0] | 0) > 0 ? (q | 0) == (a[(x ? p : HEAP32[r >> 2] | 0) + j >> 0] | 0) : 0) {
							x = HEAP32[h >> 2] | 0;
							HEAP32[h >> 2] = x + 4;
							HEAP32[x >> 2] = v;
							x = HEAP8[l >> 0] | 0;
							if (!(x & 1))
								y = (x & 255) >>> 1;
							else
								y = HEAP32[w >> 2] | 0;
							z = 0;
							A = (j >>> 0 < (y + -1 | 0) >>> 0 & 1) + j | 0
						} else {
							z = q;
							A = j
						}
						x = Cc[c[(HEAP32[m >> 2] | 0) + 44 >> 2] & 31](m, HEAP8[s >> 0] | 0) | 0;
						B = HEAP32[h >> 2] | 0;
						C = B + 4 | 0;
						HEAP32[h >> 2] = C;
						HEAP32[B >> 2] = x;
						s = s + 1 | 0;
						if (s >>> 0 >= u >>> 0) {
							D = C;
							break
						} else {
							q = z + 1 | 0;
							j = A
						}
					}
				} else
					D = HEAP32[h >> 2] | 0;
				A = f + (t - b << 2) | 0;
				if ((A | 0) != (D | 0) ? (j = D + -4 | 0, j >>> 0 > A >>> 0) : 0) {
					z = A;
					A = j;
					do {
						j = HEAP32[z >> 2] | 0;
						HEAP32[z >> 2] = HEAP32[A >> 2];
						HEAP32[A >> 2] = j;
						z = z + 4 | 0;
						A = A + -4 | 0
					} while (z >>> 0 < A >>> 0);
					E = D
				} else
					E = D
			} else {
				zc[c[(HEAP32[m >> 2] | 0) + 48 >> 2] & 15](m, t, u, HEAP32[h >> 2] | 0) | 0;
				D = (HEAP32[h >> 2] | 0) + (u - t << 2) | 0;
				HEAP32[h >> 2] = D;
				E = D
			}
			c: do
				if (u >>> 0 < e >>> 0) {
					D = u;
					while (1) {
						t = HEAP8[D >> 0] | 0;
						if (t << 24 >> 24 == 46)
							break;
						A = Cc[c[(HEAP32[m >> 2] | 0) + 44 >> 2] & 31](m, t) | 0;
						t = HEAP32[h >> 2] | 0;
						z = t + 4 | 0;
						HEAP32[h >> 2] = z;
						HEAP32[t >> 2] = A;
						A = D + 1 | 0;
						if (A >>> 0 < e >>> 0)
							D = A;
						else {
							F = z;
							G = A;
							break c
						}
					}
					A = tc[c[(HEAP32[n >> 2] | 0) + 12 >> 2] & 127](n) | 0;
					z = HEAP32[h >> 2] | 0;
					t = z + 4 | 0;
					HEAP32[h >> 2] = t;
					HEAP32[z >> 2] = A;
					F = t;
					G = D + 1 | 0
				} else {
					F = E;
					G = u
				}
			while (0);
			zc[c[(HEAP32[m >> 2] | 0) + 48 >> 2] & 15](m, G, e, F) | 0;
			F = (HEAP32[h >> 2] | 0) + (o - G << 2) | 0;
			HEAP32[h >> 2] = F;
			if ((d | 0) == (e | 0)) {
				H = F;
				HEAP32[g >> 2] = H;
				bm(l);
				i = k;
				return
			}
			H = f + (d - b << 2) | 0;
			HEAP32[g >> 2] = H;
			bm(l);
			i = k;
			return
		}
		function cp(a, b, d, e, f, g) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = +g;
			var j = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0;
			b = i;
			i = i + 304 | 0;
			j = b + 8 | 0;
			l = b;
			m = b + 272 | 0;
			n = b + 268 | 0;
			o = b + 40 | 0;
			p = b + 36 | 0;
			q = b + 32 | 0;
			r = b + 28 | 0;
			s = b + 24 | 0;
			t = b + 20 | 0;
			u = l;
			HEAP32[u >> 2] = 37;
			HEAP32[u + 4 >> 2] = 0;
			u = Qo(l + 1 | 0, 129496, HEAP32[e + 4 >> 2] | 0) | 0;
			HEAP32[n >> 2] = m;
			v = ko() | 0;
			if (u) {
				HEAP32[j >> 2] = HEAP32[e + 8 >> 2];
				w = j + 4 | 0;
				HEAPF64[k >> 3] = g;
				HEAP32[w >> 2] = HEAP32[k >> 2];
				HEAP32[w + 4 >> 2] = HEAP32[k + 4 >> 2];
				x = Iu(m, 30, v, l, j) | 0
			} else {
				HEAPF64[k >> 3] = g;
				HEAP32[j >> 2] = HEAP32[k >> 2];
				HEAP32[j + 4 >> 2] = HEAP32[k + 4 >> 2];
				x = Iu(m, 30, v, l, j) | 0
			}
			if ((x | 0) > 29) {
				v = ko() | 0;
				if (u) {
					HEAP32[j >> 2] = HEAP32[e + 8 >> 2];
					u = j + 4 | 0;
					HEAPF64[k >> 3] = g;
					HEAP32[u >> 2] = HEAP32[k >> 2];
					HEAP32[u + 4 >> 2] = HEAP32[k + 4 >> 2];
					y = Ku(n, v, l, j) | 0
				} else {
					HEAPF64[k >> 3] = g;
					HEAP32[j >> 2] = HEAP32[k >> 2];
					HEAP32[j + 4 >> 2] = HEAP32[k + 4 >> 2];
					y = Ku(n, v, l, j) | 0
				}
				l = HEAP32[n >> 2] | 0;
				if (!l)
					qx();
				else {
					z = l;
					A = l;
					B = y
				}
			} else {
				z = HEAP32[n >> 2] | 0;
				A = 0;
				B = x
			}
			x = z + B | 0;
			n = Ko(z, x, e) | 0;
			if ((z | 0) != (m | 0)) {
				y = vx(B << 3) | 0;
				if (!y)
					qx();
				else {
					C = z;
					D = y;
					E = y
				}
			} else {
				C = m;
				D = 0;
				E = o
			}
			Am(r, e);
			bp(C, n, x, E, p, q, r);
			Jl(HEAP32[r >> 2] | 0) | 0;
			HEAP32[t >> 2] = HEAP32[d >> 2];
			r = HEAP32[p >> 2] | 0;
			p = HEAP32[q >> 2] | 0;
			HEAP32[j + 0 >> 2] = HEAP32[t + 0 >> 2];
			Lu(s, j, E, r, p, e, f);
			f = HEAP32[s >> 2] | 0;
			HEAP32[d >> 2] = f;
			HEAP32[a >> 2] = f;
			if (!D) {
				wx(A);
				i = b;
				return
			}
			wx(D);
			wx(A);
			i = b;
			return
		}
		function dp(b, d, e, f, g, h) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			var j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0;
			d = i;
			i = i + 192 | 0;
			j = d;
			k = d + 180 | 0;
			l = d + 160 | 0;
			m = d + 12 | 0;
			n = d + 8 | 0;
			o = d + 4 | 0;
			HEAP8[k + 0 >> 0] = HEAP8[129576] | 0;
			HEAP8[k + 1 >> 0] = HEAP8[129577] | 0;
			HEAP8[k + 2 >> 0] = HEAP8[129578] | 0;
			HEAP8[k + 3 >> 0] = HEAP8[129579] | 0;
			HEAP8[k + 4 >> 0] = HEAP8[129580] | 0;
			HEAP8[k + 5 >> 0] = HEAP8[129581] | 0;
			p = ko() | 0;
			HEAP32[j >> 2] = h;
			h = Iu(l, 20, p, k, j) | 0;
			k = l + h | 0;
			p = Ko(l, k, f) | 0;
			Am(n, f);
			q = Yr(n, 130768) | 0;
			Jl(HEAP32[n >> 2] | 0) | 0;
			zc[c[(HEAP32[q >> 2] | 0) + 48 >> 2] & 15](q, l, k, m) | 0;
			q = m + (h << 2) | 0;
			if ((p | 0) == (k | 0))
				r = q;
			else
				r = m + (p - l << 2) | 0;
			HEAP32[o >> 2] = HEAP32[e >> 2];
			HEAP32[j + 0 >> 2] = HEAP32[o + 0 >> 2];
			Lu(b, j, m, r, q, f, g);
			i = d;
			return
		}
		function ep(e, f, g, h, j, k, l, m, n) {
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			k = k | 0;
			l = l | 0;
			m = m | 0;
			n = n | 0;
			var o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0,
			O = 0,
			P = 0,
			Q = 0,
			R = 0,
			S = 0,
			T = 0,
			U = 0,
			V = 0,
			W = 0,
			X = 0,
			Y = 0;
			o = i;
			i = i + 32 | 0;
			p = o + 20 | 0;
			q = o + 16 | 0;
			r = o + 12 | 0;
			s = o + 8 | 0;
			t = o + 4 | 0;
			u = o;
			Am(r, j);
			v = Yr(r, 130776) | 0;
			Jl(HEAP32[r >> 2] | 0) | 0;
			HEAP32[k >> 2] = 0;
			a: do
				if ((m | 0) != (n | 0)) {
					r = v + 8 | 0;
					w = m;
					x = 0;
					b: while (1) {
						y = x;
						while (1) {
							if (y) {
								z = 60;
								break a
							}
							A = HEAP32[g >> 2] | 0;
							if (A)
								if ((HEAP32[A + 12 >> 2] | 0) == (HEAP32[A + 16 >> 2] | 0) ? (tc[c[(HEAP32[A >> 2] | 0) + 36 >> 2] & 127](A) | 0) == -1 : 0) {
									HEAP32[g >> 2] = 0;
									B = 0
								} else
									B = A;
							else
								B = 0;
							A = (B | 0) == 0;
							C = HEAP32[h >> 2] | 0;
							do
								if (C) {
									if ((HEAP32[C + 12 >> 2] | 0) == (HEAP32[C + 16 >> 2] | 0) ? (tc[c[(HEAP32[C >> 2] | 0) + 36 >> 2] & 127](C) | 0) == -1 : 0) {
										HEAP32[h >> 2] = 0;
										z = 14;
										break
									}
									if (A)
										D = C;
									else {
										z = 15;
										break b
									}
								} else
									z = 14;
							while (0);
							if ((z | 0) == 14) {
								z = 0;
								if (A) {
									z = 15;
									break b
								} else
									D = 0
							}
							if ((mc[c[(HEAP32[v >> 2] | 0) + 36 >> 2] & 31](v, HEAP8[w >> 0] | 0, 0) | 0) << 24 >> 24 == 37) {
								z = 17;
								break
							}
							C = HEAP8[w >> 0] | 0;
							if (C << 24 >> 24 > -1 ? (E = HEAP32[r >> 2] | 0, (HEAP16[E + (C << 24 >> 24 << 1) >> 1] & 8192) != 0) : 0) {
								F = w;
								z = 28;
								break
							}
							G = B + 12 | 0;
							C = HEAP32[G >> 2] | 0;
							H = B + 16 | 0;
							if ((C | 0) == (HEAP32[H >> 2] | 0))
								I = tc[c[(HEAP32[B >> 2] | 0) + 36 >> 2] & 127](B) | 0;
							else
								I = HEAPU8[C >> 0] | 0;
							C = Cc[c[(HEAP32[v >> 2] | 0) + 12 >> 2] & 31](v, I & 255) | 0;
							if (C << 24 >> 24 == (Cc[c[(HEAP32[v >> 2] | 0) + 12 >> 2] & 31](v, HEAP8[w >> 0] | 0) | 0) << 24 >> 24) {
								z = 55;
								break
							}
							HEAP32[k >> 2] = 4;
							y = 4
						}
						c: do
							if ((z | 0) == 17) {
								z = 0;
								y = w + 1 | 0;
								if ((y | 0) == (n | 0)) {
									z = 18;
									break b
								}
								C = mc[c[(HEAP32[v >> 2] | 0) + 36 >> 2] & 31](v, HEAP8[y >> 0] | 0, 0) | 0;
								if (C << 24 >> 24 == 48 | C << 24 >> 24 == 69) {
									J = w + 2 | 0;
									if ((J | 0) == (n | 0)) {
										z = 21;
										break b
									}
									K = J;
									L = mc[c[(HEAP32[v >> 2] | 0) + 36 >> 2] & 31](v, HEAP8[J >> 0] | 0, 0) | 0;
									M = C
								} else {
									K = y;
									L = C;
									M = 0
								}
								C = HEAP32[(HEAP32[f >> 2] | 0) + 36 >> 2] | 0;
								HEAP32[t >> 2] = B;
								HEAP32[u >> 2] = D;
								HEAP32[q + 0 >> 2] = HEAP32[t + 0 >> 2];
								HEAP32[p + 0 >> 2] = HEAP32[u + 0 >> 2];
								sc[C & 3](s, f, q, p, j, k, l, L, M);
								HEAP32[g >> 2] = HEAP32[s >> 2];
								N = K + 1 | 0
							} else if ((z | 0) == 28) {
								while (1) {
									z = 0;
									C = F + 1 | 0;
									if ((C | 0) == (n | 0)) {
										O = n;
										break
									}
									y = HEAP8[C >> 0] | 0;
									if (y << 24 >> 24 <= -1) {
										O = C;
										break
									}
									if (!(HEAP16[E + (y << 24 >> 24 << 1) >> 1] & 8192)) {
										O = C;
										break
									} else {
										F = C;
										z = 28
									}
								}
								A = B;
								C = D;
								y = D;
								while (1) {
									if (A)
										if ((HEAP32[A + 12 >> 2] | 0) == (HEAP32[A + 16 >> 2] | 0) ? (tc[c[(HEAP32[A >> 2] | 0) + 36 >> 2] & 127](A) | 0) == -1 : 0) {
											HEAP32[g >> 2] = 0;
											P = 0
										} else
											P = A;
									else
										P = 0;
									J = (P | 0) == 0;
									do
										if (y) {
											if ((HEAP32[y + 12 >> 2] | 0) != (HEAP32[y + 16 >> 2] | 0))
												if (J) {
													Q = C;
													R = y;
													break
												} else {
													N = O;
													break c
												}
											if ((tc[c[(HEAP32[y >> 2] | 0) + 36 >> 2] & 127](y) | 0) != -1)
												if (J ^ (C | 0) == 0) {
													Q = C;
													R = C;
													break
												} else {
													N = O;
													break c
												}
											else {
												HEAP32[h >> 2] = 0;
												S = 0;
												z = 41;
												break
											}
										} else {
											S = C;
											z = 41
										}
									while (0);
									if ((z | 0) == 41) {
										z = 0;
										if (J) {
											N = O;
											break c
										} else {
											Q = S;
											R = 0
										}
									}
									T = P + 12 | 0;
									U = HEAP32[T >> 2] | 0;
									V = P + 16 | 0;
									if ((U | 0) == (HEAP32[V >> 2] | 0))
										W = tc[c[(HEAP32[P >> 2] | 0) + 36 >> 2] & 127](P) | 0;
									else
										W = HEAPU8[U >> 0] | 0;
									if ((W & 255) << 24 >> 24 <= -1) {
										N = O;
										break c
									}
									if (!(b[(HEAP32[r >> 2] | 0) + (W << 24 >> 24 << 1) >> 1] & 8192)) {
										N = O;
										break c
									}
									U = HEAP32[T >> 2] | 0;
									if ((U | 0) == (HEAP32[V >> 2] | 0)) {
										tc[c[(HEAP32[P >> 2] | 0) + 40 >> 2] & 127](P) | 0;
										A = P;
										C = Q;
										y = R;
										continue
									} else {
										HEAP32[T >> 2] = U + 1;
										A = P;
										C = Q;
										y = R;
										continue
									}
								}
							} else if ((z | 0) == 55) {
								z = 0;
								y = HEAP32[G >> 2] | 0;
								if ((y | 0) == (HEAP32[H >> 2] | 0))
									tc[c[(HEAP32[B >> 2] | 0) + 40 >> 2] & 127](B) | 0;
								else
									HEAP32[G >> 2] = y + 1;
								N = w + 1 | 0
							}
						while (0);
						if ((N | 0) == (n | 0)) {
							z = 60;
							break a
						}
						w = N;
						x = HEAP32[k >> 2] | 0
					}
					if ((z | 0) == 15) {
						HEAP32[k >> 2] = 4;
						X = B;
						break
					} else if ((z | 0) == 18) {
						HEAP32[k >> 2] = 4;
						X = B;
						break
					} else if ((z | 0) == 21) {
						HEAP32[k >> 2] = 4;
						X = B;
						break
					}
				} else
					z = 60;
			while (0);
			if ((z | 0) == 60)
				X = HEAP32[g >> 2] | 0;
			if (X)
				if ((HEAP32[X + 12 >> 2] | 0) == (HEAP32[X + 16 >> 2] | 0) ? (tc[c[(HEAP32[X >> 2] | 0) + 36 >> 2] & 127](X) | 0) == -1 : 0) {
					HEAP32[g >> 2] = 0;
					Y = 0
				} else
					Y = X;
			else
				Y = 0;
			X = (Y | 0) == 0;
			g = HEAP32[h >> 2] | 0;
			do
				if (g) {
					if ((HEAP32[g + 12 >> 2] | 0) == (HEAP32[g + 16 >> 2] | 0) ? (tc[c[(HEAP32[g >> 2] | 0) + 36 >> 2] & 127](g) | 0) == -1 : 0) {
						HEAP32[h >> 2] = 0;
						z = 70;
						break
					}
					if (X) {
						HEAP32[e >> 2] = Y;
						i = o;
						return
					}
				} else
					z = 70;
			while (0);
			if ((z | 0) == 70 ? !X : 0) {
				HEAP32[e >> 2] = Y;
				i = o;
				return
			}
			HEAP32[k >> 2] = HEAP32[k >> 2] | 2;
			HEAP32[e >> 2] = Y;
			i = o;
			return
		}
		function fp(a) {
			a = a | 0;
			var b = 0;
			b = i;
			kl(a);
			i = b;
			return
		}
		function gp(a) {
			a = a | 0;
			return
		}
		function hp(a) {
			a = a | 0;
			return 2
		}
		function ip(a, b, d, e, f, g, h) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			var j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0;
			j = i;
			i = i + 16 | 0;
			k = j + 12 | 0;
			l = j + 8 | 0;
			m = j + 4 | 0;
			n = j;
			HEAP32[m >> 2] = HEAP32[d >> 2];
			HEAP32[n >> 2] = HEAP32[e >> 2];
			HEAP32[l + 0 >> 2] = HEAP32[m + 0 >> 2];
			HEAP32[k + 0 >> 2] = HEAP32[n + 0 >> 2];
			ep(a, b, l, k, f, g, h, 129680, 129688 | 0);
			i = j;
			return
		}
		function jp(b, d, e, f, g, h, j) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			var k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0;
			k = i;
			i = i + 16 | 0;
			l = k + 12 | 0;
			m = k + 8 | 0;
			n = k + 4 | 0;
			o = k;
			p = d + 8 | 0;
			q = tc[c[(HEAP32[p >> 2] | 0) + 20 >> 2] & 127](p) | 0;
			HEAP32[n >> 2] = HEAP32[e >> 2];
			HEAP32[o >> 2] = HEAP32[f >> 2];
			f = HEAP8[q >> 0] | 0;
			if (!(f & 1)) {
				r = q + 1 | 0;
				s = (f & 255) >>> 1;
				t = q + 1 | 0
			} else {
				f = HEAP32[q + 8 >> 2] | 0;
				r = f;
				s = HEAP32[q + 4 >> 2] | 0;
				t = f
			}
			HEAP32[m + 0 >> 2] = HEAP32[n + 0 >> 2];
			HEAP32[l + 0 >> 2] = HEAP32[o + 0 >> 2];
			ep(b, d, m, l, g, h, j, t, r + s | 0);
			i = k;
			return
		}
		function kp(a, b, d, e, f, g, h) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			var j = 0,
			k = 0,
			l = 0,
			m = 0;
			j = i;
			i = i + 16 | 0;
			k = j + 8 | 0;
			l = j + 4 | 0;
			m = j;
			Am(l, f);
			f = Yr(l, 130776) | 0;
			Jl(HEAP32[l >> 2] | 0) | 0;
			HEAP32[m >> 2] = HEAP32[e >> 2];
			HEAP32[k + 0 >> 2] = HEAP32[m + 0 >> 2];
			lp(b, h + 24 | 0, d, k, g, f);
			HEAP32[a >> 2] = HEAP32[d >> 2];
			i = j;
			return
		}
		function lp(a, b, d, e, f, g) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0,
			k = 0,
			l = 0;
			h = i;
			i = i + 16 | 0;
			j = h + 4 | 0;
			k = h;
			l = a + 8 | 0;
			a = tc[HEAP32[HEAP32[l >> 2] >> 2] & 127](l) | 0;
			HEAP32[k >> 2] = HEAP32[e >> 2];
			HEAP32[j + 0 >> 2] = HEAP32[k + 0 >> 2];
			k = (nu(d, j, a, a + 168 | 0, g, f, 0) | 0) - a | 0;
			if ((k | 0) >= 168) {
				i = h;
				return
			}
			HEAP32[b >> 2] = ((k | 0) / 12 | 0 | 0) % 7 | 0;
			i = h;
			return
		}
		function mp(a, b, d, e, f, g, h) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			var j = 0,
			k = 0,
			l = 0,
			m = 0;
			j = i;
			i = i + 16 | 0;
			k = j + 8 | 0;
			l = j + 4 | 0;
			m = j;
			Am(l, f);
			f = Yr(l, 130776) | 0;
			Jl(HEAP32[l >> 2] | 0) | 0;
			HEAP32[m >> 2] = HEAP32[e >> 2];
			HEAP32[k + 0 >> 2] = HEAP32[m + 0 >> 2];
			np(b, h + 16 | 0, d, k, g, f);
			HEAP32[a >> 2] = HEAP32[d >> 2];
			i = j;
			return
		}
		function np(a, b, d, e, f, g) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0,
			k = 0,
			l = 0;
			h = i;
			i = i + 16 | 0;
			j = h + 4 | 0;
			k = h;
			l = a + 8 | 0;
			a = tc[c[(HEAP32[l >> 2] | 0) + 4 >> 2] & 127](l) | 0;
			HEAP32[k >> 2] = HEAP32[e >> 2];
			HEAP32[j + 0 >> 2] = HEAP32[k + 0 >> 2];
			k = (nu(d, j, a, a + 288 | 0, g, f, 0) | 0) - a | 0;
			if ((k | 0) >= 288) {
				i = h;
				return
			}
			HEAP32[b >> 2] = ((k | 0) / 12 | 0 | 0) % 12 | 0;
			i = h;
			return
		}
		function op(a, b, d, e, f, g, h) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			var j = 0,
			k = 0,
			l = 0,
			m = 0;
			j = i;
			i = i + 16 | 0;
			k = j + 8 | 0;
			l = j + 4 | 0;
			m = j;
			Am(l, f);
			f = Yr(l, 130776) | 0;
			Jl(HEAP32[l >> 2] | 0) | 0;
			HEAP32[m >> 2] = HEAP32[e >> 2];
			HEAP32[k + 0 >> 2] = HEAP32[m + 0 >> 2];
			pp(b, h + 20 | 0, d, k, g, f);
			HEAP32[a >> 2] = HEAP32[d >> 2];
			i = j;
			return
		}
		function pp(a, b, d, e, f, g) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0,
			k = 0;
			a = i;
			i = i + 16 | 0;
			h = a + 4 | 0;
			j = a;
			HEAP32[j >> 2] = HEAP32[e >> 2];
			HEAP32[h + 0 >> 2] = HEAP32[j + 0 >> 2];
			j = Mu(d, h, f, g, 4) | 0;
			if (HEAP32[f >> 2] & 4) {
				i = a;
				return
			}
			if ((j | 0) < 69)
				k = j + 2e3 | 0;
			else
				k = (j + -69 | 0) >>> 0 < 31 ? j + 1900 | 0 : j;
			HEAP32[b >> 2] = k + -1900;
			i = a;
			return
		}
		function qp(b, d, e, f, g, h, j, k, l) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			k = k | 0;
			l = l | 0;
			var m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0,
			O = 0,
			P = 0,
			Q = 0,
			R = 0,
			S = 0,
			T = 0,
			U = 0,
			V = 0,
			W = 0,
			X = 0,
			Y = 0,
			Z = 0,
			_ = 0,
			$ = 0,
			aa = 0,
			ba = 0,
			ca = 0,
			da = 0,
			ea = 0,
			fa = 0,
			ga = 0;
			l = i;
			i = i + 176 | 0;
			m = l + 160 | 0;
			n = l + 156 | 0;
			o = l + 152 | 0;
			p = l + 148 | 0;
			q = l + 144 | 0;
			r = l + 140 | 0;
			s = l + 136 | 0;
			t = l + 132 | 0;
			u = l + 128 | 0;
			v = l + 124 | 0;
			w = l + 120 | 0;
			x = l + 116 | 0;
			y = l + 112 | 0;
			z = l + 108 | 0;
			A = l + 104 | 0;
			B = l + 100 | 0;
			C = l + 96 | 0;
			D = l + 92 | 0;
			E = l + 88 | 0;
			F = l + 84 | 0;
			G = l + 80 | 0;
			H = l + 76 | 0;
			I = l + 72 | 0;
			J = l + 68 | 0;
			K = l + 64 | 0;
			L = l + 60 | 0;
			M = l + 56 | 0;
			N = l + 52 | 0;
			O = l + 48 | 0;
			P = l + 44 | 0;
			Q = l + 40 | 0;
			R = l + 36 | 0;
			S = l + 32 | 0;
			T = l + 28 | 0;
			U = l + 24 | 0;
			V = l + 20 | 0;
			W = l + 16 | 0;
			X = l + 12 | 0;
			Y = l + 8 | 0;
			Z = l + 4 | 0;
			_ = l;
			HEAP32[h >> 2] = 0;
			Am(o, g);
			$ = Yr(o, 130776) | 0;
			Jl(HEAP32[o >> 2] | 0) | 0;
			do
				switch (k << 24 >> 24 | 0) {
				case 70: {
						HEAP32[z >> 2] = HEAP32[e >> 2];
						HEAP32[A >> 2] = HEAP32[f >> 2];
						HEAP32[n + 0 >> 2] = HEAP32[z + 0 >> 2];
						HEAP32[m + 0 >> 2] = HEAP32[A + 0 >> 2];
						ep(y, d, n, m, g, h, j, 129696, 129704 | 0);
						HEAP32[e >> 2] = HEAP32[y >> 2];
						break
					}
				case 116:
				case 110: {
						HEAP32[G >> 2] = HEAP32[f >> 2];
						HEAP32[m + 0 >> 2] = HEAP32[G + 0 >> 2];
						xp(d, e, m, h, $);
						break
					}
				case 101:
				case 100: {
						HEAP32[u >> 2] = HEAP32[f >> 2];
						HEAP32[m + 0 >> 2] = HEAP32[u + 0 >> 2];
						rp(d, j + 12 | 0, e, m, h, $);
						break
					}
				case 104:
				case 66:
				case 98: {
						HEAP32[q >> 2] = HEAP32[f >> 2];
						HEAP32[m + 0 >> 2] = HEAP32[q + 0 >> 2];
						np(d, j + 16 | 0, e, m, h, $);
						break
					}
				case 83: {
						HEAP32[O >> 2] = HEAP32[f >> 2];
						HEAP32[m + 0 >> 2] = HEAP32[O + 0 >> 2];
						zp(d, j, e, m, h, $);
						break
					}
				case 120: {
						o = HEAP32[(HEAP32[d >> 2] | 0) + 20 >> 2] | 0;
						HEAP32[T >> 2] = HEAP32[e >> 2];
						HEAP32[U >> 2] = HEAP32[f >> 2];
						HEAP32[n + 0 >> 2] = HEAP32[T + 0 >> 2];
						HEAP32[m + 0 >> 2] = HEAP32[U + 0 >> 2];
						qc[o & 63](b, d, n, m, g, h, j);
						i = l;
						return
					}
				case 65:
				case 97: {
						HEAP32[p >> 2] = HEAP32[f >> 2];
						HEAP32[m + 0 >> 2] = HEAP32[p + 0 >> 2];
						lp(d, j + 24 | 0, e, m, h, $);
						break
					}
				case 84: {
						HEAP32[Q >> 2] = HEAP32[e >> 2];
						HEAP32[R >> 2] = HEAP32[f >> 2];
						HEAP32[n + 0 >> 2] = HEAP32[Q + 0 >> 2];
						HEAP32[m + 0 >> 2] = HEAP32[R + 0 >> 2];
						ep(P, d, n, m, g, h, j, 129728, 129736 | 0);
						HEAP32[e >> 2] = HEAP32[P >> 2];
						break
					}
				case 109: {
						HEAP32[E >> 2] = HEAP32[f >> 2];
						HEAP32[m + 0 >> 2] = HEAP32[E + 0 >> 2];
						vp(d, j + 16 | 0, e, m, h, $);
						break
					}
				case 68: {
						HEAP32[w >> 2] = HEAP32[e >> 2];
						HEAP32[x >> 2] = HEAP32[f >> 2];
						HEAP32[n + 0 >> 2] = HEAP32[w + 0 >> 2];
						HEAP32[m + 0 >> 2] = HEAP32[x + 0 >> 2];
						ep(v, d, n, m, g, h, j, 129688, 129696 | 0);
						HEAP32[e >> 2] = HEAP32[v >> 2];
						break
					}
				case 89: {
						HEAP32[Z >> 2] = HEAP32[f >> 2];
						HEAP32[m + 0 >> 2] = HEAP32[Z + 0 >> 2];
						Bp(d, j + 20 | 0, e, m, h, $);
						break
					}
				case 72: {
						HEAP32[B >> 2] = HEAP32[f >> 2];
						HEAP32[m + 0 >> 2] = HEAP32[B + 0 >> 2];
						sp(d, j + 8 | 0, e, m, h, $);
						break
					}
				case 99: {
						o = d + 8 | 0;
						aa = tc[c[(HEAP32[o >> 2] | 0) + 12 >> 2] & 127](o) | 0;
						HEAP32[s >> 2] = HEAP32[e >> 2];
						HEAP32[t >> 2] = HEAP32[f >> 2];
						o = HEAP8[aa >> 0] | 0;
						if (!(o & 1)) {
							ba = aa + 1 | 0;
							ca = (o & 255) >>> 1;
							da = aa + 1 | 0
						} else {
							o = HEAP32[aa + 8 >> 2] | 0;
							ba = o;
							ca = HEAP32[aa + 4 >> 2] | 0;
							da = o
						}
						HEAP32[n + 0 >> 2] = HEAP32[s + 0 >> 2];
						HEAP32[m + 0 >> 2] = HEAP32[t + 0 >> 2];
						ep(r, d, n, m, g, h, j, da, ba + ca | 0);
						HEAP32[e >> 2] = HEAP32[r >> 2];
						break
					}
				case 82: {
						HEAP32[M >> 2] = HEAP32[e >> 2];
						HEAP32[N >> 2] = HEAP32[f >> 2];
						HEAP32[n + 0 >> 2] = HEAP32[M + 0 >> 2];
						HEAP32[m + 0 >> 2] = HEAP32[N + 0 >> 2];
						ep(L, d, n, m, g, h, j, 129720, 129725 | 0);
						HEAP32[e >> 2] = HEAP32[L >> 2];
						break
					}
				case 106: {
						HEAP32[D >> 2] = HEAP32[f >> 2];
						HEAP32[m + 0 >> 2] = HEAP32[D + 0 >> 2];
						up(d, j + 28 | 0, e, m, h, $);
						break
					}
				case 114: {
						HEAP32[J >> 2] = HEAP32[e >> 2];
						HEAP32[K >> 2] = HEAP32[f >> 2];
						HEAP32[n + 0 >> 2] = HEAP32[J + 0 >> 2];
						HEAP32[m + 0 >> 2] = HEAP32[K + 0 >> 2];
						ep(I, d, n, m, g, h, j, 129704, 129715 | 0);
						HEAP32[e >> 2] = HEAP32[I >> 2];
						break
					}
				case 37: {
						HEAP32[_ >> 2] = HEAP32[f >> 2];
						HEAP32[m + 0 >> 2] = HEAP32[_ + 0 >> 2];
						Cp(d, e, m, h, $);
						break
					}
				case 112: {
						HEAP32[H >> 2] = HEAP32[f >> 2];
						HEAP32[m + 0 >> 2] = HEAP32[H + 0 >> 2];
						yp(d, j + 8 | 0, e, m, h, $);
						break
					}
				case 121: {
						HEAP32[Y >> 2] = HEAP32[f >> 2];
						HEAP32[m + 0 >> 2] = HEAP32[Y + 0 >> 2];
						pp(d, j + 20 | 0, e, m, h, $);
						break
					}
				case 77: {
						HEAP32[F >> 2] = HEAP32[f >> 2];
						HEAP32[m + 0 >> 2] = HEAP32[F + 0 >> 2];
						wp(d, j + 4 | 0, e, m, h, $);
						break
					}
				case 119: {
						HEAP32[S >> 2] = HEAP32[f >> 2];
						HEAP32[m + 0 >> 2] = HEAP32[S + 0 >> 2];
						Ap(d, j + 24 | 0, e, m, h, $);
						break
					}
				case 88: {
						o = d + 8 | 0;
						aa = tc[c[(HEAP32[o >> 2] | 0) + 24 >> 2] & 127](o) | 0;
						HEAP32[W >> 2] = HEAP32[e >> 2];
						HEAP32[X >> 2] = HEAP32[f >> 2];
						o = HEAP8[aa >> 0] | 0;
						if (!(o & 1)) {
							ea = aa + 1 | 0;
							fa = (o & 255) >>> 1;
							ga = aa + 1 | 0
						} else {
							o = HEAP32[aa + 8 >> 2] | 0;
							ea = o;
							fa = HEAP32[aa + 4 >> 2] | 0;
							ga = o
						}
						HEAP32[n + 0 >> 2] = HEAP32[W + 0 >> 2];
						HEAP32[m + 0 >> 2] = HEAP32[X + 0 >> 2];
						ep(V, d, n, m, g, h, j, ga, ea + fa | 0);
						HEAP32[e >> 2] = HEAP32[V >> 2];
						break
					}
				case 73: {
						HEAP32[C >> 2] = HEAP32[f >> 2];
						HEAP32[m + 0 >> 2] = HEAP32[C + 0 >> 2];
						tp(d, j + 8 | 0, e, m, h, $);
						break
					}
				default:
					HEAP32[h >> 2] = HEAP32[h >> 2] | 4
				}
			while (0);
			HEAP32[b >> 2] = HEAP32[e >> 2];
			i = l;
			return
		}
		function rp(a, b, d, e, f, g) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0;
			a = i;
			i = i + 16 | 0;
			h = a + 4 | 0;
			j = a;
			HEAP32[j >> 2] = HEAP32[e >> 2];
			HEAP32[h + 0 >> 2] = HEAP32[j + 0 >> 2];
			j = Mu(d, h, f, g, 2) | 0;
			g = HEAP32[f >> 2] | 0;
			if ((g & 4 | 0) == 0 & (j | 0) > 0 & (j | 0) < 32) {
				HEAP32[b >> 2] = j;
				i = a;
				return
			} else {
				HEAP32[f >> 2] = g | 4;
				i = a;
				return
			}
		}
		function sp(a, b, d, e, f, g) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0;
			a = i;
			i = i + 16 | 0;
			h = a + 4 | 0;
			j = a;
			HEAP32[j >> 2] = HEAP32[e >> 2];
			HEAP32[h + 0 >> 2] = HEAP32[j + 0 >> 2];
			j = Mu(d, h, f, g, 2) | 0;
			g = HEAP32[f >> 2] | 0;
			if ((g & 4 | 0) == 0 & (j | 0) < 24) {
				HEAP32[b >> 2] = j;
				i = a;
				return
			} else {
				HEAP32[f >> 2] = g | 4;
				i = a;
				return
			}
		}
		function tp(a, b, d, e, f, g) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0;
			a = i;
			i = i + 16 | 0;
			h = a + 4 | 0;
			j = a;
			HEAP32[j >> 2] = HEAP32[e >> 2];
			HEAP32[h + 0 >> 2] = HEAP32[j + 0 >> 2];
			j = Mu(d, h, f, g, 2) | 0;
			g = HEAP32[f >> 2] | 0;
			if ((g & 4 | 0) == 0 & (j | 0) > 0 & (j | 0) < 13) {
				HEAP32[b >> 2] = j;
				i = a;
				return
			} else {
				HEAP32[f >> 2] = g | 4;
				i = a;
				return
			}
		}
		function up(a, b, d, e, f, g) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0;
			a = i;
			i = i + 16 | 0;
			h = a + 4 | 0;
			j = a;
			HEAP32[j >> 2] = HEAP32[e >> 2];
			HEAP32[h + 0 >> 2] = HEAP32[j + 0 >> 2];
			j = Mu(d, h, f, g, 3) | 0;
			g = HEAP32[f >> 2] | 0;
			if ((g & 4 | 0) == 0 & (j | 0) < 366) {
				HEAP32[b >> 2] = j;
				i = a;
				return
			} else {
				HEAP32[f >> 2] = g | 4;
				i = a;
				return
			}
		}
		function vp(a, b, d, e, f, g) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0;
			a = i;
			i = i + 16 | 0;
			h = a + 4 | 0;
			j = a;
			HEAP32[j >> 2] = HEAP32[e >> 2];
			HEAP32[h + 0 >> 2] = HEAP32[j + 0 >> 2];
			j = Mu(d, h, f, g, 2) | 0;
			g = HEAP32[f >> 2] | 0;
			if ((g & 4 | 0) == 0 & (j | 0) < 13) {
				HEAP32[b >> 2] = j + -1;
				i = a;
				return
			} else {
				HEAP32[f >> 2] = g | 4;
				i = a;
				return
			}
		}
		function wp(a, b, d, e, f, g) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0;
			a = i;
			i = i + 16 | 0;
			h = a + 4 | 0;
			j = a;
			HEAP32[j >> 2] = HEAP32[e >> 2];
			HEAP32[h + 0 >> 2] = HEAP32[j + 0 >> 2];
			j = Mu(d, h, f, g, 2) | 0;
			g = HEAP32[f >> 2] | 0;
			if ((g & 4 | 0) == 0 & (j | 0) < 60) {
				HEAP32[b >> 2] = j;
				i = a;
				return
			} else {
				HEAP32[f >> 2] = g | 4;
				i = a;
				return
			}
		}
		function xp(a, e, f, g, h) {
			a = a | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			var j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0;
			a = i;
			j = h + 8 | 0;
			a: while (1) {
				h = HEAP32[e >> 2] | 0;
				do
					if (h)
						if ((HEAP32[h + 12 >> 2] | 0) == (HEAP32[h + 16 >> 2] | 0))
							if ((tc[c[(HEAP32[h >> 2] | 0) + 36 >> 2] & 127](h) | 0) == -1) {
								HEAP32[e >> 2] = 0;
								k = 0;
								break
							} else {
								k = HEAP32[e >> 2] | 0;
								break
							}
						else
							k = h;
					else
						k = 0;
				while (0);
				h = (k | 0) == 0;
				l = HEAP32[f >> 2] | 0;
				do
					if (l) {
						if ((HEAP32[l + 12 >> 2] | 0) != (HEAP32[l + 16 >> 2] | 0))
							if (h) {
								m = l;
								break
							} else {
								n = l;
								break a
							}
						if ((tc[c[(HEAP32[l >> 2] | 0) + 36 >> 2] & 127](l) | 0) != -1)
							if (h) {
								m = l;
								break
							} else {
								n = l;
								break a
							}
						else {
							HEAP32[f >> 2] = 0;
							o = 12;
							break
						}
					} else
						o = 12;
				while (0);
				if ((o | 0) == 12) {
					o = 0;
					if (h) {
						n = 0;
						break
					} else
						m = 0
				}
				l = HEAP32[e >> 2] | 0;
				p = HEAP32[l + 12 >> 2] | 0;
				if ((p | 0) == (HEAP32[l + 16 >> 2] | 0))
					q = tc[c[(HEAP32[l >> 2] | 0) + 36 >> 2] & 127](l) | 0;
				else
					q = HEAPU8[p >> 0] | 0;
				if ((q & 255) << 24 >> 24 <= -1) {
					n = m;
					break
				}
				if (!(b[(HEAP32[j >> 2] | 0) + (q << 24 >> 24 << 1) >> 1] & 8192)) {
					n = m;
					break
				}
				p = HEAP32[e >> 2] | 0;
				l = p + 12 | 0;
				r = HEAP32[l >> 2] | 0;
				if ((r | 0) == (HEAP32[p + 16 >> 2] | 0)) {
					tc[c[(HEAP32[p >> 2] | 0) + 40 >> 2] & 127](p) | 0;
					continue
				} else {
					HEAP32[l >> 2] = r + 1;
					continue
				}
			}
			m = HEAP32[e >> 2] | 0;
			do
				if (m)
					if ((HEAP32[m + 12 >> 2] | 0) == (HEAP32[m + 16 >> 2] | 0))
						if ((tc[c[(HEAP32[m >> 2] | 0) + 36 >> 2] & 127](m) | 0) == -1) {
							HEAP32[e >> 2] = 0;
							s = 0;
							break
						} else {
							s = HEAP32[e >> 2] | 0;
							break
						}
					else
						s = m;
				else
					s = 0;
			while (0);
			m = (s | 0) == 0;
			do
				if (n) {
					if ((HEAP32[n + 12 >> 2] | 0) == (HEAP32[n + 16 >> 2] | 0) ? (tc[c[(HEAP32[n >> 2] | 0) + 36 >> 2] & 127](n) | 0) == -1 : 0) {
						HEAP32[f >> 2] = 0;
						o = 32;
						break
					}
					if (m) {
						i = a;
						return
					}
				} else
					o = 32;
			while (0);
			if ((o | 0) == 32 ? !m : 0) {
				i = a;
				return
			}
			HEAP32[g >> 2] = HEAP32[g >> 2] | 2;
			i = a;
			return
		}
		function yp(b, d, e, f, g, h) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			var j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0;
			j = i;
			i = i + 16 | 0;
			k = j + 4 | 0;
			l = j;
			m = b + 8 | 0;
			b = tc[c[(HEAP32[m >> 2] | 0) + 8 >> 2] & 127](m) | 0;
			m = HEAP8[b >> 0] | 0;
			if (!(m & 1))
				n = (m & 255) >>> 1;
			else
				n = HEAP32[b + 4 >> 2] | 0;
			m = HEAP8[b + 12 >> 0] | 0;
			if (!(m & 1))
				o = (m & 255) >>> 1;
			else
				o = HEAP32[b + 16 >> 2] | 0;
			if ((n | 0) == (0 - o | 0)) {
				HEAP32[g >> 2] = HEAP32[g >> 2] | 4;
				i = j;
				return
			}
			HEAP32[l >> 2] = HEAP32[f >> 2];
			HEAP32[k + 0 >> 2] = HEAP32[l + 0 >> 2];
			l = nu(e, k, b, b + 24 | 0, h, g, 0) | 0;
			g = l - b | 0;
			if ((l | 0) == (b | 0) ? (HEAP32[d >> 2] | 0) == 12 : 0) {
				HEAP32[d >> 2] = 0;
				i = j;
				return
			}
			if ((g | 0) != 12) {
				i = j;
				return
			}
			g = HEAP32[d >> 2] | 0;
			if ((g | 0) >= 12) {
				i = j;
				return
			}
			HEAP32[d >> 2] = g + 12;
			i = j;
			return
		}
		function zp(a, b, d, e, f, g) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0;
			a = i;
			i = i + 16 | 0;
			h = a + 4 | 0;
			j = a;
			HEAP32[j >> 2] = HEAP32[e >> 2];
			HEAP32[h + 0 >> 2] = HEAP32[j + 0 >> 2];
			j = Mu(d, h, f, g, 2) | 0;
			g = HEAP32[f >> 2] | 0;
			if ((g & 4 | 0) == 0 & (j | 0) < 61) {
				HEAP32[b >> 2] = j;
				i = a;
				return
			} else {
				HEAP32[f >> 2] = g | 4;
				i = a;
				return
			}
		}
		function Ap(a, b, d, e, f, g) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0;
			a = i;
			i = i + 16 | 0;
			h = a + 4 | 0;
			j = a;
			HEAP32[j >> 2] = HEAP32[e >> 2];
			HEAP32[h + 0 >> 2] = HEAP32[j + 0 >> 2];
			j = Mu(d, h, f, g, 1) | 0;
			g = HEAP32[f >> 2] | 0;
			if ((g & 4 | 0) == 0 & (j | 0) < 7) {
				HEAP32[b >> 2] = j;
				i = a;
				return
			} else {
				HEAP32[f >> 2] = g | 4;
				i = a;
				return
			}
		}
		function Bp(a, b, d, e, f, g) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0;
			a = i;
			i = i + 16 | 0;
			h = a + 4 | 0;
			j = a;
			HEAP32[j >> 2] = HEAP32[e >> 2];
			HEAP32[h + 0 >> 2] = HEAP32[j + 0 >> 2];
			j = Mu(d, h, f, g, 4) | 0;
			if (HEAP32[f >> 2] & 4) {
				i = a;
				return
			}
			HEAP32[b >> 2] = j + -1900;
			i = a;
			return
		}
		function Cp(a, b, e, f, g) {
			a = a | 0;
			b = b | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0;
			a = i;
			h = HEAP32[b >> 2] | 0;
			do
				if (h)
					if ((HEAP32[h + 12 >> 2] | 0) == (HEAP32[h + 16 >> 2] | 0))
						if ((tc[c[(HEAP32[h >> 2] | 0) + 36 >> 2] & 127](h) | 0) == -1) {
							HEAP32[b >> 2] = 0;
							j = 0;
							break
						} else {
							j = HEAP32[b >> 2] | 0;
							break
						}
					else
						j = h;
				else
					j = 0;
			while (0);
			h = (j | 0) == 0;
			j = HEAP32[e >> 2] | 0;
			do
				if (j) {
					if ((HEAP32[j + 12 >> 2] | 0) == (HEAP32[j + 16 >> 2] | 0) ? (tc[c[(HEAP32[j >> 2] | 0) + 36 >> 2] & 127](j) | 0) == -1 : 0) {
						HEAP32[e >> 2] = 0;
						k = 11;
						break
					}
					if (h)
						l = j;
					else
						k = 12
				} else
					k = 11;
			while (0);
			if ((k | 0) == 11)
				if (h)
					k = 12;
				else
					l = 0;
			if ((k | 0) == 12) {
				HEAP32[f >> 2] = HEAP32[f >> 2] | 6;
				i = a;
				return
			}
			h = HEAP32[b >> 2] | 0;
			j = HEAP32[h + 12 >> 2] | 0;
			if ((j | 0) == (HEAP32[h + 16 >> 2] | 0))
				m = tc[c[(HEAP32[h >> 2] | 0) + 36 >> 2] & 127](h) | 0;
			else
				m = HEAPU8[j >> 0] | 0;
			if ((mc[c[(HEAP32[g >> 2] | 0) + 36 >> 2] & 31](g, m & 255, 0) | 0) << 24 >> 24 != 37) {
				HEAP32[f >> 2] = HEAP32[f >> 2] | 4;
				i = a;
				return
			}
			m = HEAP32[b >> 2] | 0;
			g = m + 12 | 0;
			j = HEAP32[g >> 2] | 0;
			if ((j | 0) == (HEAP32[m + 16 >> 2] | 0)) {
				tc[c[(HEAP32[m >> 2] | 0) + 40 >> 2] & 127](m) | 0;
				n = HEAP32[b >> 2] | 0
			} else {
				HEAP32[g >> 2] = j + 1;
				n = m
			}
			do
				if (n)
					if ((HEAP32[n + 12 >> 2] | 0) == (HEAP32[n + 16 >> 2] | 0))
						if ((tc[c[(HEAP32[n >> 2] | 0) + 36 >> 2] & 127](n) | 0) == -1) {
							HEAP32[b >> 2] = 0;
							o = 0;
							break
						} else {
							o = HEAP32[b >> 2] | 0;
							break
						}
					else
						o = n;
				else
					o = 0;
			while (0);
			n = (o | 0) == 0;
			do
				if (l) {
					if ((HEAP32[l + 12 >> 2] | 0) == (HEAP32[l + 16 >> 2] | 0) ? (tc[c[(HEAP32[l >> 2] | 0) + 36 >> 2] & 127](l) | 0) == -1 : 0) {
						HEAP32[e >> 2] = 0;
						k = 31;
						break
					}
					if (n) {
						i = a;
						return
					}
				} else
					k = 31;
			while (0);
			if ((k | 0) == 31 ? !n : 0) {
				i = a;
				return
			}
			HEAP32[f >> 2] = HEAP32[f >> 2] | 2;
			i = a;
			return
		}
		function Dp(a, b, d, e, f, g, h, j, k) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			k = k | 0;
			var l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0,
			O = 0,
			P = 0,
			Q = 0,
			R = 0,
			S = 0,
			T = 0,
			U = 0,
			V = 0,
			W = 0,
			X = 0,
			Y = 0,
			Z = 0,
			_ = 0,
			$ = 0;
			l = i;
			i = i + 32 | 0;
			m = l + 20 | 0;
			n = l + 16 | 0;
			o = l + 12 | 0;
			p = l + 8 | 0;
			q = l + 4 | 0;
			r = l;
			Am(o, f);
			s = Yr(o, 130768) | 0;
			Jl(HEAP32[o >> 2] | 0) | 0;
			HEAP32[g >> 2] = 0;
			a: do
				if ((j | 0) != (k | 0)) {
					o = j;
					t = 0;
					b: while (1) {
						u = t;
						while (1) {
							if (u) {
								v = 64;
								break a
							}
							w = HEAP32[d >> 2] | 0;
							if (w) {
								x = HEAP32[w + 12 >> 2] | 0;
								if ((x | 0) == (HEAP32[w + 16 >> 2] | 0))
									y = tc[c[(HEAP32[w >> 2] | 0) + 36 >> 2] & 127](w) | 0;
								else
									y = HEAP32[x >> 2] | 0;
								if ((y | 0) == -1) {
									HEAP32[d >> 2] = 0;
									z = 1;
									A = 0
								} else {
									z = 0;
									A = w
								}
							} else {
								z = 1;
								A = 0
							}
							w = HEAP32[e >> 2] | 0;
							do
								if (w) {
									x = HEAP32[w + 12 >> 2] | 0;
									if ((x | 0) == (HEAP32[w + 16 >> 2] | 0))
										B = tc[c[(HEAP32[w >> 2] | 0) + 36 >> 2] & 127](w) | 0;
									else
										B = HEAP32[x >> 2] | 0;
									if ((B | 0) != -1)
										if (z) {
											C = w;
											break
										} else {
											v = 19;
											break b
										}
									else {
										HEAP32[e >> 2] = 0;
										v = 17;
										break
									}
								} else
									v = 17;
							while (0);
							if ((v | 0) == 17) {
								v = 0;
								if (z) {
									v = 19;
									break b
								} else
									C = 0
							}
							if ((mc[c[(HEAP32[s >> 2] | 0) + 52 >> 2] & 31](s, HEAP32[o >> 2] | 0, 0) | 0) << 24 >> 24 == 37) {
								v = 21;
								break
							}
							if (mc[c[(HEAP32[s >> 2] | 0) + 12 >> 2] & 31](s, 8192, HEAP32[o >> 2] | 0) | 0) {
								D = o;
								v = 31;
								break
							}
							E = A + 12 | 0;
							w = HEAP32[E >> 2] | 0;
							F = A + 16 | 0;
							if ((w | 0) == (HEAP32[F >> 2] | 0))
								G = tc[c[(HEAP32[A >> 2] | 0) + 36 >> 2] & 127](A) | 0;
							else
								G = HEAP32[w >> 2] | 0;
							w = Cc[c[(HEAP32[s >> 2] | 0) + 28 >> 2] & 31](s, G) | 0;
							if ((w | 0) == (Cc[c[(HEAP32[s >> 2] | 0) + 28 >> 2] & 31](s, HEAP32[o >> 2] | 0) | 0)) {
								v = 59;
								break
							}
							HEAP32[g >> 2] = 4;
							u = 4
						}
						c: do
							if ((v | 0) == 21) {
								v = 0;
								u = o + 4 | 0;
								if ((u | 0) == (k | 0)) {
									v = 22;
									break b
								}
								w = mc[c[(HEAP32[s >> 2] | 0) + 52 >> 2] & 31](s, HEAP32[u >> 2] | 0, 0) | 0;
								if (w << 24 >> 24 == 48 | w << 24 >> 24 == 69) {
									x = o + 8 | 0;
									if ((x | 0) == (k | 0)) {
										v = 25;
										break b
									}
									H = x;
									I = mc[c[(HEAP32[s >> 2] | 0) + 52 >> 2] & 31](s, HEAP32[x >> 2] | 0, 0) | 0;
									J = w
								} else {
									H = u;
									I = w;
									J = 0
								}
								w = HEAP32[(HEAP32[b >> 2] | 0) + 36 >> 2] | 0;
								HEAP32[q >> 2] = A;
								HEAP32[r >> 2] = C;
								HEAP32[n + 0 >> 2] = HEAP32[q + 0 >> 2];
								HEAP32[m + 0 >> 2] = HEAP32[r + 0 >> 2];
								sc[w & 3](p, b, n, m, f, g, h, I, J);
								HEAP32[d >> 2] = HEAP32[p >> 2];
								K = H + 4 | 0
							} else if ((v | 0) == 31) {
								while (1) {
									v = 0;
									w = D + 4 | 0;
									if ((w | 0) == (k | 0)) {
										L = k;
										break
									}
									if (mc[c[(HEAP32[s >> 2] | 0) + 12 >> 2] & 31](s, 8192, HEAP32[w >> 2] | 0) | 0) {
										D = w;
										v = 31
									} else {
										L = w;
										break
									}
								}
								w = A;
								u = C;
								x = C;
								while (1) {
									if (w) {
										M = HEAP32[w + 12 >> 2] | 0;
										if ((M | 0) == (HEAP32[w + 16 >> 2] | 0))
											N = tc[c[(HEAP32[w >> 2] | 0) + 36 >> 2] & 127](w) | 0;
										else
											N = HEAP32[M >> 2] | 0;
										if ((N | 0) == -1) {
											HEAP32[d >> 2] = 0;
											O = 0;
											P = 1
										} else {
											O = w;
											P = 0
										}
									} else {
										O = 0;
										P = 1
									}
									do
										if (x) {
											M = HEAP32[x + 12 >> 2] | 0;
											if ((M | 0) == (HEAP32[x + 16 >> 2] | 0))
												Q = tc[c[(HEAP32[x >> 2] | 0) + 36 >> 2] & 127](x) | 0;
											else
												Q = HEAP32[M >> 2] | 0;
											if ((Q | 0) != -1)
												if (P ^ (u | 0) == 0) {
													R = u;
													S = u;
													break
												} else {
													K = L;
													break c
												}
											else {
												HEAP32[e >> 2] = 0;
												T = 0;
												v = 46;
												break
											}
										} else {
											T = u;
											v = 46
										}
									while (0);
									if ((v | 0) == 46) {
										v = 0;
										if (P) {
											K = L;
											break c
										} else {
											R = T;
											S = 0
										}
									}
									M = O + 12 | 0;
									U = HEAP32[M >> 2] | 0;
									V = O + 16 | 0;
									if ((U | 0) == (HEAP32[V >> 2] | 0))
										W = tc[c[(HEAP32[O >> 2] | 0) + 36 >> 2] & 127](O) | 0;
									else
										W = HEAP32[U >> 2] | 0;
									if (!(mc[c[(HEAP32[s >> 2] | 0) + 12 >> 2] & 31](s, 8192, W) | 0)) {
										K = L;
										break c
									}
									U = HEAP32[M >> 2] | 0;
									if ((U | 0) == (HEAP32[V >> 2] | 0)) {
										tc[c[(HEAP32[O >> 2] | 0) + 40 >> 2] & 127](O) | 0;
										w = O;
										u = R;
										x = S;
										continue
									} else {
										HEAP32[M >> 2] = U + 4;
										w = O;
										u = R;
										x = S;
										continue
									}
								}
							} else if ((v | 0) == 59) {
								v = 0;
								x = HEAP32[E >> 2] | 0;
								if ((x | 0) == (HEAP32[F >> 2] | 0))
									tc[c[(HEAP32[A >> 2] | 0) + 40 >> 2] & 127](A) | 0;
								else
									HEAP32[E >> 2] = x + 4;
								K = o + 4 | 0
							}
						while (0);
						if ((K | 0) == (k | 0)) {
							v = 64;
							break a
						}
						o = K;
						t = HEAP32[g >> 2] | 0
					}
					if ((v | 0) == 19) {
						HEAP32[g >> 2] = 4;
						X = A;
						break
					} else if ((v | 0) == 22) {
						HEAP32[g >> 2] = 4;
						X = A;
						break
					} else if ((v | 0) == 25) {
						HEAP32[g >> 2] = 4;
						X = A;
						break
					}
				} else
					v = 64;
			while (0);
			if ((v | 0) == 64)
				X = HEAP32[d >> 2] | 0;
			if (X) {
				A = HEAP32[X + 12 >> 2] | 0;
				if ((A | 0) == (HEAP32[X + 16 >> 2] | 0))
					Y = tc[c[(HEAP32[X >> 2] | 0) + 36 >> 2] & 127](X) | 0;
				else
					Y = HEAP32[A >> 2] | 0;
				if ((Y | 0) == -1) {
					HEAP32[d >> 2] = 0;
					Z = 0;
					_ = 1
				} else {
					Z = X;
					_ = 0
				}
			} else {
				Z = 0;
				_ = 1
			}
			X = HEAP32[e >> 2] | 0;
			do
				if (X) {
					d = HEAP32[X + 12 >> 2] | 0;
					if ((d | 0) == (HEAP32[X + 16 >> 2] | 0))
						$ = tc[c[(HEAP32[X >> 2] | 0) + 36 >> 2] & 127](X) | 0;
					else
						$ = HEAP32[d >> 2] | 0;
					if (($ | 0) == -1) {
						HEAP32[e >> 2] = 0;
						v = 77;
						break
					}
					if (_) {
						HEAP32[a >> 2] = Z;
						i = l;
						return
					}
				} else
					v = 77;
			while (0);
			if ((v | 0) == 77 ? !_ : 0) {
				HEAP32[a >> 2] = Z;
				i = l;
				return
			}
			HEAP32[g >> 2] = HEAP32[g >> 2] | 2;
			HEAP32[a >> 2] = Z;
			i = l;
			return
		}
		function Ep(a) {
			a = a | 0;
			var b = 0;
			b = i;
			kl(a);
			i = b;
			return
		}
		function Fp(a) {
			a = a | 0;
			return
		}
		function Gp(a) {
			a = a | 0;
			return 2
		}
		function Hp(a, b, d, e, f, g, h) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			var j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0;
			j = i;
			i = i + 16 | 0;
			k = j + 12 | 0;
			l = j + 8 | 0;
			m = j + 4 | 0;
			n = j;
			HEAP32[m >> 2] = HEAP32[d >> 2];
			HEAP32[n >> 2] = HEAP32[e >> 2];
			HEAP32[l + 0 >> 2] = HEAP32[m + 0 >> 2];
			HEAP32[k + 0 >> 2] = HEAP32[n + 0 >> 2];
			Dp(a, b, l, k, f, g, h, 129832, 129864 | 0);
			i = j;
			return
		}
		function Ip(b, d, e, f, g, h, j) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			var k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0;
			k = i;
			i = i + 16 | 0;
			l = k + 12 | 0;
			m = k + 8 | 0;
			n = k + 4 | 0;
			o = k;
			p = d + 8 | 0;
			q = tc[c[(HEAP32[p >> 2] | 0) + 20 >> 2] & 127](p) | 0;
			HEAP32[n >> 2] = HEAP32[e >> 2];
			HEAP32[o >> 2] = HEAP32[f >> 2];
			f = HEAP8[q >> 0] | 0;
			if (!(f & 1)) {
				r = q + 4 | 0;
				s = (f & 255) >>> 1;
				t = q + 4 | 0
			} else {
				f = HEAP32[q + 8 >> 2] | 0;
				r = f;
				s = HEAP32[q + 4 >> 2] | 0;
				t = f
			}
			HEAP32[m + 0 >> 2] = HEAP32[n + 0 >> 2];
			HEAP32[l + 0 >> 2] = HEAP32[o + 0 >> 2];
			Dp(b, d, m, l, g, h, j, t, r + (s << 2) | 0);
			i = k;
			return
		}
		function Jp(a, b, d, e, f, g, h) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			var j = 0,
			k = 0,
			l = 0,
			m = 0;
			j = i;
			i = i + 16 | 0;
			k = j + 8 | 0;
			l = j + 4 | 0;
			m = j;
			Am(l, f);
			f = Yr(l, 130768) | 0;
			Jl(HEAP32[l >> 2] | 0) | 0;
			HEAP32[m >> 2] = HEAP32[e >> 2];
			HEAP32[k + 0 >> 2] = HEAP32[m + 0 >> 2];
			Kp(b, h + 24 | 0, d, k, g, f);
			HEAP32[a >> 2] = HEAP32[d >> 2];
			i = j;
			return
		}
		function Kp(a, b, d, e, f, g) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0,
			k = 0,
			l = 0;
			h = i;
			i = i + 16 | 0;
			j = h + 4 | 0;
			k = h;
			l = a + 8 | 0;
			a = tc[HEAP32[HEAP32[l >> 2] >> 2] & 127](l) | 0;
			HEAP32[k >> 2] = HEAP32[e >> 2];
			HEAP32[j + 0 >> 2] = HEAP32[k + 0 >> 2];
			k = (yu(d, j, a, a + 168 | 0, g, f, 0) | 0) - a | 0;
			if ((k | 0) >= 168) {
				i = h;
				return
			}
			HEAP32[b >> 2] = ((k | 0) / 12 | 0 | 0) % 7 | 0;
			i = h;
			return
		}
		function Lp(a, b, d, e, f, g, h) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			var j = 0,
			k = 0,
			l = 0,
			m = 0;
			j = i;
			i = i + 16 | 0;
			k = j + 8 | 0;
			l = j + 4 | 0;
			m = j;
			Am(l, f);
			f = Yr(l, 130768) | 0;
			Jl(HEAP32[l >> 2] | 0) | 0;
			HEAP32[m >> 2] = HEAP32[e >> 2];
			HEAP32[k + 0 >> 2] = HEAP32[m + 0 >> 2];
			Mp(b, h + 16 | 0, d, k, g, f);
			HEAP32[a >> 2] = HEAP32[d >> 2];
			i = j;
			return
		}
		function Mp(a, b, d, e, f, g) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0,
			k = 0,
			l = 0;
			h = i;
			i = i + 16 | 0;
			j = h + 4 | 0;
			k = h;
			l = a + 8 | 0;
			a = tc[c[(HEAP32[l >> 2] | 0) + 4 >> 2] & 127](l) | 0;
			HEAP32[k >> 2] = HEAP32[e >> 2];
			HEAP32[j + 0 >> 2] = HEAP32[k + 0 >> 2];
			k = (yu(d, j, a, a + 288 | 0, g, f, 0) | 0) - a | 0;
			if ((k | 0) >= 288) {
				i = h;
				return
			}
			HEAP32[b >> 2] = ((k | 0) / 12 | 0 | 0) % 12 | 0;
			i = h;
			return
		}
		function Np(a, b, d, e, f, g, h) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			var j = 0,
			k = 0,
			l = 0,
			m = 0;
			j = i;
			i = i + 16 | 0;
			k = j + 8 | 0;
			l = j + 4 | 0;
			m = j;
			Am(l, f);
			f = Yr(l, 130768) | 0;
			Jl(HEAP32[l >> 2] | 0) | 0;
			HEAP32[m >> 2] = HEAP32[e >> 2];
			HEAP32[k + 0 >> 2] = HEAP32[m + 0 >> 2];
			Op(b, h + 20 | 0, d, k, g, f);
			HEAP32[a >> 2] = HEAP32[d >> 2];
			i = j;
			return
		}
		function Op(a, b, d, e, f, g) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0,
			k = 0;
			a = i;
			i = i + 16 | 0;
			h = a + 4 | 0;
			j = a;
			HEAP32[j >> 2] = HEAP32[e >> 2];
			HEAP32[h + 0 >> 2] = HEAP32[j + 0 >> 2];
			j = Nu(d, h, f, g, 4) | 0;
			if (HEAP32[f >> 2] & 4) {
				i = a;
				return
			}
			if ((j | 0) < 69)
				k = j + 2e3 | 0;
			else
				k = (j + -69 | 0) >>> 0 < 31 ? j + 1900 | 0 : j;
			HEAP32[b >> 2] = k + -1900;
			i = a;
			return
		}
		function Pp(b, d, e, f, g, h, j, k, l) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			k = k | 0;
			l = l | 0;
			var m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0,
			O = 0,
			P = 0,
			Q = 0,
			R = 0,
			S = 0,
			T = 0,
			U = 0,
			V = 0,
			W = 0,
			X = 0,
			Y = 0,
			Z = 0,
			_ = 0,
			$ = 0,
			aa = 0,
			ba = 0,
			ca = 0,
			da = 0,
			ea = 0,
			fa = 0,
			ga = 0;
			l = i;
			i = i + 176 | 0;
			m = l + 160 | 0;
			n = l + 156 | 0;
			o = l + 152 | 0;
			p = l + 148 | 0;
			q = l + 144 | 0;
			r = l + 140 | 0;
			s = l + 136 | 0;
			t = l + 132 | 0;
			u = l + 128 | 0;
			v = l + 124 | 0;
			w = l + 120 | 0;
			x = l + 116 | 0;
			y = l + 112 | 0;
			z = l + 108 | 0;
			A = l + 104 | 0;
			B = l + 100 | 0;
			C = l + 96 | 0;
			D = l + 92 | 0;
			E = l + 88 | 0;
			F = l + 84 | 0;
			G = l + 80 | 0;
			H = l + 76 | 0;
			I = l + 72 | 0;
			J = l + 68 | 0;
			K = l + 64 | 0;
			L = l + 60 | 0;
			M = l + 56 | 0;
			N = l + 52 | 0;
			O = l + 48 | 0;
			P = l + 44 | 0;
			Q = l + 40 | 0;
			R = l + 36 | 0;
			S = l + 32 | 0;
			T = l + 28 | 0;
			U = l + 24 | 0;
			V = l + 20 | 0;
			W = l + 16 | 0;
			X = l + 12 | 0;
			Y = l + 8 | 0;
			Z = l + 4 | 0;
			_ = l;
			HEAP32[h >> 2] = 0;
			Am(o, g);
			$ = Yr(o, 130768) | 0;
			Jl(HEAP32[o >> 2] | 0) | 0;
			do
				switch (k << 24 >> 24 | 0) {
				case 68: {
						HEAP32[w >> 2] = HEAP32[e >> 2];
						HEAP32[x >> 2] = HEAP32[f >> 2];
						HEAP32[n + 0 >> 2] = HEAP32[w + 0 >> 2];
						HEAP32[m + 0 >> 2] = HEAP32[x + 0 >> 2];
						Dp(v, d, n, m, g, h, j, 129864, 129896 | 0);
						HEAP32[e >> 2] = HEAP32[v >> 2];
						break
					}
				case 65:
				case 97: {
						HEAP32[p >> 2] = HEAP32[f >> 2];
						HEAP32[m + 0 >> 2] = HEAP32[p + 0 >> 2];
						Kp(d, j + 24 | 0, e, m, h, $);
						break
					}
				case 119: {
						HEAP32[S >> 2] = HEAP32[f >> 2];
						HEAP32[m + 0 >> 2] = HEAP32[S + 0 >> 2];
						Zp(d, j + 24 | 0, e, m, h, $);
						break
					}
				case 101:
				case 100: {
						HEAP32[u >> 2] = HEAP32[f >> 2];
						HEAP32[m + 0 >> 2] = HEAP32[u + 0 >> 2];
						Qp(d, j + 12 | 0, e, m, h, $);
						break
					}
				case 83: {
						HEAP32[O >> 2] = HEAP32[f >> 2];
						HEAP32[m + 0 >> 2] = HEAP32[O + 0 >> 2];
						Yp(d, j, e, m, h, $);
						break
					}
				case 84: {
						HEAP32[Q >> 2] = HEAP32[e >> 2];
						HEAP32[R >> 2] = HEAP32[f >> 2];
						HEAP32[n + 0 >> 2] = HEAP32[Q + 0 >> 2];
						HEAP32[m + 0 >> 2] = HEAP32[R + 0 >> 2];
						Dp(P, d, n, m, g, h, j, 13e4, 130032 | 0);
						HEAP32[e >> 2] = HEAP32[P >> 2];
						break
					}
				case 114: {
						HEAP32[J >> 2] = HEAP32[e >> 2];
						HEAP32[K >> 2] = HEAP32[f >> 2];
						HEAP32[n + 0 >> 2] = HEAP32[J + 0 >> 2];
						HEAP32[m + 0 >> 2] = HEAP32[K + 0 >> 2];
						Dp(I, d, n, m, g, h, j, 129928, 129972 | 0);
						HEAP32[e >> 2] = HEAP32[I >> 2];
						break
					}
				case 116:
				case 110: {
						HEAP32[G >> 2] = HEAP32[f >> 2];
						HEAP32[m + 0 >> 2] = HEAP32[G + 0 >> 2];
						Wp(d, e, m, h, $);
						break
					}
				case 104:
				case 66:
				case 98: {
						HEAP32[q >> 2] = HEAP32[f >> 2];
						HEAP32[m + 0 >> 2] = HEAP32[q + 0 >> 2];
						Mp(d, j + 16 | 0, e, m, h, $);
						break
					}
				case 82: {
						HEAP32[M >> 2] = HEAP32[e >> 2];
						HEAP32[N >> 2] = HEAP32[f >> 2];
						HEAP32[n + 0 >> 2] = HEAP32[M + 0 >> 2];
						HEAP32[m + 0 >> 2] = HEAP32[N + 0 >> 2];
						Dp(L, d, n, m, g, h, j, 129976, 129996 | 0);
						HEAP32[e >> 2] = HEAP32[L >> 2];
						break
					}
				case 89: {
						HEAP32[Z >> 2] = HEAP32[f >> 2];
						HEAP32[m + 0 >> 2] = HEAP32[Z + 0 >> 2];
						_p(d, j + 20 | 0, e, m, h, $);
						break
					}
				case 70: {
						HEAP32[z >> 2] = HEAP32[e >> 2];
						HEAP32[A >> 2] = HEAP32[f >> 2];
						HEAP32[n + 0 >> 2] = HEAP32[z + 0 >> 2];
						HEAP32[m + 0 >> 2] = HEAP32[A + 0 >> 2];
						Dp(y, d, n, m, g, h, j, 129896, 129928 | 0);
						HEAP32[e >> 2] = HEAP32[y >> 2];
						break
					}
				case 109: {
						HEAP32[E >> 2] = HEAP32[f >> 2];
						HEAP32[m + 0 >> 2] = HEAP32[E + 0 >> 2];
						Up(d, j + 16 | 0, e, m, h, $);
						break
					}
				case 106: {
						HEAP32[D >> 2] = HEAP32[f >> 2];
						HEAP32[m + 0 >> 2] = HEAP32[D + 0 >> 2];
						Tp(d, j + 28 | 0, e, m, h, $);
						break
					}
				case 37: {
						HEAP32[_ >> 2] = HEAP32[f >> 2];
						HEAP32[m + 0 >> 2] = HEAP32[_ + 0 >> 2];
						$p(d, e, m, h, $);
						break
					}
				case 77: {
						HEAP32[F >> 2] = HEAP32[f >> 2];
						HEAP32[m + 0 >> 2] = HEAP32[F + 0 >> 2];
						Vp(d, j + 4 | 0, e, m, h, $);
						break
					}
				case 121: {
						HEAP32[Y >> 2] = HEAP32[f >> 2];
						HEAP32[m + 0 >> 2] = HEAP32[Y + 0 >> 2];
						Op(d, j + 20 | 0, e, m, h, $);
						break
					}
				case 99: {
						o = d + 8 | 0;
						aa = tc[c[(HEAP32[o >> 2] | 0) + 12 >> 2] & 127](o) | 0;
						HEAP32[s >> 2] = HEAP32[e >> 2];
						HEAP32[t >> 2] = HEAP32[f >> 2];
						o = HEAP8[aa >> 0] | 0;
						if (!(o & 1)) {
							ba = aa + 4 | 0;
							ca = (o & 255) >>> 1;
							da = aa + 4 | 0
						} else {
							o = HEAP32[aa + 8 >> 2] | 0;
							ba = o;
							ca = HEAP32[aa + 4 >> 2] | 0;
							da = o
						}
						HEAP32[n + 0 >> 2] = HEAP32[s + 0 >> 2];
						HEAP32[m + 0 >> 2] = HEAP32[t + 0 >> 2];
						Dp(r, d, n, m, g, h, j, da, ba + (ca << 2) | 0);
						HEAP32[e >> 2] = HEAP32[r >> 2];
						break
					}
				case 73: {
						HEAP32[C >> 2] = HEAP32[f >> 2];
						HEAP32[m + 0 >> 2] = HEAP32[C + 0 >> 2];
						Sp(d, j + 8 | 0, e, m, h, $);
						break
					}
				case 120: {
						o = HEAP32[(HEAP32[d >> 2] | 0) + 20 >> 2] | 0;
						HEAP32[T >> 2] = HEAP32[e >> 2];
						HEAP32[U >> 2] = HEAP32[f >> 2];
						HEAP32[n + 0 >> 2] = HEAP32[T + 0 >> 2];
						HEAP32[m + 0 >> 2] = HEAP32[U + 0 >> 2];
						qc[o & 63](b, d, n, m, g, h, j);
						i = l;
						return
					}
				case 112: {
						HEAP32[H >> 2] = HEAP32[f >> 2];
						HEAP32[m + 0 >> 2] = HEAP32[H + 0 >> 2];
						Xp(d, j + 8 | 0, e, m, h, $);
						break
					}
				case 88: {
						o = d + 8 | 0;
						aa = tc[c[(HEAP32[o >> 2] | 0) + 24 >> 2] & 127](o) | 0;
						HEAP32[W >> 2] = HEAP32[e >> 2];
						HEAP32[X >> 2] = HEAP32[f >> 2];
						o = HEAP8[aa >> 0] | 0;
						if (!(o & 1)) {
							ea = aa + 4 | 0;
							fa = (o & 255) >>> 1;
							ga = aa + 4 | 0
						} else {
							o = HEAP32[aa + 8 >> 2] | 0;
							ea = o;
							fa = HEAP32[aa + 4 >> 2] | 0;
							ga = o
						}
						HEAP32[n + 0 >> 2] = HEAP32[W + 0 >> 2];
						HEAP32[m + 0 >> 2] = HEAP32[X + 0 >> 2];
						Dp(V, d, n, m, g, h, j, ga, ea + (fa << 2) | 0);
						HEAP32[e >> 2] = HEAP32[V >> 2];
						break
					}
				case 72: {
						HEAP32[B >> 2] = HEAP32[f >> 2];
						HEAP32[m + 0 >> 2] = HEAP32[B + 0 >> 2];
						Rp(d, j + 8 | 0, e, m, h, $);
						break
					}
				default:
					HEAP32[h >> 2] = HEAP32[h >> 2] | 4
				}
			while (0);
			HEAP32[b >> 2] = HEAP32[e >> 2];
			i = l;
			return
		}
		function Qp(a, b, d, e, f, g) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0;
			a = i;
			i = i + 16 | 0;
			h = a + 4 | 0;
			j = a;
			HEAP32[j >> 2] = HEAP32[e >> 2];
			HEAP32[h + 0 >> 2] = HEAP32[j + 0 >> 2];
			j = Nu(d, h, f, g, 2) | 0;
			g = HEAP32[f >> 2] | 0;
			if ((g & 4 | 0) == 0 & (j | 0) > 0 & (j | 0) < 32) {
				HEAP32[b >> 2] = j;
				i = a;
				return
			} else {
				HEAP32[f >> 2] = g | 4;
				i = a;
				return
			}
		}
		function Rp(a, b, d, e, f, g) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0;
			a = i;
			i = i + 16 | 0;
			h = a + 4 | 0;
			j = a;
			HEAP32[j >> 2] = HEAP32[e >> 2];
			HEAP32[h + 0 >> 2] = HEAP32[j + 0 >> 2];
			j = Nu(d, h, f, g, 2) | 0;
			g = HEAP32[f >> 2] | 0;
			if ((g & 4 | 0) == 0 & (j | 0) < 24) {
				HEAP32[b >> 2] = j;
				i = a;
				return
			} else {
				HEAP32[f >> 2] = g | 4;
				i = a;
				return
			}
		}
		function Sp(a, b, d, e, f, g) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0;
			a = i;
			i = i + 16 | 0;
			h = a + 4 | 0;
			j = a;
			HEAP32[j >> 2] = HEAP32[e >> 2];
			HEAP32[h + 0 >> 2] = HEAP32[j + 0 >> 2];
			j = Nu(d, h, f, g, 2) | 0;
			g = HEAP32[f >> 2] | 0;
			if ((g & 4 | 0) == 0 & (j | 0) > 0 & (j | 0) < 13) {
				HEAP32[b >> 2] = j;
				i = a;
				return
			} else {
				HEAP32[f >> 2] = g | 4;
				i = a;
				return
			}
		}
		function Tp(a, b, d, e, f, g) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0;
			a = i;
			i = i + 16 | 0;
			h = a + 4 | 0;
			j = a;
			HEAP32[j >> 2] = HEAP32[e >> 2];
			HEAP32[h + 0 >> 2] = HEAP32[j + 0 >> 2];
			j = Nu(d, h, f, g, 3) | 0;
			g = HEAP32[f >> 2] | 0;
			if ((g & 4 | 0) == 0 & (j | 0) < 366) {
				HEAP32[b >> 2] = j;
				i = a;
				return
			} else {
				HEAP32[f >> 2] = g | 4;
				i = a;
				return
			}
		}
		function Up(a, b, d, e, f, g) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0;
			a = i;
			i = i + 16 | 0;
			h = a + 4 | 0;
			j = a;
			HEAP32[j >> 2] = HEAP32[e >> 2];
			HEAP32[h + 0 >> 2] = HEAP32[j + 0 >> 2];
			j = Nu(d, h, f, g, 2) | 0;
			g = HEAP32[f >> 2] | 0;
			if ((g & 4 | 0) == 0 & (j | 0) < 13) {
				HEAP32[b >> 2] = j + -1;
				i = a;
				return
			} else {
				HEAP32[f >> 2] = g | 4;
				i = a;
				return
			}
		}
		function Vp(a, b, d, e, f, g) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0;
			a = i;
			i = i + 16 | 0;
			h = a + 4 | 0;
			j = a;
			HEAP32[j >> 2] = HEAP32[e >> 2];
			HEAP32[h + 0 >> 2] = HEAP32[j + 0 >> 2];
			j = Nu(d, h, f, g, 2) | 0;
			g = HEAP32[f >> 2] | 0;
			if ((g & 4 | 0) == 0 & (j | 0) < 60) {
				HEAP32[b >> 2] = j;
				i = a;
				return
			} else {
				HEAP32[f >> 2] = g | 4;
				i = a;
				return
			}
		}
		function Wp(a, b, d, e, f) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0;
			a = i;
			a: while (1) {
				g = HEAP32[b >> 2] | 0;
				do
					if (g) {
						h = HEAP32[g + 12 >> 2] | 0;
						if ((h | 0) == (HEAP32[g + 16 >> 2] | 0))
							j = tc[c[(HEAP32[g >> 2] | 0) + 36 >> 2] & 127](g) | 0;
						else
							j = HEAP32[h >> 2] | 0;
						if ((j | 0) == -1) {
							HEAP32[b >> 2] = 0;
							k = 1;
							break
						} else {
							k = (HEAP32[b >> 2] | 0) == 0;
							break
						}
					} else
						k = 1;
				while (0);
				g = HEAP32[d >> 2] | 0;
				do
					if (g) {
						h = HEAP32[g + 12 >> 2] | 0;
						if ((h | 0) == (HEAP32[g + 16 >> 2] | 0))
							l = tc[c[(HEAP32[g >> 2] | 0) + 36 >> 2] & 127](g) | 0;
						else
							l = HEAP32[h >> 2] | 0;
						if ((l | 0) != -1)
							if (k) {
								m = g;
								break
							} else {
								n = g;
								break a
							}
						else {
							HEAP32[d >> 2] = 0;
							o = 15;
							break
						}
					} else
						o = 15;
				while (0);
				if ((o | 0) == 15) {
					o = 0;
					if (k) {
						n = 0;
						break
					} else
						m = 0
				}
				g = HEAP32[b >> 2] | 0;
				h = HEAP32[g + 12 >> 2] | 0;
				if ((h | 0) == (HEAP32[g + 16 >> 2] | 0))
					p = tc[c[(HEAP32[g >> 2] | 0) + 36 >> 2] & 127](g) | 0;
				else
					p = HEAP32[h >> 2] | 0;
				if (!(mc[c[(HEAP32[f >> 2] | 0) + 12 >> 2] & 31](f, 8192, p) | 0)) {
					n = m;
					break
				}
				h = HEAP32[b >> 2] | 0;
				g = h + 12 | 0;
				q = HEAP32[g >> 2] | 0;
				if ((q | 0) == (HEAP32[h + 16 >> 2] | 0)) {
					tc[c[(HEAP32[h >> 2] | 0) + 40 >> 2] & 127](h) | 0;
					continue
				} else {
					HEAP32[g >> 2] = q + 4;
					continue
				}
			}
			m = HEAP32[b >> 2] | 0;
			do
				if (m) {
					p = HEAP32[m + 12 >> 2] | 0;
					if ((p | 0) == (HEAP32[m + 16 >> 2] | 0))
						r = tc[c[(HEAP32[m >> 2] | 0) + 36 >> 2] & 127](m) | 0;
					else
						r = HEAP32[p >> 2] | 0;
					if ((r | 0) == -1) {
						HEAP32[b >> 2] = 0;
						s = 1;
						break
					} else {
						s = (HEAP32[b >> 2] | 0) == 0;
						break
					}
				} else
					s = 1;
			while (0);
			do
				if (n) {
					b = HEAP32[n + 12 >> 2] | 0;
					if ((b | 0) == (HEAP32[n + 16 >> 2] | 0))
						t = tc[c[(HEAP32[n >> 2] | 0) + 36 >> 2] & 127](n) | 0;
					else
						t = HEAP32[b >> 2] | 0;
					if ((t | 0) == -1) {
						HEAP32[d >> 2] = 0;
						o = 37;
						break
					}
					if (s) {
						i = a;
						return
					}
				} else
					o = 37;
			while (0);
			if ((o | 0) == 37 ? !s : 0) {
				i = a;
				return
			}
			HEAP32[e >> 2] = HEAP32[e >> 2] | 2;
			i = a;
			return
		}
		function Xp(b, d, e, f, g, h) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			var j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0;
			j = i;
			i = i + 16 | 0;
			k = j + 4 | 0;
			l = j;
			m = b + 8 | 0;
			b = tc[c[(HEAP32[m >> 2] | 0) + 8 >> 2] & 127](m) | 0;
			m = HEAP8[b >> 0] | 0;
			if (!(m & 1))
				n = (m & 255) >>> 1;
			else
				n = HEAP32[b + 4 >> 2] | 0;
			m = HEAP8[b + 12 >> 0] | 0;
			if (!(m & 1))
				o = (m & 255) >>> 1;
			else
				o = HEAP32[b + 16 >> 2] | 0;
			if ((n | 0) == (0 - o | 0)) {
				HEAP32[g >> 2] = HEAP32[g >> 2] | 4;
				i = j;
				return
			}
			HEAP32[l >> 2] = HEAP32[f >> 2];
			HEAP32[k + 0 >> 2] = HEAP32[l + 0 >> 2];
			l = yu(e, k, b, b + 24 | 0, h, g, 0) | 0;
			g = l - b | 0;
			if ((l | 0) == (b | 0) ? (HEAP32[d >> 2] | 0) == 12 : 0) {
				HEAP32[d >> 2] = 0;
				i = j;
				return
			}
			if ((g | 0) != 12) {
				i = j;
				return
			}
			g = HEAP32[d >> 2] | 0;
			if ((g | 0) >= 12) {
				i = j;
				return
			}
			HEAP32[d >> 2] = g + 12;
			i = j;
			return
		}
		function Yp(a, b, d, e, f, g) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0;
			a = i;
			i = i + 16 | 0;
			h = a + 4 | 0;
			j = a;
			HEAP32[j >> 2] = HEAP32[e >> 2];
			HEAP32[h + 0 >> 2] = HEAP32[j + 0 >> 2];
			j = Nu(d, h, f, g, 2) | 0;
			g = HEAP32[f >> 2] | 0;
			if ((g & 4 | 0) == 0 & (j | 0) < 61) {
				HEAP32[b >> 2] = j;
				i = a;
				return
			} else {
				HEAP32[f >> 2] = g | 4;
				i = a;
				return
			}
		}
		function Zp(a, b, d, e, f, g) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0;
			a = i;
			i = i + 16 | 0;
			h = a + 4 | 0;
			j = a;
			HEAP32[j >> 2] = HEAP32[e >> 2];
			HEAP32[h + 0 >> 2] = HEAP32[j + 0 >> 2];
			j = Nu(d, h, f, g, 1) | 0;
			g = HEAP32[f >> 2] | 0;
			if ((g & 4 | 0) == 0 & (j | 0) < 7) {
				HEAP32[b >> 2] = j;
				i = a;
				return
			} else {
				HEAP32[f >> 2] = g | 4;
				i = a;
				return
			}
		}
		function _p(a, b, d, e, f, g) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0;
			a = i;
			i = i + 16 | 0;
			h = a + 4 | 0;
			j = a;
			HEAP32[j >> 2] = HEAP32[e >> 2];
			HEAP32[h + 0 >> 2] = HEAP32[j + 0 >> 2];
			j = Nu(d, h, f, g, 4) | 0;
			if (HEAP32[f >> 2] & 4) {
				i = a;
				return
			}
			HEAP32[b >> 2] = j + -1900;
			i = a;
			return
		}
		function $p(a, b, d, e, f) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0;
			a = i;
			g = HEAP32[b >> 2] | 0;
			do
				if (g) {
					h = HEAP32[g + 12 >> 2] | 0;
					if ((h | 0) == (HEAP32[g + 16 >> 2] | 0))
						j = tc[c[(HEAP32[g >> 2] | 0) + 36 >> 2] & 127](g) | 0;
					else
						j = HEAP32[h >> 2] | 0;
					if ((j | 0) == -1) {
						HEAP32[b >> 2] = 0;
						k = 1;
						break
					} else {
						k = (HEAP32[b >> 2] | 0) == 0;
						break
					}
				} else
					k = 1;
			while (0);
			j = HEAP32[d >> 2] | 0;
			do
				if (j) {
					g = HEAP32[j + 12 >> 2] | 0;
					if ((g | 0) == (HEAP32[j + 16 >> 2] | 0))
						l = tc[c[(HEAP32[j >> 2] | 0) + 36 >> 2] & 127](j) | 0;
					else
						l = HEAP32[g >> 2] | 0;
					if ((l | 0) != -1)
						if (k) {
							m = j;
							break
						} else {
							n = 16;
							break
						}
					else {
						HEAP32[d >> 2] = 0;
						n = 14;
						break
					}
				} else
					n = 14;
			while (0);
			if ((n | 0) == 14)
				if (k)
					n = 16;
				else
					m = 0;
			if ((n | 0) == 16) {
				HEAP32[e >> 2] = HEAP32[e >> 2] | 6;
				i = a;
				return
			}
			k = HEAP32[b >> 2] | 0;
			j = HEAP32[k + 12 >> 2] | 0;
			if ((j | 0) == (HEAP32[k + 16 >> 2] | 0))
				o = tc[c[(HEAP32[k >> 2] | 0) + 36 >> 2] & 127](k) | 0;
			else
				o = HEAP32[j >> 2] | 0;
			if ((mc[c[(HEAP32[f >> 2] | 0) + 52 >> 2] & 31](f, o, 0) | 0) << 24 >> 24 != 37) {
				HEAP32[e >> 2] = HEAP32[e >> 2] | 4;
				i = a;
				return
			}
			o = HEAP32[b >> 2] | 0;
			f = o + 12 | 0;
			j = HEAP32[f >> 2] | 0;
			if ((j | 0) == (HEAP32[o + 16 >> 2] | 0)) {
				tc[c[(HEAP32[o >> 2] | 0) + 40 >> 2] & 127](o) | 0;
				p = HEAP32[b >> 2] | 0
			} else {
				HEAP32[f >> 2] = j + 4;
				p = o
			}
			do
				if (p) {
					o = HEAP32[p + 12 >> 2] | 0;
					if ((o | 0) == (HEAP32[p + 16 >> 2] | 0))
						q = tc[c[(HEAP32[p >> 2] | 0) + 36 >> 2] & 127](p) | 0;
					else
						q = HEAP32[o >> 2] | 0;
					if ((q | 0) == -1) {
						HEAP32[b >> 2] = 0;
						r = 1;
						break
					} else {
						r = (HEAP32[b >> 2] | 0) == 0;
						break
					}
				} else
					r = 1;
			while (0);
			do
				if (m) {
					b = HEAP32[m + 12 >> 2] | 0;
					if ((b | 0) == (HEAP32[m + 16 >> 2] | 0))
						s = tc[c[(HEAP32[m >> 2] | 0) + 36 >> 2] & 127](m) | 0;
					else
						s = HEAP32[b >> 2] | 0;
					if ((s | 0) == -1) {
						HEAP32[d >> 2] = 0;
						n = 38;
						break
					}
					if (r) {
						i = a;
						return
					}
				} else
					n = 38;
			while (0);
			if ((n | 0) == 38 ? !r : 0) {
				i = a;
				return
			}
			HEAP32[e >> 2] = HEAP32[e >> 2] | 2;
			i = a;
			return
		}
		function aq(a) {
			a = a | 0;
			var b = 0;
			b = i;
			cq(a + 8 | 0);
			kl(a);
			i = b;
			return
		}
		function bq(a) {
			a = a | 0;
			var b = 0;
			b = i;
			cq(a + 8 | 0);
			i = b;
			return
		}
		function cq(a) {
			a = a | 0;
			var b = 0,
			d = 0;
			b = i;
			d = HEAP32[a >> 2] | 0;
			if ((d | 0) == (ko() | 0)) {
				i = b;
				return
			}
			fb(HEAP32[a >> 2] | 0);
			i = b;
			return
		}
		function dq(b, d, e, f, g, h, j, k) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			k = k | 0;
			var l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0;
			g = i;
			i = i + 112 | 0;
			f = g + 4 | 0;
			l = g;
			HEAP32[l >> 2] = f + 100;
			eq(d + 8 | 0, f, l, h, j, k);
			k = HEAP32[l >> 2] | 0;
			l = HEAP32[e >> 2] | 0;
			if ((f | 0) == (k | 0)) {
				m = l;
				HEAP32[b >> 2] = m;
				i = g;
				return
			} else {
				n = f;
				o = l
			}
			while (1) {
				l = HEAP8[n >> 0] | 0;
				do
					if (o) {
						f = o + 24 | 0;
						e = HEAP32[f >> 2] | 0;
						if ((e | 0) == (HEAP32[o + 28 >> 2] | 0)) {
							j = (Cc[c[(HEAP32[o >> 2] | 0) + 52 >> 2] & 31](o, l & 255) | 0) == -1;
							p = j ? 0 : o;
							break
						} else {
							HEAP32[f >> 2] = e + 1;
							HEAP8[e >> 0] = l;
							p = o;
							break
						}
					} else
						p = 0;
				while (0);
				n = n + 1 | 0;
				if ((n | 0) == (k | 0)) {
					m = p;
					break
				} else
					o = p
			}
			HEAP32[b >> 2] = m;
			i = g;
			return
		}
		function eq(b, d, e, f, g, h) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			var j = 0,
			k = 0,
			l = 0,
			m = 0;
			j = i;
			i = i + 16 | 0;
			k = j;
			HEAP8[k >> 0] = 37;
			l = k + 1 | 0;
			HEAP8[l >> 0] = g;
			m = k + 2 | 0;
			HEAP8[m >> 0] = h;
			HEAP8[k + 3 >> 0] = 0;
			if (h << 24 >> 24) {
				HEAP8[l >> 0] = h;
				HEAP8[m >> 0] = g
			}
			HEAP32[e >> 2] = d + (Pb(d | 0, (HEAP32[e >> 2] | 0) - d | 0, k | 0, f | 0, HEAP32[b >> 2] | 0) | 0);
			i = j;
			return
		}
		function fq(a) {
			a = a | 0;
			var b = 0;
			b = i;
			cq(a + 8 | 0);
			kl(a);
			i = b;
			return
		}
		function gq(a) {
			a = a | 0;
			var b = 0;
			b = i;
			cq(a + 8 | 0);
			i = b;
			return
		}
		function hq(a, b, d, e, f, g, h, j) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			var k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0;
			f = i;
			i = i + 416 | 0;
			e = f + 8 | 0;
			k = f;
			HEAP32[k >> 2] = e + 400;
			iq(b + 8 | 0, e, k, g, h, j);
			j = HEAP32[k >> 2] | 0;
			k = HEAP32[d >> 2] | 0;
			if ((e | 0) == (j | 0)) {
				l = k;
				HEAP32[a >> 2] = l;
				i = f;
				return
			} else {
				m = e;
				n = k
			}
			while (1) {
				k = HEAP32[m >> 2] | 0;
				if (!n)
					o = 0;
				else {
					e = n + 24 | 0;
					d = HEAP32[e >> 2] | 0;
					if ((d | 0) == (HEAP32[n + 28 >> 2] | 0))
						p = Cc[c[(HEAP32[n >> 2] | 0) + 52 >> 2] & 31](n, k) | 0;
					else {
						HEAP32[e >> 2] = d + 4;
						HEAP32[d >> 2] = k;
						p = k
					}
					o = (p | 0) == -1 ? 0 : n
				}
				m = m + 4 | 0;
				if ((m | 0) == (j | 0)) {
					l = o;
					break
				} else
					n = o
			}
			HEAP32[a >> 2] = l;
			i = f;
			return
		}
		function iq(a, b, d, e, f, g) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0;
			h = i;
			i = i + 128 | 0;
			j = h + 16 | 0;
			k = h + 12 | 0;
			l = h;
			m = h + 8 | 0;
			HEAP32[k >> 2] = j + 100;
			eq(a, j, k, e, f, g);
			g = l;
			HEAP32[g >> 2] = 0;
			HEAP32[g + 4 >> 2] = 0;
			HEAP32[m >> 2] = j;
			j = (HEAP32[d >> 2] | 0) - b >> 2;
			g = zb(HEAP32[a >> 2] | 0) | 0;
			a = iw(b, m, j, l) | 0;
			if (g)
				zb(g | 0) | 0;
			if ((a | 0) == -1)
				er(131656);
			else {
				HEAP32[d >> 2] = b + (a << 2);
				i = h;
				return
			}
		}
		function jq(a) {
			a = a | 0;
			var b = 0;
			b = i;
			kl(a);
			i = b;
			return
		}
		function kq(a) {
			a = a | 0;
			return
		}
		function lq(a) {
			a = a | 0;
			return 127
		}
		function mq(a) {
			a = a | 0;
			return 127
		}
		function nq(a, b) {
			a = a | 0;
			b = b | 0;
			HEAP32[a + 0 >> 2] = 0;
			HEAP32[a + 4 >> 2] = 0;
			HEAP32[a + 8 >> 2] = 0;
			return
		}
		function oq(a, b) {
			a = a | 0;
			b = b | 0;
			HEAP32[a + 0 >> 2] = 0;
			HEAP32[a + 4 >> 2] = 0;
			HEAP32[a + 8 >> 2] = 0;
			return
		}
		function pq(a, b) {
			a = a | 0;
			b = b | 0;
			HEAP32[a + 0 >> 2] = 0;
			HEAP32[a + 4 >> 2] = 0;
			HEAP32[a + 8 >> 2] = 0;
			return
		}
		function qq(a, b) {
			a = a | 0;
			b = b | 0;
			b = i;
			$l(a, 1, 45);
			i = b;
			return
		}
		function rq(a) {
			a = a | 0;
			return 0
		}
		function sq(b, c) {
			b = b | 0;
			c = c | 0;
			HEAP8[b >> 0] = 2;
			HEAP8[b + 1 >> 0] = 3;
			HEAP8[b + 2 >> 0] = 0;
			HEAP8[b + 3 >> 0] = 4;
			return
		}
		function tq(b, c) {
			b = b | 0;
			c = c | 0;
			HEAP8[b >> 0] = 2;
			HEAP8[b + 1 >> 0] = 3;
			HEAP8[b + 2 >> 0] = 0;
			HEAP8[b + 3 >> 0] = 4;
			return
		}
		function uq(a) {
			a = a | 0;
			var b = 0;
			b = i;
			kl(a);
			i = b;
			return
		}
		function vq(a) {
			a = a | 0;
			return
		}
		function wq(a) {
			a = a | 0;
			return 127
		}
		function xq(a) {
			a = a | 0;
			return 127
		}
		function yq(a, b) {
			a = a | 0;
			b = b | 0;
			HEAP32[a + 0 >> 2] = 0;
			HEAP32[a + 4 >> 2] = 0;
			HEAP32[a + 8 >> 2] = 0;
			return
		}
		function zq(a, b) {
			a = a | 0;
			b = b | 0;
			HEAP32[a + 0 >> 2] = 0;
			HEAP32[a + 4 >> 2] = 0;
			HEAP32[a + 8 >> 2] = 0;
			return
		}
		function Aq(a, b) {
			a = a | 0;
			b = b | 0;
			HEAP32[a + 0 >> 2] = 0;
			HEAP32[a + 4 >> 2] = 0;
			HEAP32[a + 8 >> 2] = 0;
			return
		}
		function Bq(a, b) {
			a = a | 0;
			b = b | 0;
			b = i;
			$l(a, 1, 45);
			i = b;
			return
		}
		function Cq(a) {
			a = a | 0;
			return 0
		}
		function Dq(b, c) {
			b = b | 0;
			c = c | 0;
			HEAP8[b >> 0] = 2;
			HEAP8[b + 1 >> 0] = 3;
			HEAP8[b + 2 >> 0] = 0;
			HEAP8[b + 3 >> 0] = 4;
			return
		}
		function Eq(b, c) {
			b = b | 0;
			c = c | 0;
			HEAP8[b >> 0] = 2;
			HEAP8[b + 1 >> 0] = 3;
			HEAP8[b + 2 >> 0] = 0;
			HEAP8[b + 3 >> 0] = 4;
			return
		}
		function Fq(a) {
			a = a | 0;
			var b = 0;
			b = i;
			kl(a);
			i = b;
			return
		}
		function Gq(a) {
			a = a | 0;
			return
		}
		function Hq(a) {
			a = a | 0;
			return 2147483647
		}
		function Iq(a) {
			a = a | 0;
			return 2147483647
		}
		function Jq(a, b) {
			a = a | 0;
			b = b | 0;
			HEAP32[a + 0 >> 2] = 0;
			HEAP32[a + 4 >> 2] = 0;
			HEAP32[a + 8 >> 2] = 0;
			return
		}
		function Kq(a, b) {
			a = a | 0;
			b = b | 0;
			HEAP32[a + 0 >> 2] = 0;
			HEAP32[a + 4 >> 2] = 0;
			HEAP32[a + 8 >> 2] = 0;
			return
		}
		function Lq(a, b) {
			a = a | 0;
			b = b | 0;
			HEAP32[a + 0 >> 2] = 0;
			HEAP32[a + 4 >> 2] = 0;
			HEAP32[a + 8 >> 2] = 0;
			return
		}
		function Mq(a, b) {
			a = a | 0;
			b = b | 0;
			b = i;
			nm(a, 1, 45);
			i = b;
			return
		}
		function Nq(a) {
			a = a | 0;
			return 0
		}
		function Oq(b, c) {
			b = b | 0;
			c = c | 0;
			HEAP8[b >> 0] = 2;
			HEAP8[b + 1 >> 0] = 3;
			HEAP8[b + 2 >> 0] = 0;
			HEAP8[b + 3 >> 0] = 4;
			return
		}
		function Pq(b, c) {
			b = b | 0;
			c = c | 0;
			HEAP8[b >> 0] = 2;
			HEAP8[b + 1 >> 0] = 3;
			HEAP8[b + 2 >> 0] = 0;
			HEAP8[b + 3 >> 0] = 4;
			return
		}
		function Qq(a) {
			a = a | 0;
			var b = 0;
			b = i;
			kl(a);
			i = b;
			return
		}
		function Rq(a) {
			a = a | 0;
			return
		}
		function Sq(a) {
			a = a | 0;
			return 2147483647
		}
		function Tq(a) {
			a = a | 0;
			return 2147483647
		}
		function Uq(a, b) {
			a = a | 0;
			b = b | 0;
			HEAP32[a + 0 >> 2] = 0;
			HEAP32[a + 4 >> 2] = 0;
			HEAP32[a + 8 >> 2] = 0;
			return
		}
		function Vq(a, b) {
			a = a | 0;
			b = b | 0;
			HEAP32[a + 0 >> 2] = 0;
			HEAP32[a + 4 >> 2] = 0;
			HEAP32[a + 8 >> 2] = 0;
			return
		}
		function Wq(a, b) {
			a = a | 0;
			b = b | 0;
			HEAP32[a + 0 >> 2] = 0;
			HEAP32[a + 4 >> 2] = 0;
			HEAP32[a + 8 >> 2] = 0;
			return
		}
		function Xq(a, b) {
			a = a | 0;
			b = b | 0;
			b = i;
			nm(a, 1, 45);
			i = b;
			return
		}
		function Yq(a) {
			a = a | 0;
			return 0
		}
		function Zq(b, c) {
			b = b | 0;
			c = c | 0;
			HEAP8[b >> 0] = 2;
			HEAP8[b + 1 >> 0] = 3;
			HEAP8[b + 2 >> 0] = 0;
			HEAP8[b + 3 >> 0] = 4;
			return
		}
		function _q(b, c) {
			b = b | 0;
			c = c | 0;
			HEAP8[b >> 0] = 2;
			HEAP8[b + 1 >> 0] = 3;
			HEAP8[b + 2 >> 0] = 0;
			HEAP8[b + 3 >> 0] = 4;
			return
		}
		function $q(a) {
			a = a | 0;
			var b = 0;
			b = i;
			kl(a);
			i = b;
			return
		}
		function ar(a) {
			a = a | 0;
			return
		}
		function br(b, d, e, f, g, h, j, k) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			k = k | 0;
			var l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0;
			d = i;
			i = i + 240 | 0;
			l = d;
			m = d + 136 | 0;
			n = d + 16 | 0;
			o = d + 12 | 0;
			p = d + 8 | 0;
			q = d + 134 | 0;
			r = d + 4 | 0;
			s = d + 124 | 0;
			t = d + 24 | 0;
			HEAP32[n >> 2] = m;
			u = n + 4 | 0;
			HEAP32[u >> 2] = 185;
			Am(p, h);
			v = Yr(p, 130776) | 0;
			HEAP8[q >> 0] = 0;
			HEAP32[r >> 2] = HEAP32[f >> 2];
			w = HEAP32[h + 4 >> 2] | 0;
			HEAP32[l + 0 >> 2] = HEAP32[r + 0 >> 2];
			do
				if (dr(e, l, g, p, w, j, q, v, n, o, m + 100 | 0) | 0) {
					zc[c[(HEAP32[v >> 2] | 0) + 32 >> 2] & 15](v, 130392, 130402, s) | 0;
					r = HEAP32[o >> 2] | 0;
					h = HEAP32[n >> 2] | 0;
					x = r - h | 0;
					if ((x | 0) > 98) {
						y = vx(x + 2 | 0) | 0;
						if (!y)
							qx();
						else {
							z = y;
							A = y
						}
					} else {
						z = 0;
						A = t
					}
					if (!(HEAP8[q >> 0] | 0))
						B = A;
					else {
						HEAP8[A >> 0] = 45;
						B = A + 1 | 0
					}
					if (h >>> 0 < r >>> 0) {
						r = s + 10 | 0;
						y = s;
						x = B;
						C = h;
						while (1) {
							h = HEAP8[C >> 0] | 0;
							D = s;
							while (1) {
								if ((HEAP8[D >> 0] | 0) == h << 24 >> 24) {
									E = D;
									break
								}
								D = D + 1 | 0;
								if ((D | 0) == (r | 0)) {
									E = r;
									break
								}
							}
							HEAP8[x >> 0] = HEAP8[130392 + (E - y) >> 0] | 0;
							C = C + 1 | 0;
							D = x + 1 | 0;
							if (C >>> 0 >= (HEAP32[o >> 2] | 0) >>> 0) {
								F = D;
								break
							} else
								x = D
						}
					} else
						F = B;
					HEAP8[F >> 0] = 0;
					HEAP32[l >> 2] = k;
					if ((nw(t, 130408, l) | 0) == 1) {
						wx(z);
						break
					} else
						er(130416)
				}
			while (0);
			z = HEAP32[e >> 2] | 0;
			do
				if (z)
					if ((HEAP32[z + 12 >> 2] | 0) == (HEAP32[z + 16 >> 2] | 0))
						if ((tc[c[(HEAP32[z >> 2] | 0) + 36 >> 2] & 127](z) | 0) == -1) {
							HEAP32[e >> 2] = 0;
							G = 0;
							break
						} else {
							G = HEAP32[e >> 2] | 0;
							break
						}
					else
						G = z;
				else
					G = 0;
			while (0);
			z = (G | 0) == 0;
			G = HEAP32[f >> 2] | 0;
			do
				if (G) {
					if ((HEAP32[G + 12 >> 2] | 0) != (HEAP32[G + 16 >> 2] | 0))
						if (z)
							break;
						else {
							H = 28;
							break
						}
					if ((tc[c[(HEAP32[G >> 2] | 0) + 36 >> 2] & 127](G) | 0) != -1)
						if (z)
							break;
						else {
							H = 28;
							break
						}
					else {
						HEAP32[f >> 2] = 0;
						H = 26;
						break
					}
				} else
					H = 26;
			while (0);
			if ((H | 0) == 26 ? z : 0)
				H = 28;
			if ((H | 0) == 28)
				HEAP32[j >> 2] = HEAP32[j >> 2] | 2;
			HEAP32[b >> 2] = HEAP32[e >> 2];
			Jl(HEAP32[p >> 2] | 0) | 0;
			p = HEAP32[n >> 2] | 0;
			HEAP32[n >> 2] = 0;
			if (!p) {
				i = d;
				return
			}
			lc[HEAP32[u >> 2] & 255](p);
			i = d;
			return
		}
		function cr(a) {
			a = a | 0;
			return
		}
		function dr(e, f, g, h, j, k, l, m, n, o, p) {
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			k = k | 0;
			l = l | 0;
			m = m | 0;
			n = n | 0;
			o = o | 0;
			p = p | 0;
			var q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0,
			O = 0,
			P = 0,
			Q = 0,
			R = 0,
			S = 0,
			T = 0,
			U = 0,
			V = 0,
			W = 0,
			X = 0,
			Y = 0,
			Z = 0,
			_ = 0,
			$ = 0,
			aa = 0,
			ba = 0,
			ca = 0,
			da = 0,
			ea = 0,
			fa = 0,
			ga = 0,
			ha = 0,
			ia = 0,
			ja = 0,
			ka = 0,
			la = 0,
			ma = 0,
			na = 0,
			oa = 0,
			pa = 0,
			qa = 0,
			ra = 0,
			sa = 0,
			ta = 0,
			ua = 0,
			va = 0,
			wa = 0,
			xa = 0,
			ya = 0,
			za = 0,
			Aa = 0,
			Ba = 0,
			Ca = 0,
			Da = 0,
			Ea = 0,
			Fa = 0,
			Ga = 0,
			Ha = 0,
			Ia = 0,
			Ja = 0,
			Ka = 0,
			La = 0,
			Ma = 0,
			Na = 0,
			Oa = 0,
			Pa = 0,
			Qa = 0,
			Ra = 0,
			Sa = 0,
			Ta = 0,
			Ua = 0,
			Va = 0,
			Wa = 0,
			Xa = 0,
			Ya = 0,
			Za = 0,
			_a = 0,
			$a = 0,
			ab = 0,
			bb = 0,
			cb = 0,
			db = 0,
			eb = 0,
			fb = 0,
			gb = 0,
			hb = 0,
			ib = 0,
			jb = 0,
			kb = 0,
			lb = 0,
			mb = 0,
			nb = 0,
			ob = 0,
			pb = 0,
			qb = 0,
			rb = 0,
			sb = 0,
			tb = 0,
			ub = 0,
			vb = 0,
			wb = 0,
			xb = 0,
			yb = 0,
			zb = 0,
			Ab = 0,
			Bb = 0,
			Cb = 0,
			Db = 0,
			Eb = 0,
			Fb = 0,
			Gb = 0,
			Hb = 0,
			Ib = 0,
			Jb = 0,
			Kb = 0,
			Lb = 0,
			Mb = 0;
			q = i;
			i = i + 496 | 0;
			r = q + 488 | 0;
			s = q + 88 | 0;
			t = q + 80 | 0;
			u = q + 76 | 0;
			v = q + 72 | 0;
			w = q + 68 | 0;
			x = q + 493 | 0;
			y = q + 492 | 0;
			z = q + 56 | 0;
			A = q + 44 | 0;
			B = q + 32 | 0;
			C = q + 20 | 0;
			D = q + 8 | 0;
			E = q + 4 | 0;
			F = q;
			HEAP32[r >> 2] = p;
			HEAP32[t >> 2] = s;
			p = t + 4 | 0;
			HEAP32[p >> 2] = 185;
			HEAP32[u >> 2] = s;
			HEAP32[v >> 2] = s + 400;
			HEAP32[w >> 2] = 0;
			HEAP32[z + 0 >> 2] = 0;
			HEAP32[z + 4 >> 2] = 0;
			HEAP32[z + 8 >> 2] = 0;
			HEAP32[A + 0 >> 2] = 0;
			HEAP32[A + 4 >> 2] = 0;
			HEAP32[A + 8 >> 2] = 0;
			HEAP32[B + 0 >> 2] = 0;
			HEAP32[B + 4 >> 2] = 0;
			HEAP32[B + 8 >> 2] = 0;
			HEAP32[C + 0 >> 2] = 0;
			HEAP32[C + 4 >> 2] = 0;
			HEAP32[C + 8 >> 2] = 0;
			HEAP32[D + 0 >> 2] = 0;
			HEAP32[D + 4 >> 2] = 0;
			HEAP32[D + 8 >> 2] = 0;
			gr(g, h, w, x, y, z, A, B, C, E);
			HEAP32[o >> 2] = HEAP32[n >> 2];
			h = m + 8 | 0;
			m = C + 1 | 0;
			g = C + 4 | 0;
			G = C + 8 | 0;
			H = B + 1 | 0;
			I = B + 4 | 0;
			J = B + 8 | 0;
			K = (j & 512 | 0) != 0;
			j = A + 1 | 0;
			L = A + 8 | 0;
			M = A + 4 | 0;
			N = D + 1 | 0;
			O = D + 8 | 0;
			P = D + 4 | 0;
			Q = w + 3 | 0;
			R = z + 4 | 0;
			S = s;
			s = 0;
			T = 0;
			a: while (1) {
				U = HEAP32[e >> 2] | 0;
				do
					if (U)
						if ((HEAP32[U + 12 >> 2] | 0) == (HEAP32[U + 16 >> 2] | 0))
							if ((tc[c[(HEAP32[U >> 2] | 0) + 36 >> 2] & 127](U) | 0) == -1) {
								HEAP32[e >> 2] = 0;
								V = 0;
								break
							} else {
								V = HEAP32[e >> 2] | 0;
								break
							}
						else
							V = U;
					else
						V = 0;
				while (0);
				U = (V | 0) == 0;
				W = HEAP32[f >> 2] | 0;
				do
					if (W) {
						if ((HEAP32[W + 12 >> 2] | 0) != (HEAP32[W + 16 >> 2] | 0))
							if (U) {
								X = W;
								break
							} else {
								Y = S;
								Z = W;
								_ = T;
								$ = 250;
								break a
							}
						if ((tc[c[(HEAP32[W >> 2] | 0) + 36 >> 2] & 127](W) | 0) != -1)
							if (U) {
								X = W;
								break
							} else {
								Y = S;
								Z = W;
								_ = T;
								$ = 250;
								break a
							}
						else {
							HEAP32[f >> 2] = 0;
							$ = 12;
							break
						}
					} else
						$ = 12;
				while (0);
				if (($ | 0) == 12) {
					$ = 0;
					if (U) {
						Y = S;
						Z = 0;
						_ = T;
						$ = 250;
						break
					} else
						X = 0
				}
				b: do
					switch (HEAP8[w + s >> 0] | 0) {
					case 0: {
							$ = 27;
							break
						}
					case 2: {
							if (!((T | 0) != 0 | s >>> 0 < 2)) {
								if ((s | 0) == 2)
									aa = (HEAP8[Q >> 0] | 0) != 0;
								else
									aa = 0;
								if (!(K | aa)) {
									ba = X;
									ca = S;
									da = 0;
									break b
								}
							}
							W = HEAP8[A >> 0] | 0;
							ea = (W & 1) == 0;
							fa = ea ? j : HEAP32[L >> 2] | 0;
							c: do
								if ((s | 0) != 0 ? (HEAPU8[w + (s + -1) >> 0] | 0) < 2 : 0) {
									ga = (W & 255) >>> 1;
									ha = HEAP32[L >> 2] | 0;
									ia = HEAP32[M >> 2] | 0;
									ja = fa;
									while (1) {
										if ((ja | 0) == ((ea ? j : ha) + (ea ? ga : ia) | 0))
											break;
										ka = HEAP8[ja >> 0] | 0;
										if (ka << 24 >> 24 <= -1)
											break;
										if (!(b[(HEAP32[h >> 2] | 0) + (ka << 24 >> 24 << 1) >> 1] & 8192))
											break;
										else
											ja = ja + 1 | 0
									}
									ia = ja - (ea ? j : ha) | 0;
									ga = HEAP8[D >> 0] | 0;
									ka = (ga & 1) == 0;
									if (ka)
										la = (ga & 255) >>> 1;
									else
										la = HEAP32[P >> 2] | 0;
									d: do
										if (ia >>> 0 <= la >>> 0) {
											if (ka) {
												ma = N;
												na = (ga & 255) >>> 1;
												oa = D + (((ga & 255) >>> 1) - ia) + 1 | 0
											} else {
												pa = HEAP32[O >> 2] | 0;
												qa = HEAP32[P >> 2] | 0;
												ma = pa;
												na = qa;
												oa = pa + (qa - ia) | 0
											}
											qa = ma + na | 0;
											if ((oa | 0) == (qa | 0)) {
												ra = X;
												sa = W;
												ta = ja;
												ua = X;
												break c
											} else {
												va = oa;
												wa = ea ? j : ha
											}
											while (1) {
												if ((HEAP8[va >> 0] | 0) != (HEAP8[wa >> 0] | 0))
													break d;
												va = va + 1 | 0;
												if ((va | 0) == (qa | 0)) {
													ra = X;
													sa = W;
													ta = ja;
													ua = X;
													break c
												} else
													wa = wa + 1 | 0
											}
										}
									while (0);
									ra = X;
									sa = W;
									ta = ea ? j : ha;
									ua = X
								} else {
									ra = X;
									sa = W;
									ta = fa;
									ua = X
								}
							while (0);
							e: while (1) {
								if (!(sa & 1)) {
									xa = j;
									ya = (sa & 255) >>> 1
								} else {
									xa = HEAP32[L >> 2] | 0;
									ya = HEAP32[M >> 2] | 0
								}
								if ((ta | 0) == (xa + ya | 0)) {
									za = ra;
									break
								}
								fa = HEAP32[e >> 2] | 0;
								do
									if (fa)
										if ((HEAP32[fa + 12 >> 2] | 0) == (HEAP32[fa + 16 >> 2] | 0))
											if ((tc[c[(HEAP32[fa >> 2] | 0) + 36 >> 2] & 127](fa) | 0) == -1) {
												HEAP32[e >> 2] = 0;
												Aa = 0;
												break
											} else {
												Aa = HEAP32[e >> 2] | 0;
												break
											}
										else
											Aa = fa;
									else
										Aa = 0;
								while (0);
								fa = (Aa | 0) == 0;
								do
									if (ua) {
										if ((HEAP32[ua + 12 >> 2] | 0) != (HEAP32[ua + 16 >> 2] | 0))
											if (fa) {
												Ba = ra;
												Ca = ua;
												break
											} else {
												za = ra;
												break e
											}
										if ((tc[c[(HEAP32[ua >> 2] | 0) + 36 >> 2] & 127](ua) | 0) != -1)
											if (fa ^ (ra | 0) == 0) {
												Ba = ra;
												Ca = ra;
												break
											} else {
												za = ra;
												break e
											}
										else {
											HEAP32[f >> 2] = 0;
											Da = 0;
											$ = 149;
											break
										}
									} else {
										Da = ra;
										$ = 149
									}
								while (0);
								if (($ | 0) == 149) {
									$ = 0;
									if (fa) {
										za = Da;
										break
									} else {
										Ba = Da;
										Ca = 0
									}
								}
								ha = HEAP32[e >> 2] | 0;
								W = HEAP32[ha + 12 >> 2] | 0;
								if ((W | 0) == (HEAP32[ha + 16 >> 2] | 0))
									Ea = tc[c[(HEAP32[ha >> 2] | 0) + 36 >> 2] & 127](ha) | 0;
								else
									Ea = HEAPU8[W >> 0] | 0;
								if ((Ea & 255) << 24 >> 24 != (HEAP8[ta >> 0] | 0)) {
									za = Ba;
									break
								}
								W = HEAP32[e >> 2] | 0;
								ha = W + 12 | 0;
								ea = HEAP32[ha >> 2] | 0;
								if ((ea | 0) == (HEAP32[W + 16 >> 2] | 0))
									tc[c[(HEAP32[W >> 2] | 0) + 40 >> 2] & 127](W) | 0;
								else
									HEAP32[ha >> 2] = ea + 1;
								ra = Ba;
								sa = HEAP8[A >> 0] | 0;
								ta = ta + 1 | 0;
								ua = Ca
							}
							if (K) {
								ea = HEAP8[A >> 0] | 0;
								if (!(ea & 1)) {
									Fa = j;
									Ga = (ea & 255) >>> 1
								} else {
									Fa = HEAP32[L >> 2] | 0;
									Ga = HEAP32[M >> 2] | 0
								}
								if ((ta | 0) != (Fa + Ga | 0)) {
									$ = 164;
									break a
								} else {
									ba = za;
									ca = S;
									da = T
								}
							} else {
								ba = za;
								ca = S;
								da = T
							}
							break
						}
					case 3: {
							ea = HEAP8[B >> 0] | 0;
							ha = (ea & 1) == 0;
							if (ha)
								Ha = (ea & 255) >>> 1;
							else
								Ha = HEAP32[I >> 2] | 0;
							W = HEAP8[C >> 0] | 0;
							ja = (W & 1) == 0;
							if (ja)
								Ia = (W & 255) >>> 1;
							else
								Ia = HEAP32[g >> 2] | 0;
							if ((Ha | 0) == (0 - Ia | 0)) {
								ba = X;
								ca = S;
								da = T
							} else {
								if (ha)
									Ja = (ea & 255) >>> 1;
								else
									Ja = HEAP32[I >> 2] | 0;
								if (Ja) {
									if (ja)
										Ka = (W & 255) >>> 1;
									else
										Ka = HEAP32[g >> 2] | 0;
									if (Ka) {
										ja = HEAP32[e >> 2] | 0;
										ia = HEAP32[ja + 12 >> 2] | 0;
										if ((ia | 0) == (HEAP32[ja + 16 >> 2] | 0)) {
											ga = tc[c[(HEAP32[ja >> 2] | 0) + 36 >> 2] & 127](ja) | 0;
											La = ga;
											Ma = HEAP8[B >> 0] | 0
										} else {
											La = HEAPU8[ia >> 0] | 0;
											Ma = ea
										}
										ia = HEAP32[e >> 2] | 0;
										ga = ia + 12 | 0;
										ja = HEAP32[ga >> 2] | 0;
										ka = (ja | 0) == (HEAP32[ia + 16 >> 2] | 0);
										if ((La & 255) << 24 >> 24 == (a[((Ma & 1) == 0 ? H : HEAP32[J >> 2] | 0) >> 0] | 0)) {
											if (ka)
												tc[c[(HEAP32[ia >> 2] | 0) + 40 >> 2] & 127](ia) | 0;
											else
												HEAP32[ga >> 2] = ja + 1;
											ga = HEAP8[B >> 0] | 0;
											if (!(ga & 1))
												Na = (ga & 255) >>> 1;
											else
												Na = HEAP32[I >> 2] | 0;
											ba = X;
											ca = S;
											da = Na >>> 0 > 1 ? B : T;
											break b
										}
										if (ka)
											Oa = tc[c[(HEAP32[ia >> 2] | 0) + 36 >> 2] & 127](ia) | 0;
										else
											Oa = HEAPU8[ja >> 0] | 0;
										if ((Oa & 255) << 24 >> 24 != (a[((HEAP8[C >> 0] & 1) == 0 ? m : HEAP32[G >> 2] | 0) >> 0] | 0)) {
											$ = 113;
											break a
										}
										ja = HEAP32[e >> 2] | 0;
										ia = ja + 12 | 0;
										ka = HEAP32[ia >> 2] | 0;
										if ((ka | 0) == (HEAP32[ja + 16 >> 2] | 0))
											tc[c[(HEAP32[ja >> 2] | 0) + 40 >> 2] & 127](ja) | 0;
										else
											HEAP32[ia >> 2] = ka + 1;
										HEAP8[l >> 0] = 1;
										ka = HEAP8[C >> 0] | 0;
										if (!(ka & 1))
											Pa = (ka & 255) >>> 1;
										else
											Pa = HEAP32[g >> 2] | 0;
										ba = X;
										ca = S;
										da = Pa >>> 0 > 1 ? C : T;
										break b
									}
								}
								if (ha)
									Qa = (ea & 255) >>> 1;
								else
									Qa = HEAP32[I >> 2] | 0;
								ha = HEAP32[e >> 2] | 0;
								ka = HEAP32[ha + 12 >> 2] | 0;
								ia = (ka | 0) == (HEAP32[ha + 16 >> 2] | 0);
								if (!Qa) {
									if (ia) {
										ja = tc[c[(HEAP32[ha >> 2] | 0) + 36 >> 2] & 127](ha) | 0;
										Ra = ja;
										Sa = HEAP8[C >> 0] | 0
									} else {
										Ra = HEAPU8[ka >> 0] | 0;
										Sa = W
									}
									if ((Ra & 255) << 24 >> 24 != (a[((Sa & 1) == 0 ? m : HEAP32[G >> 2] | 0) >> 0] | 0)) {
										ba = X;
										ca = S;
										da = T;
										break b
									}
									W = HEAP32[e >> 2] | 0;
									ja = W + 12 | 0;
									ga = HEAP32[ja >> 2] | 0;
									if ((ga | 0) == (HEAP32[W + 16 >> 2] | 0))
										tc[c[(HEAP32[W >> 2] | 0) + 40 >> 2] & 127](W) | 0;
									else
										HEAP32[ja >> 2] = ga + 1;
									HEAP8[l >> 0] = 1;
									ga = HEAP8[C >> 0] | 0;
									if (!(ga & 1))
										Ta = (ga & 255) >>> 1;
									else
										Ta = HEAP32[g >> 2] | 0;
									ba = X;
									ca = S;
									da = Ta >>> 0 > 1 ? C : T;
									break b
								}
								if (ia) {
									ia = tc[c[(HEAP32[ha >> 2] | 0) + 36 >> 2] & 127](ha) | 0;
									Ua = ia;
									Va = HEAP8[B >> 0] | 0
								} else {
									Ua = HEAPU8[ka >> 0] | 0;
									Va = ea
								}
								if ((Ua & 255) << 24 >> 24 != (a[((Va & 1) == 0 ? H : HEAP32[J >> 2] | 0) >> 0] | 0)) {
									HEAP8[l >> 0] = 1;
									ba = X;
									ca = S;
									da = T;
									break b
								}
								ea = HEAP32[e >> 2] | 0;
								ka = ea + 12 | 0;
								ia = HEAP32[ka >> 2] | 0;
								if ((ia | 0) == (HEAP32[ea + 16 >> 2] | 0))
									tc[c[(HEAP32[ea >> 2] | 0) + 40 >> 2] & 127](ea) | 0;
								else
									HEAP32[ka >> 2] = ia + 1;
								ia = HEAP8[B >> 0] | 0;
								if (!(ia & 1))
									Wa = (ia & 255) >>> 1;
								else
									Wa = HEAP32[I >> 2] | 0;
								ba = X;
								ca = S;
								da = Wa >>> 0 > 1 ? B : T
							}
							break
						}
					case 4: {
							ia = HEAP8[y >> 0] | 0;
							ka = X;
							ea = X;
							ha = S;
							ga = 0;
							f: while (1) {
								ja = HEAP32[e >> 2] | 0;
								do
									if (ja)
										if ((HEAP32[ja + 12 >> 2] | 0) == (HEAP32[ja + 16 >> 2] | 0))
											if ((tc[c[(HEAP32[ja >> 2] | 0) + 36 >> 2] & 127](ja) | 0) == -1) {
												HEAP32[e >> 2] = 0;
												Xa = 0;
												break
											} else {
												Xa = HEAP32[e >> 2] | 0;
												break
											}
										else
											Xa = ja;
									else
										Xa = 0;
								while (0);
								ja = (Xa | 0) == 0;
								do
									if (ea) {
										if ((HEAP32[ea + 12 >> 2] | 0) != (HEAP32[ea + 16 >> 2] | 0))
											if (ja) {
												Ya = ka;
												Za = ea;
												break
											} else {
												_a = ka;
												break f
											}
										if ((tc[c[(HEAP32[ea >> 2] | 0) + 36 >> 2] & 127](ea) | 0) != -1)
											if (ja ^ (ka | 0) == 0) {
												Ya = ka;
												Za = ka;
												break
											} else {
												_a = ka;
												break f
											}
										else {
											HEAP32[f >> 2] = 0;
											$a = 0;
											$ = 175;
											break
										}
									} else {
										$a = ka;
										$ = 175
									}
								while (0);
								if (($ | 0) == 175) {
									$ = 0;
									if (ja) {
										_a = $a;
										break
									} else {
										Ya = $a;
										Za = 0
									}
								}
								fa = HEAP32[e >> 2] | 0;
								W = HEAP32[fa + 12 >> 2] | 0;
								if ((W | 0) == (HEAP32[fa + 16 >> 2] | 0))
									ab = tc[c[(HEAP32[fa >> 2] | 0) + 36 >> 2] & 127](fa) | 0;
								else
									ab = HEAPU8[W >> 0] | 0;
								W = ab & 255;
								if (W << 24 >> 24 > -1 ? (b[(HEAP32[h >> 2] | 0) + (ab << 24 >> 24 << 1) >> 1] & 2048) != 0 : 0) {
									fa = HEAP32[o >> 2] | 0;
									if ((fa | 0) == (HEAP32[r >> 2] | 0)) {
										Ou(n, o, r);
										bb = HEAP32[o >> 2] | 0
									} else
										bb = fa;
									HEAP32[o >> 2] = bb + 1;
									HEAP8[bb >> 0] = W;
									cb = ha;
									db = ga + 1 | 0
								} else {
									fa = HEAP8[z >> 0] | 0;
									if (!(fa & 1))
										eb = (fa & 255) >>> 1;
									else
										eb = HEAP32[R >> 2] | 0;
									if (!((eb | 0) != 0 & (ga | 0) != 0 & W << 24 >> 24 == ia << 24 >> 24)) {
										_a = Ya;
										break
									}
									if ((ha | 0) == (HEAP32[v >> 2] | 0)) {
										Pu(t, u, v);
										fb = HEAP32[u >> 2] | 0
									} else
										fb = ha;
									W = fb + 4 | 0;
									HEAP32[u >> 2] = W;
									HEAP32[fb >> 2] = ga;
									cb = W;
									db = 0
								}
								W = HEAP32[e >> 2] | 0;
								fa = W + 12 | 0;
								qa = HEAP32[fa >> 2] | 0;
								if ((qa | 0) == (HEAP32[W + 16 >> 2] | 0)) {
									tc[c[(HEAP32[W >> 2] | 0) + 40 >> 2] & 127](W) | 0;
									ka = Ya;
									ea = Za;
									ha = cb;
									ga = db;
									continue
								} else {
									HEAP32[fa >> 2] = qa + 1;
									ka = Ya;
									ea = Za;
									ha = cb;
									ga = db;
									continue
								}
							}
							if ((ga | 0) != 0 ? (HEAP32[t >> 2] | 0) != (ha | 0) : 0) {
								if ((ha | 0) == (HEAP32[v >> 2] | 0)) {
									Pu(t, u, v);
									gb = HEAP32[u >> 2] | 0
								} else
									gb = ha;
								ea = gb + 4 | 0;
								HEAP32[u >> 2] = ea;
								HEAP32[gb >> 2] = ga;
								hb = ea
							} else
								hb = ha;
							ea = HEAP32[E >> 2] | 0;
							if ((ea | 0) > 0) {
								ka = HEAP32[e >> 2] | 0;
								do
									if (ka)
										if ((HEAP32[ka + 12 >> 2] | 0) == (HEAP32[ka + 16 >> 2] | 0))
											if ((tc[c[(HEAP32[ka >> 2] | 0) + 36 >> 2] & 127](ka) | 0) == -1) {
												HEAP32[e >> 2] = 0;
												ib = 0;
												break
											} else {
												ib = HEAP32[e >> 2] | 0;
												break
											}
										else
											ib = ka;
									else
										ib = 0;
								while (0);
								ka = (ib | 0) == 0;
								do
									if (_a) {
										if ((HEAP32[_a + 12 >> 2] | 0) != (HEAP32[_a + 16 >> 2] | 0))
											if (ka) {
												jb = _a;
												break
											} else {
												$ = 216;
												break a
											}
										if ((tc[c[(HEAP32[_a >> 2] | 0) + 36 >> 2] & 127](_a) | 0) != -1)
											if (ka ^ (_a | 0) == 0) {
												jb = _a;
												break
											} else {
												$ = 216;
												break a
											}
										else {
											HEAP32[f >> 2] = 0;
											$ = 210;
											break
										}
									} else
										$ = 210;
								while (0);
								if (($ | 0) == 210) {
									$ = 0;
									if (ka) {
										$ = 216;
										break a
									} else
										jb = 0
								}
								ha = HEAP32[e >> 2] | 0;
								ga = HEAP32[ha + 12 >> 2] | 0;
								if ((ga | 0) == (HEAP32[ha + 16 >> 2] | 0))
									kb = tc[c[(HEAP32[ha >> 2] | 0) + 36 >> 2] & 127](ha) | 0;
								else
									kb = HEAPU8[ga >> 0] | 0;
								if ((kb & 255) << 24 >> 24 != (HEAP8[x >> 0] | 0)) {
									$ = 216;
									break a
								}
								ga = HEAP32[e >> 2] | 0;
								ha = ga + 12 | 0;
								ia = HEAP32[ha >> 2] | 0;
								if ((ia | 0) == (HEAP32[ga + 16 >> 2] | 0)) {
									tc[c[(HEAP32[ga >> 2] | 0) + 40 >> 2] & 127](ga) | 0;
									lb = jb;
									mb = jb;
									nb = ea
								} else {
									HEAP32[ha >> 2] = ia + 1;
									lb = jb;
									mb = jb;
									nb = ea
								}
								while (1) {
									ia = HEAP32[e >> 2] | 0;
									do
										if (ia)
											if ((HEAP32[ia + 12 >> 2] | 0) == (HEAP32[ia + 16 >> 2] | 0))
												if ((tc[c[(HEAP32[ia >> 2] | 0) + 36 >> 2] & 127](ia) | 0) == -1) {
													HEAP32[e >> 2] = 0;
													ob = 0;
													break
												} else {
													ob = HEAP32[e >> 2] | 0;
													break
												}
											else
												ob = ia;
										else
											ob = 0;
									while (0);
									ia = (ob | 0) == 0;
									do
										if (mb) {
											if ((HEAP32[mb + 12 >> 2] | 0) != (HEAP32[mb + 16 >> 2] | 0))
												if (ia) {
													pb = lb;
													qb = mb;
													break
												} else {
													$ = 237;
													break a
												}
											if ((tc[c[(HEAP32[mb >> 2] | 0) + 36 >> 2] & 127](mb) | 0) != -1)
												if (ia ^ (lb | 0) == 0) {
													pb = lb;
													qb = lb;
													break
												} else {
													$ = 237;
													break a
												}
											else {
												HEAP32[f >> 2] = 0;
												rb = 0;
												$ = 230;
												break
											}
										} else {
											rb = lb;
											$ = 230
										}
									while (0);
									if (($ | 0) == 230) {
										$ = 0;
										if (ia) {
											$ = 237;
											break a
										} else {
											pb = rb;
											qb = 0
										}
									}
									ja = HEAP32[e >> 2] | 0;
									ha = HEAP32[ja + 12 >> 2] | 0;
									if ((ha | 0) == (HEAP32[ja + 16 >> 2] | 0))
										sb = tc[c[(HEAP32[ja >> 2] | 0) + 36 >> 2] & 127](ja) | 0;
									else
										sb = HEAPU8[ha >> 0] | 0;
									if ((sb & 255) << 24 >> 24 <= -1) {
										$ = 237;
										break a
									}
									if (!(b[(HEAP32[h >> 2] | 0) + (sb << 24 >> 24 << 1) >> 1] & 2048)) {
										$ = 237;
										break a
									}
									if ((HEAP32[o >> 2] | 0) == (HEAP32[r >> 2] | 0))
										Ou(n, o, r);
									ha = HEAP32[e >> 2] | 0;
									ja = HEAP32[ha + 12 >> 2] | 0;
									if ((ja | 0) == (HEAP32[ha + 16 >> 2] | 0))
										tb = tc[c[(HEAP32[ha >> 2] | 0) + 36 >> 2] & 127](ha) | 0;
									else
										tb = HEAPU8[ja >> 0] | 0;
									ja = HEAP32[o >> 2] | 0;
									HEAP32[o >> 2] = ja + 1;
									HEAP8[ja >> 0] = tb;
									nb = nb + -1 | 0;
									HEAP32[E >> 2] = nb;
									ja = HEAP32[e >> 2] | 0;
									ha = ja + 12 | 0;
									ga = HEAP32[ha >> 2] | 0;
									if ((ga | 0) == (HEAP32[ja + 16 >> 2] | 0))
										tc[c[(HEAP32[ja >> 2] | 0) + 40 >> 2] & 127](ja) | 0;
									else
										HEAP32[ha >> 2] = ga + 1;
									if ((nb | 0) <= 0) {
										ub = pb;
										break
									} else {
										lb = pb;
										mb = qb
									}
								}
							} else
								ub = _a;
							if ((HEAP32[o >> 2] | 0) == (HEAP32[n >> 2] | 0)) {
								$ = 248;
								break a
							} else {
								ba = ub;
								ca = hb;
								da = T
							}
							break
						}
					case 1: {
							if ((s | 0) == 3) {
								Y = S;
								Z = X;
								_ = T;
								$ = 250;
								break a
							}
							ea = HEAP32[e >> 2] | 0;
							ka = HEAP32[ea + 12 >> 2] | 0;
							if ((ka | 0) == (HEAP32[ea + 16 >> 2] | 0))
								vb = tc[c[(HEAP32[ea >> 2] | 0) + 36 >> 2] & 127](ea) | 0;
							else
								vb = HEAPU8[ka >> 0] | 0;
							if ((vb & 255) << 24 >> 24 <= -1) {
								$ = 26;
								break a
							}
							if (!(b[(HEAP32[h >> 2] | 0) + (vb << 24 >> 24 << 1) >> 1] & 8192)) {
								$ = 26;
								break a
							}
							ka = HEAP32[e >> 2] | 0;
							ea = ka + 12 | 0;
							ga = HEAP32[ea >> 2] | 0;
							if ((ga | 0) == (HEAP32[ka + 16 >> 2] | 0))
								wb = tc[c[(HEAP32[ka >> 2] | 0) + 40 >> 2] & 127](ka) | 0;
							else {
								HEAP32[ea >> 2] = ga + 1;
								wb = HEAPU8[ga >> 0] | 0
							}
							im(D, wb & 255);
							$ = 27;
							break
						}
					default: {
							ba = X;
							ca = S;
							da = T
						}
					}
				while (0);
				g: do
					if (($ | 0) == 27) {
						$ = 0;
						if ((s | 0) == 3) {
							Y = S;
							Z = X;
							_ = T;
							$ = 250;
							break a
						} else {
							xb = X;
							yb = X
						}
						while (1) {
							U = HEAP32[e >> 2] | 0;
							do
								if (U)
									if ((HEAP32[U + 12 >> 2] | 0) == (HEAP32[U + 16 >> 2] | 0))
										if ((tc[c[(HEAP32[U >> 2] | 0) + 36 >> 2] & 127](U) | 0) == -1) {
											HEAP32[e >> 2] = 0;
											zb = 0;
											break
										} else {
											zb = HEAP32[e >> 2] | 0;
											break
										}
									else
										zb = U;
								else
									zb = 0;
							while (0);
							U = (zb | 0) == 0;
							do
								if (yb) {
									if ((HEAP32[yb + 12 >> 2] | 0) != (HEAP32[yb + 16 >> 2] | 0))
										if (U) {
											Ab = xb;
											Bb = yb;
											break
										} else {
											ba = xb;
											ca = S;
											da = T;
											break g
										}
									if ((tc[c[(HEAP32[yb >> 2] | 0) + 36 >> 2] & 127](yb) | 0) != -1)
										if (U ^ (xb | 0) == 0) {
											Ab = xb;
											Bb = xb;
											break
										} else {
											ba = xb;
											ca = S;
											da = T;
											break g
										}
									else {
										HEAP32[f >> 2] = 0;
										Cb = 0;
										$ = 38;
										break
									}
								} else {
									Cb = xb;
									$ = 38
								}
							while (0);
							if (($ | 0) == 38) {
								$ = 0;
								if (U) {
									ba = Cb;
									ca = S;
									da = T;
									break g
								} else {
									Ab = Cb;
									Bb = 0
								}
							}
							ia = HEAP32[e >> 2] | 0;
							ga = HEAP32[ia + 12 >> 2] | 0;
							if ((ga | 0) == (HEAP32[ia + 16 >> 2] | 0))
								Db = tc[c[(HEAP32[ia >> 2] | 0) + 36 >> 2] & 127](ia) | 0;
							else
								Db = HEAPU8[ga >> 0] | 0;
							if ((Db & 255) << 24 >> 24 <= -1) {
								ba = Ab;
								ca = S;
								da = T;
								break g
							}
							if (!(b[(HEAP32[h >> 2] | 0) + (Db << 24 >> 24 << 1) >> 1] & 8192)) {
								ba = Ab;
								ca = S;
								da = T;
								break g
							}
							ga = HEAP32[e >> 2] | 0;
							ia = ga + 12 | 0;
							ea = HEAP32[ia >> 2] | 0;
							if ((ea | 0) == (HEAP32[ga + 16 >> 2] | 0))
								Eb = tc[c[(HEAP32[ga >> 2] | 0) + 40 >> 2] & 127](ga) | 0;
							else {
								HEAP32[ia >> 2] = ea + 1;
								Eb = HEAPU8[ea >> 0] | 0
							}
							im(D, Eb & 255);
							xb = Ab;
							yb = Bb
						}
					}
				while (0);
				s = s + 1 | 0;
				if (s >>> 0 >= 4) {
					Y = ca;
					Z = ba;
					_ = da;
					$ = 250;
					break
				} else {
					S = ca;
					T = da
				}
			}
			h: do
				if (($ | 0) == 26) {
					HEAP32[k >> 2] = HEAP32[k >> 2] | 4;
					Fb = 0
				} else if (($ | 0) == 113) {
					HEAP32[k >> 2] = HEAP32[k >> 2] | 4;
					Fb = 0
				} else if (($ | 0) == 164) {
					HEAP32[k >> 2] = HEAP32[k >> 2] | 4;
					Fb = 0
				} else if (($ | 0) == 216) {
					HEAP32[k >> 2] = HEAP32[k >> 2] | 4;
					Fb = 0
				} else if (($ | 0) == 237) {
					HEAP32[k >> 2] = HEAP32[k >> 2] | 4;
					Fb = 0
				} else if (($ | 0) == 248) {
					HEAP32[k >> 2] = HEAP32[k >> 2] | 4;
					Fb = 0
				} else if (($ | 0) == 250) {
					i: do
						if (_) {
							da = _ + 1 | 0;
							T = _ + 8 | 0;
							ca = _ + 4 | 0;
							S = Z;
							ba = Z;
							s = 1;
							j: while (1) {
								Bb = HEAP8[_ >> 0] | 0;
								if (!(Bb & 1))
									Gb = (Bb & 255) >>> 1;
								else
									Gb = HEAP32[ca >> 2] | 0;
								if (s >>> 0 >= Gb >>> 0)
									break i;
								Bb = HEAP32[e >> 2] | 0;
								do
									if (Bb)
										if ((HEAP32[Bb + 12 >> 2] | 0) == (HEAP32[Bb + 16 >> 2] | 0))
											if ((tc[c[(HEAP32[Bb >> 2] | 0) + 36 >> 2] & 127](Bb) | 0) == -1) {
												HEAP32[e >> 2] = 0;
												Hb = 0;
												break
											} else {
												Hb = HEAP32[e >> 2] | 0;
												break
											}
										else
											Hb = Bb;
									else
										Hb = 0;
								while (0);
								Bb = (Hb | 0) == 0;
								do
									if (ba) {
										if ((HEAP32[ba + 12 >> 2] | 0) != (HEAP32[ba + 16 >> 2] | 0))
											if (Bb) {
												Ib = S;
												Jb = ba;
												break
											} else
												break j;
										if ((tc[c[(HEAP32[ba >> 2] | 0) + 36 >> 2] & 127](ba) | 0) != -1)
											if (Bb ^ (S | 0) == 0) {
												Ib = S;
												Jb = S;
												break
											} else
												break j;
										else {
											HEAP32[f >> 2] = 0;
											Kb = 0;
											$ = 266;
											break
										}
									} else {
										Kb = S;
										$ = 266
									}
								while (0);
								if (($ | 0) == 266) {
									$ = 0;
									if (Bb)
										break;
									else {
										Ib = Kb;
										Jb = 0
									}
								}
								U = HEAP32[e >> 2] | 0;
								yb = HEAP32[U + 12 >> 2] | 0;
								if ((yb | 0) == (HEAP32[U + 16 >> 2] | 0))
									Lb = tc[c[(HEAP32[U >> 2] | 0) + 36 >> 2] & 127](U) | 0;
								else
									Lb = HEAPU8[yb >> 0] | 0;
								if (!(HEAP8[_ >> 0] & 1))
									Mb = da;
								else
									Mb = HEAP32[T >> 2] | 0;
								if ((Lb & 255) << 24 >> 24 != (HEAP8[Mb + s >> 0] | 0))
									break;
								yb = s + 1 | 0;
								U = HEAP32[e >> 2] | 0;
								Ab = U + 12 | 0;
								xb = HEAP32[Ab >> 2] | 0;
								if ((xb | 0) == (HEAP32[U + 16 >> 2] | 0)) {
									tc[c[(HEAP32[U >> 2] | 0) + 40 >> 2] & 127](U) | 0;
									S = Ib;
									ba = Jb;
									s = yb;
									continue
								} else {
									HEAP32[Ab >> 2] = xb + 1;
									S = Ib;
									ba = Jb;
									s = yb;
									continue
								}
							}
							HEAP32[k >> 2] = HEAP32[k >> 2] | 4;
							Fb = 0;
							break h
						}
					while (0);
					s = HEAP32[t >> 2] | 0;
					if ((s | 0) != (Y | 0) ? (HEAP32[F >> 2] = 0, hr(z, s, Y, F), (HEAP32[F >> 2] | 0) != 0) : 0) {
						HEAP32[k >> 2] = HEAP32[k >> 2] | 4;
						Fb = 0
					} else
						Fb = 1
				}
			while (0);
			bm(D);
			bm(C);
			bm(B);
			bm(A);
			bm(z);
			z = HEAP32[t >> 2] | 0;
			HEAP32[t >> 2] = 0;
			if (!z) {
				i = q;
				return Fb | 0
			}
			lc[HEAP32[p >> 2] & 255](z);
			i = q;
			return Fb | 0
		}
		function er(a) {
			a = a | 0;
			var b = 0;
			b = ub(8) | 0;
			Ml(b, a);
			fc(b | 0, 139400, 150)
		}
		function fr(b, d, e, f, g, h, j, k) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			k = k | 0;
			var l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0;
			d = i;
			i = i + 144 | 0;
			l = d + 24 | 0;
			m = d + 32 | 0;
			n = d + 16 | 0;
			o = d + 8 | 0;
			p = d + 4 | 0;
			q = d + 28 | 0;
			r = d;
			HEAP32[n >> 2] = m;
			s = n + 4 | 0;
			HEAP32[s >> 2] = 185;
			Am(p, h);
			t = Yr(p, 130776) | 0;
			HEAP8[q >> 0] = 0;
			u = HEAP32[f >> 2] | 0;
			HEAP32[r >> 2] = u;
			v = HEAP32[h + 4 >> 2] | 0;
			HEAP32[l + 0 >> 2] = HEAP32[r + 0 >> 2];
			if (dr(e, l, g, p, v, j, q, t, n, o, m + 100 | 0) | 0) {
				if (!(HEAP8[k >> 0] & 1)) {
					HEAP8[k + 1 >> 0] = 0;
					HEAP8[k >> 0] = 0
				} else {
					HEAP8[HEAP32[k + 8 >> 2] >> 0] = 0;
					HEAP32[k + 4 >> 2] = 0
				}
				if (HEAP8[q >> 0] | 0)
					im(k, Cc[c[(HEAP32[t >> 2] | 0) + 28 >> 2] & 31](t, 45) | 0);
				q = Cc[c[(HEAP32[t >> 2] | 0) + 28 >> 2] & 31](t, 48) | 0;
				t = HEAP32[n >> 2] | 0;
				m = HEAP32[o >> 2] | 0;
				o = m + -1 | 0;
				a: do
					if (t >>> 0 < o >>> 0) {
						v = t;
						while (1) {
							g = v + 1 | 0;
							if ((HEAP8[v >> 0] | 0) != q << 24 >> 24) {
								w = v;
								break a
							}
							if (g >>> 0 < o >>> 0)
								v = g;
							else {
								w = g;
								break
							}
						}
					} else
						w = t;
				while (0);
				Qu(k, w, m) | 0
			}
			m = HEAP32[e >> 2] | 0;
			do
				if (m)
					if ((HEAP32[m + 12 >> 2] | 0) == (HEAP32[m + 16 >> 2] | 0))
						if ((tc[c[(HEAP32[m >> 2] | 0) + 36 >> 2] & 127](m) | 0) == -1) {
							HEAP32[e >> 2] = 0;
							x = 0;
							break
						} else {
							x = HEAP32[e >> 2] | 0;
							break
						}
					else
						x = m;
				else
					x = 0;
			while (0);
			m = (x | 0) == 0;
			do
				if (u) {
					if ((HEAP32[u + 12 >> 2] | 0) != (HEAP32[u + 16 >> 2] | 0))
						if (m)
							break;
						else {
							y = 23;
							break
						}
					if ((tc[c[(HEAP32[u >> 2] | 0) + 36 >> 2] & 127](u) | 0) != -1)
						if (m ^ (u | 0) == 0)
							break;
						else {
							y = 23;
							break
						}
					else {
						HEAP32[f >> 2] = 0;
						y = 21;
						break
					}
				} else
					y = 21;
			while (0);
			if ((y | 0) == 21 ? m : 0)
				y = 23;
			if ((y | 0) == 23)
				HEAP32[j >> 2] = HEAP32[j >> 2] | 2;
			HEAP32[b >> 2] = HEAP32[e >> 2];
			Jl(HEAP32[p >> 2] | 0) | 0;
			p = HEAP32[n >> 2] | 0;
			HEAP32[n >> 2] = 0;
			if (!p) {
				i = d;
				return
			}
			lc[HEAP32[s >> 2] & 255](p);
			i = d;
			return
		}
		function gr(b, d, e, f, g, h, j, k, l, m) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			k = k | 0;
			l = l | 0;
			m = m | 0;
			var n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0;
			n = i;
			i = i + 112 | 0;
			o = n + 100 | 0;
			p = n + 88 | 0;
			q = n + 76 | 0;
			r = n + 64 | 0;
			s = n + 52 | 0;
			t = n + 48 | 0;
			u = n + 36 | 0;
			v = n + 24 | 0;
			w = n + 12 | 0;
			x = n;
			if (b) {
				b = Yr(d, 130216) | 0;
				rc[c[(HEAP32[b >> 2] | 0) + 44 >> 2] & 127](o, b);
				y = HEAP32[o >> 2] | 0;
				HEAP8[e >> 0] = y;
				HEAP8[e + 1 >> 0] = y >> 8;
				HEAP8[e + 2 >> 0] = y >> 16;
				HEAP8[e + 3 >> 0] = y >> 24;
				rc[c[(HEAP32[b >> 2] | 0) + 32 >> 2] & 127](p, b);
				if (!(HEAP8[l >> 0] & 1)) {
					HEAP8[l + 1 >> 0] = 0;
					HEAP8[l >> 0] = 0
				} else {
					HEAP8[HEAP32[l + 8 >> 2] >> 0] = 0;
					HEAP32[l + 4 >> 2] = 0
				}
				gm(l, 0);
				HEAP32[l + 0 >> 2] = HEAP32[p + 0 >> 2];
				HEAP32[l + 4 >> 2] = HEAP32[p + 4 >> 2];
				HEAP32[l + 8 >> 2] = HEAP32[p + 8 >> 2];
				HEAP32[p + 0 >> 2] = 0;
				HEAP32[p + 4 >> 2] = 0;
				HEAP32[p + 8 >> 2] = 0;
				bm(p);
				rc[c[(HEAP32[b >> 2] | 0) + 28 >> 2] & 127](q, b);
				if (!(HEAP8[k >> 0] & 1)) {
					HEAP8[k + 1 >> 0] = 0;
					HEAP8[k >> 0] = 0
				} else {
					HEAP8[HEAP32[k + 8 >> 2] >> 0] = 0;
					HEAP32[k + 4 >> 2] = 0
				}
				gm(k, 0);
				HEAP32[k + 0 >> 2] = HEAP32[q + 0 >> 2];
				HEAP32[k + 4 >> 2] = HEAP32[q + 4 >> 2];
				HEAP32[k + 8 >> 2] = HEAP32[q + 8 >> 2];
				HEAP32[q + 0 >> 2] = 0;
				HEAP32[q + 4 >> 2] = 0;
				HEAP32[q + 8 >> 2] = 0;
				bm(q);
				HEAP8[f >> 0] = tc[c[(HEAP32[b >> 2] | 0) + 12 >> 2] & 127](b) | 0;
				HEAP8[g >> 0] = tc[c[(HEAP32[b >> 2] | 0) + 16 >> 2] & 127](b) | 0;
				rc[c[(HEAP32[b >> 2] | 0) + 20 >> 2] & 127](r, b);
				if (!(HEAP8[h >> 0] & 1)) {
					HEAP8[h + 1 >> 0] = 0;
					HEAP8[h >> 0] = 0
				} else {
					HEAP8[HEAP32[h + 8 >> 2] >> 0] = 0;
					HEAP32[h + 4 >> 2] = 0
				}
				gm(h, 0);
				HEAP32[h + 0 >> 2] = HEAP32[r + 0 >> 2];
				HEAP32[h + 4 >> 2] = HEAP32[r + 4 >> 2];
				HEAP32[h + 8 >> 2] = HEAP32[r + 8 >> 2];
				HEAP32[r + 0 >> 2] = 0;
				HEAP32[r + 4 >> 2] = 0;
				HEAP32[r + 8 >> 2] = 0;
				bm(r);
				rc[c[(HEAP32[b >> 2] | 0) + 24 >> 2] & 127](s, b);
				if (!(HEAP8[j >> 0] & 1)) {
					HEAP8[j + 1 >> 0] = 0;
					HEAP8[j >> 0] = 0
				} else {
					HEAP8[HEAP32[j + 8 >> 2] >> 0] = 0;
					HEAP32[j + 4 >> 2] = 0
				}
				gm(j, 0);
				HEAP32[j + 0 >> 2] = HEAP32[s + 0 >> 2];
				HEAP32[j + 4 >> 2] = HEAP32[s + 4 >> 2];
				HEAP32[j + 8 >> 2] = HEAP32[s + 8 >> 2];
				HEAP32[s + 0 >> 2] = 0;
				HEAP32[s + 4 >> 2] = 0;
				HEAP32[s + 8 >> 2] = 0;
				bm(s);
				z = tc[c[(HEAP32[b >> 2] | 0) + 36 >> 2] & 127](b) | 0;
				HEAP32[m >> 2] = z;
				i = n;
				return
			} else {
				b = Yr(d, 130152) | 0;
				rc[c[(HEAP32[b >> 2] | 0) + 44 >> 2] & 127](t, b);
				d = HEAP32[t >> 2] | 0;
				HEAP8[e >> 0] = d;
				HEAP8[e + 1 >> 0] = d >> 8;
				HEAP8[e + 2 >> 0] = d >> 16;
				HEAP8[e + 3 >> 0] = d >> 24;
				rc[c[(HEAP32[b >> 2] | 0) + 32 >> 2] & 127](u, b);
				if (!(HEAP8[l >> 0] & 1)) {
					HEAP8[l + 1 >> 0] = 0;
					HEAP8[l >> 0] = 0
				} else {
					HEAP8[HEAP32[l + 8 >> 2] >> 0] = 0;
					HEAP32[l + 4 >> 2] = 0
				}
				gm(l, 0);
				HEAP32[l + 0 >> 2] = HEAP32[u + 0 >> 2];
				HEAP32[l + 4 >> 2] = HEAP32[u + 4 >> 2];
				HEAP32[l + 8 >> 2] = HEAP32[u + 8 >> 2];
				HEAP32[u + 0 >> 2] = 0;
				HEAP32[u + 4 >> 2] = 0;
				HEAP32[u + 8 >> 2] = 0;
				bm(u);
				rc[c[(HEAP32[b >> 2] | 0) + 28 >> 2] & 127](v, b);
				if (!(HEAP8[k >> 0] & 1)) {
					HEAP8[k + 1 >> 0] = 0;
					HEAP8[k >> 0] = 0
				} else {
					HEAP8[HEAP32[k + 8 >> 2] >> 0] = 0;
					HEAP32[k + 4 >> 2] = 0
				}
				gm(k, 0);
				HEAP32[k + 0 >> 2] = HEAP32[v + 0 >> 2];
				HEAP32[k + 4 >> 2] = HEAP32[v + 4 >> 2];
				HEAP32[k + 8 >> 2] = HEAP32[v + 8 >> 2];
				HEAP32[v + 0 >> 2] = 0;
				HEAP32[v + 4 >> 2] = 0;
				HEAP32[v + 8 >> 2] = 0;
				bm(v);
				HEAP8[f >> 0] = tc[c[(HEAP32[b >> 2] | 0) + 12 >> 2] & 127](b) | 0;
				HEAP8[g >> 0] = tc[c[(HEAP32[b >> 2] | 0) + 16 >> 2] & 127](b) | 0;
				rc[c[(HEAP32[b >> 2] | 0) + 20 >> 2] & 127](w, b);
				if (!(HEAP8[h >> 0] & 1)) {
					HEAP8[h + 1 >> 0] = 0;
					HEAP8[h >> 0] = 0
				} else {
					HEAP8[HEAP32[h + 8 >> 2] >> 0] = 0;
					HEAP32[h + 4 >> 2] = 0
				}
				gm(h, 0);
				HEAP32[h + 0 >> 2] = HEAP32[w + 0 >> 2];
				HEAP32[h + 4 >> 2] = HEAP32[w + 4 >> 2];
				HEAP32[h + 8 >> 2] = HEAP32[w + 8 >> 2];
				HEAP32[w + 0 >> 2] = 0;
				HEAP32[w + 4 >> 2] = 0;
				HEAP32[w + 8 >> 2] = 0;
				bm(w);
				rc[c[(HEAP32[b >> 2] | 0) + 24 >> 2] & 127](x, b);
				if (!(HEAP8[j >> 0] & 1)) {
					HEAP8[j + 1 >> 0] = 0;
					HEAP8[j >> 0] = 0
				} else {
					HEAP8[HEAP32[j + 8 >> 2] >> 0] = 0;
					HEAP32[j + 4 >> 2] = 0
				}
				gm(j, 0);
				HEAP32[j + 0 >> 2] = HEAP32[x + 0 >> 2];
				HEAP32[j + 4 >> 2] = HEAP32[x + 4 >> 2];
				HEAP32[j + 8 >> 2] = HEAP32[x + 8 >> 2];
				HEAP32[x + 0 >> 2] = 0;
				HEAP32[x + 4 >> 2] = 0;
				HEAP32[x + 8 >> 2] = 0;
				bm(x);
				z = tc[c[(HEAP32[b >> 2] | 0) + 36 >> 2] & 127](b) | 0;
				HEAP32[m >> 2] = z;
				i = n;
				return
			}
		}
		function hr(b, d, e, f) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0;
			g = i;
			h = HEAP8[b >> 0] | 0;
			if (!(h & 1))
				j = (h & 255) >>> 1;
			else
				j = HEAP32[b + 4 >> 2] | 0;
			if (!j) {
				i = g;
				return
			}
			if ((d | 0) != (e | 0) ? (j = e + -4 | 0, j >>> 0 > d >>> 0) : 0) {
				k = d;
				l = j;
				do {
					j = HEAP32[k >> 2] | 0;
					HEAP32[k >> 2] = HEAP32[l >> 2];
					HEAP32[l >> 2] = j;
					k = k + 4 | 0;
					l = l + -4 | 0
				} while (k >>> 0 < l >>> 0);
				m = HEAP8[b >> 0] | 0
			} else
				m = h;
			if (!(m & 1)) {
				n = b + 1 | 0;
				o = (m & 255) >>> 1
			} else {
				n = HEAP32[b + 8 >> 2] | 0;
				o = HEAP32[b + 4 >> 2] | 0
			}
			b = e + -4 | 0;
			e = HEAP8[n >> 0] | 0;
			m = e << 24 >> 24 < 1 | e << 24 >> 24 == 127;
			a: do
				if (b >>> 0 > d >>> 0) {
					h = n + o | 0;
					l = e;
					k = n;
					j = d;
					p = m;
					while (1) {
						if (!p ? (l << 24 >> 24 | 0) != (HEAP32[j >> 2] | 0) : 0)
							break;
						k = (h - k | 0) > 1 ? k + 1 | 0 : k;
						j = j + 4 | 0;
						q = HEAP8[k >> 0] | 0;
						r = q << 24 >> 24 < 1 | q << 24 >> 24 == 127;
						if (j >>> 0 >= b >>> 0) {
							s = q;
							t = r;
							break a
						} else {
							l = q;
							p = r
						}
					}
					HEAP32[f >> 2] = 4;
					i = g;
					return
				} else {
					s = e;
					t = m
				}
			while (0);
			if (t) {
				i = g;
				return
			}
			if (((HEAP32[b >> 2] | 0) + -1 | 0) >>> 0 < s << 24 >> 24 >>> 0) {
				i = g;
				return
			}
			HEAP32[f >> 2] = 4;
			i = g;
			return
		}
		function ir(a) {
			a = a | 0;
			var b = 0;
			b = i;
			kl(a);
			i = b;
			return
		}
		function jr(a) {
			a = a | 0;
			return
		}
		function kr(b, d, e, f, g, h, j, k) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			k = k | 0;
			var l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0,
			I = 0,
			J = 0;
			d = i;
			i = i + 576 | 0;
			l = d;
			m = d + 72 | 0;
			n = d + 64 | 0;
			o = d + 56 | 0;
			p = d + 52 | 0;
			q = d + 572 | 0;
			r = d + 48 | 0;
			s = d + 8 | 0;
			t = d + 472 | 0;
			HEAP32[n >> 2] = m;
			u = n + 4 | 0;
			HEAP32[u >> 2] = 185;
			Am(p, h);
			v = Yr(p, 130768) | 0;
			HEAP8[q >> 0] = 0;
			HEAP32[r >> 2] = HEAP32[f >> 2];
			w = HEAP32[h + 4 >> 2] | 0;
			HEAP32[l + 0 >> 2] = HEAP32[r + 0 >> 2];
			do
				if (lr(e, l, g, p, w, j, q, v, n, o, m + 400 | 0) | 0) {
					zc[c[(HEAP32[v >> 2] | 0) + 48 >> 2] & 15](v, 130472, 130482, s) | 0;
					r = HEAP32[o >> 2] | 0;
					h = HEAP32[n >> 2] | 0;
					x = r - h | 0;
					if ((x | 0) > 392) {
						y = vx((x >> 2) + 2 | 0) | 0;
						if (!y)
							qx();
						else {
							z = y;
							A = y
						}
					} else {
						z = 0;
						A = t
					}
					if (!(HEAP8[q >> 0] | 0))
						B = A;
					else {
						HEAP8[A >> 0] = 45;
						B = A + 1 | 0
					}
					if (h >>> 0 < r >>> 0) {
						r = s + 40 | 0;
						y = s;
						x = B;
						C = h;
						while (1) {
							h = HEAP32[C >> 2] | 0;
							D = s;
							while (1) {
								if ((HEAP32[D >> 2] | 0) == (h | 0)) {
									E = D;
									break
								}
								D = D + 4 | 0;
								if ((D | 0) == (r | 0)) {
									E = r;
									break
								}
							}
							HEAP8[x >> 0] = HEAP8[130472 + (E - y >> 2) >> 0] | 0;
							C = C + 4 | 0;
							D = x + 1 | 0;
							if (C >>> 0 >= (HEAP32[o >> 2] | 0) >>> 0) {
								F = D;
								break
							} else
								x = D
						}
					} else
						F = B;
					HEAP8[F >> 0] = 0;
					HEAP32[l >> 2] = k;
					if ((nw(t, 130408, l) | 0) == 1) {
						wx(z);
						break
					} else
						er(130416)
				}
			while (0);
			z = HEAP32[e >> 2] | 0;
			do
				if (z) {
					l = HEAP32[z + 12 >> 2] | 0;
					if ((l | 0) == (HEAP32[z + 16 >> 2] | 0))
						G = tc[c[(HEAP32[z >> 2] | 0) + 36 >> 2] & 127](z) | 0;
					else
						G = HEAP32[l >> 2] | 0;
					if ((G | 0) == -1) {
						HEAP32[e >> 2] = 0;
						H = 1;
						break
					} else {
						H = (HEAP32[e >> 2] | 0) == 0;
						break
					}
				} else
					H = 1;
			while (0);
			G = HEAP32[f >> 2] | 0;
			do
				if (G) {
					z = HEAP32[G + 12 >> 2] | 0;
					if ((z | 0) == (HEAP32[G + 16 >> 2] | 0))
						I = tc[c[(HEAP32[G >> 2] | 0) + 36 >> 2] & 127](G) | 0;
					else
						I = HEAP32[z >> 2] | 0;
					if ((I | 0) != -1)
						if (H)
							break;
						else {
							J = 31;
							break
						}
					else {
						HEAP32[f >> 2] = 0;
						J = 29;
						break
					}
				} else
					J = 29;
			while (0);
			if ((J | 0) == 29 ? H : 0)
				J = 31;
			if ((J | 0) == 31)
				HEAP32[j >> 2] = HEAP32[j >> 2] | 2;
			HEAP32[b >> 2] = HEAP32[e >> 2];
			Jl(HEAP32[p >> 2] | 0) | 0;
			p = HEAP32[n >> 2] | 0;
			HEAP32[n >> 2] = 0;
			if (!p) {
				i = d;
				return
			}
			lc[HEAP32[u >> 2] & 255](p);
			i = d;
			return
		}
		function Fc(a) {
			a = a | 0;
			var b = 0;
			b = i;
			i = i + a | 0;
			i = i + 15 & -16;
			return b | 0
		}
		function Gc() {
			return i | 0
		}
		function Hc(a) {
			a = a | 0;
			i = a
		}
		function Ic(a, b) {
			a = a | 0;
			b = b | 0;
			if (!s) {
				s = a;
				t = b
			}
		}
		function Jc(b) {
			b = b | 0;
			HEAP8[k >> 0] = HEAP8[b >> 0];
			HEAP8[k + 1 >> 0] = HEAP8[b + 1 >> 0];
			HEAP8[k + 2 >> 0] = HEAP8[b + 2 >> 0];
			HEAP8[k + 3 >> 0] = HEAP8[b + 3 >> 0]
		}
		function Kc(b) {
			b = b | 0;
			HEAP8[k >> 0] = HEAP8[b >> 0];
			HEAP8[k + 1 >> 0] = HEAP8[b + 1 >> 0];
			HEAP8[k + 2 >> 0] = HEAP8[b + 2 >> 0];
			HEAP8[k + 3 >> 0] = HEAP8[b + 3 >> 0];
			HEAP8[k + 4 >> 0] = HEAP8[b + 4 >> 0];
			HEAP8[k + 5 >> 0] = HEAP8[b + 5 >> 0];
			HEAP8[k + 6 >> 0] = HEAP8[b + 6 >> 0];
			HEAP8[k + 7 >> 0] = HEAP8[b + 7 >> 0]
		}
		function Lc(a) {
			a = a | 0;
			H = a
		}
		function Mc() {
			return H | 0
		}
		function Nc() {
			var a = 0;
			a = i;
			Fk();
			i = a;
			return
		}
		function Oc() {
			var a = 0;
			a = i;
			Gk();
			i = a;
			return
		}
		function Pc() {
			var a = 0,
			b = 0,
			d = 0,
			e = 0;
			a = i;
			i = i + 32 | 0;
			b = a;
			d = bd() | 0;
			e = b + 16 | 0;
			HEAP32[e >> 2] = b;
			HEAP32[b >> 2] = 72;
			md(d, 8, 24, b) | 0;
			d = HEAP32[e >> 2] | 0;
			if ((d | 0) != (b | 0)) {
				if (d)
					lc[c[(HEAP32[d >> 2] | 0) + 20 >> 2] & 255](d)
			} else
				lc[c[(HEAP32[b >> 2] | 0) + 16 >> 2] & 255](b);
			db(56, 0, 0);
			Wa();
			i = a;
			return 0
		}
		function Qc(a) {
			a = a | 0;
			var b = 0;
			b = i;
			kl(a);
			i = b;
			return
		}
		function Rc(a) {
			a = a | 0;
			var b = 0;
			a = i;
			b = il(8) | 0;
			if (b)
				HEAP32[b >> 2] = 72;
			i = a;
			return b | 0
		}
		function Sc(a, b) {
			a = a | 0;
			b = b | 0;
			if (b)
				HEAP32[b >> 2] = 72;
			return
		}
		function Tc(a) {
			a = a | 0;
			return
		}
		function Uc(a) {
			a = a | 0;
			var b = 0;
			b = i;
			kl(a);
			i = b;
			return
		}
		function Vc(a) {
			a = a | 0;
			var b = 0;
			a = i;
			b = il(304) | 0;
			Wc(b);
			i = a;
			return b | 0
		}
		function Wc(b) {
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0,
			g = 0;
			d = i;
			nd(b);
			HEAP32[b >> 2] = 680;
			HEAP32[b + 104 >> 2] = 0;
			e = b + 112 | 0;
			HEAP32[e + 0 >> 2] = 0;
			HEAP32[e + 4 >> 2] = 0;
			HEAP32[e + 8 >> 2] = 0;
			HEAP32[e + 12 >> 2] = 0;
			HEAP32[b + 128 >> 2] = 43112;
			HEAP32[b + 132 >> 2] = 43112;
			HEAP32[b + 136 >> 2] = 43113;
			HEAP32[b + 144 >> 2] = 43112;
			HEAP32[b + 148 >> 2] = 43112;
			HEAP32[b + 152 >> 2] = 43113;
			HEAP32[b + 160 >> 2] = 0;
			Lj(b + 164 | 0);
			HEAP32[b + 184 >> 2] = 0;
			HEAP8[b + 188 >> 0] = 1;
			HEAP8[b + 189 >> 0] = 0;
			e = b + 256 | 0;
			f = b + 192 | 0;
			g = f + 64 | 0;
			do {
				HEAP32[f >> 2] = 0;
				f = f + 4 | 0
			} while ((f | 0) < (g | 0));
			Mj(e, 1e3);
			HEAP32[b + 296 >> 2] = 0;
			i = d;
			return
		}
		function Xc(a) {
			a = a | 0;
			Ka(a | 0) | 0;
			Fw()
		}
		function Yc(a) {
			a = a | 0;
			var b = 0,
			d = 0,
			e = 0,
			f = 0,
			g = 0;
			b = i;
			d = HEAP32[a + 108 >> 2] | 0;
			if (((d | 0) != 0 ? (e = d + 4 | 0, f = (HEAP32[e >> 2] | 0) + -1 | 0, HEAP32[e >> 2] = f, (f | 0) == 0) : 0) ? (lc[c[(HEAP32[d >> 2] | 0) + 8 >> 2] & 255](d), f = d + 8 | 0, e = (HEAP32[f >> 2] | 0) + -1 | 0, HEAP32[f >> 2] = e, (e | 0) == 0) : 0)
				lc[c[(HEAP32[d >> 2] | 0) + 12 >> 2] & 255](d);
			d = HEAP32[a + 96 >> 2] | 0;
			if (((d | 0) != 0 ? (e = d + 4 | 0, f = (HEAP32[e >> 2] | 0) + -1 | 0, HEAP32[e >> 2] = f, (f | 0) == 0) : 0) ? (lc[c[(HEAP32[d >> 2] | 0) + 8 >> 2] & 255](d), f = d + 8 | 0, e = (HEAP32[f >> 2] | 0) + -1 | 0, HEAP32[f >> 2] = e, (e | 0) == 0) : 0)
				lc[c[(HEAP32[d >> 2] | 0) + 12 >> 2] & 255](d);
			d = HEAP32[a + 88 >> 2] | 0;
			if (((d | 0) != 0 ? (e = d + 4 | 0, f = (HEAP32[e >> 2] | 0) + -1 | 0, HEAP32[e >> 2] = f, (f | 0) == 0) : 0) ? (lc[c[(HEAP32[d >> 2] | 0) + 8 >> 2] & 255](d), f = d + 8 | 0, e = (HEAP32[f >> 2] | 0) + -1 | 0, HEAP32[f >> 2] = e, (e | 0) == 0) : 0)
				lc[c[(HEAP32[d >> 2] | 0) + 12 >> 2] & 255](d);
			d = HEAP32[a + 76 >> 2] | 0;
			if (((d | 0) != 0 ? (e = d + 4 | 0, f = (HEAP32[e >> 2] | 0) + -1 | 0, HEAP32[e >> 2] = f, (f | 0) == 0) : 0) ? (lc[c[(HEAP32[d >> 2] | 0) + 8 >> 2] & 255](d), f = d + 8 | 0, e = (HEAP32[f >> 2] | 0) + -1 | 0, HEAP32[f >> 2] = e, (e | 0) == 0) : 0)
				lc[c[(HEAP32[d >> 2] | 0) + 12 >> 2] & 255](d);
			d = HEAP32[a + 68 >> 2] | 0;
			if (((d | 0) != 0 ? (e = d + 4 | 0, f = (HEAP32[e >> 2] | 0) + -1 | 0, HEAP32[e >> 2] = f, (f | 0) == 0) : 0) ? (lc[c[(HEAP32[d >> 2] | 0) + 8 >> 2] & 255](d), f = d + 8 | 0, e = (HEAP32[f >> 2] | 0) + -1 | 0, HEAP32[f >> 2] = e, (e | 0) == 0) : 0)
				lc[c[(HEAP32[d >> 2] | 0) + 12 >> 2] & 255](d);
			d = HEAP32[a + 56 >> 2] | 0;
			if (((d | 0) != 0 ? (e = d + 4 | 0, f = (HEAP32[e >> 2] | 0) + -1 | 0, HEAP32[e >> 2] = f, (f | 0) == 0) : 0) ? (lc[c[(HEAP32[d >> 2] | 0) + 8 >> 2] & 255](d), f = d + 8 | 0, e = (HEAP32[f >> 2] | 0) + -1 | 0, HEAP32[f >> 2] = e, (e | 0) == 0) : 0)
				lc[c[(HEAP32[d >> 2] | 0) + 12 >> 2] & 255](d);
			d = HEAP32[a + 40 >> 2] | 0;
			if (!d) {
				g = a + 20 | 0;
				Zc(g);
				Zc(a);
				i = b;
				return
			}
			e = d + 4 | 0;
			f = (HEAP32[e >> 2] | 0) + -1 | 0;
			HEAP32[e >> 2] = f;
			if (f) {
				g = a + 20 | 0;
				Zc(g);
				Zc(a);
				i = b;
				return
			}
			lc[c[(HEAP32[d >> 2] | 0) + 8 >> 2] & 255](d);
			f = d + 8 | 0;
			e = (HEAP32[f >> 2] | 0) + -1 | 0;
			HEAP32[f >> 2] = e;
			if (e) {
				g = a + 20 | 0;
				Zc(g);
				Zc(a);
				i = b;
				return
			}
			lc[c[(HEAP32[d >> 2] | 0) + 12 >> 2] & 255](d);
			g = a + 20 | 0;
			Zc(g);
			Zc(a);
			i = b;
			return
		}
		function Zc(a) {
			a = a | 0;
			var b = 0,
			d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0;
			b = i;
			d = HEAP32[a >> 2] | 0;
			e = HEAP32[a + 4 >> 2] | 0;
			if (d >>> 0 < e >>> 0) {
				f = d;
				do {
					g = HEAP32[f + 72 >> 2] | 0;
					if (((g | 0) != 0 ? (h = g + 4 | 0, j = (HEAP32[h >> 2] | 0) + -1 | 0, HEAP32[h >> 2] = j, (j | 0) == 0) : 0) ? (lc[c[(HEAP32[g >> 2] | 0) + 8 >> 2] & 255](g), j = g + 8 | 0, h = (HEAP32[j >> 2] | 0) + -1 | 0, HEAP32[j >> 2] = h, (h | 0) == 0) : 0)
						lc[c[(HEAP32[g >> 2] | 0) + 12 >> 2] & 255](g);
					g = HEAP32[f + 64 >> 2] | 0;
					if ((g | 0) != (f + 48 | 0)) {
						if (g)
							lc[c[(HEAP32[g >> 2] | 0) + 20 >> 2] & 255](g)
					} else
						lc[c[(HEAP32[g >> 2] | 0) + 16 >> 2] & 255](g);
					g = HEAP32[f + 36 >> 2] | 0;
					if (((g | 0) != 0 ? (h = g + 4 | 0, j = (HEAP32[h >> 2] | 0) + -1 | 0, HEAP32[h >> 2] = j, (j | 0) == 0) : 0) ? (lc[c[(HEAP32[g >> 2] | 0) + 8 >> 2] & 255](g), j = g + 8 | 0, h = (HEAP32[j >> 2] | 0) + -1 | 0, HEAP32[j >> 2] = h, (h | 0) == 0) : 0)
						lc[c[(HEAP32[g >> 2] | 0) + 12 >> 2] & 255](g);
					g = HEAP32[f + 24 >> 2] | 0;
					if (((g | 0) != 0 ? (h = g + 4 | 0, j = (HEAP32[h >> 2] | 0) + -1 | 0, HEAP32[h >> 2] = j, (j | 0) == 0) : 0) ? (lc[c[(HEAP32[g >> 2] | 0) + 8 >> 2] & 255](g), j = g + 8 | 0, h = (HEAP32[j >> 2] | 0) + -1 | 0, HEAP32[j >> 2] = h, (h | 0) == 0) : 0)
						lc[c[(HEAP32[g >> 2] | 0) + 12 >> 2] & 255](g);
					f = f + 88 | 0
				} while (f >>> 0 < e >>> 0);
				k = HEAP32[a >> 2] | 0
			} else
				k = d;
			if (!k) {
				i = b;
				return
			}
			ll(k);
			i = b;
			return
		}
		function _c(a) {
			a = a | 0;
			var b = 0,
			d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0;
			b = i;
			d = HEAP32[a + 92 >> 2] | 0;
			if (!((d | 0) == 0 ? 1 : ((HEAP32[a + 100 >> 2] | 0) - d | 0) < 2))
				ll(d);
			d = HEAP32[a + 76 >> 2] | 0;
			if (!((d | 0) == 0 ? 1 : ((HEAP32[a + 84 >> 2] | 0) - d | 0) < 2))
				ll(d);
			d = a + 72 | 0;
			e = HEAP32[d >> 2] | 0;
			if (e)
				ll(e);
			HEAP32[d >> 2] = 0;
			d = a + 40 | 0;
			e = HEAP32[d >> 2] | 0;
			f = a + 44 | 0;
			g = HEAP32[f >> 2] | 0;
			if (g) {
				h = 0;
				do {
					j = e + (h << 2) | 0;
					k = HEAP32[j >> 2] | 0;
					if (k) {
						l = k;
						do {
							k = l;
							l = HEAP32[l + 8 >> 2] | 0;
							ll(k)
						} while ((l | 0) != 0)
					}
					HEAP32[j >> 2] = 0;
					h = h + 1 | 0
				} while ((h | 0) != (g | 0));
				g = HEAP32[d >> 2] | 0;
				d = (HEAP32[f >> 2] | 0) >>> 0 < 2;
				HEAP32[a + 48 >> 2] = 0;
				if (!(d | (g | 0) == 0))
					ll(g)
			} else
				HEAP32[a + 48 >> 2] = 0;
			g = a + 32 | 0;
			d = HEAP32[g >> 2] | 0;
			if (d)
				ll(d);
			HEAP32[g >> 2] = 0;
			g = a + 24 | 0;
			d = HEAP32[g >> 2] | 0;
			if (d)
				ll(d);
			HEAP32[g >> 2] = 0;
			g = HEAP32[a >> 2] | 0;
			if ((g | 0) == 0 ? 1 : ((HEAP32[a + 8 >> 2] | 0) - g | 0) < 2) {
				i = b;
				return
			}
			ll(g);
			i = b;
			return
		}
		function $c(a) {
			a = a | 0;
			return
		}
		function ad() {
			var b = 0,
			d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0;
			b = i;
			if ((HEAP8[240] | 0) == 0 ? (Da(240) | 0) != 0 : 0) {
				ld(104);
				Sa(161, 104, o | 0) | 0;
				$a(240)
			}
			d = HEAP32[49] | 0;
			e = Ek() | 0;
			f = Cy(e | 0, H | 0, 1e6, 0) | 0;
			e = H;
			g = HEAP32[(HEAP32[d >> 2] | 0) + 20 >> 2] | 0;
			h = d + 48 | 0;
			j = h;
			k = ly(f | 0, e | 0, HEAP32[j >> 2] | 0, HEAP32[j + 4 >> 2] | 0) | 0;
			nc[g & 3](d, ( + (k >>> 0) + 4294967296.0 *  + (H >>> 0)) / 1.0e3);
			k = h;
			HEAP32[k >> 2] = f;
			HEAP32[k + 4 >> 2] = e;
			i = b;
			return
		}
		function bd() {
			var b = 0;
			b = i;
			if ((HEAP8[240] | 0) == 0 ? (Da(240) | 0) != 0 : 0) {
				ld(104);
				Sa(161, 104, o | 0) | 0;
				$a(240)
			}
			i = b;
			return 104
		}
		function cd(b, e) {
			b = b | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0;
			f = i;
			i = i + 160 | 0;
			g = f + 136 | 0;
			h = f + 20 | 0;
			j = f;
			Nj(g, e, b);
			b = (HEAP32[g + 4 >> 2] | 0) + 4 | 0;
			e = g + 8 | 0;
			k = HEAP32[e >> 2] | 0;
			l = (HEAP32[b >> 2] | 0) + k | 0;
			m = k + 4 | 0;
			HEAP32[e >> 2] = m;
			k = jy(HEAPU8[l >> 0] | HEAPU8[l + 1 >> 0] << 8 | HEAPU8[l + 2 >> 0] << 16 | HEAPU8[l + 3 >> 0] << 24 | 0) | 0;
			l = h + 4 | 0;
			n = h + 13 | 0;
			HEAP32[l >> 2] = n;
			HEAP32[h >> 2] = n;
			HEAP32[h + 8 >> 2] = h + 113;
			HEAP8[n >> 0] = 0;
			p = HEAP32[b >> 2] | 0;
			q = p + m | 0;
			r = py(q | 0) | 0;
			HEAP32[l >> 2] = h + r + 13;
			if (!r) {
				s = 1;
				t = p
			} else {
				p = r + 1 | 0;
				qy(n | 0, q | 0, p | 0) | 0;
				s = p;
				t = HEAP32[b >> 2] | 0
			}
			b = m + s | 0;
			HEAP32[6346] = k;
			k = t + b | 0;
			HEAP32[e >> 2] = b + 2;
			b = (HEAPU8[k >> 0] | HEAPU8[k + 1 >> 0] << 8) & 65535;
			k = b << 8 | b >>> 8;
			b = k & 65535;
			Mj(j, b);
			if ((k & 65535) << 16 >> 16)
				Pj(g, j, b);
			if ((HEAP8[240] | 0) == 0 ? (Da(240) | 0) != 0 : 0) {
				ld(104);
				Sa(161, 104, o | 0) | 0;
				$a(240)
			}
			b = HEAP32[(dd(104, HEAP32[h >> 2] | 0) | 0) + 16 >> 2] | 0;
			if (!b) {
				h = ub(4) | 0;
				HEAP32[h >> 2] = 504;
				fc(h | 0, 480, 16)
			}
			h = tc[c[(HEAP32[b >> 2] | 0) + 24 >> 2] & 127](b) | 0;
			b = il(16) | 0;
			k = b + 4 | 0;
			HEAP32[k >> 2] = 1;
			e = b + 8 | 0;
			HEAP32[e >> 2] = 1;
			HEAP32[b >> 2] = 432;
			HEAP32[b + 12 >> 2] = h;
			if ((HEAP8[240] | 0) == 0 ? (Da(240) | 0) != 0 : 0) {
				ld(104);
				Sa(161, 104, o | 0) | 0;
				$a(240)
			}
			HEAP32[k >> 2] = (HEAP32[k >> 2] | 0) + 1;
			t = HEAP32[48] | 0;
			HEAP32[48] = b;
			HEAP32[49] = h;
			if (((t | 0) != 0 ? (s = t + 4 | 0, m = (HEAP32[s >> 2] | 0) + -1 | 0, HEAP32[s >> 2] = m, (m | 0) == 0) : 0) ? (lc[c[(HEAP32[t >> 2] | 0) + 8 >> 2] & 255](t), m = t + 8 | 0, s = (HEAP32[m >> 2] | 0) + -1 | 0, HEAP32[m >> 2] = s, (s | 0) == 0) : 0)
				lc[c[(HEAP32[t >> 2] | 0) + 12 >> 2] & 255](t);
			HEAP32[j + 8 >> 2] = 0;
			rc[c[(HEAP32[h >> 2] | 0) + 12 >> 2] & 127](h, j);
			tc[c[(HEAP32[h >> 2] | 0) + 16 >> 2] & 127](h) | 0;
			if (HEAP8[h + 40 >> 0] | 0)
				ed(h);
			h = (HEAP32[k >> 2] | 0) + -1 | 0;
			HEAP32[k >> 2] = h;
			if ((h | 0) == 0 ? (lc[c[(HEAP32[b >> 2] | 0) + 8 >> 2] & 255](b), h = (HEAP32[e >> 2] | 0) + -1 | 0, HEAP32[e >> 2] = h, (h | 0) == 0) : 0)
				lc[c[(HEAP32[b >> 2] | 0) + 12 >> 2] & 255](b);
			b = HEAP32[j + 12 >> 2] | 0;
			if (((b | 0) != 0 ? (h = b + 4 | 0, e = (HEAP32[h >> 2] | 0) + -1 | 0, HEAP32[h >> 2] = e, (e | 0) == 0) : 0) ? (lc[c[(HEAP32[b >> 2] | 0) + 8 >> 2] & 255](b), e = b + 8 | 0, h = (HEAP32[e >> 2] | 0) + -1 | 0, HEAP32[e >> 2] = h, (h | 0) == 0) : 0)
				lc[c[(HEAP32[b >> 2] | 0) + 12 >> 2] & 255](b);
			b = HEAP32[j >> 2] | 0;
			if (((b | 0) != 0 ? (j = b + 4 | 0, h = (HEAP32[j >> 2] | 0) + -1 | 0, HEAP32[j >> 2] = h, (h | 0) == 0) : 0) ? (lc[c[(HEAP32[b >> 2] | 0) + 8 >> 2] & 255](b), h = b + 8 | 0, j = (HEAP32[h >> 2] | 0) + -1 | 0, HEAP32[h >> 2] = j, (j | 0) == 0) : 0)
				lc[c[(HEAP32[b >> 2] | 0) + 12 >> 2] & 255](b);
			b = HEAP32[g + 12 >> 2] | 0;
			if (((b | 0) != 0 ? (j = b + 4 | 0, h = (HEAP32[j >> 2] | 0) + -1 | 0, HEAP32[j >> 2] = h, (h | 0) == 0) : 0) ? (lc[c[(HEAP32[b >> 2] | 0) + 8 >> 2] & 255](b), h = b + 8 | 0, j = (HEAP32[h >> 2] | 0) + -1 | 0, HEAP32[h >> 2] = j, (j | 0) == 0) : 0)
				lc[c[(HEAP32[b >> 2] | 0) + 12 >> 2] & 255](b);
			b = HEAP32[g >> 2] | 0;
			if (!b) {
				i = f;
				return
			}
			g = b + 4 | 0;
			j = (HEAP32[g >> 2] | 0) + -1 | 0;
			HEAP32[g >> 2] = j;
			if (j) {
				i = f;
				return
			}
			lc[c[(HEAP32[b >> 2] | 0) + 8 >> 2] & 255](b);
			j = b + 8 | 0;
			g = (HEAP32[j >> 2] | 0) + -1 | 0;
			HEAP32[j >> 2] = g;
			if (g) {
				i = f;
				return
			}
			lc[c[(HEAP32[b >> 2] | 0) + 12 >> 2] & 255](b);
			i = f;
			return
		}
		function dd(b, d) {
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0;
			e = i;
			f = d;
			while (1)
				if (!(HEAP8[f >> 0] | 0))
					break;
				else
					f = f + 1 | 0;
			g = f - d | 0;
			f = g + 1 | 0;
			if (f >>> 0 > 1) {
				h = ml(f, 0, 0, 0, 0, 0) | 0;
				j = h;
				k = h + f | 0
			} else {
				j = 43112;
				k = 43113
			}
			ry(j | 0, d | 0, g | 0) | 0;
			HEAP8[j + g >> 0] = 0;
			d = b + 32 | 0;
			f = HEAP32[b + 40 >> 2] | 0;
			a: do
				if (!f)
					l = d;
				else {
					b = f;
					h = d;
					while (1) {
						m = b;
						while (1) {
							n = HEAP32[m + 16 >> 2] | 0;
							o = (HEAP32[m + 20 >> 2] | 0) - n | 0;
							p = by(n, j, (g | 0) < (o | 0) ? g : o) | 0;
							if (!p) {
								if ((o | 0) >= (g | 0))
									break
							} else if ((p | 0) >= 0)
								break;
							p = HEAP32[m >> 2] | 0;
							if (!p) {
								l = h;
								break a
							} else
								m = p
						}
						b = HEAP32[m + 4 >> 2] | 0;
						if (!b) {
							l = m;
							break
						} else
							h = m
					}
				}
			while (0);
			do
				if ((l | 0) != (d | 0)) {
					f = HEAP32[l + 16 >> 2] | 0;
					h = (HEAP32[l + 20 >> 2] | 0) - f | 0;
					b = by(j, f, (h | 0) < (g | 0) ? h : g) | 0;
					if (!b)
						if ((g | 0) < (h | 0)) {
							q = 16;
							break
						} else {
							r = l;
							break
						}
					else if ((b | 0) > -1) {
						r = l;
						break
					} else {
						q = 16;
						break
					}
				} else
					q = 16;
			while (0);
			if ((q | 0) == 16)
				r = d;
			if ((k - j | 0) < 2 | (j | 0) == 0) {
				s = r + 32 | 0;
				i = e;
				return s | 0
			}
			ll(j);
			s = r + 32 | 0;
			i = e;
			return s | 0
		}
		function ed(b) {
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0,
			g = 0;
			d = i;
			i = i + 32 | 0;
			e = d;
			HEAP8[b + 41 >> 0] = 1;
			HEAP8[b + 43 >> 0] = 1;
			Lj(e);
			rc[c[(HEAP32[b >> 2] | 0) + 8 >> 2] & 127](b, e);
			b = HEAP32[e + 4 >> 2] | 0;
			if (!b)
				f = 0;
			else
				f = HEAP32[b + 4 >> 2] | 0;
			db(328, f | 0, HEAP32[e + 8 >> 2] | 0);
			Oa(0);
			f = HEAP32[e + 12 >> 2] | 0;
			if (((f | 0) != 0 ? (b = f + 4 | 0, g = (HEAP32[b >> 2] | 0) + -1 | 0, HEAP32[b >> 2] = g, (g | 0) == 0) : 0) ? (lc[c[(HEAP32[f >> 2] | 0) + 8 >> 2] & 255](f), g = f + 8 | 0, b = (HEAP32[g >> 2] | 0) + -1 | 0, HEAP32[g >> 2] = b, (b | 0) == 0) : 0)
				lc[c[(HEAP32[f >> 2] | 0) + 12 >> 2] & 255](f);
			f = HEAP32[e >> 2] | 0;
			if (!f) {
				i = d;
				return
			}
			e = f + 4 | 0;
			b = (HEAP32[e >> 2] | 0) + -1 | 0;
			HEAP32[e >> 2] = b;
			if (b) {
				i = d;
				return
			}
			lc[c[(HEAP32[f >> 2] | 0) + 8 >> 2] & 255](f);
			b = f + 8 | 0;
			e = (HEAP32[b >> 2] | 0) + -1 | 0;
			HEAP32[b >> 2] = e;
			if (e) {
				i = d;
				return
			}
			lc[c[(HEAP32[f >> 2] | 0) + 12 >> 2] & 255](f);
			i = d;
			return
		}
		function fd(b, d) {
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0;
			e = i;
			i = i + 48 | 0;
			f = e + 20 | 0;
			g = e;
			if ((HEAP8[240] | 0) == 0 ? (Da(240) | 0) != 0 : 0) {
				ld(104);
				Sa(161, 104, o | 0) | 0;
				$a(240)
			}
			if (!d) {
				Lj(g);
				h = HEAP32[49] | 0;
				rc[c[(HEAP32[h >> 2] | 0) + 24 >> 2] & 127](h, g);
				h = HEAP32[g + 12 >> 2] | 0;
				if (((h | 0) != 0 ? (j = h + 4 | 0, k = (HEAP32[j >> 2] | 0) + -1 | 0, HEAP32[j >> 2] = k, (k | 0) == 0) : 0) ? (lc[c[(HEAP32[h >> 2] | 0) + 8 >> 2] & 255](h), k = h + 8 | 0, j = (HEAP32[k >> 2] | 0) + -1 | 0, HEAP32[k >> 2] = j, (j | 0) == 0) : 0)
					lc[c[(HEAP32[h >> 2] | 0) + 12 >> 2] & 255](h);
				h = HEAP32[g >> 2] | 0;
				if (!h) {
					i = e;
					return
				}
				g = h + 4 | 0;
				j = (HEAP32[g >> 2] | 0) + -1 | 0;
				HEAP32[g >> 2] = j;
				if (j) {
					i = e;
					return
				}
				lc[c[(HEAP32[h >> 2] | 0) + 8 >> 2] & 255](h);
				j = h + 8 | 0;
				g = (HEAP32[j >> 2] | 0) + -1 | 0;
				HEAP32[j >> 2] = g;
				if (g) {
					i = e;
					return
				}
				lc[c[(HEAP32[h >> 2] | 0) + 12 >> 2] & 255](h);
				i = e;
				return
			} else {
				Nj(f, d, b);
				b = HEAP32[49] | 0;
				rc[c[(HEAP32[b >> 2] | 0) + 24 >> 2] & 127](b, f);
				b = HEAP32[f + 12 >> 2] | 0;
				if (((b | 0) != 0 ? (d = b + 4 | 0, h = (HEAP32[d >> 2] | 0) + -1 | 0, HEAP32[d >> 2] = h, (h | 0) == 0) : 0) ? (lc[c[(HEAP32[b >> 2] | 0) + 8 >> 2] & 255](b), h = b + 8 | 0, d = (HEAP32[h >> 2] | 0) + -1 | 0, HEAP32[h >> 2] = d, (d | 0) == 0) : 0)
					lc[c[(HEAP32[b >> 2] | 0) + 12 >> 2] & 255](b);
				b = HEAP32[f >> 2] | 0;
				if (!b) {
					i = e;
					return
				}
				f = b + 4 | 0;
				d = (HEAP32[f >> 2] | 0) + -1 | 0;
				HEAP32[f >> 2] = d;
				if (d) {
					i = e;
					return
				}
				lc[c[(HEAP32[b >> 2] | 0) + 8 >> 2] & 255](b);
				d = b + 8 | 0;
				f = (HEAP32[d >> 2] | 0) + -1 | 0;
				HEAP32[d >> 2] = f;
				if (f) {
					i = e;
					return
				}
				lc[c[(HEAP32[b >> 2] | 0) + 12 >> 2] & 255](b);
				i = e;
				return
			}
		}
		function gd(b) {
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0;
			d = i;
			i = i + 32 | 0;
			e = d;
			if ((HEAP8[240] | 0) == 0 ? (Da(240) | 0) != 0 : 0) {
				ld(104);
				Sa(161, 104, o | 0) | 0;
				$a(240)
			}
			if (!b)
				f = 192;
			else {
				g = HEAP32[44] | 0;
				a: do
					if (!g)
						h = 168;
					else {
						j = g;
						k = 168;
						while (1) {
							l = j;
							while (1) {
								if ((HEAP32[l + 16 >> 2] | 0) >= (b | 0))
									break;
								m = HEAP32[l >> 2] | 0;
								if (!m) {
									h = k;
									break a
								} else
									l = m
							}
							j = HEAP32[l + 4 >> 2] | 0;
							if (!j) {
								h = l;
								break
							} else
								k = l
						}
					}
				while (0);
				if ((h | 0) != 168 ? (HEAP32[h + 16 >> 2] | 0) <= (b | 0) : 0)
					n = h;
				else
					n = 168;
				f = n + 20 | 0
			}
			Lj(e);
			n = f + 4 | 0;
			f = HEAP32[n >> 2] | 0;
			rc[c[(HEAP32[f >> 2] | 0) + 8 >> 2] & 127](f, e);
			hd(HEAP32[n >> 2] | 0, e);
			f = HEAP32[n >> 2] | 0;
			HEAP8[f + 42 >> 0] = 1;
			td(f);
			f = HEAP32[e + 12 >> 2] | 0;
			if (((f | 0) != 0 ? (n = f + 4 | 0, h = (HEAP32[n >> 2] | 0) + -1 | 0, HEAP32[n >> 2] = h, (h | 0) == 0) : 0) ? (lc[c[(HEAP32[f >> 2] | 0) + 8 >> 2] & 255](f), h = f + 8 | 0, n = (HEAP32[h >> 2] | 0) + -1 | 0, HEAP32[h >> 2] = n, (n | 0) == 0) : 0)
				lc[c[(HEAP32[f >> 2] | 0) + 12 >> 2] & 255](f);
			f = HEAP32[e >> 2] | 0;
			if (!f) {
				i = d;
				return
			}
			e = f + 4 | 0;
			n = (HEAP32[e >> 2] | 0) + -1 | 0;
			HEAP32[e >> 2] = n;
			if (n) {
				i = d;
				return
			}
			lc[c[(HEAP32[f >> 2] | 0) + 8 >> 2] & 255](f);
			n = f + 8 | 0;
			e = (HEAP32[n >> 2] | 0) + -1 | 0;
			HEAP32[n >> 2] = e;
			if (e) {
				i = d;
				return
			}
			lc[c[(HEAP32[f >> 2] | 0) + 12 >> 2] & 255](f);
			i = d;
			return
		}
		function hd(b, d) {
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0;
			e = i;
			i = i + 32 | 0;
			f = e;
			g = d + 8 | 0;
			h = b + 4 | 0;
			j = b + 8 | 0;
			Mj(f, (HEAP32[g >> 2] | 0) + 7 + (HEAP32[j >> 2] | 0) - (HEAP32[h >> 2] | 0) | 0);
			k = jy(HEAP32[b + 20 >> 2] | 0) | 0;
			l = f + 4 | 0;
			m = f + 8 | 0;
			n = (c[(HEAP32[l >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[m >> 2] | 0) | 0;
			HEAP8[n >> 0] = k;
			HEAP8[n + 1 >> 0] = k >> 8;
			HEAP8[n + 2 >> 0] = k >> 16;
			HEAP8[n + 3 >> 0] = k >> 24;
			HEAP32[m >> 2] = (HEAP32[m >> 2] | 0) + 4;
			k = HEAP32[h >> 2] | 0;
			Oj(f, k, (HEAP32[j >> 2] | 0) - k | 0, 0);
			k = HEAP32[g >> 2] | 0;
			j = (k >>> 8 & 255 | k << 8) & 65535;
			k = (c[(HEAP32[l >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[m >> 2] | 0) | 0;
			HEAP8[k >> 0] = j;
			HEAP8[k + 1 >> 0] = j >> 8;
			HEAP32[m >> 2] = (HEAP32[m >> 2] | 0) + 2;
			j = HEAP32[d + 4 >> 2] | 0;
			if (j)
				Ij(f, HEAP32[j + 4 >> 2] | 0, 0, HEAP32[g >> 2] | 0);
			g = HEAP32[l >> 2] | 0;
			if (!g)
				o = 0;
			else
				o = HEAP32[g + 4 >> 2] | 0;
			wb(HEAP32[HEAP32[b + 28 >> 2] >> 2] | 0, 296, o | 0, HEAP32[m >> 2] | 0, 0, 0);
			m = HEAP32[f + 12 >> 2] | 0;
			if (((m | 0) != 0 ? (o = m + 4 | 0, b = (HEAP32[o >> 2] | 0) + -1 | 0, HEAP32[o >> 2] = b, (b | 0) == 0) : 0) ? (lc[c[(HEAP32[m >> 2] | 0) + 8 >> 2] & 255](m), b = m + 8 | 0, o = (HEAP32[b >> 2] | 0) + -1 | 0, HEAP32[b >> 2] = o, (o | 0) == 0) : 0)
				lc[c[(HEAP32[m >> 2] | 0) + 12 >> 2] & 255](m);
			m = HEAP32[f >> 2] | 0;
			if (!m) {
				i = e;
				return
			}
			f = m + 4 | 0;
			o = (HEAP32[f >> 2] | 0) + -1 | 0;
			HEAP32[f >> 2] = o;
			if (o) {
				i = e;
				return
			}
			lc[c[(HEAP32[m >> 2] | 0) + 8 >> 2] & 255](m);
			o = m + 8 | 0;
			f = (HEAP32[o >> 2] | 0) + -1 | 0;
			HEAP32[o >> 2] = f;
			if (f) {
				i = e;
				return
			}
			lc[c[(HEAP32[m >> 2] | 0) + 12 >> 2] & 255](m);
			i = e;
			return
		}
		function id(b, d, e) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			p = 0,
			q = 0,
			r = 0;
			f = i;
			i = i + 48 | 0;
			g = f + 20 | 0;
			h = f;
			if ((HEAP8[240] | 0) == 0 ? (Da(240) | 0) != 0 : 0) {
				ld(104);
				Sa(161, 104, o | 0) | 0;
				$a(240)
			}
			if (!b)
				j = 192;
			else {
				k = HEAP32[44] | 0;
				a: do
					if (!k)
						l = 168;
					else {
						m = k;
						n = 168;
						while (1) {
							p = m;
							while (1) {
								if ((HEAP32[p + 16 >> 2] | 0) >= (b | 0))
									break;
								q = HEAP32[p >> 2] | 0;
								if (!q) {
									l = n;
									break a
								} else
									p = q
							}
							m = HEAP32[p + 4 >> 2] | 0;
							if (!m) {
								l = p;
								break
							} else
								n = p
						}
					}
				while (0);
				if ((l | 0) != 168 ? (HEAP32[l + 16 >> 2] | 0) <= (b | 0) : 0)
					r = l;
				else
					r = 168;
				j = r + 20 | 0
			}
			if (!e) {
				Lj(h);
				r = HEAP32[j + 4 >> 2] | 0;
				rc[c[(HEAP32[r >> 2] | 0) + 32 >> 2] & 127](r, h);
				r = HEAP32[h + 12 >> 2] | 0;
				if (((r | 0) != 0 ? (l = r + 4 | 0, b = (HEAP32[l >> 2] | 0) + -1 | 0, HEAP32[l >> 2] = b, (b | 0) == 0) : 0) ? (lc[c[(HEAP32[r >> 2] | 0) + 8 >> 2] & 255](r), b = r + 8 | 0, l = (HEAP32[b >> 2] | 0) + -1 | 0, HEAP32[b >> 2] = l, (l | 0) == 0) : 0)
					lc[c[(HEAP32[r >> 2] | 0) + 12 >> 2] & 255](r);
				r = HEAP32[h >> 2] | 0;
				if (!r) {
					i = f;
					return
				}
				h = r + 4 | 0;
				l = (HEAP32[h >> 2] | 0) + -1 | 0;
				HEAP32[h >> 2] = l;
				if (l) {
					i = f;
					return
				}
				lc[c[(HEAP32[r >> 2] | 0) + 8 >> 2] & 255](r);
				l = r + 8 | 0;
				h = (HEAP32[l >> 2] | 0) + -1 | 0;
				HEAP32[l >> 2] = h;
				if (h) {
					i = f;
					return
				}
				lc[c[(HEAP32[r >> 2] | 0) + 12 >> 2] & 255](r);
				i = f;
				return
			} else {
				Nj(g, e, d);
				d = HEAP32[j + 4 >> 2] | 0;
				rc[c[(HEAP32[d >> 2] | 0) + 32 >> 2] & 127](d, g);
				d = HEAP32[g + 12 >> 2] | 0;
				if (((d | 0) != 0 ? (j = d + 4 | 0, e = (HEAP32[j >> 2] | 0) + -1 | 0, HEAP32[j >> 2] = e, (e | 0) == 0) : 0) ? (lc[c[(HEAP32[d >> 2] | 0) + 8 >> 2] & 255](d), e = d + 8 | 0, j = (HEAP32[e >> 2] | 0) + -1 | 0, HEAP32[e >> 2] = j, (j | 0) == 0) : 0)
					lc[c[(HEAP32[d >> 2] | 0) + 12 >> 2] & 255](d);
				d = HEAP32[g >> 2] | 0;
				if (!d) {
					i = f;
					return
				}
				g = d + 4 | 0;
				j = (HEAP32[g >> 2] | 0) + -1 | 0;
				HEAP32[g >> 2] = j;
				if (j) {
					i = f;
					return
				}
				lc[c[(HEAP32[d >> 2] | 0) + 8 >> 2] & 255](d);
				j = d + 8 | 0;
				g = (HEAP32[j >> 2] | 0) + -1 | 0;
				HEAP32[j >> 2] = g;
				if (g) {
					i = f;
					return
				}
				lc[c[(HEAP32[d >> 2] | 0) + 12 >> 2] & 255](d);
				i = f;
				return
			}
		}
		function jd(b, d, e) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			p = 0,
			q = 0,
			r = 0;
			f = i;
			i = i + 32 | 0;
			g = f;
			if ((HEAP8[240] | 0) == 0 ? (Da(240) | 0) != 0 : 0) {
				ld(104);
				Sa(161, 104, o | 0) | 0;
				$a(240)
			}
			if (!b)
				h = 192;
			else {
				j = HEAP32[44] | 0;
				a: do
					if (!j)
						k = 168;
					else {
						l = j;
						m = 168;
						while (1) {
							n = l;
							while (1) {
								if ((HEAP32[n + 16 >> 2] | 0) >= (b | 0))
									break;
								p = HEAP32[n >> 2] | 0;
								if (!p) {
									k = m;
									break a
								} else
									n = p
							}
							l = HEAP32[n + 4 >> 2] | 0;
							if (!l) {
								k = n;
								break
							} else
								m = n
						}
					}
				while (0);
				if ((k | 0) != 168 ? (HEAP32[k + 16 >> 2] | 0) <= (b | 0) : 0)
					q = k;
				else
					q = 168;
				h = q + 20 | 0
			}
			if (e) {
				Nj(g, e, d);
				d = h + 4 | 0;
				e = HEAP32[d >> 2] | 0;
				rc[c[(HEAP32[e >> 2] | 0) + 12 >> 2] & 127](e, g);
				e = HEAP32[g + 12 >> 2] | 0;
				if (((e | 0) != 0 ? (q = e + 4 | 0, k = (HEAP32[q >> 2] | 0) + -1 | 0, HEAP32[q >> 2] = k, (k | 0) == 0) : 0) ? (lc[c[(HEAP32[e >> 2] | 0) + 8 >> 2] & 255](e), k = e + 8 | 0, q = (HEAP32[k >> 2] | 0) + -1 | 0, HEAP32[k >> 2] = q, (q | 0) == 0) : 0)
					lc[c[(HEAP32[e >> 2] | 0) + 12 >> 2] & 255](e);
				e = HEAP32[g >> 2] | 0;
				if (((e | 0) != 0 ? (g = e + 4 | 0, q = (HEAP32[g >> 2] | 0) + -1 | 0, HEAP32[g >> 2] = q, (q | 0) == 0) : 0) ? (lc[c[(HEAP32[e >> 2] | 0) + 8 >> 2] & 255](e), q = e + 8 | 0, g = (HEAP32[q >> 2] | 0) + -1 | 0, HEAP32[q >> 2] = g, (g | 0) == 0) : 0) {
					lc[c[(HEAP32[e >> 2] | 0) + 12 >> 2] & 255](e);
					r = d
				} else
					r = d
			} else
				r = h + 4 | 0;
			h = HEAP32[r >> 2] | 0;
			lc[c[(HEAP32[h >> 2] | 0) + 28 >> 2] & 255](h);
			i = f;
			return
		}
		function kd(b) {
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			p = 0,
			q = 0,
			r = 0;
			d = i;
			if ((HEAP8[240] | 0) == 0 ? (Da(240) | 0) != 0 : 0) {
				ld(104);
				Sa(161, 104, o | 0) | 0;
				$a(240)
			}
			if (!b) {
				e = 192;
				f = e + 4 | 0;
				g = HEAP32[f >> 2] | 0;
				h = g + 36 | 0;
				j = HEAP32[h >> 2] | 0;
				Nd(j, e);
				i = d;
				return
			}
			k = HEAP32[44] | 0;
			a: do
				if (!k)
					l = 168;
				else {
					m = k;
					n = 168;
					while (1) {
						p = m;
						while (1) {
							if ((HEAP32[p + 16 >> 2] | 0) >= (b | 0))
								break;
							q = HEAP32[p >> 2] | 0;
							if (!q) {
								l = n;
								break a
							} else
								p = q
						}
						m = HEAP32[p + 4 >> 2] | 0;
						if (!m) {
							l = p;
							break
						} else
							n = p
					}
				}
			while (0);
			if ((l | 0) != 168 ? (HEAP32[l + 16 >> 2] | 0) <= (b | 0) : 0)
				r = l;
			else
				r = 168;
			e = r + 20 | 0;
			f = e + 4 | 0;
			g = HEAP32[f >> 2] | 0;
			h = g + 36 | 0;
			j = HEAP32[h >> 2] | 0;
			Nd(j, e);
			i = d;
			return
		}
		function ld(b) {
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0;
			d = i;
			i = i + 48 | 0;
			e = d + 24 | 0;
			f = d;
			g = b + 4 | 0;
			HEAP32[g + 0 >> 2] = 0;
			HEAP32[g + 4 >> 2] = 0;
			HEAP32[g + 8 >> 2] = 0;
			HEAP32[g + 12 >> 2] = 0;
			HEAP32[g >> 2] = g;
			HEAP32[b + 8 >> 2] = g;
			HEAP32[b + 12 >> 2] = 0;
			HEAP8[b + 16 >> 0] = 0;
			HEAP32[b + 20 >> 2] = 0;
			g = b + 32 | 0;
			HEAP32[g + 0 >> 2] = 0;
			HEAP32[g + 4 >> 2] = 0;
			HEAP32[g + 8 >> 2] = 0;
			HEAP32[g + 12 >> 2] = 0;
			HEAP32[g >> 2] = g;
			HEAP32[b + 36 >> 2] = g;
			HEAP32[b + 40 >> 2] = 0;
			HEAP8[b + 44 >> 0] = 0;
			HEAP32[b + 48 >> 2] = 0;
			Yj(b + 56 | 0);
			g = b + 64 | 0;
			HEAP32[g + 0 >> 2] = 0;
			HEAP32[g + 4 >> 2] = 0;
			HEAP32[g + 8 >> 2] = 0;
			HEAP32[g + 12 >> 2] = 0;
			HEAP32[g >> 2] = g;
			HEAP32[b + 68 >> 2] = g;
			HEAP32[b + 72 >> 2] = 0;
			HEAP8[b + 76 >> 0] = 0;
			HEAP32[b + 80 >> 2] = 0;
			HEAP32[b + 88 >> 2] = 0;
			HEAP32[b + 92 >> 2] = 0;
			Yj(b + 96 | 0);
			HEAP32[b + 100 >> 2] = 0;
			HEAP32[b + 104 >> 2] = 0;
			HEAP32[b + 108 >> 2] = 0;
			HEAP32[b + 116 >> 2] = 43112;
			HEAP32[b + 120 >> 2] = 43112;
			HEAP32[b + 124 >> 2] = 43113;
			b = f + 16 | 0;
			HEAP32[b >> 2] = f;
			HEAP32[f >> 2] = 392;
			HEAP32[f + 4 >> 2] = 162;
			g = zl() | 0;
			h = HEAP32[b >> 2] | 0;
			do
				if (h)
					if ((h | 0) == (f | 0)) {
						HEAP32[e + 16 >> 2] = e;
						rc[c[(HEAP32[f >> 2] | 0) + 12 >> 2] & 127](f, e);
						break
					} else {
						HEAP32[e + 16 >> 2] = tc[c[(HEAP32[h >> 2] | 0) + 8 >> 2] & 127](h) | 0;
						break
					}
				else
					HEAP32[e + 16 >> 2] = 0;
			while (0);
			Pd(e, g);
			g = HEAP32[e + 16 >> 2] | 0;
			if ((g | 0) != (e | 0)) {
				if (g)
					lc[c[(HEAP32[g >> 2] | 0) + 20 >> 2] & 255](g)
			} else
				lc[c[(HEAP32[g >> 2] | 0) + 16 >> 2] & 255](g);
			g = HEAP32[b >> 2] | 0;
			if ((g | 0) == (f | 0)) {
				lc[c[(HEAP32[f >> 2] | 0) + 16 >> 2] & 255](f);
				i = d;
				return
			}
			if (!g) {
				i = d;
				return
			}
			lc[c[(HEAP32[g >> 2] | 0) + 20 >> 2] & 255](g);
			i = d;
			return
		}
		function md(b, d, e, f) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0;
			g = i;
			i = i + 64 | 0;
			h = g;
			j = g + 40 | 0;
			k = g + 24 | 0;
			HEAP32[j >> 2] = 0;
			l = j + 4 | 0;
			HEAP32[l >> 2] = 0;
			m = j + 8 | 0;
			HEAP32[m >> 2] = 0;
			n = d;
			while (1)
				if (!(HEAP8[n >> 0] | 0))
					break;
				else
					n = n + 1 | 0;
			o = d;
			p = n - o | 0;
			n = p + 1 | 0;
			if (n >>> 0 > 1) {
				q = ml(n, 0, 0, 0, 0, 0) | 0;
				HEAP32[j >> 2] = q;
				HEAP32[l >> 2] = q;
				r = q + n | 0;
				s = q
			} else {
				HEAP32[j >> 2] = 43112;
				HEAP32[l >> 2] = 43112;
				r = 43113;
				s = 43112
			}
			HEAP32[m >> 2] = r;
			ry(s | 0, d | 0, p | 0) | 0;
			m = s + p | 0;
			HEAP32[l >> 2] = m;
			HEAP8[m >> 0] = 0;
			m = Td(b, j) | 0;
			j = e;
			while (1)
				if (!(HEAP8[j >> 0] | 0))
					break;
				else
					j = j + 1 | 0;
			l = j - e | 0;
			j = m + 4 | 0;
			p = HEAP32[m >> 2] | 0;
			q = (HEAP32[j >> 2] | 0) - p | 0;
			if (l >>> 0 <= q >>> 0) {
				ry(p | 0, e | 0, l | 0) | 0;
				n = (HEAP32[m >> 2] | 0) + l | 0;
				t = HEAP32[j >> 2] | 0;
				if ((n | 0) != (t | 0)) {
					HEAP8[n >> 0] = HEAP8[t >> 0] | 0;
					HEAP32[j >> 2] = (HEAP32[j >> 2] | 0) + (n - t)
				}
			} else {
				ry(p | 0, e | 0, q | 0) | 0;
				Ud(m, e + ((HEAP32[j >> 2] | 0) - (HEAP32[m >> 2] | 0)) | 0, e + l | 0) | 0
			}
			if (!((r - s | 0) < 2 | (s | 0) == 0))
				ll(s);
			HEAP32[k >> 2] = 0;
			s = k + 4 | 0;
			HEAP32[s >> 2] = 0;
			r = k + 8 | 0;
			HEAP32[r >> 2] = 0;
			l = d;
			while (1)
				if (!(HEAP8[l >> 0] | 0))
					break;
				else
					l = l + 1 | 0;
			e = l - o | 0;
			o = e + 1 | 0;
			if (o >>> 0 > 1) {
				l = ml(o, 0, 0, 0, 0, 0) | 0;
				HEAP32[k >> 2] = l;
				HEAP32[s >> 2] = l;
				u = l + o | 0;
				v = l
			} else {
				HEAP32[k >> 2] = 43112;
				HEAP32[s >> 2] = 43112;
				u = 43113;
				v = 43112
			}
			HEAP32[r >> 2] = u;
			ry(v | 0, d | 0, e | 0) | 0;
			d = v + e | 0;
			HEAP32[s >> 2] = d;
			HEAP8[d >> 0] = 0;
			d = Vd(b + 28 | 0, k) | 0;
			k = HEAP32[f + 16 >> 2] | 0;
			do
				if (k)
					if ((k | 0) == (f | 0)) {
						HEAP32[h + 16 >> 2] = h;
						rc[c[(HEAP32[k >> 2] | 0) + 12 >> 2] & 127](k, h);
						break
					} else {
						HEAP32[h + 16 >> 2] = tc[c[(HEAP32[k >> 2] | 0) + 8 >> 2] & 127](k) | 0;
						break
					}
				else
					HEAP32[h + 16 >> 2] = 0;
			while (0);
			Wd(h, d);
			d = HEAP32[h + 16 >> 2] | 0;
			if ((d | 0) != (h | 0)) {
				if (d)
					lc[c[(HEAP32[d >> 2] | 0) + 20 >> 2] & 255](d)
			} else
				lc[c[(HEAP32[d >> 2] | 0) + 16 >> 2] & 255](d);
			if ((u - v | 0) < 2 | (v | 0) == 0) {
				i = g;
				return 1
			}
			ll(v);
			i = g;
			return 1
		}
		function nd(b) {
			b = b | 0;
			var d = 0,
			e = 0;
			d = i;
			HEAP32[b >> 2] = 256;
			HEAP32[b + 4 >> 2] = 43112;
			HEAP32[b + 8 >> 2] = 43112;
			HEAP32[b + 12 >> 2] = 43113;
			HEAP32[b + 24 >> 2] = 0;
			HEAP32[b + 28 >> 2] = 0;
			ak(b + 32 | 0);
			Yj(b + 33 | 0);
			HEAP32[b + 36 >> 2] = 0;
			HEAP8[b + 40 >> 0] = 1;
			HEAP8[b + 41 >> 0] = 0;
			HEAP8[b + 42 >> 0] = 0;
			HEAP8[b + 43 >> 0] = 0;
			HEAP32[b + 44 >> 2] = -1;
			e = b + 48 | 0;
			HEAP32[e + 0 >> 2] = 0;
			HEAP32[e + 4 >> 2] = 0;
			HEAP32[e + 8 >> 2] = 0;
			HEAP32[e + 12 >> 2] = 0;
			Yj(b + 64 | 0);
			e = b + 68 | 0;
			HEAP32[e + 0 >> 2] = 0;
			HEAP32[e + 4 >> 2] = 0;
			HEAP32[e + 8 >> 2] = 0;
			HEAP32[e + 12 >> 2] = 0;
			HEAP32[e + 16 >> 2] = 0;
			i = d;
			return
		}
		function od(a) {
			a = a | 0;
			var b = 0;
			b = i;
			pd(a);
			kl(a);
			i = b;
			return
		}
		function pd(a) {
			a = a | 0;
			var b = 0,
			d = 0,
			e = 0,
			f = 0;
			b = i;
			HEAP32[a >> 2] = 256;
			Yd(a + 68 | 0);
			Zj(a + 64 | 0);
			Zj(a + 33 | 0);
			bk(a + 32 | 0);
			d = HEAP32[a + 24 >> 2] | 0;
			if (((d | 0) != 0 ? (e = d + 4 | 0, f = (HEAP32[e >> 2] | 0) + -1 | 0, HEAP32[e >> 2] = f, (f | 0) == 0) : 0) ? (lc[c[(HEAP32[d >> 2] | 0) + 8 >> 2] & 255](d), f = d + 8 | 0, e = (HEAP32[f >> 2] | 0) + -1 | 0, HEAP32[f >> 2] = e, (e | 0) == 0) : 0)
				lc[c[(HEAP32[d >> 2] | 0) + 12 >> 2] & 255](d);
			d = HEAP32[a + 4 >> 2] | 0;
			if ((d | 0) == 0 ? 1 : ((HEAP32[a + 12 >> 2] | 0) - d | 0) < 2) {
				i = b;
				return
			}
			ll(d);
			i = b;
			return
		}
		function qd(a, b) {
			a = a | 0;
			b = b | 0;
			return
		}
		function rd(a, b) {
			a = a | 0;
			b = b | 0;
			return
		}
		function sd(b) {
			b = b | 0;
			HEAP8[b + 40 >> 0] = 0;
			return 0
		}
		function td(a) {
			a = a | 0;
			var b = 0,
			d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0;
			b = i;
			i = i + 32 | 0;
			d = b;
			e = a + 84 | 0;
			if (!(HEAP32[e >> 2] | 0)) {
				i = b;
				return
			}
			f = d + 4 | 0;
			g = a + 80 | 0;
			h = a + 72 | 0;
			j = a + 68 | 0;
			k = a + 28 | 0;
			a = d + 8 | 0;
			l = d + 12 | 0;
			m = d + 16 | 0;
			n = d + 4 | 0;
			do {
				Mj(f, 0);
				Zd(d, (HEAP32[h >> 2] | 0) + ((HEAP32[g >> 2] | 0) * 24 | 0) | 0);
				HEAP32[g >> 2] = (((HEAP32[g >> 2] | 0) + 1 | 0) >>> 0) % ((HEAP32[j >> 2] | 0) >>> 0) | 0;
				HEAP32[e >> 2] = (HEAP32[e >> 2] | 0) + -1;
				o = Wj(HEAP32[k >> 2] | 0) | 0;
				p = HEAP32[a >> 2] | 0;
				if (!p)
					q = 0;
				else
					q = HEAP32[p + 4 >> 2] | 0;
				wb(o | 0, 336, q | 0, HEAP32[l >> 2] | 0, 0, 0);
				o = HEAP32[m >> 2] | 0;
				if (((o | 0) != 0 ? (p = o + 4 | 0, r = (HEAP32[p >> 2] | 0) + -1 | 0, HEAP32[p >> 2] = r, (r | 0) == 0) : 0) ? (lc[c[(HEAP32[o >> 2] | 0) + 8 >> 2] & 255](o), r = o + 8 | 0, p = (HEAP32[r >> 2] | 0) + -1 | 0, HEAP32[r >> 2] = p, (p | 0) == 0) : 0)
					lc[c[(HEAP32[o >> 2] | 0) + 12 >> 2] & 255](o);
				o = HEAP32[n >> 2] | 0;
				if (((o | 0) != 0 ? (p = o + 4 | 0, r = (HEAP32[p >> 2] | 0) + -1 | 0, HEAP32[p >> 2] = r, (r | 0) == 0) : 0) ? (lc[c[(HEAP32[o >> 2] | 0) + 8 >> 2] & 255](o), r = o + 8 | 0, p = (HEAP32[r >> 2] | 0) + -1 | 0, HEAP32[r >> 2] = p, (p | 0) == 0) : 0)
					lc[c[(HEAP32[o >> 2] | 0) + 12 >> 2] & 255](o)
			} while ((HEAP32[e >> 2] | 0) != 0);
			i = b;
			return
		}
		function ud(a, b) {
			a = a | 0;
			b = +b;
			return
		}
		function vd(a, b) {
			a = a | 0;
			b = b | 0;
			return
		}
		function wd(a) {
			a = a | 0;
			return
		}
		function xd(a, b) {
			a = a | 0;
			b = b | 0;
			return
		}
		function yd(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0,
			g = 0;
			d = i;
			if ((b | 0) <= -1) {
				gc();
				e = a + 44 | 0;
				HEAP32[e >> 2] = b;
				i = d;
				return
			}
			f = a + 44 | 0;
			if ((HEAP32[f >> 2] | 0) > -1)
				gc();
			if ((b | 0) > 0)
				g = 1e3 / (b | 0) | 0;
			else
				g = 0;
			ac(2, g | 0, 0);
			e = f;
			HEAP32[e >> 2] = b;
			i = d;
			return
		}
		function zd(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0,
			e = 0;
			a = i;
			d = HEAP32[b + 4 >> 2] | 0;
			if (!d)
				e = 0;
			else
				e = HEAP32[d + 4 >> 2] | 0;
			db(368, e | 0, HEAP32[b + 8 >> 2] | 0);
			i = a;
			return
		}
		function Ad(a) {
			a = a | 0;
			return
		}
		function Bd(a) {
			a = a | 0;
			return
		}
		function Cd(a) {
			a = a | 0;
			var b = 0;
			b = i;
			kl(a);
			i = b;
			return
		}
		function Dd(a) {
			a = a | 0;
			var b = 0,
			d = 0;
			b = i;
			d = il(8) | 0;
			if (!d) {
				i = b;
				return d | 0
			}
			HEAP32[d >> 2] = 392;
			HEAP32[d + 4 >> 2] = HEAP32[a + 4 >> 2];
			i = b;
			return d | 0
		}
		function Ed(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0;
			d = i;
			if (!b) {
				i = d;
				return
			}
			HEAP32[b >> 2] = 392;
			HEAP32[b + 4 >> 2] = HEAP32[a + 4 >> 2];
			i = d;
			return
		}
		function Fd(a) {
			a = a | 0;
			return
		}
		function Gd(a) {
			a = a | 0;
			var b = 0;
			b = i;
			kl(a);
			i = b;
			return
		}
		function Hd(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0;
			d = i;
			lc[HEAP32[a + 4 >> 2] & 255](b);
			i = d;
			return
		}
		function Id(a) {
			a = a | 0;
			var b = 0;
			b = i;
			kl(a);
			i = b;
			return
		}
		function Jd(a) {
			a = a | 0;
			var b = 0,
			d = 0;
			b = i;
			d = a + 12 | 0;
			a = HEAP32[d >> 2] | 0;
			if (!a) {
				HEAP32[d >> 2] = 0;
				i = b;
				return
			}
			lc[c[(HEAP32[a >> 2] | 0) + 4 >> 2] & 255](a);
			HEAP32[d >> 2] = 0;
			i = b;
			return
		}
		function Kd(a) {
			a = a | 0;
			var b = 0;
			b = i;
			if (!a) {
				i = b;
				return
			}
			lc[c[(HEAP32[a >> 2] | 0) + 4 >> 2] & 255](a);
			i = b;
			return
		}
		function Ld(a) {
			a = a | 0;
			var b = 0;
			b = i;
			kl(a);
			i = b;
			return
		}
		function Md(a) {
			a = a | 0;
			var b = 0,
			d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0;
			b = i;
			d = HEAP32[a + 116 >> 2] | 0;
			if (!((d | 0) == 0 ? 1 : ((HEAP32[a + 124 >> 2] | 0) - d | 0) < 2))
				ll(d);
			d = a + 100 | 0;
			e = HEAP32[d >> 2] | 0;
			f = HEAP32[a + 104 >> 2] | 0;
			if (e >>> 0 < f >>> 0) {
				g = e;
				do {
					h = HEAP32[g >> 2] | 0;
					if (((h | 0) != 0 ? (j = h + 4 | 0, k = (HEAP32[j >> 2] | 0) + -1 | 0, HEAP32[j >> 2] = k, (k | 0) == 0) : 0) ? (lc[c[(HEAP32[h >> 2] | 0) + 8 >> 2] & 255](h), k = h + 8 | 0, j = (HEAP32[k >> 2] | 0) + -1 | 0, HEAP32[k >> 2] = j, (j | 0) == 0) : 0)
						lc[c[(HEAP32[h >> 2] | 0) + 12 >> 2] & 255](h);
					g = g + 8 | 0
				} while (g >>> 0 < f >>> 0);
				l = HEAP32[d >> 2] | 0
			} else
				l = e;
			if (l)
				ll(l);
			Zj(a + 96 | 0);
			l = HEAP32[a + 88 >> 2] | 0;
			if (((l | 0) != 0 ? (e = l + 4 | 0, d = (HEAP32[e >> 2] | 0) + -1 | 0, HEAP32[e >> 2] = d, (d | 0) == 0) : 0) ? (lc[c[(HEAP32[l >> 2] | 0) + 8 >> 2] & 255](l), d = l + 8 | 0, e = (HEAP32[d >> 2] | 0) + -1 | 0, HEAP32[d >> 2] = e, (e | 0) == 0) : 0)
				lc[c[(HEAP32[l >> 2] | 0) + 12 >> 2] & 255](l);
			Qd(a + 60 | 0, HEAP32[a + 72 >> 2] | 0);
			Zj(a + 56 | 0);
			Rd(a + 28 | 0, HEAP32[a + 40 >> 2] | 0);
			Sd(a, HEAP32[a + 12 >> 2] | 0);
			i = b;
			return
		}
		function Nd(b, d) {
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0;
			e = i;
			i = i + 16 | 0;
			f = e;
			g = d + 4 | 0;
			d = HEAP32[(HEAP32[g >> 2] | 0) + 20 >> 2] | 0;
			h = b + 60 | 0;
			j = b + 64 | 0;
			k = HEAP32[b + 72 >> 2] | 0;
			a: do
				if (!k)
					l = j;
				else {
					b = k;
					m = j;
					while (1) {
						n = b;
						while (1) {
							if ((HEAP32[n + 16 >> 2] | 0) >= (d | 0))
								break;
							o = HEAP32[n >> 2] | 0;
							if (!o) {
								l = m;
								break a
							} else
								n = o
						}
						b = HEAP32[n + 4 >> 2] | 0;
						if (!b) {
							l = n;
							break
						} else
							m = n
					}
				}
			while (0);
			if ((l | 0) != (j | 0) ? ((l | 0) != (j | 0) ? (d | 0) >= (HEAP32[l + 16 >> 2] | 0) : 0) : 0) {
				HEAP32[f >> 2] = l;
				Xd(h, f) | 0
			}
			f = HEAP32[g >> 2] | 0;
			HEAP8[f + 41 >> 0] = 1;
			g = f + 28 | 0;
			f = HEAP32[g >> 2] | 0;
			if (!f) {
				i = e;
				return
			}
			if (!(Vj(f) | 0)) {
				i = e;
				return
			}
			Xj(HEAP32[g >> 2] | 0);
			i = e;
			return
		}
		function Od(b) {
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0,
			g = 0;
			d = i;
			i = i + 16 | 0;
			e = d;
			if ((HEAP32[6348] | 0) != (HEAP32[6346] | 0)) {
				HEAP32[e >> 2] = 536;
				_d(b, 528, e) | 0;
				i = d;
				return
			}
			e = HEAP32[b >> 2] | 0;
			if ((e | 0) == 520) {
				i = d;
				return
			}
			f = b + 4 | 0;
			if ((e | 0) == (HEAP32[f >> 2] | 0))
				g = e;
			else {
				HEAP8[e >> 0] = 0;
				e = HEAP32[b >> 2] | 0;
				HEAP32[f >> 2] = e;
				g = e
			}
			e = b + 8 | 0;
			if (((HEAP32[e >> 2] | 0) - g + -1 | 0) >>> 0 < 6) {
				HEAP8[0] = HEAP8[520] | 0;
				HEAP8[1] = HEAP8[521] | 0;
				HEAP8[2] = HEAP8[522] | 0;
				HEAP8[3] = HEAP8[523] | 0;
				HEAP8[4] = HEAP8[524] | 0;
				HEAP8[5] = HEAP8[525] | 0;
				HEAP8[6] = 0;
				HEAP32[b >> 2] = 0;
				HEAP32[f >> 2] = 6;
				HEAP32[e >> 2] = 9;
				i = d;
				return
			} else {
				ry(g + 1 | 0, 521 | 0, 5) | 0;
				a[(HEAP32[f >> 2] | 0) + 6 >> 0] = 0;
				HEAP8[HEAP32[f >> 2] >> 0] = 91;
				HEAP32[f >> 2] = (HEAP32[f >> 2] | 0) + 6;
				i = d;
				return
			}
		}
		function Pd(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0;
			d = i;
			i = i + 16 | 0;
			e = d;
			f = a + 16 | 0;
			g = HEAP32[f >> 2] | 0;
			h = b + 16 | 0;
			j = HEAP32[h >> 2] | 0;
			k = (j | 0) == (b | 0);
			if ((g | 0) == (a | 0)) {
				l = HEAP32[(HEAP32[g >> 2] | 0) + 12 >> 2] | 0;
				if (k) {
					rc[l & 127](g, e);
					m = HEAP32[f >> 2] | 0;
					lc[c[(HEAP32[m >> 2] | 0) + 16 >> 2] & 255](m);
					HEAP32[f >> 2] = 0;
					m = HEAP32[h >> 2] | 0;
					rc[c[(HEAP32[m >> 2] | 0) + 12 >> 2] & 127](m, g);
					m = HEAP32[h >> 2] | 0;
					lc[c[(HEAP32[m >> 2] | 0) + 16 >> 2] & 255](m);
					HEAP32[h >> 2] = 0;
					HEAP32[f >> 2] = g;
					rc[c[(HEAP32[e >> 2] | 0) + 12 >> 2] & 127](e, j);
					lc[c[(HEAP32[e >> 2] | 0) + 16 >> 2] & 255](e);
					HEAP32[h >> 2] = j;
					i = d;
					return
				} else {
					rc[l & 127](g, b);
					l = HEAP32[f >> 2] | 0;
					lc[c[(HEAP32[l >> 2] | 0) + 16 >> 2] & 255](l);
					l = b + 16 | 0;
					HEAP32[f >> 2] = HEAP32[l >> 2];
					HEAP32[l >> 2] = b;
					i = d;
					return
				}
			} else if (k) {
				rc[c[(HEAP32[b >> 2] | 0) + 12 >> 2] & 127](b, a);
				b = HEAP32[h >> 2] | 0;
				lc[c[(HEAP32[b >> 2] | 0) + 16 >> 2] & 255](b);
				HEAP32[h >> 2] = HEAP32[f >> 2];
				HEAP32[f >> 2] = a;
				i = d;
				return
			} else {
				HEAP32[f >> 2] = j;
				HEAP32[h >> 2] = g;
				i = d;
				return
			}
		}
		function Qd(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0;
			d = i;
			if (!b) {
				i = d;
				return
			} else
				e = b;
			do {
				Qd(a, HEAP32[e >> 2] | 0);
				b = e;
				e = HEAP32[e + 4 >> 2] | 0;
				f = HEAP32[b + 20 >> 2] | 0;
				if (((f | 0) != 0 ? (g = f + 4 | 0, h = (HEAP32[g >> 2] | 0) + -1 | 0, HEAP32[g >> 2] = h, (h | 0) == 0) : 0) ? (lc[c[(HEAP32[f >> 2] | 0) + 8 >> 2] & 255](f), h = f + 8 | 0, g = (HEAP32[h >> 2] | 0) + -1 | 0, HEAP32[h >> 2] = g, (g | 0) == 0) : 0)
					lc[c[(HEAP32[f >> 2] | 0) + 12 >> 2] & 255](f);
				ll(b)
			} while ((e | 0) != 0);
			i = d;
			return
		}
		function Rd(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0;
			d = i;
			if (!b) {
				i = d;
				return
			} else
				e = b;
			do {
				Rd(a, HEAP32[e >> 2] | 0);
				b = e;
				e = HEAP32[e + 4 >> 2] | 0;
				f = HEAP32[b + 48 >> 2] | 0;
				if ((f | 0) != (b + 32 | 0)) {
					if (f)
						lc[c[(HEAP32[f >> 2] | 0) + 20 >> 2] & 255](f)
				} else
					lc[c[(HEAP32[f >> 2] | 0) + 16 >> 2] & 255](f);
				f = HEAP32[b + 16 >> 2] | 0;
				if (!((f | 0) == 0 ? 1 : ((HEAP32[b + 24 >> 2] | 0) - f | 0) < 2))
					ll(f);
				ll(b)
			} while ((e | 0) != 0);
			i = d;
			return
		}
		function Sd(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0;
			d = i;
			if (!b) {
				i = d;
				return
			} else
				e = b;
			do {
				Sd(a, HEAP32[e >> 2] | 0);
				b = e;
				e = HEAP32[e + 4 >> 2] | 0;
				f = HEAP32[b + 32 >> 2] | 0;
				if (!((f | 0) == 0 ? 1 : ((HEAP32[b + 40 >> 2] | 0) - f | 0) < 2))
					ll(f);
				f = HEAP32[b + 16 >> 2] | 0;
				if (!((f | 0) == 0 ? 1 : ((HEAP32[b + 24 >> 2] | 0) - f | 0) < 2))
					ll(f);
				ll(b)
			} while ((e | 0) != 0);
			i = d;
			return
		}
		function Td(b, d) {
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0;
			e = i;
			i = i + 64 | 0;
			f = e + 53 | 0;
			g = e + 48 | 0;
			h = e + 52 | 0;
			j = e + 16 | 0;
			k = e;
			l = b + 4 | 0;
			m = HEAP32[b + 12 >> 2] | 0;
			do
				if (m) {
					n = HEAP32[d >> 2] | 0;
					o = (HEAP32[d + 4 >> 2] | 0) - n | 0;
					p = m;
					q = l;
					a: while (1) {
						r = p;
						while (1) {
							s = HEAP32[r + 16 >> 2] | 0;
							t = (HEAP32[r + 20 >> 2] | 0) - s | 0;
							u = by(s, n, (o | 0) < (t | 0) ? o : t) | 0;
							if (!u) {
								if ((t | 0) >= (o | 0))
									break
							} else if ((u | 0) >= 0)
								break;
							u = HEAP32[r >> 2] | 0;
							if (!u) {
								v = q;
								break a
							} else
								r = u
						}
						p = HEAP32[r + 4 >> 2] | 0;
						if (!p) {
							v = r;
							break
						} else
							q = r
					}
					if ((v | 0) != (l | 0)) {
						q = HEAP32[v + 16 >> 2] | 0;
						p = (HEAP32[v + 20 >> 2] | 0) - q | 0;
						u = by(n, q, (p | 0) < (o | 0) ? p : o) | 0;
						if (!u) {
							if ((o | 0) < (p | 0)) {
								w = v;
								break
							} else
								x = v;
							y = x + 32 | 0;
							i = e;
							return y | 0
						} else {
							if ((u | 0) < 0) {
								w = v;
								break
							} else
								x = v;
							y = x + 32 | 0;
							i = e;
							return y | 0
						}
					} else
						w = l
				} else
					w = l;
			while (0);
			HEAP32[k >> 2] = 43112;
			HEAP32[k + 4 >> 2] = 43112;
			HEAP32[k + 8 >> 2] = 43113;
			$d(j, d, k);
			HEAP32[g >> 2] = w;
			HEAP8[f + 0 >> 0] = HEAP8[h + 0 >> 0] | 0;
			h = ae(b, g, j, f) | 0;
			f = HEAP32[j + 16 >> 2] | 0;
			if (!((f | 0) == 0 ? 1 : ((HEAP32[j + 24 >> 2] | 0) - f | 0) < 2))
				ll(f);
			f = HEAP32[j >> 2] | 0;
			if ((f | 0) == 0 ? 1 : ((HEAP32[j + 8 >> 2] | 0) - f | 0) < 2) {
				x = h;
				y = x + 32 | 0;
				i = e;
				return y | 0
			}
			ll(f);
			x = h;
			y = x + 32 | 0;
			i = e;
			return y | 0
		}
		function Ud(b, d, e) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0;
			f = i;
			if ((d | 0) == (e | 0)) {
				i = f;
				return b | 0
			}
			g = b + 4 | 0;
			h = HEAP32[g >> 2] | 0;
			j = HEAP32[b >> 2] | 0;
			k = e;
			e = k - d | 0;
			l = b + 8 | 0;
			m = (HEAP32[l >> 2] | 0) - j + -1 | 0;
			n = h - j + e | 0;
			if (n >>> 0 <= m >>> 0) {
				j = d + 1 | 0;
				ry(h + 1 | 0, j | 0, k - j | 0) | 0;
				a[(HEAP32[g >> 2] | 0) + e >> 0] = 0;
				HEAP8[HEAP32[g >> 2] >> 0] = HEAP8[d >> 0] | 0;
				HEAP32[g >> 2] = (HEAP32[g >> 2] | 0) + e;
				i = f;
				return b | 0
			}
			j = m >>> 0 > 8 ? m << 1 : 8;
			m = (j >>> 0 < n >>> 0 ? n : j) + 1 | 0;
			j = ml(m, 0, 0, 0, 0, 0) | 0;
			n = HEAP32[b >> 2] | 0;
			k = (HEAP32[g >> 2] | 0) - n | 0;
			ry(j | 0, n | 0, k | 0) | 0;
			ry(j + k | 0, d | 0, e | 0) | 0;
			d = j + (k + e) | 0;
			HEAP8[d >> 0] = 0;
			e = HEAP32[b >> 2] | 0;
			if (!((e | 0) == 0 ? 1 : ((HEAP32[l >> 2] | 0) - e | 0) < 2))
				ll(e);
			HEAP32[b >> 2] = j;
			HEAP32[g >> 2] = d;
			HEAP32[l >> 2] = j + m;
			i = f;
			return b | 0
		}
		function Vd(b, d) {
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0;
			e = i;
			i = i + 80 | 0;
			f = e + 69 | 0;
			g = e + 64 | 0;
			h = e + 68 | 0;
			j = e + 24 | 0;
			k = e;
			l = b + 4 | 0;
			m = HEAP32[b + 12 >> 2] | 0;
			do
				if (m) {
					n = HEAP32[d >> 2] | 0;
					o = (HEAP32[d + 4 >> 2] | 0) - n | 0;
					p = m;
					q = l;
					a: while (1) {
						r = p;
						while (1) {
							s = HEAP32[r + 16 >> 2] | 0;
							t = (HEAP32[r + 20 >> 2] | 0) - s | 0;
							u = by(s, n, (o | 0) < (t | 0) ? o : t) | 0;
							if (!u) {
								if ((t | 0) >= (o | 0))
									break
							} else if ((u | 0) >= 0)
								break;
							u = HEAP32[r >> 2] | 0;
							if (!u) {
								v = q;
								break a
							} else
								r = u
						}
						p = HEAP32[r + 4 >> 2] | 0;
						if (!p) {
							v = r;
							break
						} else
							q = r
					}
					if ((v | 0) != (l | 0)) {
						q = HEAP32[v + 16 >> 2] | 0;
						p = (HEAP32[v + 20 >> 2] | 0) - q | 0;
						u = by(n, q, (p | 0) < (o | 0) ? p : o) | 0;
						if (!u) {
							if ((o | 0) < (p | 0)) {
								w = v;
								break
							} else
								x = v;
							y = x + 32 | 0;
							i = e;
							return y | 0
						} else {
							if ((u | 0) < 0) {
								w = v;
								break
							} else
								x = v;
							y = x + 32 | 0;
							i = e;
							return y | 0
						}
					} else
						w = l
				} else
					w = l;
			while (0);
			l = k + 16 | 0;
			HEAP32[l >> 2] = 0;
			be(j, d, k);
			HEAP32[g >> 2] = w;
			HEAP8[f + 0 >> 0] = HEAP8[h + 0 >> 0] | 0;
			h = ce(b, g, j, f) | 0;
			f = HEAP32[j + 32 >> 2] | 0;
			if ((f | 0) != (j + 16 | 0)) {
				if (f)
					lc[c[(HEAP32[f >> 2] | 0) + 20 >> 2] & 255](f)
			} else
				lc[c[(HEAP32[f >> 2] | 0) + 16 >> 2] & 255](f);
			f = HEAP32[j >> 2] | 0;
			if (!((f | 0) == 0 ? 1 : ((HEAP32[j + 8 >> 2] | 0) - f | 0) < 2))
				ll(f);
			f = HEAP32[l >> 2] | 0;
			if ((f | 0) == (k | 0)) {
				lc[c[(HEAP32[f >> 2] | 0) + 16 >> 2] & 255](f);
				x = h;
				y = x + 32 | 0;
				i = e;
				return y | 0
			}
			if (!f) {
				x = h;
				y = x + 32 | 0;
				i = e;
				return y | 0
			}
			lc[c[(HEAP32[f >> 2] | 0) + 20 >> 2] & 255](f);
			x = h;
			y = x + 32 | 0;
			i = e;
			return y | 0
		}
		function Wd(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0;
			d = i;
			i = i + 16 | 0;
			e = d;
			f = a + 16 | 0;
			g = HEAP32[f >> 2] | 0;
			h = b + 16 | 0;
			j = HEAP32[h >> 2] | 0;
			k = (j | 0) == (b | 0);
			if ((g | 0) == (a | 0)) {
				l = HEAP32[(HEAP32[g >> 2] | 0) + 12 >> 2] | 0;
				if (k) {
					rc[l & 127](g, e);
					m = HEAP32[f >> 2] | 0;
					lc[c[(HEAP32[m >> 2] | 0) + 16 >> 2] & 255](m);
					HEAP32[f >> 2] = 0;
					m = HEAP32[h >> 2] | 0;
					rc[c[(HEAP32[m >> 2] | 0) + 12 >> 2] & 127](m, g);
					m = HEAP32[h >> 2] | 0;
					lc[c[(HEAP32[m >> 2] | 0) + 16 >> 2] & 255](m);
					HEAP32[h >> 2] = 0;
					HEAP32[f >> 2] = g;
					rc[c[(HEAP32[e >> 2] | 0) + 12 >> 2] & 127](e, j);
					lc[c[(HEAP32[e >> 2] | 0) + 16 >> 2] & 255](e);
					HEAP32[h >> 2] = j;
					i = d;
					return
				} else {
					rc[l & 127](g, b);
					l = HEAP32[f >> 2] | 0;
					lc[c[(HEAP32[l >> 2] | 0) + 16 >> 2] & 255](l);
					l = b + 16 | 0;
					HEAP32[f >> 2] = HEAP32[l >> 2];
					HEAP32[l >> 2] = b;
					i = d;
					return
				}
			} else if (k) {
				rc[c[(HEAP32[b >> 2] | 0) + 12 >> 2] & 127](b, a);
				b = HEAP32[h >> 2] | 0;
				lc[c[(HEAP32[b >> 2] | 0) + 16 >> 2] & 255](b);
				HEAP32[h >> 2] = HEAP32[f >> 2];
				HEAP32[f >> 2] = a;
				i = d;
				return
			} else {
				HEAP32[f >> 2] = j;
				HEAP32[h >> 2] = g;
				i = d;
				return
			}
		}
		function Xd(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0;
			d = i;
			e = HEAP32[b >> 2] | 0;
			f = a + 20 | 0;
			HEAP32[f >> 2] = (HEAP32[f >> 2] | 0) + -1;
			HEAP32[b >> 2] = sl(e) | 0;
			vl(e, a + 4 | 0);
			a = HEAP32[e + 20 >> 2] | 0;
			if ((a | 0) != 0 ? (f = a + 4 | 0, g = (HEAP32[f >> 2] | 0) + -1 | 0, HEAP32[f >> 2] = g, (g | 0) == 0) : 0) {
				lc[c[(HEAP32[a >> 2] | 0) + 8 >> 2] & 255](a);
				g = a + 8 | 0;
				f = (HEAP32[g >> 2] | 0) + -1 | 0;
				HEAP32[g >> 2] = f;
				if (!f)
					lc[c[(HEAP32[a >> 2] | 0) + 12 >> 2] & 255](a);
				if (!e) {
					h = HEAP32[b >> 2] | 0;
					i = d;
					return h | 0
				}
			}
			ll(e);
			h = HEAP32[b >> 2] | 0;
			i = d;
			return h | 0
		}
		function Yd(a) {
			a = a | 0;
			var b = 0,
			d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0;
			b = i;
			d = a + 4 | 0;
			a = HEAP32[d >> 2] | 0;
			if (!a) {
				HEAP32[d >> 2] = 0;
				i = b;
				return
			}
			e = a + -4 | 0;
			f = HEAP32[e >> 2] | 0;
			if (f) {
				g = a + (f * 24 | 0) | 0;
				do {
					f = HEAP32[g + -8 >> 2] | 0;
					if (((f | 0) != 0 ? (h = f + 4 | 0, j = (HEAP32[h >> 2] | 0) + -1 | 0, HEAP32[h >> 2] = j, (j | 0) == 0) : 0) ? (lc[c[(HEAP32[f >> 2] | 0) + 8 >> 2] & 255](f), j = f + 8 | 0, h = (HEAP32[j >> 2] | 0) + -1 | 0, HEAP32[j >> 2] = h, (h | 0) == 0) : 0)
						lc[c[(HEAP32[f >> 2] | 0) + 12 >> 2] & 255](f);
					f = HEAP32[g + -20 >> 2] | 0;
					g = g + -24 | 0;
					if (((f | 0) != 0 ? (h = f + 4 | 0, j = (HEAP32[h >> 2] | 0) + -1 | 0, HEAP32[h >> 2] = j, (j | 0) == 0) : 0) ? (lc[c[(HEAP32[f >> 2] | 0) + 8 >> 2] & 255](f), j = f + 8 | 0, h = (HEAP32[j >> 2] | 0) + -1 | 0, HEAP32[j >> 2] = h, (h | 0) == 0) : 0)
						lc[c[(HEAP32[f >> 2] | 0) + 12 >> 2] & 255](f)
				} while ((g | 0) != (a | 0))
			}
			ll(e);
			HEAP32[d >> 2] = 0;
			i = b;
			return
		}
		function Zd(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0;
			d = i;
			i = i + 32 | 0;
			e = d;
			f = HEAP32[a >> 2] | 0;
			g = e + 4 | 0;
			h = a + 4 | 0;
			HEAP32[g >> 2] = HEAP32[h >> 2];
			j = a + 8 | 0;
			HEAP32[e + 8 >> 2] = HEAP32[j >> 2];
			HEAP32[h >> 2] = 0;
			HEAP32[j >> 2] = 0;
			j = a + 12 | 0;
			HEAP32[e + 12 >> 2] = HEAP32[j >> 2];
			h = e + 16 | 0;
			k = a + 16 | 0;
			HEAP32[h >> 2] = HEAP32[k >> 2];
			l = a + 20 | 0;
			HEAP32[e + 20 >> 2] = HEAP32[l >> 2];
			HEAP32[k >> 2] = 0;
			HEAP32[l >> 2] = 0;
			HEAP32[j >> 2] = 0;
			HEAP32[a >> 2] = 0;
			HEAP32[a >> 2] = HEAP32[b >> 2];
			HEAP32[b >> 2] = 0;
			j = b + 4 | 0;
			de(a + 4 | 0, j);
			a = HEAP32[b >> 2] | 0;
			HEAP32[b >> 2] = f;
			HEAP32[e >> 2] = a;
			de(j, e + 4 | 0);
			e = HEAP32[h >> 2] | 0;
			if (((e | 0) != 0 ? (h = e + 4 | 0, j = (HEAP32[h >> 2] | 0) + -1 | 0, HEAP32[h >> 2] = j, (j | 0) == 0) : 0) ? (lc[c[(HEAP32[e >> 2] | 0) + 8 >> 2] & 255](e), j = e + 8 | 0, h = (HEAP32[j >> 2] | 0) + -1 | 0, HEAP32[j >> 2] = h, (h | 0) == 0) : 0)
				lc[c[(HEAP32[e >> 2] | 0) + 12 >> 2] & 255](e);
			e = HEAP32[g >> 2] | 0;
			if (!e) {
				i = d;
				return
			}
			g = e + 4 | 0;
			h = (HEAP32[g >> 2] | 0) + -1 | 0;
			HEAP32[g >> 2] = h;
			if (h) {
				i = d;
				return
			}
			lc[c[(HEAP32[e >> 2] | 0) + 8 >> 2] & 255](e);
			h = e + 8 | 0;
			g = (HEAP32[h >> 2] | 0) + -1 | 0;
			HEAP32[h >> 2] = g;
			if (g) {
				i = d;
				return
			}
			lc[c[(HEAP32[e >> 2] | 0) + 12 >> 2] & 255](e);
			i = d;
			return
		}
		function _d(a, b, d) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0;
			e = i;
			i = i + 16 | 0;
			f = e;
			HEAP32[f >> 2] = d;
			HEAP32[a + 4 >> 2] = HEAP32[a >> 2];
			ee(a, b, f) | 0;
			i = e;
			return a | 0
		}
		function $d(b, d, e) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0;
			f = i;
			HEAP32[b >> 2] = 0;
			g = b + 4 | 0;
			HEAP32[g >> 2] = 0;
			h = b + 8 | 0;
			HEAP32[h >> 2] = 0;
			j = HEAP32[d >> 2] | 0;
			k = (HEAP32[d + 4 >> 2] | 0) - j | 0;
			d = k + 1 | 0;
			if (d >>> 0 > 1) {
				l = ml(d, 0, 0, 0, 0, 0) | 0;
				HEAP32[b >> 2] = l;
				HEAP32[g >> 2] = l;
				m = l;
				n = l + d | 0
			} else {
				HEAP32[b >> 2] = 43112;
				HEAP32[g >> 2] = 43112;
				m = 43112;
				n = 43113 | 0
			}
			HEAP32[h >> 2] = n;
			ry(m | 0, j | 0, k | 0) | 0;
			j = m + k | 0;
			HEAP32[g >> 2] = j;
			HEAP8[j >> 0] = 0;
			j = b + 16 | 0;
			HEAP32[j >> 2] = 0;
			g = b + 20 | 0;
			HEAP32[g >> 2] = 0;
			k = b + 24 | 0;
			HEAP32[k >> 2] = 0;
			b = HEAP32[e >> 2] | 0;
			m = (HEAP32[e + 4 >> 2] | 0) - b | 0;
			e = m + 1 | 0;
			if (e >>> 0 > 1) {
				n = ml(e, 0, 0, 0, 0, 0) | 0;
				HEAP32[j >> 2] = n;
				HEAP32[g >> 2] = n;
				o = n;
				p = n + e | 0;
				HEAP32[k >> 2] = p;
				ry(o | 0, b | 0, m | 0) | 0;
				q = o + m | 0;
				HEAP32[g >> 2] = q;
				HEAP8[q >> 0] = 0;
				i = f;
				return
			} else {
				HEAP32[j >> 2] = 43112;
				HEAP32[g >> 2] = 43112;
				o = 43112;
				p = 43113 | 0;
				HEAP32[k >> 2] = p;
				ry(o | 0, b | 0, m | 0) | 0;
				q = o + m | 0;
				HEAP32[g >> 2] = q;
				HEAP8[q >> 0] = 0;
				i = f;
				return
			}
		}
		function ae(b, d, e, f) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0;
			f = i;
			i = i + 32 | 0;
			g = f + 18 | 0;
			h = f + 8 | 0;
			j = f + 17 | 0;
			k = f;
			l = f + 16 | 0;
			m = HEAP32[d >> 2] | 0;
			n = b + 4 | 0;
			o = HEAP32[n >> 2] | 0;
			if ((m | 0) == (o | 0) | (m | 0) == (n | 0)) {
				do
					if (HEAP32[b + 20 >> 2] | 0) {
						p = HEAP32[o + 16 >> 2] | 0;
						q = HEAP32[e >> 2] | 0;
						r = (HEAP32[o + 20 >> 2] | 0) - p | 0;
						s = (HEAP32[e + 4 >> 2] | 0) - q | 0;
						t = by(p, q, (s | 0) < (r | 0) ? s : r) | 0;
						if (!t) {
							if ((r | 0) >= (s | 0))
								break
						} else if ((t | 0) >= 0)
							break;
						u = ge(b, o, e, 0) | 0;
						i = f;
						return u | 0
					}
				while (0);
				HEAP8[g + 0 >> 0] = HEAP8[l + 0 >> 0] | 0;
				he(k, b, e, g);
				u = HEAP32[k >> 2] | 0;
				i = f;
				return u | 0
			}
			k = sl(m) | 0;
			m = HEAP32[d >> 2] | 0;
			d = HEAP32[m + 16 >> 2] | 0;
			l = HEAP32[e >> 2] | 0;
			o = (HEAP32[m + 20 >> 2] | 0) - d | 0;
			t = (HEAP32[e + 4 >> 2] | 0) - l | 0;
			s = by(d, l, (t | 0) < (o | 0) ? t : o) | 0;
			if (!s) {
				if ((o | 0) < (t | 0))
					v = 5
			} else if ((s | 0) < 0)
				v = 5;
			do
				if ((v | 0) == 5) {
					s = HEAP32[k + 16 >> 2] | 0;
					o = (HEAP32[k + 20 >> 2] | 0) - s | 0;
					d = by(l, s, (o | 0) < (t | 0) ? o : t) | 0;
					if (!d) {
						if ((t | 0) >= (o | 0))
							break
					} else if ((d | 0) >= 0)
						break;
					if (!(HEAP32[m >> 2] | 0)) {
						u = ge(b, m, e, 0) | 0;
						i = f;
						return u | 0
					} else {
						d = ml(48, 0, 0, 0, 0, 0) | 0;
						fe(d + 16 | 0, e);
						ul(d, k, n, 0);
						o = b + 20 | 0;
						HEAP32[o >> 2] = (HEAP32[o >> 2] | 0) + 1;
						u = d;
						i = f;
						return u | 0
					}
				}
			while (0);
			HEAP8[g + 0 >> 0] = HEAP8[j + 0 >> 0] | 0;
			he(h, b, e, g);
			u = HEAP32[h >> 2] | 0;
			i = f;
			return u | 0
		}
		function be(b, d, e) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0;
			f = i;
			HEAP32[b >> 2] = 0;
			g = b + 4 | 0;
			HEAP32[g >> 2] = 0;
			h = b + 8 | 0;
			HEAP32[h >> 2] = 0;
			j = HEAP32[d >> 2] | 0;
			k = (HEAP32[d + 4 >> 2] | 0) - j | 0;
			d = k + 1 | 0;
			if (d >>> 0 > 1) {
				l = ml(d, 0, 0, 0, 0, 0) | 0;
				HEAP32[b >> 2] = l;
				HEAP32[g >> 2] = l;
				m = l;
				n = l + d | 0
			} else {
				HEAP32[b >> 2] = 43112;
				HEAP32[g >> 2] = 43112;
				m = 43112;
				n = 43113 | 0
			}
			HEAP32[h >> 2] = n;
			ry(m | 0, j | 0, k | 0) | 0;
			j = m + k | 0;
			HEAP32[g >> 2] = j;
			HEAP8[j >> 0] = 0;
			j = b + 16 | 0;
			g = e + 16 | 0;
			k = HEAP32[g >> 2] | 0;
			if (!k) {
				HEAP32[b + 32 >> 2] = 0;
				i = f;
				return
			}
			if ((k | 0) == (e | 0)) {
				HEAP32[b + 32 >> 2] = j;
				e = HEAP32[g >> 2] | 0;
				rc[c[(HEAP32[e >> 2] | 0) + 12 >> 2] & 127](e, j);
				i = f;
				return
			} else {
				HEAP32[b + 32 >> 2] = tc[c[(HEAP32[k >> 2] | 0) + 8 >> 2] & 127](k) | 0;
				i = f;
				return
			}
		}
		function ce(b, d, e, f) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0;
			f = i;
			i = i + 32 | 0;
			g = f + 18 | 0;
			h = f + 8 | 0;
			j = f + 17 | 0;
			k = f;
			l = f + 16 | 0;
			m = HEAP32[d >> 2] | 0;
			n = b + 4 | 0;
			o = HEAP32[n >> 2] | 0;
			if ((m | 0) == (o | 0) | (m | 0) == (n | 0)) {
				do
					if (HEAP32[b + 20 >> 2] | 0) {
						p = HEAP32[o + 16 >> 2] | 0;
						q = HEAP32[e >> 2] | 0;
						r = (HEAP32[o + 20 >> 2] | 0) - p | 0;
						s = (HEAP32[e + 4 >> 2] | 0) - q | 0;
						t = by(p, q, (s | 0) < (r | 0) ? s : r) | 0;
						if (!t) {
							if ((r | 0) >= (s | 0))
								break
						} else if ((t | 0) >= 0)
							break;
						u = je(b, o, e, 0) | 0;
						i = f;
						return u | 0
					}
				while (0);
				HEAP8[g + 0 >> 0] = HEAP8[l + 0 >> 0] | 0;
				ke(k, b, e, g);
				u = HEAP32[k >> 2] | 0;
				i = f;
				return u | 0
			}
			k = sl(m) | 0;
			m = HEAP32[d >> 2] | 0;
			d = HEAP32[m + 16 >> 2] | 0;
			l = HEAP32[e >> 2] | 0;
			o = (HEAP32[m + 20 >> 2] | 0) - d | 0;
			t = (HEAP32[e + 4 >> 2] | 0) - l | 0;
			s = by(d, l, (t | 0) < (o | 0) ? t : o) | 0;
			if (!s) {
				if ((o | 0) < (t | 0))
					v = 5
			} else if ((s | 0) < 0)
				v = 5;
			do
				if ((v | 0) == 5) {
					s = HEAP32[k + 16 >> 2] | 0;
					o = (HEAP32[k + 20 >> 2] | 0) - s | 0;
					d = by(l, s, (o | 0) < (t | 0) ? o : t) | 0;
					if (!d) {
						if ((t | 0) >= (o | 0))
							break
					} else if ((d | 0) >= 0)
						break;
					if (!(HEAP32[m >> 2] | 0)) {
						u = je(b, m, e, 0) | 0;
						i = f;
						return u | 0
					} else {
						d = ml(56, 0, 0, 0, 0, 0) | 0;
						ie(d + 16 | 0, e);
						ul(d, k, n, 0);
						o = b + 20 | 0;
						HEAP32[o >> 2] = (HEAP32[o >> 2] | 0) + 1;
						u = d;
						i = f;
						return u | 0
					}
				}
			while (0);
			HEAP8[g + 0 >> 0] = HEAP8[j + 0 >> 0] | 0;
			ke(h, b, e, g);
			u = HEAP32[h >> 2] | 0;
			i = f;
			return u | 0
		}
		function de(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0;
			d = i;
			e = HEAP32[a >> 2] | 0;
			f = a + 4 | 0;
			g = HEAP32[f >> 2] | 0;
			HEAP32[a >> 2] = 0;
			HEAP32[f >> 2] = 0;
			h = a + 8 | 0;
			j = HEAP32[h >> 2] | 0;
			k = a + 12 | 0;
			l = HEAP32[k >> 2] | 0;
			m = a + 16 | 0;
			n = HEAP32[m >> 2] | 0;
			HEAP32[k >> 2] = 0;
			HEAP32[m >> 2] = 0;
			HEAP32[h >> 2] = 0;
			o = b + 8 | 0;
			HEAP32[h >> 2] = HEAP32[o >> 2];
			HEAP32[a >> 2] = HEAP32[b >> 2];
			HEAP32[b >> 2] = 0;
			a = b + 4 | 0;
			h = HEAP32[f >> 2] | 0;
			HEAP32[f >> 2] = HEAP32[a >> 2];
			HEAP32[a >> 2] = h;
			h = b + 12 | 0;
			f = HEAP32[k >> 2] | 0;
			HEAP32[k >> 2] = HEAP32[h >> 2];
			HEAP32[h >> 2] = f;
			f = b + 16 | 0;
			HEAP32[m >> 2] = HEAP32[f >> 2];
			HEAP32[o >> 2] = j;
			j = HEAP32[b >> 2] | 0;
			HEAP32[b >> 2] = e;
			HEAP32[a >> 2] = g;
			g = HEAP32[h >> 2] | 0;
			HEAP32[h >> 2] = l;
			HEAP32[f >> 2] = n;
			if (((g | 0) != 0 ? (n = g + 4 | 0, f = (HEAP32[n >> 2] | 0) + -1 | 0, HEAP32[n >> 2] = f, (f | 0) == 0) : 0) ? (lc[c[(HEAP32[g >> 2] | 0) + 8 >> 2] & 255](g), f = g + 8 | 0, n = (HEAP32[f >> 2] | 0) + -1 | 0, HEAP32[f >> 2] = n, (n | 0) == 0) : 0)
				lc[c[(HEAP32[g >> 2] | 0) + 12 >> 2] & 255](g);
			if (!j) {
				i = d;
				return
			}
			g = j + 4 | 0;
			n = (HEAP32[g >> 2] | 0) + -1 | 0;
			HEAP32[g >> 2] = n;
			if (n) {
				i = d;
				return
			}
			lc[c[(HEAP32[j >> 2] | 0) + 8 >> 2] & 255](j);
			n = j + 8 | 0;
			g = (HEAP32[n >> 2] | 0) + -1 | 0;
			HEAP32[n >> 2] = g;
			if (g) {
				i = d;
				return
			}
			lc[c[(HEAP32[j >> 2] | 0) + 12 >> 2] & 255](j);
			i = d;
			return
		}
		function ee(a, b, d) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0;
			e = i;
			i = i + 16 | 0;
			f = e;
			g = a + 4 | 0;
			h = (HEAP32[g >> 2] | 0) - (HEAP32[a >> 2] | 0) | 0;
			HEAP32[f >> 2] = HEAP32[d >> 2];
			j = HEAP32[g >> 2] | 0;
			if ((HEAP32[a >> 2] | 0) == 43112) {
				k = a + 8 | 0;
				l = pl(j, 0, b, d) | 0
			} else {
				m = a + 8 | 0;
				k = m;
				l = pl(j, (HEAP32[m >> 2] | 0) - j | 0, b, d) | 0
			}
			j = HEAP32[g >> 2] | 0;
			if ((l | 0) < ((HEAP32[k >> 2] | 0) - j | 0))
				if ((l | 0) < 0) {
					k = j - (HEAP32[a >> 2] | 0) << 1;
					j = k >>> 0 > 7 ? k : 7;
					if (j >>> 0 < 1e6) {
						k = j;
						do {
							HEAP32[d >> 2] = HEAP32[f >> 2];
							le(a, k);
							j = k + 1 | 0;
							m = j - h | 0;
							n = pl((HEAP32[a >> 2] | 0) + h | 0, m, b, d) | 0;
							if ((n | 0) == (m | 0)) {
								le(a, j);
								o = j;
								p = pl((HEAP32[a >> 2] | 0) + h | 0, m + 1 | 0, b, d) | 0
							} else {
								o = k;
								p = n
							}
							k = o << 1
						} while ((p | 0) < 0 & k >>> 0 < 1e6);
						q = p;
						r = 11
					} else {
						q = l;
						r = 11
					}
				} else
					s = l;
			else {
				HEAP32[d >> 2] = HEAP32[f >> 2];
				le(a, l + h | 0);
				q = pl((HEAP32[a >> 2] | 0) + h | 0, l + 1 | 0, b, d) | 0;
				r = 11
			}
			if ((r | 0) == 11)
				if ((q | 0) > -1)
					s = q;
				else {
					i = e;
					return a | 0
				}
			HEAP32[g >> 2] = (HEAP32[a >> 2] | 0) + (s + h);
			i = e;
			return a | 0
		}
		function fe(b, d) {
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0;
			e = i;
			HEAP32[b >> 2] = 0;
			f = b + 4 | 0;
			HEAP32[f >> 2] = 0;
			g = b + 8 | 0;
			HEAP32[g >> 2] = 0;
			h = HEAP32[d >> 2] | 0;
			j = (HEAP32[d + 4 >> 2] | 0) - h | 0;
			k = j + 1 | 0;
			if (k >>> 0 > 1) {
				l = ml(k, 0, 0, 0, 0, 0) | 0;
				HEAP32[b >> 2] = l;
				HEAP32[f >> 2] = l;
				m = l;
				n = l + k | 0
			} else {
				HEAP32[b >> 2] = 43112;
				HEAP32[f >> 2] = 43112;
				m = 43112;
				n = 43113 | 0
			}
			HEAP32[g >> 2] = n;
			ry(m | 0, h | 0, j | 0) | 0;
			h = m + j | 0;
			HEAP32[f >> 2] = h;
			HEAP8[h >> 0] = 0;
			h = b + 16 | 0;
			HEAP32[h >> 2] = 0;
			f = b + 20 | 0;
			HEAP32[f >> 2] = 0;
			j = b + 24 | 0;
			HEAP32[j >> 2] = 0;
			b = HEAP32[d + 16 >> 2] | 0;
			m = (HEAP32[d + 20 >> 2] | 0) - b | 0;
			d = m + 1 | 0;
			if (d >>> 0 > 1) {
				n = ml(d, 0, 0, 0, 0, 0) | 0;
				HEAP32[h >> 2] = n;
				HEAP32[f >> 2] = n;
				o = n;
				p = n + d | 0;
				HEAP32[j >> 2] = p;
				ry(o | 0, b | 0, m | 0) | 0;
				q = o + m | 0;
				HEAP32[f >> 2] = q;
				HEAP8[q >> 0] = 0;
				i = e;
				return
			} else {
				HEAP32[h >> 2] = 43112;
				HEAP32[f >> 2] = 43112;
				o = 43112;
				p = 43113 | 0;
				HEAP32[j >> 2] = p;
				ry(o | 0, b | 0, m | 0) | 0;
				q = o + m | 0;
				HEAP32[f >> 2] = q;
				HEAP8[q >> 0] = 0;
				i = e;
				return
			}
		}
		function ge(a, b, d, e) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0;
			f = i;
			g = a + 4 | 0;
			if ((b | 0) == (g | 0) | e)
				h = 0;
			else {
				e = HEAP32[d >> 2] | 0;
				j = HEAP32[b + 16 >> 2] | 0;
				k = (HEAP32[d + 4 >> 2] | 0) - e | 0;
				l = (HEAP32[b + 20 >> 2] | 0) - j | 0;
				m = (l | 0) < (k | 0);
				n = by(e, j, m ? l : k) | 0;
				if (!n)
					o = (k | 0) < (l | 0) ? -1 : m & 1;
				else
					o = n;
				h = o >>> 31 ^ 1
			}
			o = ml(48, 0, 0, 0, 0, 0) | 0;
			fe(o + 16 | 0, d);
			ul(o, b, g, h);
			h = a + 20 | 0;
			HEAP32[h >> 2] = (HEAP32[h >> 2] | 0) + 1;
			i = f;
			return o | 0
		}
		function he(b, d, e, f) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0;
			f = i;
			g = d + 4 | 0;
			h = HEAP32[d + 12 >> 2] | 0;
			if (h) {
				j = HEAP32[e >> 2] | 0;
				k = (HEAP32[e + 4 >> 2] | 0) - j | 0;
				l = h;
				while (1) {
					h = HEAP32[l + 16 >> 2] | 0;
					m = (HEAP32[l + 20 >> 2] | 0) - h | 0;
					n = by(j, h, (m | 0) < (k | 0) ? m : k) | 0;
					if (!n)
						if ((k | 0) < (m | 0))
							o = 7;
						else
							o = 8;
					else if ((n | 0) < 0)
						o = 7;
					else
						o = 8;
					if ((o | 0) == 7) {
						o = 0;
						p = 1;
						q = l + 4 | 0
					} else if ((o | 0) == 8) {
						o = 0;
						p = 0;
						q = l
					}
					n = HEAP32[q >> 2] | 0;
					if (!n)
						break;
					else
						l = n
				}
				if (p) {
					r = l;
					s = l;
					o = 11
				} else {
					t = l;
					u = l
				}
			} else {
				r = g;
				s = g;
				o = 11
			}
			do
				if ((o | 0) == 11) {
					if ((r | 0) != (HEAP32[d + 8 >> 2] | 0)) {
						t = s;
						u = tl(r) | 0;
						break
					}
					HEAP32[b >> 2] = ge(d, s, e, 0) | 0;
					HEAP8[b + 4 >> 0] = 1;
					i = f;
					return
				}
			while (0);
			s = HEAP32[u + 16 >> 2] | 0;
			r = HEAP32[e >> 2] | 0;
			g = (HEAP32[u + 20 >> 2] | 0) - s | 0;
			l = (HEAP32[e + 4 >> 2] | 0) - r | 0;
			p = by(s, r, (l | 0) < (g | 0) ? l : g) | 0;
			if (!p)
				if ((g | 0) < (l | 0))
					o = 17;
				else
					o = 18;
			else if ((p | 0) < 0)
				o = 17;
			else
				o = 18;
			if ((o | 0) == 17) {
				HEAP32[b >> 2] = ge(d, t, e, 0) | 0;
				HEAP8[b + 4 >> 0] = 1;
				i = f;
				return
			} else if ((o | 0) == 18) {
				HEAP32[b >> 2] = u;
				HEAP8[b + 4 >> 0] = 0;
				i = f;
				return
			}
		}
		function ie(b, d) {
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0;
			e = i;
			HEAP32[b >> 2] = 0;
			f = b + 4 | 0;
			HEAP32[f >> 2] = 0;
			g = b + 8 | 0;
			HEAP32[g >> 2] = 0;
			h = HEAP32[d >> 2] | 0;
			j = (HEAP32[d + 4 >> 2] | 0) - h | 0;
			k = j + 1 | 0;
			if (k >>> 0 > 1) {
				l = ml(k, 0, 0, 0, 0, 0) | 0;
				HEAP32[b >> 2] = l;
				HEAP32[f >> 2] = l;
				m = l;
				n = l + k | 0
			} else {
				HEAP32[b >> 2] = 43112;
				HEAP32[f >> 2] = 43112;
				m = 43112;
				n = 43113 | 0
			}
			HEAP32[g >> 2] = n;
			ry(m | 0, h | 0, j | 0) | 0;
			h = m + j | 0;
			HEAP32[f >> 2] = h;
			HEAP8[h >> 0] = 0;
			h = b + 16 | 0;
			f = d + 32 | 0;
			j = HEAP32[f >> 2] | 0;
			if (!j) {
				HEAP32[b + 32 >> 2] = 0;
				i = e;
				return
			}
			if ((j | 0) == (d + 16 | 0)) {
				HEAP32[b + 32 >> 2] = h;
				d = HEAP32[f >> 2] | 0;
				rc[c[(HEAP32[d >> 2] | 0) + 12 >> 2] & 127](d, h);
				i = e;
				return
			} else {
				HEAP32[b + 32 >> 2] = tc[c[(HEAP32[j >> 2] | 0) + 8 >> 2] & 127](j) | 0;
				i = e;
				return
			}
		}
		function je(a, b, d, e) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0;
			f = i;
			g = a + 4 | 0;
			if ((b | 0) == (g | 0) | e)
				h = 0;
			else {
				e = HEAP32[d >> 2] | 0;
				j = HEAP32[b + 16 >> 2] | 0;
				k = (HEAP32[d + 4 >> 2] | 0) - e | 0;
				l = (HEAP32[b + 20 >> 2] | 0) - j | 0;
				m = (l | 0) < (k | 0);
				n = by(e, j, m ? l : k) | 0;
				if (!n)
					o = (k | 0) < (l | 0) ? -1 : m & 1;
				else
					o = n;
				h = o >>> 31 ^ 1
			}
			o = ml(56, 0, 0, 0, 0, 0) | 0;
			ie(o + 16 | 0, d);
			ul(o, b, g, h);
			h = a + 20 | 0;
			HEAP32[h >> 2] = (HEAP32[h >> 2] | 0) + 1;
			i = f;
			return o | 0
		}
		function ke(b, d, e, f) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0;
			f = i;
			g = d + 4 | 0;
			h = HEAP32[d + 12 >> 2] | 0;
			if (h) {
				j = HEAP32[e >> 2] | 0;
				k = (HEAP32[e + 4 >> 2] | 0) - j | 0;
				l = h;
				while (1) {
					h = HEAP32[l + 16 >> 2] | 0;
					m = (HEAP32[l + 20 >> 2] | 0) - h | 0;
					n = by(j, h, (m | 0) < (k | 0) ? m : k) | 0;
					if (!n)
						if ((k | 0) < (m | 0))
							o = 7;
						else
							o = 8;
					else if ((n | 0) < 0)
						o = 7;
					else
						o = 8;
					if ((o | 0) == 7) {
						o = 0;
						p = 1;
						q = l + 4 | 0
					} else if ((o | 0) == 8) {
						o = 0;
						p = 0;
						q = l
					}
					n = HEAP32[q >> 2] | 0;
					if (!n)
						break;
					else
						l = n
				}
				if (p) {
					r = l;
					s = l;
					o = 11
				} else {
					t = l;
					u = l
				}
			} else {
				r = g;
				s = g;
				o = 11
			}
			do
				if ((o | 0) == 11) {
					if ((r | 0) != (HEAP32[d + 8 >> 2] | 0)) {
						t = s;
						u = tl(r) | 0;
						break
					}
					HEAP32[b >> 2] = je(d, s, e, 0) | 0;
					HEAP8[b + 4 >> 0] = 1;
					i = f;
					return
				}
			while (0);
			s = HEAP32[u + 16 >> 2] | 0;
			r = HEAP32[e >> 2] | 0;
			g = (HEAP32[u + 20 >> 2] | 0) - s | 0;
			l = (HEAP32[e + 4 >> 2] | 0) - r | 0;
			p = by(s, r, (l | 0) < (g | 0) ? l : g) | 0;
			if (!p)
				if ((g | 0) < (l | 0))
					o = 17;
				else
					o = 18;
			else if ((p | 0) < 0)
				o = 17;
			else
				o = 18;
			if ((o | 0) == 17) {
				HEAP32[b >> 2] = je(d, t, e, 0) | 0;
				HEAP8[b + 4 >> 0] = 1;
				i = f;
				return
			} else if ((o | 0) == 18) {
				HEAP32[b >> 2] = u;
				HEAP8[b + 4 >> 0] = 0;
				i = f;
				return
			}
		}
		function le(b, d) {
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0;
			e = i;
			f = b + 4 | 0;
			g = HEAP32[f >> 2] | 0;
			h = HEAP32[b >> 2] | 0;
			j = g;
			k = h;
			l = j - k | 0;
			if (l >>> 0 > d >>> 0) {
				m = h + d | 0;
				if ((m | 0) == (g | 0)) {
					i = e;
					return
				}
				HEAP8[m >> 0] = HEAP8[g >> 0] | 0;
				HEAP32[f >> 2] = (HEAP32[f >> 2] | 0) + (m - j);
				i = e;
				return
			}
			if (l >>> 0 >= d >>> 0) {
				i = e;
				return
			}
			j = d - l | 0;
			m = b + 8 | 0;
			n = HEAP32[m >> 2] | 0;
			o = n - k | 0;
			p = o + -1 | 0;
			do
				if ((p >>> 0 < d >>> 0 ? (q = p >>> 0 > 8 ? p << 1 : 8, r = q >>> 0 < d >>> 0 ? d : q, q = l >>> 0 > r >>> 0 ? l : r, q >>> 0 >= o >>> 0) : 0) ? (r = (q | 0) == -1 ? l : q, (r | 0) != (n + ~k | 0)) : 0)
					if (!r) {
						HEAP32[b >> 2] = 43112;
						HEAP32[f >> 2] = 43112;
						HEAP32[m >> 2] = 43113;
						s = 43112;
						break
					} else {
						qy(0, h | 0, l | 0) | 0;
						q = 0 + l | 0;
						HEAP8[q >> 0] = 0;
						HEAP32[b >> 2] = 0;
						HEAP32[f >> 2] = q;
						HEAP32[m >> 2] = r + 1;
						s = q;
						break
					}
				else
					s = g;
			while (0);
			if ((l | 0) == (d | 0)) {
				i = e;
				return
			}
			d = j + -1 | 0;
			if (!d)
				t = s;
			else {
				sy(s + 1 | 0, 0, d | 0) | 0;
				t = HEAP32[f >> 2] | 0
			}
			HEAP8[t >> 0] = 0;
			t = (HEAP32[f >> 2] | 0) + j | 0;
			HEAP32[f >> 2] = t;
			HEAP8[t >> 0] = 0;
			i = e;
			return
		}
		function me(b) {
			b = b | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0;
			e = i;
			f = b + 8 | 0;
			g = b + 4 | 0;
			h = HEAP32[g >> 2] | 0;
			HEAP32[f >> 2] = 1;
			j = HEAP32[h + 4 >> 2] | 0;
			h = HEAP8[j >> 0] | 0;
			k = j + 1 | 0;
			HEAP32[f >> 2] = 5;
			l = HEAPU8[k >> 0] | HEAPU8[k + 1 >> 0] << 8 | HEAPU8[k + 2 >> 0] << 16 | HEAPU8[k + 3 >> 0] << 24;
			k = jy(l | 0) | 0;
			if (h << 24 >> 24) {
				m = h & 255;
				h = j + 5 | 0;
				HEAP32[f >> 2] = 9;
				j = jy(HEAPU8[h >> 0] | HEAPU8[h + 1 >> 0] << 8 | HEAPU8[h + 2 >> 0] << 16 | HEAPU8[h + 3 >> 0] << 24 | 0) | 0;
				if ((m | 0) == 2) {
					n = pe(b, 9, k, j) | 0;
					i = e;
					return n | 0
				} else if ((m | 0) == 1) {
					n = oe(b, 9, k, j) | 0;
					i = e;
					return n | 0
				} else if ((m | 0) == 3) {
					n = qe(b, 9, k, j) | 0;
					i = e;
					return n | 0
				} else {
					n = 0;
					i = e;
					return n | 0
				}
			} else {
				j = il(20) | 0;
				Mj(j, k);
				if (!l) {
					n = j;
					i = e;
					return n | 0
				}
				l = HEAP32[j + 4 >> 2] | 0;
				if (!l)
					o = 0;
				else
					o = HEAP32[l + 4 >> 2] | 0;
				l = HEAP32[g >> 2] | 0;
				if (!l)
					p = 0;
				else
					p = HEAP32[l + 4 >> 2] | 0;
				qy(o | 0, p + (HEAP32[f >> 2] | 0) | 0, k | 0) | 0;
				n = j;
				i = e;
				return n | 0
			}
			return 0
		}
		function ne(b, e, f, g, h) {
			b = b | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			var j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0,
			I = 0;
			j = i;
			i = i + 32 | 0;
			k = j;
			l = g + -1 | 0;
			m = e + 8 | 0;
			n = e + 4 | 0;
			e = HEAP32[n >> 2] | 0;
			HEAP32[m >> 2] = g;
			g = e + 4 | 0;
			e = HEAP8[(HEAP32[g >> 2] | 0) + l >> 0] | 0;
			o = e & 255;
			p = h << 2;
			q = l - (da(p, o) | 0) | 0;
			HEAP32[m >> 2] = q;
			l = (h | 0) == 0;
			if (l) {
				r = 0;
				s = 0
			} else {
				t = jl(h >>> 0 > 1073741823 ? -1 : h << 2) | 0;
				sy(t | 0, 0, h << 2 | 0) | 0;
				r = t;
				s = t
			}
			t = e << 24 >> 24 == 0;
			if (!t) {
				e = q;
				u = 0;
				while (1) {
					if (l)
						v = e;
					else {
						w = HEAP32[g >> 2] | 0;
						x = e;
						y = 0;
						z = 0;
						while (1) {
							A = w + x | 0;
							B = x + 4 | 0;
							HEAP32[m >> 2] = B;
							y = (jy(HEAPU8[A >> 0] | HEAPU8[A + 1 >> 0] << 8 | HEAPU8[A + 2 >> 0] << 16 | HEAPU8[A + 3 >> 0] << 24 | 0) | 0) + y | 0;
							A = s + (z << 2) | 0;
							HEAP32[A >> 2] = (HEAP32[A >> 2] | 0) + y;
							z = z + 1 | 0;
							if ((z | 0) == (h | 0)) {
								v = B;
								break
							} else
								x = B
						}
					}
					u = u + 1 | 0;
					if ((u | 0) == (o | 0))
						break;
					else
						e = v
				}
			}
			v = (p | 1) + 4 | 0;
			if (l)
				C = v;
			else {
				p = 0;
				e = v;
				while (1) {
					u = (HEAP32[s + (p << 2) >> 2] | 0) + e | 0;
					p = p + 1 | 0;
					if ((p | 0) == (h | 0)) {
						C = u;
						break
					} else
						e = u
				}
			}
			Mj(k, C);
			C = b + 8 | 0;
			e = k + 8 | 0;
			p = HEAP32[C >> 2] | 0;
			HEAP32[C >> 2] = HEAP32[e >> 2];
			HEAP32[e >> 2] = p;
			p = HEAP32[b >> 2] | 0;
			HEAP32[b >> 2] = HEAP32[k >> 2];
			HEAP32[k >> 2] = p;
			p = b + 4 | 0;
			e = k + 4 | 0;
			u = HEAP32[p >> 2] | 0;
			HEAP32[p >> 2] = HEAP32[e >> 2];
			HEAP32[e >> 2] = u;
			u = b + 12 | 0;
			e = k + 12 | 0;
			g = HEAP32[u >> 2] | 0;
			HEAP32[u >> 2] = HEAP32[e >> 2];
			HEAP32[e >> 2] = g;
			e = b + 16 | 0;
			u = k + 16 | 0;
			x = HEAP32[e >> 2] | 0;
			HEAP32[e >> 2] = HEAP32[u >> 2];
			HEAP32[u >> 2] = x;
			if (((g | 0) != 0 ? (x = g + 4 | 0, u = (HEAP32[x >> 2] | 0) + -1 | 0, HEAP32[x >> 2] = u, (u | 0) == 0) : 0) ? (lc[c[(HEAP32[g >> 2] | 0) + 8 >> 2] & 255](g), u = g + 8 | 0, x = (HEAP32[u >> 2] | 0) + -1 | 0, HEAP32[u >> 2] = x, (x | 0) == 0) : 0)
				lc[c[(HEAP32[g >> 2] | 0) + 12 >> 2] & 255](g);
			g = HEAP32[k >> 2] | 0;
			if (((g | 0) != 0 ? (k = g + 4 | 0, x = (HEAP32[k >> 2] | 0) + -1 | 0, HEAP32[k >> 2] = x, (x | 0) == 0) : 0) ? (lc[c[(HEAP32[g >> 2] | 0) + 8 >> 2] & 255](g), x = g + 8 | 0, k = (HEAP32[x >> 2] | 0) + -1 | 0, HEAP32[x >> 2] = k, (k | 0) == 0) : 0)
				lc[c[(HEAP32[g >> 2] | 0) + 12 >> 2] & 255](g);
			if (l)
				D = 0;
			else
				D = jl(h >>> 0 > 1073741823 ? -1 : h << 2) | 0;
			a[(c[(HEAP32[p >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[C >> 2] | 0) >> 0] = 1;
			g = (HEAP32[C >> 2] | 0) + 1 | 0;
			HEAP32[C >> 2] = g;
			if (l) {
				E = g;
				F = v
			} else {
				k = g;
				g = 0;
				x = v;
				while (1) {
					HEAP32[D + (g << 2) >> 2] = x;
					v = jy(x | 0) | 0;
					u = (c[(HEAP32[p >> 2] | 0) + 4 >> 2] | 0) + k | 0;
					HEAP8[u >> 0] = v;
					HEAP8[u + 1 >> 0] = v >> 8;
					HEAP8[u + 2 >> 0] = v >> 16;
					HEAP8[u + 3 >> 0] = v >> 24;
					v = (HEAP32[C >> 2] | 0) + 4 | 0;
					HEAP32[C >> 2] = v;
					u = (HEAP32[s + (g << 2) >> 2] | 0) + x | 0;
					g = g + 1 | 0;
					if ((g | 0) == (h | 0)) {
						E = v;
						F = u;
						break
					} else {
						k = v;
						x = u
					}
				}
			}
			x = jy(F | 0) | 0;
			F = (c[(HEAP32[p >> 2] | 0) + 4 >> 2] | 0) + E | 0;
			HEAP8[F >> 0] = x;
			HEAP8[F + 1 >> 0] = x >> 8;
			HEAP8[F + 2 >> 0] = x >> 16;
			HEAP8[F + 3 >> 0] = x >> 24;
			HEAP32[C >> 2] = (HEAP32[C >> 2] | 0) + 4;
			HEAP32[m >> 2] = q;
			a: do
				if (!t) {
					if (l) {
						q = 0;
						while (1) {
							q = q + 1 | 0;
							if (q >>> 0 >= o >>> 0)
								break a
						}
					} else {
						G = f;
						H = 0
					}
					while (1) {
						q = 0;
						x = G;
						F = 0;
						while (1) {
							E = HEAP32[n >> 2] | 0;
							p = HEAP32[E + 4 >> 2] | 0;
							k = HEAP32[m >> 2] | 0;
							g = p + k | 0;
							HEAP32[m >> 2] = k + 4;
							q = (jy(HEAPU8[g >> 0] | HEAPU8[g + 1 >> 0] << 8 | HEAPU8[g + 2 >> 0] << 16 | HEAPU8[g + 3 >> 0] << 24 | 0) | 0) + q | 0;
							if (!q)
								I = x;
							else {
								g = D + (F << 2) | 0;
								HEAP32[C >> 2] = HEAP32[g >> 2];
								Ij(b, (E | 0) == 0 ? 0 : p, x, q);
								HEAP32[g >> 2] = (HEAP32[g >> 2] | 0) + q;
								I = q + x | 0
							}
							F = F + 1 | 0;
							if (F >>> 0 >= h >>> 0)
								break;
							else
								x = I
						}
						H = H + 1 | 0;
						if (H >>> 0 >= o >>> 0)
							break;
						else
							G = I
					}
				}
			while (0);
			if (D)
				ll(D);
			if (!s) {
				i = j;
				return
			}
			ll(r);
			i = j;
			return
		}
		function oe(a, b, d, e) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0;
			f = i;
			i = i + 64 | 0;
			g = f;
			h = il(20) | 0;
			Mj(h, e);
			j = g + 0 | 0;
			k = j + 52 | 0;
			do {
				HEAP32[j >> 2] = 0;
				j = j + 4 | 0
			} while ((j | 0) < (k | 0));
			j = HEAP32[a + 4 >> 2] | 0;
			if (!j)
				l = 0;
			else
				l = HEAP32[j + 4 >> 2] | 0;
			HEAP32[g >> 2] = l + b;
			HEAP32[g + 4 >> 2] = d;
			d = HEAP32[h + 4 >> 2] | 0;
			if (!d)
				m = 0;
			else
				m = HEAP32[d + 4 >> 2] | 0;
			HEAP32[g + 16 >> 2] = m;
			HEAP32[g + 20 >> 2] = e;
			if (kk(g, 0, 0) | 0) {
				e = HEAP32[h + 12 >> 2] | 0;
				if (((e | 0) != 0 ? (m = e + 4 | 0, d = (HEAP32[m >> 2] | 0) + -1 | 0, HEAP32[m >> 2] = d, (d | 0) == 0) : 0) ? (lc[c[(HEAP32[e >> 2] | 0) + 8 >> 2] & 255](e), d = e + 8 | 0, m = (HEAP32[d >> 2] | 0) + -1 | 0, HEAP32[d >> 2] = m, (m | 0) == 0) : 0)
					lc[c[(HEAP32[e >> 2] | 0) + 12 >> 2] & 255](e);
				e = HEAP32[h >> 2] | 0;
				if (((e | 0) != 0 ? (m = e + 4 | 0, d = (HEAP32[m >> 2] | 0) + -1 | 0, HEAP32[m >> 2] = d, (d | 0) == 0) : 0) ? (lc[c[(HEAP32[e >> 2] | 0) + 8 >> 2] & 255](e), d = e + 8 | 0, m = (HEAP32[d >> 2] | 0) + -1 | 0, HEAP32[d >> 2] = m, (m | 0) == 0) : 0)
					lc[c[(HEAP32[e >> 2] | 0) + 12 >> 2] & 255](e);
				kl(h);
				n = 0;
				i = f;
				return n | 0
			}
			HEAP32[g + 36 >> 2] = 1;
			while (1) {
				e = lk(g) | 0;
				if ((e | 0) == 4) {
					o = h;
					break
				} else if (e) {
					p = 8;
					break
				}
			}
			if ((p | 0) == 8) {
				p = HEAP32[h + 12 >> 2] | 0;
				if (((p | 0) != 0 ? (e = p + 4 | 0, m = (HEAP32[e >> 2] | 0) + -1 | 0, HEAP32[e >> 2] = m, (m | 0) == 0) : 0) ? (lc[c[(HEAP32[p >> 2] | 0) + 8 >> 2] & 255](p), m = p + 8 | 0, e = (HEAP32[m >> 2] | 0) + -1 | 0, HEAP32[m >> 2] = e, (e | 0) == 0) : 0)
					lc[c[(HEAP32[p >> 2] | 0) + 12 >> 2] & 255](p);
				p = HEAP32[h >> 2] | 0;
				if (((p | 0) != 0 ? (e = p + 4 | 0, m = (HEAP32[e >> 2] | 0) + -1 | 0, HEAP32[e >> 2] = m, (m | 0) == 0) : 0) ? (lc[c[(HEAP32[p >> 2] | 0) + 8 >> 2] & 255](p), m = p + 8 | 0, e = (HEAP32[m >> 2] | 0) + -1 | 0, HEAP32[m >> 2] = e, (e | 0) == 0) : 0)
					lc[c[(HEAP32[p >> 2] | 0) + 12 >> 2] & 255](p);
				kl(h);
				o = 0
			}
			nk(g) | 0;
			n = o;
			i = f;
			return n | 0
		}
		function pe(b, d, e, f) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0;
			g = i;
			i = i + 64 | 0;
			h = g;
			j = il(20) | 0;
			Mj(j, f);
			k = h + 0 | 0;
			l = k + 56 | 0;
			do {
				HEAP32[k >> 2] = 0;
				k = k + 4 | 0
			} while ((k | 0) < (l | 0));
			k = b + 4 | 0;
			b = HEAP32[k >> 2] | 0;
			l = (b | 0) == 0;
			if (l)
				m = 0;
			else
				m = HEAP32[b + 4 >> 2] | 0;
			if ((HEAP8[m + 9 >> 0] | 0) != 31) {
				n = 0;
				i = g;
				return n | 0
			}
			if ((HEAP8[m + 10 >> 0] | 0) != -117) {
				n = 0;
				i = g;
				return n | 0
			}
			m = e + -8 | 0;
			if (l)
				o = 0;
			else
				o = HEAP32[b + 4 >> 2] | 0;
			HEAP32[h >> 2] = o + (d + 10);
			HEAP32[h + 4 >> 2] = e + -18;
			e = j + 4 | 0;
			o = HEAP32[e >> 2] | 0;
			if (!o)
				p = 0;
			else
				p = HEAP32[o + 4 >> 2] | 0;
			o = h + 12 | 0;
			HEAP32[o >> 2] = p;
			HEAP32[h + 16 >> 2] = f;
			if (vk(h, -15, 576, 56) | 0) {
				p = HEAP32[j + 12 >> 2] | 0;
				if (((p | 0) != 0 ? (b = p + 4 | 0, l = (HEAP32[b >> 2] | 0) + -1 | 0, HEAP32[b >> 2] = l, (l | 0) == 0) : 0) ? (lc[c[(HEAP32[p >> 2] | 0) + 8 >> 2] & 255](p), l = p + 8 | 0, b = (HEAP32[l >> 2] | 0) + -1 | 0, HEAP32[l >> 2] = b, (b | 0) == 0) : 0)
					lc[c[(HEAP32[p >> 2] | 0) + 12 >> 2] & 255](p);
				p = HEAP32[j >> 2] | 0;
				if (((p | 0) != 0 ? (b = p + 4 | 0, l = (HEAP32[b >> 2] | 0) + -1 | 0, HEAP32[b >> 2] = l, (l | 0) == 0) : 0) ? (lc[c[(HEAP32[p >> 2] | 0) + 8 >> 2] & 255](p), l = p + 8 | 0, b = (HEAP32[l >> 2] | 0) + -1 | 0, HEAP32[l >> 2] = b, (b | 0) == 0) : 0)
					lc[c[(HEAP32[p >> 2] | 0) + 12 >> 2] & 255](p);
				kl(j);
				n = 0;
				i = g;
				return n | 0
			}
			do
				if ((xk(h, 4) | 0) == 1) {
					p = HEAP32[k >> 2] | 0;
					if (!p)
						q = 0;
					else
						q = HEAP32[p + 4 >> 2] | 0;
					if (((HEAP32[h >> 2] | 0) - (q + d) | 0) != (m | 0)) {
						p = HEAP32[j + 12 >> 2] | 0;
						if (((p | 0) != 0 ? (b = p + 4 | 0, l = (HEAP32[b >> 2] | 0) + -1 | 0, HEAP32[b >> 2] = l, (l | 0) == 0) : 0) ? (lc[c[(HEAP32[p >> 2] | 0) + 8 >> 2] & 255](p), l = p + 8 | 0, b = (HEAP32[l >> 2] | 0) + -1 | 0, HEAP32[l >> 2] = b, (b | 0) == 0) : 0)
							lc[c[(HEAP32[p >> 2] | 0) + 12 >> 2] & 255](p);
						p = HEAP32[j >> 2] | 0;
						if (((p | 0) != 0 ? (b = p + 4 | 0, l = (HEAP32[b >> 2] | 0) + -1 | 0, HEAP32[b >> 2] = l, (l | 0) == 0) : 0) ? (lc[c[(HEAP32[p >> 2] | 0) + 8 >> 2] & 255](p), l = p + 8 | 0, b = (HEAP32[l >> 2] | 0) + -1 | 0, HEAP32[l >> 2] = b, (b | 0) == 0) : 0)
							lc[c[(HEAP32[p >> 2] | 0) + 12 >> 2] & 255](p);
						kl(j);
						r = 0;
						break
					}
					p = HEAP32[e >> 2] | 0;
					if (!p)
						s = 0;
					else
						s = HEAP32[p + 4 >> 2] | 0;
					if (((HEAP32[o >> 2] | 0) - s | 0) == (f | 0))
						r = j;
					else {
						p = HEAP32[j + 12 >> 2] | 0;
						if (((p | 0) != 0 ? (b = p + 4 | 0, l = (HEAP32[b >> 2] | 0) + -1 | 0, HEAP32[b >> 2] = l, (l | 0) == 0) : 0) ? (lc[c[(HEAP32[p >> 2] | 0) + 8 >> 2] & 255](p), l = p + 8 | 0, b = (HEAP32[l >> 2] | 0) + -1 | 0, HEAP32[l >> 2] = b, (b | 0) == 0) : 0)
							lc[c[(HEAP32[p >> 2] | 0) + 12 >> 2] & 255](p);
						p = HEAP32[j >> 2] | 0;
						if (((p | 0) != 0 ? (b = p + 4 | 0, l = (HEAP32[b >> 2] | 0) + -1 | 0, HEAP32[b >> 2] = l, (l | 0) == 0) : 0) ? (lc[c[(HEAP32[p >> 2] | 0) + 8 >> 2] & 255](p), l = p + 8 | 0, b = (HEAP32[l >> 2] | 0) + -1 | 0, HEAP32[l >> 2] = b, (b | 0) == 0) : 0)
							lc[c[(HEAP32[p >> 2] | 0) + 12 >> 2] & 255](p);
						kl(j);
						r = 0
					}
				} else {
					p = HEAP32[j + 12 >> 2] | 0;
					if (((p | 0) != 0 ? (b = p + 4 | 0, l = (HEAP32[b >> 2] | 0) + -1 | 0, HEAP32[b >> 2] = l, (l | 0) == 0) : 0) ? (lc[c[(HEAP32[p >> 2] | 0) + 8 >> 2] & 255](p), l = p + 8 | 0, b = (HEAP32[l >> 2] | 0) + -1 | 0, HEAP32[l >> 2] = b, (b | 0) == 0) : 0)
						lc[c[(HEAP32[p >> 2] | 0) + 12 >> 2] & 255](p);
					p = HEAP32[j >> 2] | 0;
					if (((p | 0) != 0 ? (b = p + 4 | 0, l = (HEAP32[b >> 2] | 0) + -1 | 0, HEAP32[b >> 2] = l, (l | 0) == 0) : 0) ? (lc[c[(HEAP32[p >> 2] | 0) + 8 >> 2] & 255](p), l = p + 8 | 0, b = (HEAP32[l >> 2] | 0) + -1 | 0, HEAP32[l >> 2] = b, (b | 0) == 0) : 0)
						lc[c[(HEAP32[p >> 2] | 0) + 12 >> 2] & 255](p);
					kl(j);
					r = 0
				}
			while (0);
			yk(h) | 0;
			n = r;
			i = g;
			return n | 0
		}
		function qe(a, b, d, e) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0;
			f = i;
			i = i + 144 | 0;
			g = f + 16 | 0;
			h = f + 8 | 0;
			j = f + 4 | 0;
			k = f;
			l = f + 128 | 0;
			m = il(20) | 0;
			Mj(m, e);
			HEAP32[g + 20 >> 2] = 0;
			HEAP32[g + 16 >> 2] = 0;
			ck(g);
			HEAP32[h >> 2] = d;
			HEAP32[j >> 2] = e;
			HEAP32[k >> 2] = 2;
			Qj(a, l, 0, 5);
			gk(g, l, 5, 584) | 0;
			l = HEAP32[m + 4 >> 2] | 0;
			if (!l)
				n = 0;
			else
				n = HEAP32[l + 4 >> 2] | 0;
			l = HEAP32[a + 4 >> 2] | 0;
			if (!l)
				o = 0;
			else
				o = HEAP32[l + 4 >> 2] | 0;
			l = ek(g, n, j, o + (b + 5) | 0, h, 0, k) | 0;
			fk(g, 584);
			if (!l) {
				p = m;
				i = f;
				return p | 0
			}
			l = HEAP32[m + 12 >> 2] | 0;
			if (((l | 0) != 0 ? (g = l + 4 | 0, k = (HEAP32[g >> 2] | 0) + -1 | 0, HEAP32[g >> 2] = k, (k | 0) == 0) : 0) ? (lc[c[(HEAP32[l >> 2] | 0) + 8 >> 2] & 255](l), k = l + 8 | 0, g = (HEAP32[k >> 2] | 0) + -1 | 0, HEAP32[k >> 2] = g, (g | 0) == 0) : 0)
				lc[c[(HEAP32[l >> 2] | 0) + 12 >> 2] & 255](l);
			l = HEAP32[m >> 2] | 0;
			if (((l | 0) != 0 ? (g = l + 4 | 0, k = (HEAP32[g >> 2] | 0) + -1 | 0, HEAP32[g >> 2] = k, (k | 0) == 0) : 0) ? (lc[c[(HEAP32[l >> 2] | 0) + 8 >> 2] & 255](l), k = l + 8 | 0, g = (HEAP32[k >> 2] | 0) + -1 | 0, HEAP32[k >> 2] = g, (g | 0) == 0) : 0)
				lc[c[(HEAP32[l >> 2] | 0) + 12 >> 2] & 255](l);
			kl(m);
			p = 0;
			i = f;
			return p | 0
		}
		function re(b, d, e, f, g, h, j, k, l, m) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			k = k | 0;
			l = l | 0;
			m = m | 0;
			var n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0;
			n = i;
			i = i + 64 | 0;
			o = n + 49 | 0;
			p = n + 48 | 0;
			q = n + 40 | 0;
			r = n + 24 | 0;
			s = n;
			t = b + 48 | 0;
			if (((HEAP32[b + 68 >> 2] | 0) + (HEAP32[t >> 2] | 0) | 0) >>> 0 > 19) {
				u = 0;
				i = n;
				return u | 0
			}
			v = il(104) | 0;
			w = HEAP32[k + 16 >> 2] | 0;
			do
				if (w)
					if ((w | 0) == (k | 0)) {
						HEAP32[s + 16 >> 2] = s;
						rc[c[(HEAP32[w >> 2] | 0) + 12 >> 2] & 127](w, s);
						break
					} else {
						HEAP32[s + 16 >> 2] = tc[c[(HEAP32[w >> 2] | 0) + 8 >> 2] & 127](w) | 0;
						break
					}
				else
					HEAP32[s + 16 >> 2] = 0;
			while (0);
			ue(v, d, e, f, g, h, j, s, l, m);
			m = HEAP32[s + 16 >> 2] | 0;
			if ((m | 0) != (s | 0)) {
				if (m)
					lc[c[(HEAP32[m >> 2] | 0) + 20 >> 2] & 255](m)
			} else
				lc[c[(HEAP32[m >> 2] | 0) + 16 >> 2] & 255](m);
			m = HEAP32[b + 76 >> 2] | 0;
			if ((m | 0) != (HEAP32[b + 80 >> 2] | 0)) {
				HEAP32[v + 92 >> 2] = m;
				HEAP32[v + 96 >> 2] = HEAP32[b + 92 >> 2]
			}
			m = v + 4 | 0;
			s = HEAP32[m >> 2] << 8 | HEAP32[v >> 2];
			l = b + 36 | 0;
			j = b + 44 | 0;
			h = HEAP32[j >> 2] | 0;
			g = b + 40 | 0;
			b = HEAP32[g >> 2] | 0;
			f = b + (((s >>> 0) % (h >>> 0) | 0) << 2) | 0;
			e = HEAP32[f >> 2] | 0;
			a: do
				if (e) {
					d = e;
					while (1) {
						if ((s | 0) == (HEAP32[d >> 2] | 0))
							break;
						w = HEAP32[d + 8 >> 2] | 0;
						if (!w)
							break a;
						else
							d = w
					}
					if ((d | 0) != (HEAP32[b + (h << 2) >> 2] | 0)) {
						w = HEAP32[d + 4 >> 2] | 0;
						if (!(HEAP32[d + 8 >> 2] | 0)) {
							k = f;
							do
								k = k + 4 | 0;
							while ((HEAP32[k >> 2] | 0) == 0)
						}
						k = HEAP32[e + 8 >> 2] | 0;
						if ((e | 0) == (d | 0))
							HEAP32[f >> 2] = k;
						else {
							x = e;
							y = k;
							while (1) {
								z = HEAP32[y + 8 >> 2] | 0;
								if ((y | 0) == (d | 0))
									break;
								else {
									k = y;
									y = z;
									x = k
								}
							}
							HEAP32[x + 8 >> 2] = z
						}
						if (d)
							ll(d);
						HEAP32[t >> 2] = (HEAP32[t >> 2] | 0) + -1;
						if (w) {
							ve(w);
							kl(w)
						}
					}
				}
			while (0);
			t = HEAP32[m >> 2] << 8 | HEAP32[v >> 2];
			m = HEAP32[j >> 2] | 0;
			j = HEAP32[g >> 2] | 0;
			g = HEAP32[j + (((t >>> 0) % (m >>> 0) | 0) << 2) >> 2] | 0;
			b: do
				if (g) {
					z = g;
					while (1) {
						if ((t | 0) == (HEAP32[z >> 2] | 0))
							break;
						e = HEAP32[z + 8 >> 2] | 0;
						if (!e) {
							A = 31;
							break b
						} else
							z = e
					}
					if ((z | 0) != (HEAP32[j + (m << 2) >> 2] | 0))
						B = z;
					else
						A = 31
				} else
					A = 31;
			while (0);
			if ((A | 0) == 31) {
				HEAP32[q >> 2] = t;
				HEAP32[q + 4 >> 2] = 0;
				HEAP8[o + 0 >> 0] = HEAP8[p + 0 >> 0] | 0;
				Tf(r, l, q, o);
				B = HEAP32[r >> 2] | 0
			}
			HEAP32[B + 4 >> 2] = v;
			u = 1;
			i = n;
			return u | 0
		}
		function se(b) {
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0;
			d = i;
			e = b + 68 | 0;
			if (HEAP32[e >> 2] | 0) {
				f = b + 72 | 0;
				g = 0;
				do {
					h = HEAP32[(HEAP32[f >> 2] | 0) + (g << 2) >> 2] | 0;
					do
						if (h) {
							j = h + 88 | 0;
							if (!(HEAP8[j >> 0] | 0)) {
								k = h + 89 | 0;
								if (((((HEAP8[k >> 0] | 0) == 0 ? (l = h + 76 | 0, (c[(HEAP32[l >> 2] | 0) + 8 >> 2] | 0) == 1) : 0) ? (we(h), m = h + 72 | 0, n = HEAP32[m >> 2] | 0, HEAP32[m >> 2] = 0, HEAP32[l >> 2] = 0, (n | 0) != 0) : 0) ? (l = n + 4 | 0, m = (HEAP32[l >> 2] | 0) + -1 | 0, HEAP32[l >> 2] = m, (m | 0) == 0) : 0) ? (lc[c[(HEAP32[n >> 2] | 0) + 8 >> 2] & 255](n), m = n + 8 | 0, l = (HEAP32[m >> 2] | 0) + -1 | 0, HEAP32[m >> 2] = l, (l | 0) == 0) : 0)
									lc[c[(HEAP32[n >> 2] | 0) + 12 >> 2] & 255](n);
								if ((HEAP8[j >> 0] | 0) == 0 ? (HEAP8[k >> 0] | 0) == 0 : 0) {
									k = HEAP32[h + 76 >> 2] | 0;
									if (!k)
										break;
									if ((HEAP32[k + 8 >> 2] | 0) != 2)
										break
								}
							}
							ve(h);
							kl(h);
							c[(HEAP32[f >> 2] | 0) + (g << 2) >> 2] = 0
						}
					while (0);
					g = g + 1 | 0
				} while (g >>> 0 < (HEAP32[e >> 2] | 0) >>> 0)
			}
			g = b + 40 | 0;
			f = HEAP32[g >> 2] | 0;
			h = HEAP32[f >> 2] | 0;
			if (!h) {
				k = f;
				while (1) {
					j = k + 4 | 0;
					n = HEAP32[j >> 2] | 0;
					if (!n)
						k = j;
					else {
						o = j;
						p = n;
						break
					}
				}
			} else {
				o = f;
				p = h
			}
			h = b + 44 | 0;
			f = b + 72 | 0;
			k = p;
			p = o;
			a: while (1) {
				o = k;
				while (1) {
					q = HEAP32[g >> 2] | 0;
					r = HEAP32[h >> 2] | 0;
					if ((o | 0) == (HEAP32[q + (r << 2) >> 2] | 0))
						break a;
					n = o + 4 | 0;
					j = HEAP32[n >> 2] | 0;
					te(j, b);
					l = HEAP32[e >> 2] | 0;
					do
						if (l) {
							m = HEAP32[f >> 2] | 0;
							s = 0;
							while (1) {
								t = m + (s << 2) | 0;
								s = s + 1 | 0;
								if (!(HEAP32[t >> 2] | 0)) {
									u = 26;
									break
								}
								if (s >>> 0 >= l >>> 0) {
									u = 27;
									break
								}
							}
							if ((u | 0) == 26) {
								u = 0;
								HEAP32[t >> 2] = HEAP32[n >> 2];
								break
							} else if ((u | 0) == 27) {
								u = 0;
								v = l + 1 | 0;
								u = 28;
								break
							}
						} else {
							v = 1;
							u = 28
						}
					while (0);
					if ((u | 0) == 28 ? (u = 0, (j | 0) != 0) : 0) {
						Uf(e, v, 3);
						c[(HEAP32[f >> 2] | 0) + ((HEAP32[e >> 2] | 0) + -1 << 2) >> 2] = j
					}
					o = HEAP32[o + 8 >> 2] | 0;
					if (!o) {
						w = p;
						break
					}
				}
				while (1) {
					o = w + 4 | 0;
					l = HEAP32[o >> 2] | 0;
					if (!l)
						w = o;
					else {
						k = l;
						p = o;
						continue a
					}
				}
			}
			if (!r) {
				x = b + 48 | 0;
				HEAP32[x >> 2] = 0;
				i = d;
				return 1
			} else
				y = 0;
			do {
				p = q + (y << 2) | 0;
				k = HEAP32[p >> 2] | 0;
				if (k) {
					w = k;
					do {
						k = w;
						w = HEAP32[w + 8 >> 2] | 0;
						ll(k)
					} while ((w | 0) != 0)
				}
				HEAP32[p >> 2] = 0;
				y = y + 1 | 0
			} while ((y | 0) != (r | 0));
			x = b + 48 | 0;
			HEAP32[x >> 2] = 0;
			i = d;
			return 1
		}
		function te(b, d) {
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0;
			e = i;
			i = i + 1072 | 0;
			f = e;
			g = e + 24 | 0;
			if (HEAP8[b + 88 >> 0] | 0) {
				i = e;
				return
			}
			h = g + 13 | 0;
			HEAP32[g + 4 >> 2] = h;
			HEAP32[g >> 2] = h;
			HEAP32[g + 8 >> 2] = g + 1037;
			HEAP8[h >> 0] = 0;
			h = HEAP32[b >> 2] | 0;
			j = HEAP32[b + 4 >> 2] | 0;
			k = HEAP32[b + 8 >> 2] | 0;
			l = HEAP32[b + 12 >> 2] | 0;
			HEAP32[f >> 2] = HEAP32[d >> 2];
			HEAP32[f + 4 >> 2] = h;
			HEAP32[f + 8 >> 2] = j;
			HEAP32[f + 12 >> 2] = k;
			HEAP32[f + 16 >> 2] = l;
			Vf(g, 640, f) | 0;
			f = zx(4, 116) | 0;
			if (!f) {
				m = 0;
				n = 0
			} else {
				l = f + 20 | 0;
				wj(l, HEAP32[b + 20 >> 2] | 0);
				HEAP32[f + 4 >> 2] = 1;
				HEAP32[f + 8 >> 2] = 1;
				HEAP32[f >> 2] = 1024;
				HEAP32[f + 12 >> 2] = 1;
				HEAP32[f + 16 >> 2] = l;
				Wf(f, l, 0);
				m = f;
				n = l
			}
			l = b + 72 | 0;
			f = HEAP32[l >> 2] | 0;
			HEAP32[l >> 2] = m;
			m = b + 76 | 0;
			HEAP32[m >> 2] = n;
			if (((f | 0) != 0 ? (n = f + 4 | 0, l = (HEAP32[n >> 2] | 0) + -1 | 0, HEAP32[n >> 2] = l, (l | 0) == 0) : 0) ? (lc[c[(HEAP32[f >> 2] | 0) + 8 >> 2] & 255](f), l = f + 8 | 0, n = (HEAP32[l >> 2] | 0) + -1 | 0, HEAP32[l >> 2] = n, (n | 0) == 0) : 0)
				lc[c[(HEAP32[f >> 2] | 0) + 12 >> 2] & 255](f);
			f = HEAP32[b + 92 >> 2] | 0;
			do
				if (f) {
					n = HEAP32[m >> 2] | 0;
					l = f;
					while (1)
						if (!(HEAP8[l >> 0] | 0))
							break;
						else
							l = l + 1 | 0;
					k = n + 12 | 0;
					j = l - f | 0;
					h = n + 16 | 0;
					d = HEAP32[k >> 2] | 0;
					o = (HEAP32[h >> 2] | 0) - d | 0;
					if (j >>> 0 <= o >>> 0) {
						ry(d | 0, f | 0, j | 0) | 0;
						p = (HEAP32[k >> 2] | 0) + j | 0;
						q = HEAP32[h >> 2] | 0;
						if ((p | 0) != (q | 0)) {
							HEAP8[p >> 0] = HEAP8[q >> 0] | 0;
							HEAP32[h >> 2] = (HEAP32[h >> 2] | 0) + (p - q)
						}
					} else {
						ry(d | 0, f | 0, o | 0) | 0;
						Ud(k, f + ((HEAP32[h >> 2] | 0) - (HEAP32[k >> 2] | 0)) | 0, f + j | 0) | 0
					}
					j = HEAP32[m >> 2] | 0;
					k = HEAP32[b + 96 >> 2] | 0;
					h = k;
					while (1)
						if (!(HEAP8[h >> 0] | 0))
							break;
						else
							h = h + 1 | 0;
					n = j + 28 | 0;
					l = h - k | 0;
					o = j + 32 | 0;
					d = HEAP32[n >> 2] | 0;
					q = (HEAP32[o >> 2] | 0) - d | 0;
					if (l >>> 0 > q >>> 0) {
						ry(d | 0, k | 0, q | 0) | 0;
						Ud(n, k + ((HEAP32[o >> 2] | 0) - (HEAP32[n >> 2] | 0)) | 0, k + l | 0) | 0;
						break
					}
					ry(d | 0, k | 0, l | 0) | 0;
					d = (HEAP32[n >> 2] | 0) + l | 0;
					l = HEAP32[o >> 2] | 0;
					if ((d | 0) != (l | 0)) {
						HEAP8[d >> 0] = HEAP8[l >> 0] | 0;
						HEAP32[o >> 2] = (HEAP32[o >> 2] | 0) + (d - l)
					}
				}
			while (0);
			yj(HEAP32[m >> 2] | 0, HEAP32[g >> 2] | 0);
			i = e;
			return
		}
		function ue(d, e, f, g, h, j, k, l, m, n) {
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			k = k | 0;
			l = l | 0;
			m = m | 0;
			n = n | 0;
			var o = 0;
			o = i;
			HEAP32[d >> 2] = e;
			HEAP32[d + 4 >> 2] = f;
			HEAP32[d + 8 >> 2] = g;
			HEAP32[d + 12 >> 2] = h;
			HEAP8[d + 16 >> 0] = k & 1;
			HEAP32[d + 20 >> 2] = j;
			j = d + 24 | 0;
			Lj(j);
			HEAP32[d + 44 >> 2] = n;
			n = d + 48 | 0;
			k = l + 16 | 0;
			h = HEAP32[k >> 2] | 0;
			do
				if (h)
					if ((h | 0) == (l | 0)) {
						HEAP32[d + 64 >> 2] = n;
						g = HEAP32[k >> 2] | 0;
						rc[c[(HEAP32[g >> 2] | 0) + 12 >> 2] & 127](g, n);
						break
					} else {
						HEAP32[d + 64 >> 2] = tc[c[(HEAP32[h >> 2] | 0) + 8 >> 2] & 127](h) | 0;
						break
					}
				else
					HEAP32[d + 64 >> 2] = 0;
			while (0);
			h = d + 72 | 0;
			HEAP32[d + 92 >> 2] = 0;
			HEAP32[d + 96 >> 2] = 0;
			n = d + 32 | 0;
			k = m + 8 | 0;
			HEAP32[h + 0 >> 2] = 0;
			HEAP32[h + 4 >> 2] = 0;
			HEAP32[h + 8 >> 2] = 0;
			HEAP32[h + 12 >> 2] = 0;
			HEAP16[h + 16 >> 1] = 0;
			h = HEAP32[n >> 2] | 0;
			HEAP32[n >> 2] = HEAP32[k >> 2];
			HEAP32[k >> 2] = h;
			h = HEAP32[j >> 2] | 0;
			HEAP32[j >> 2] = HEAP32[m >> 2];
			HEAP32[m >> 2] = h;
			h = d + 28 | 0;
			j = m + 4 | 0;
			k = HEAP32[h >> 2] | 0;
			HEAP32[h >> 2] = HEAP32[j >> 2];
			HEAP32[j >> 2] = k;
			k = d + 36 | 0;
			j = m + 12 | 0;
			h = HEAP32[k >> 2] | 0;
			HEAP32[k >> 2] = HEAP32[j >> 2];
			HEAP32[j >> 2] = h;
			h = d + 40 | 0;
			d = m + 16 | 0;
			m = HEAP32[h >> 2] | 0;
			HEAP32[h >> 2] = HEAP32[d >> 2];
			HEAP32[d >> 2] = m;
			i = o;
			return
		}
		function ve(a) {
			a = a | 0;
			var b = 0,
			d = 0,
			e = 0,
			f = 0;
			b = i;
			d = HEAP32[a + 80 >> 2] | 0;
			if (((d | 0) != 0 ? (e = d + 4 | 0, f = (HEAP32[e >> 2] | 0) + -1 | 0, HEAP32[e >> 2] = f, (f | 0) == 0) : 0) ? (lc[c[(HEAP32[d >> 2] | 0) + 8 >> 2] & 255](d), f = d + 8 | 0, e = (HEAP32[f >> 2] | 0) + -1 | 0, HEAP32[f >> 2] = e, (e | 0) == 0) : 0)
				lc[c[(HEAP32[d >> 2] | 0) + 12 >> 2] & 255](d);
			d = HEAP32[a + 72 >> 2] | 0;
			if (((d | 0) != 0 ? (e = d + 4 | 0, f = (HEAP32[e >> 2] | 0) + -1 | 0, HEAP32[e >> 2] = f, (f | 0) == 0) : 0) ? (lc[c[(HEAP32[d >> 2] | 0) + 8 >> 2] & 255](d), f = d + 8 | 0, e = (HEAP32[f >> 2] | 0) + -1 | 0, HEAP32[f >> 2] = e, (e | 0) == 0) : 0)
				lc[c[(HEAP32[d >> 2] | 0) + 12 >> 2] & 255](d);
			d = HEAP32[a + 64 >> 2] | 0;
			if ((d | 0) != (a + 48 | 0)) {
				if (d)
					lc[c[(HEAP32[d >> 2] | 0) + 20 >> 2] & 255](d)
			} else
				lc[c[(HEAP32[d >> 2] | 0) + 16 >> 2] & 255](d);
			d = HEAP32[a + 36 >> 2] | 0;
			if (((d | 0) != 0 ? (e = d + 4 | 0, f = (HEAP32[e >> 2] | 0) + -1 | 0, HEAP32[e >> 2] = f, (f | 0) == 0) : 0) ? (lc[c[(HEAP32[d >> 2] | 0) + 8 >> 2] & 255](d), f = d + 8 | 0, e = (HEAP32[f >> 2] | 0) + -1 | 0, HEAP32[f >> 2] = e, (e | 0) == 0) : 0)
				lc[c[(HEAP32[d >> 2] | 0) + 12 >> 2] & 255](d);
			d = HEAP32[a + 24 >> 2] | 0;
			if (!d) {
				i = b;
				return
			}
			a = d + 4 | 0;
			e = (HEAP32[a >> 2] | 0) + -1 | 0;
			HEAP32[a >> 2] = e;
			if (e) {
				i = b;
				return
			}
			lc[c[(HEAP32[d >> 2] | 0) + 8 >> 2] & 255](d);
			e = d + 8 | 0;
			a = (HEAP32[e >> 2] | 0) + -1 | 0;
			HEAP32[e >> 2] = a;
			if (a) {
				i = b;
				return
			}
			lc[c[(HEAP32[d >> 2] | 0) + 12 >> 2] & 255](d);
			i = b;
			return
		}
		function we(b) {
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0;
			d = i;
			i = i + 16 | 0;
			e = d + 4 | 0;
			f = d;
			g = d + 8 | 0;
			h = HEAP32[b + 76 >> 2] | 0;
			j = HEAP32[h + 60 >> 2] | 0;
			k = (HEAP32[h + 64 >> 2] | 0) - j | 0;
			l = (k | 0) > 24;
			if ((by(j, 608, l ? 24 : k) | 0) == 0 ? (k | 0) > 23 & (l ^ 1) : 0) {
				HEAP8[b + 88 >> 0] = 1;
				l = HEAP32[(HEAP32[h + 48 >> 2] | 0) + 4 >> 2] | 0;
				k = zx(4, 40) | 0;
				if (!k) {
					m = 0;
					n = 0
				} else {
					j = k + 20 | 0;
					Nj(j, HEAP32[h + 52 >> 2] | 0, l);
					HEAP32[k + 4 >> 2] = 1;
					HEAP32[k + 8 >> 2] = 1;
					HEAP32[k >> 2] = 1072;
					HEAP32[k + 12 >> 2] = 1;
					HEAP32[k + 16 >> 2] = j;
					m = k;
					n = j
				}
				j = b + 80 | 0;
				k = HEAP32[j >> 2] | 0;
				HEAP32[j >> 2] = m;
				m = b + 84 | 0;
				HEAP32[m >> 2] = n;
				if (((k | 0) != 0 ? (n = k + 4 | 0, j = (HEAP32[n >> 2] | 0) + -1 | 0, HEAP32[n >> 2] = j, (j | 0) == 0) : 0) ? (lc[c[(HEAP32[k >> 2] | 0) + 8 >> 2] & 255](k), j = k + 8 | 0, n = (HEAP32[j >> 2] | 0) + -1 | 0, HEAP32[j >> 2] = n, (n | 0) == 0) : 0)
					lc[c[(HEAP32[k >> 2] | 0) + 12 >> 2] & 255](k);
				k = HEAP32[b + 64 >> 2] | 0;
				if (!k) {
					i = d;
					return
				}
				n = HEAP32[b + 4 >> 2] | 0;
				j = HEAP32[m >> 2] | 0;
				m = HEAP8[b + 16 >> 0] | 0;
				HEAP32[e >> 2] = HEAP32[b >> 2];
				HEAP32[f >> 2] = n;
				HEAP8[g >> 0] = m;
				Bc[c[(HEAP32[k >> 2] | 0) + 24 >> 2] & 31](k, e, f, j, b + 24 | 0, g);
				i = d;
				return
			}
			HEAP8[b + 89 >> 0] = 1;
			i = d;
			return
		}
		function xe(a) {
			a = a | 0;
			var b = 0,
			d = 0,
			e = 0;
			b = i;
			HEAP32[a >> 2] = 0;
			HEAP32[a + 4 >> 2] = 0;
			HEAP32[a + 8 >> 2] = 0;
			d = a + 20 | 0;
			HEAP32[d >> 2] = 0;
			HEAP32[a + 24 >> 2] = 0;
			HEAP32[a + 28 >> 2] = 0;
			e = a + 40 | 0;
			HEAP32[e + 0 >> 2] = 0;
			HEAP32[e + 4 >> 2] = 0;
			HEAP32[e + 8 >> 2] = 0;
			HEAP32[e + 12 >> 2] = 0;
			Mj(a + 56 | 0, 6);
			Mj(a + 76 | 0, 5);
			Mj(a + 96 | 0, 5);
			HEAP32[a + 116 >> 2] = 0;
			HEAP32[a + 120 >> 2] = -1;
			HEAP32[a + 124 >> 2] = 0;
			HEAP32[a + 128 >> 2] = 0;
			Xf(a, 500);
			Xf(d, 500);
			i = b;
			return
		}
		function ye(b, d, e) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0;
			f = i;
			g = HEAP32[d >> 2] | 0;
			h = HEAP32[d + 4 >> 2] | 0;
			if (g) {
				d = g + 4 | 0;
				HEAP32[d >> 2] = (HEAP32[d >> 2] | 0) + 1
			}
			d = b + 40 | 0;
			j = HEAP32[d >> 2] | 0;
			HEAP32[d >> 2] = g;
			g = b + 44 | 0;
			HEAP32[g >> 2] = h;
			if (((j | 0) != 0 ? (h = j + 4 | 0, d = (HEAP32[h >> 2] | 0) + -1 | 0, HEAP32[h >> 2] = d, (d | 0) == 0) : 0) ? (lc[c[(HEAP32[j >> 2] | 0) + 8 >> 2] & 255](j), d = j + 8 | 0, h = (HEAP32[d >> 2] | 0) + -1 | 0, HEAP32[d >> 2] = h, (h | 0) == 0) : 0)
				lc[c[(HEAP32[j >> 2] | 0) + 12 >> 2] & 255](j);
			j = Ek() | 0;
			h = Cy(j | 0, H | 0, 1e6, 0) | 0;
			j = b + 48 | 0;
			HEAP32[j >> 2] = h;
			HEAP32[j + 4 >> 2] = H;
			j = b + 64 | 0;
			HEAP32[j >> 2] = 0;
			h = b + 60 | 0;
			HEAP8[c[(HEAP32[h >> 2] | 0) + 4 >> 2] >> 0] = 6;
			d = HEAP32[j >> 2] | 0;
			k = HEAP32[h >> 2] | 0;
			HEAP32[j >> 2] = d + 2;
			l = k + 4 | 0;
			a[(HEAP32[l >> 2] | 0) + (d + 1) >> 0] = 0;
			d = HEAP32[j >> 2] | 0;
			HEAP32[j >> 2] = d + 1;
			a[(HEAP32[l >> 2] | 0) + d >> 0] = 0;
			d = HEAP32[j >> 2] | 0;
			HEAP32[j >> 2] = d + 1;
			a[(HEAP32[l >> 2] | 0) + d >> 0] = 4;
			d = HEAP32[h >> 2] | 0;
			if (!d) {
				m = 0;
				n = 0
			} else {
				m = HEAP32[d >> 2] | 0;
				n = HEAP32[d + 4 >> 2] | 0
			}
			Ki(HEAP32[g >> 2] | 0, n, m) | 0;
			HEAP32[j >> 2] = 0;
			HEAP8[c[(HEAP32[h >> 2] | 0) + 4 >> 2] >> 0] = e ? 2 : 3;
			HEAP32[j >> 2] = (HEAP32[j >> 2] | 0) + 1;
			j = HEAP32[h >> 2] | 0;
			if (!j) {
				o = 0;
				p = 0
			} else {
				o = HEAP32[j >> 2] | 0;
				p = HEAP32[j + 4 >> 2] | 0
			}
			Ki(HEAP32[g >> 2] | 0, p, o) | 0;
			Li(HEAP32[g >> 2] | 0);
			HEAP32[b + 84 >> 2] = 0;
			HEAP32[b + 120 >> 2] = -1;
			HEAP32[b + 124 >> 2] = 0;
			g = HEAP32[b >> 2] | 0;
			o = HEAP32[b + 4 >> 2] | 0;
			if ((g | 0) != (o | 0)) {
				p = g;
				do {
					g = p + 72 | 0;
					j = HEAP32[g >> 2] | 0;
					HEAP32[g >> 2] = 0;
					HEAP32[p + 76 >> 2] = 0;
					if (((j | 0) != 0 ? (g = j + 4 | 0, h = (HEAP32[g >> 2] | 0) + -1 | 0, HEAP32[g >> 2] = h, (h | 0) == 0) : 0) ? (lc[c[(HEAP32[j >> 2] | 0) + 8 >> 2] & 255](j), h = j + 8 | 0, g = (HEAP32[h >> 2] | 0) + -1 | 0, HEAP32[h >> 2] = g, (g | 0) == 0) : 0)
						lc[c[(HEAP32[j >> 2] | 0) + 12 >> 2] & 255](j);
					HEAP8[p + 80 >> 0] = 0;
					p = p + 88 | 0
				} while ((p | 0) != (o | 0))
			}
			o = HEAP32[b + 20 >> 2] | 0;
			p = HEAP32[b + 24 >> 2] | 0;
			if ((o | 0) == (p | 0)) {
				i = f;
				return
			} else
				q = o;
			do {
				o = q + 72 | 0;
				b = HEAP32[o >> 2] | 0;
				HEAP32[o >> 2] = 0;
				HEAP32[q + 76 >> 2] = 0;
				if (((b | 0) != 0 ? (o = b + 4 | 0, j = (HEAP32[o >> 2] | 0) + -1 | 0, HEAP32[o >> 2] = j, (j | 0) == 0) : 0) ? (lc[c[(HEAP32[b >> 2] | 0) + 8 >> 2] & 255](b), j = b + 8 | 0, o = (HEAP32[j >> 2] | 0) + -1 | 0, HEAP32[j >> 2] = o, (o | 0) == 0) : 0)
					lc[c[(HEAP32[b >> 2] | 0) + 12 >> 2] & 255](b);
				HEAP8[q + 80 >> 0] = 0;
				q = q + 88 | 0
			} while ((q | 0) != (p | 0));
			i = f;
			return
		}
		function ze(b, d, e, f, g, h, j, k) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			k = k | 0;
			var l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0;
			l = i;
			i = i + 176 | 0;
			m = l + 80 | 0;
			n = l;
			o = l + 168 | 0;
			if (!g) {
				g = b + 24 | 0;
				p = HEAP32[g >> 2] | 0;
				q = HEAP32[b + 20 >> 2] | 0;
				r = (p - q | 0) / 88 | 0;
				if (r >>> 0 > 499) {
					s = 0;
					i = l;
					return s | 0
				}
				t = e << 8 | d;
				u = HEAP32[b >> 2] | 0;
				v = HEAP32[b + 4 >> 2] | 0;
				w = u;
				x = (v - u | 0) / 88 | 0;
				a: while (1) {
					u = x;
					while (1) {
						if ((u | 0) <= 0)
							break a;
						y = u >> 1;
						if ((HEAP32[w + (y * 88 | 0) >> 2] | 0) < (t | 0))
							break;
						else
							u = y
					}
					w = w + ((y + 1 | 0) * 88 | 0) | 0;
					x = u + -1 - y | 0
				}
				if ((w | 0) != (v | 0) ? (((t | 0) < (HEAP32[w >> 2] | 0) ? v : w) | 0) != (v | 0) : 0) {
					s = 1;
					i = l;
					return s | 0
				}
				v = b + 20 | 0;
				w = q;
				q = r;
				b: while (1) {
					r = q;
					while (1) {
						if ((r | 0) <= 0)
							break b;
						z = r >> 1;
						if ((HEAP32[w + (z * 88 | 0) >> 2] | 0) < (t | 0))
							break;
						else
							r = z
					}
					w = w + ((z + 1 | 0) * 88 | 0) | 0;
					q = r + -1 - z | 0
				}
				if ((w | 0) != (p | 0) ? (z = (t | 0) < (HEAP32[w >> 2] | 0) ? p : w, (z | 0) != (p | 0)) : 0) {
					if (HEAP8[z + 80 >> 0] | 0) {
						s = 1;
						i = l;
						return s | 0
					}
					w = z + 88 | 0;
					if (w >>> 0 < p >>> 0) {
						q = w;
						w = z;
						while (1) {
							HEAP32[w >> 2] = HEAP32[q >> 2];
							Zf(w + 8 | 0, q + 8 | 0) | 0;
							q = q + 88 | 0;
							if ((q | 0) == (p | 0))
								break;
							else
								w = w + 88 | 0
						}
						A = HEAP32[g >> 2] | 0
					} else
						A = p;
					HEAP32[g >> 2] = A + -88;
					Yf(A + -80 | 0)
				}
				Lj(n + 16 | 0);
				HEAP32[n + 56 >> 2] = 0;
				HEAP32[n + 64 >> 2] = 0;
				HEAP32[n + 68 >> 2] = 0;
				HEAP32[m >> 2] = t;
				t = m + 8 | 0;
				_f(t, n);
				$f(o, v, m);
				v = (HEAP32[o >> 2] | 0) + 8 | 0;
				Yf(t);
				Yf(n);
				ag(v, d, e, f, 0, h, j, k);
				s = 1;
				i = l;
				return s | 0
			}
			v = b + 4 | 0;
			t = HEAP32[v >> 2] | 0;
			A = HEAP32[b >> 2] | 0;
			g = (t - A | 0) / 88 | 0;
			if (g >>> 0 > 499) {
				s = 0;
				i = l;
				return s | 0
			}
			p = e << 8 | d;
			w = A;
			A = g;
			c: while (1) {
				g = A;
				while (1) {
					if ((g | 0) <= 0)
						break c;
					B = g >> 1;
					if ((HEAP32[w + (B * 88 | 0) >> 2] | 0) < (p | 0))
						break;
					else
						g = B
				}
				w = w + ((B + 1 | 0) * 88 | 0) | 0;
				A = g + -1 - B | 0
			}
			if ((w | 0) != (t | 0)) {
				B = (p | 0) < (HEAP32[w >> 2] | 0) ? t : w;
				if ((B | 0) == (t | 0))
					C = B;
				else {
					if (HEAP8[B + 80 >> 0] | 0) {
						s = 1;
						i = l;
						return s | 0
					}
					if ((HEAP32[k >> 2] | 0) >>> 0 >= (HEAP32[HEAP32[B + 44 >> 2] >> 2] | 0) >>> 0 ? (HEAP8[B + 16 >> 0] | 0) != 0 : 0) {
						s = 1;
						i = l;
						return s | 0
					}
					w = B + 88 | 0;
					if (w >>> 0 < t >>> 0) {
						A = w;
						w = B;
						while (1) {
							HEAP32[w >> 2] = HEAP32[A >> 2];
							Zf(w + 8 | 0, A + 8 | 0) | 0;
							A = A + 88 | 0;
							if ((A | 0) == (t | 0))
								break;
							else
								w = w + 88 | 0
						}
						D = HEAP32[v >> 2] | 0
					} else
						D = t;
					HEAP32[v >> 2] = D + -88;
					Yf(D + -80 | 0);
					C = B
				}
			} else
				C = t;
			t = HEAP32[b + 20 >> 2] | 0;
			B = b + 24 | 0;
			D = HEAP32[B >> 2] | 0;
			v = t;
			w = (D - t | 0) / 88 | 0;
			d: while (1) {
				t = w;
				while (1) {
					if ((t | 0) <= 0)
						break d;
					E = t >> 1;
					if ((HEAP32[v + (E * 88 | 0) >> 2] | 0) < (p | 0))
						break;
					else
						t = E
				}
				v = v + ((E + 1 | 0) * 88 | 0) | 0;
				w = t + -1 - E | 0
			}
			if ((v | 0) != (D | 0) ? (((p | 0) < (HEAP32[v >> 2] | 0) ? D : v) | 0) != (D | 0) : 0) {
				if (HEAP8[C + 80 >> 0] | 0) {
					s = 1;
					i = l;
					return s | 0
				}
				v = C + 88 | 0;
				if (v >>> 0 < D >>> 0) {
					E = v;
					v = C;
					while (1) {
						HEAP32[v >> 2] = HEAP32[E >> 2];
						Zf(v + 8 | 0, E + 8 | 0) | 0;
						E = E + 88 | 0;
						if ((E | 0) == (D | 0))
							break;
						else
							v = v + 88 | 0
					}
					F = HEAP32[B >> 2] | 0
				} else
					F = D;
				HEAP32[B >> 2] = F + -88;
				Yf(F + -80 | 0)
			}
			Lj(n + 16 | 0);
			HEAP32[n + 56 >> 2] = 0;
			HEAP32[n + 64 >> 2] = 0;
			HEAP32[n + 68 >> 2] = 0;
			HEAP32[m >> 2] = p;
			p = m + 8 | 0;
			_f(p, n);
			$f(o, b, m);
			m = (HEAP32[o >> 2] | 0) + 8 | 0;
			Yf(p);
			Yf(n);
			ag(m, d, e, f, 1, h, j, k);
			s = 1;
			i = l;
			return s | 0
		}
		function Ae(b, e) {
			b = b | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0;
			f = i;
			g = HEAP32[e >> 2] | 0;
			h = HEAP32[e + 4 >> 2] | 0;
			if ((g | 0) == (h | 0)) {
				i = f;
				return
			}
			e = b + 64 | 0;
			j = b + 60 | 0;
			k = b + 44 | 0;
			b = g;
			do {
				g = b + 80 | 0;
				if (!(HEAP8[g >> 0] | 0)) {
					l = HEAPU8[b + 16 >> 0] | 0;
					HEAP32[e >> 2] = 0;
					HEAP8[c[(HEAP32[j >> 2] | 0) + 4 >> 2] >> 0] = HEAP32[HEAP32[b + 44 >> 2] >> 2] << 4 | l;
					l = (HEAP32[e >> 2] | 0) + 1 | 0;
					HEAP32[e >> 2] = l;
					a[(c[(HEAP32[j >> 2] | 0) + 4 >> 2] | 0) + l >> 0] = HEAP32[b + 8 >> 2];
					l = (HEAP32[e >> 2] | 0) + 1 | 0;
					HEAP32[e >> 2] = l;
					m = jy(HEAP32[b + 12 >> 2] | 0) | 0;
					n = (c[(HEAP32[j >> 2] | 0) + 4 >> 2] | 0) + l | 0;
					HEAP8[n >> 0] = m;
					HEAP8[n + 1 >> 0] = m >> 8;
					HEAP8[n + 2 >> 0] = m >> 16;
					HEAP8[n + 3 >> 0] = m >> 24;
					HEAP32[e >> 2] = (HEAP32[e >> 2] | 0) + 4;
					m = HEAP32[j >> 2] | 0;
					if (!m) {
						o = 0;
						p = 0
					} else {
						o = HEAP32[m >> 2] | 0;
						p = HEAP32[m + 4 >> 2] | 0
					}
					Ki(HEAP32[k >> 2] | 0, p, o) | 0;
					HEAP8[g >> 0] = 1
				}
				b = b + 88 | 0
			} while ((b | 0) != (h | 0));
			i = f;
			return
		}
		function Be(b) {
			b = b | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0,
			O = 0,
			P = 0,
			Q = 0,
			R = 0,
			S = 0,
			T = 0,
			U = 0,
			V = 0,
			W = 0,
			X = 0,
			Y = 0,
			Z = 0,
			_ = 0,
			$ = 0,
			aa = 0,
			ba = 0,
			ca = 0,
			da = 0,
			ea = 0,
			fa = 0,
			ga = 0,
			ha = 0;
			e = i;
			i = i + 16 | 0;
			f = e + 4 | 0;
			g = e;
			h = e + 8 | 0;
			j = Ek() | 0;
			k = H;
			l = Cy(j | 0, k | 0, 1e6, 0) | 0;
			m = H;
			if (((((k >>> 0 > 6 | (k | 0) == 6 & j >>> 0 > 4231196223 ? (j = b + 48 | 0, k = HEAP32[j >> 2] | 0, n = HEAP32[j + 4 >> 2] | 0, j = ky(l | 0, m | 0, -3e4, -1) | 0, o = H, n >>> 0 < o >>> 0 | (n | 0) == (o | 0) & k >>> 0 < j >>> 0) : 0) ? (j = b + 44 | 0, k = HEAP32[j >> 2] | 0, (k | 0) != 0) : 0) ? (Ui(k + 4 | 0, 0) | 0, Kj(k + 76 | 0), HEAP32[k >> 2] = 0, k = b + 40 | 0, o = HEAP32[k >> 2] | 0, HEAP32[k >> 2] = 0, HEAP32[j >> 2] = 0, (o | 0) != 0) : 0) ? (j = o + 4 | 0, k = (HEAP32[j >> 2] | 0) + -1 | 0, HEAP32[j >> 2] = k, (k | 0) == 0) : 0) ? (lc[c[(HEAP32[o >> 2] | 0) + 8 >> 2] & 255](o), k = o + 8 | 0, j = (HEAP32[k >> 2] | 0) + -1 | 0, HEAP32[k >> 2] = j, (j | 0) == 0) : 0)
				lc[c[(HEAP32[o >> 2] | 0) + 12 >> 2] & 255](o);
			o = b + 44 | 0;
			if (!(HEAP32[o >> 2] | 0)) {
				if ((HEAP32[b + 4 >> 2] | 0) != (HEAP32[b >> 2] | 0)) {
					p = 0;
					i = e;
					return p | 0
				}
				p = (HEAP32[b + 24 >> 2] | 0) == (HEAP32[b + 20 >> 2] | 0);
				i = e;
				return p | 0
			}
			Ae(b, b);
			j = b + 20 | 0;
			Ae(b, j);
			Li(HEAP32[o >> 2] | 0);
			k = b + 48 | 0;
			n = b + 120 | 0;
			q = b + 84 | 0;
			r = b + 80 | 0;
			s = b + 24 | 0;
			t = b + 124 | 0;
			u = b + 116 | 0;
			v = b + 104 | 0;
			w = b + 4 | 0;
			x = b + 100 | 0;
			y = 0;
			a: while (1) {
				z = HEAP32[o >> 2] | 0;
				A = z + 4 | 0;
				B = z + 124 | 0;
				C = Vi(A, B) | 0;
				if (HEAP32[B >> 2] | 0) {
					D = 13;
					break
				}
				if ((C | 0) < 1) {
					p = 1;
					D = 100;
					break
				}
				B = k;
				HEAP32[B >> 2] = l;
				HEAP32[B + 4 >> 2] = m;
				B = HEAP32[n >> 2] | 0;
				do
					if ((B | 0) == -1) {
						E = HEAP32[q >> 2] | 0;
						F = 5 - E | 0;
						G = HEAP32[r >> 2] | 0;
						if (!G)
							I = 0;
						else
							I = HEAP32[G + 4 >> 2] | 0;
						G = Ji(HEAP32[o >> 2] | 0, I + E | 0, (F | 0) > (C | 0) ? C : F) | 0;
						F = (HEAP32[q >> 2] | 0) + G | 0;
						HEAP32[q >> 2] = F;
						if (F >>> 0 >= 5) {
							F = HEAP32[r >> 2] | 0;
							HEAP32[q >> 2] = 1;
							G = HEAP32[F + 4 >> 2] | 0;
							F = HEAPU8[G >> 0] | 0;
							E = G + 1 | 0;
							HEAP32[q >> 2] = 5;
							G = jy(HEAPU8[E >> 0] | HEAPU8[E + 1 >> 0] << 8 | HEAPU8[E + 2 >> 0] << 16 | HEAPU8[E + 3 >> 0] << 24 | 0) | 0;
							E = G << 8 | F;
							HEAP32[n >> 2] = E;
							if ((G | 0) < 0) {
								G = HEAP32[j >> 2] | 0;
								F = HEAP32[s >> 2] | 0;
								J = G;
								K = (F - G | 0) / 88 | 0;
								b: while (1) {
									G = K;
									while (1) {
										if ((G | 0) <= 0)
											break b;
										L = G >> 1;
										if ((HEAP32[J + (L * 88 | 0) >> 2] | 0) < (E | 0))
											break;
										else
											G = L
									}
									J = J + ((L + 1 | 0) * 88 | 0) | 0;
									K = G + -1 - L | 0
								}
								if ((J | 0) == (F | 0)) {
									D = 34;
									break a
								}
								if ((((E | 0) < (HEAP32[J >> 2] | 0) ? F : J) | 0) == (F | 0)) {
									D = 34;
									break a
								} else
									M = j
							} else {
								K = HEAP32[b >> 2] | 0;
								N = HEAP32[w >> 2] | 0;
								O = K;
								P = (N - K | 0) / 88 | 0;
								c: while (1) {
									K = P;
									while (1) {
										if ((K | 0) <= 0)
											break c;
										Q = K >> 1;
										if ((HEAP32[O + (Q * 88 | 0) >> 2] | 0) < (E | 0))
											break;
										else
											K = Q
									}
									O = O + ((Q + 1 | 0) * 88 | 0) | 0;
									P = K + -1 - Q | 0
								}
								if ((O | 0) == (N | 0)) {
									D = 34;
									break a
								}
								if ((((E | 0) < (HEAP32[O >> 2] | 0) ? N : O) | 0) == (N | 0)) {
									D = 34;
									break a
								} else
									M = b
							}
							HEAP32[t >> 2] = M;
							HEAP32[u >> 2] = 5;
							HEAP32[q >> 2] = 0;
							HEAP32[v >> 2] = 0
						}
					} else {
						P = HEAP32[t >> 2] | 0;
						F = HEAP32[P >> 2] | 0;
						J = HEAP32[P + 4 >> 2] | 0;
						P = F;
						G = (J - F | 0) / 88 | 0;
						d: while (1) {
							F = G;
							while (1) {
								if ((F | 0) <= 0)
									break d;
								R = F >> 1;
								if ((HEAP32[P + (R * 88 | 0) >> 2] | 0) < (B | 0))
									break;
								else
									F = R
							}
							P = P + ((R + 1 | 0) * 88 | 0) | 0;
							G = F + -1 - R | 0
						}
						if ((P | 0) == (J | 0))
							S = J;
						else
							S = (B | 0) < (HEAP32[P >> 2] | 0) ? J : P;
						G = S + 72 | 0;
						T = HEAP32[G >> 2] | 0;
						N = S + 76 | 0;
						O = HEAP32[N >> 2] | 0;
						U = (T | 0) == 0;
						if (!U) {
							E = T + 4 | 0;
							HEAP32[E >> 2] = (HEAP32[E >> 2] | 0) + 1
						}
						if (O) {
							E = HEAP32[O + 4 >> 2] | 0;
							K = (E | 0) == 0;
							if (K)
								V = 0;
							else
								V = HEAP32[E >> 2] | 0;
							W = V - (HEAP32[S + 20 >> 2] | 0) | 0;
							X = 102400 - (HEAP32[u >> 2] | 0) | 0;
							Y = O + 8 | 0;
							O = HEAP32[Y >> 2] | 0;
							Z = W - O | 0;
							_ = (X | 0) > (Z | 0) ? Z : X;
							if (K)
								$ = 0;
							else
								$ = HEAP32[E + 4 >> 2] | 0;
							E = Ji(HEAP32[o >> 2] | 0, $ + O | 0, (_ | 0) > (C | 0) ? C : _) | 0;
							_ = (HEAP32[Y >> 2] | 0) + E | 0;
							HEAP32[Y >> 2] = _;
							Y = (HEAP32[u >> 2] | 0) + E | 0;
							HEAP32[u >> 2] = Y;
							if ((_ | 0) != (W | 0)) {
								if ((Y | 0) == 102400) {
									HEAP32[u >> 2] = 0;
									HEAP32[n >> 2] = -1;
									HEAP32[t >> 2] = 0
								}
							} else {
								Y = HEAP32[S + 8 >> 2] | 0;
								W = HEAP32[S + 12 >> 2] | 0;
								_ = W << 8 | Y;
								E = HEAP32[t >> 2] | 0;
								O = HEAP32[E >> 2] | 0;
								K = HEAP32[E + 4 >> 2] | 0;
								X = O;
								Z = (K - O | 0) / 88 | 0;
								e: while (1) {
									O = Z;
									while (1) {
										if ((O | 0) <= 0)
											break e;
										aa = O >> 1;
										if ((HEAP32[X + (aa * 88 | 0) >> 2] | 0) < (_ | 0))
											break;
										else
											O = aa
									}
									X = X + ((aa + 1 | 0) * 88 | 0) | 0;
									Z = O + -1 - aa | 0
								}
								if ((X | 0) == (K | 0))
									ba = K;
								else
									ba = (_ | 0) < (HEAP32[X >> 2] | 0) ? K : X;
								Z = HEAP32[S + 64 >> 2] | 0;
								if (!Z) {
									ca = E;
									da = K
								} else {
									P = HEAP32[N >> 2] | 0;
									J = HEAP8[S + 16 >> 0] | 0;
									HEAP32[f >> 2] = Y;
									HEAP32[g >> 2] = W;
									HEAP8[h >> 0] = J;
									Bc[c[(HEAP32[Z >> 2] | 0) + 24 >> 2] & 31](Z, f, g, P, S + 24 | 0, h);
									P = HEAP32[t >> 2] | 0;
									ca = P;
									da = HEAP32[P + 4 >> 2] | 0
								}
								P = ba + 88 | 0;
								Z = ca + 4 | 0;
								if (P >>> 0 < da >>> 0) {
									J = P;
									P = ba;
									while (1) {
										HEAP32[P >> 2] = HEAP32[J >> 2];
										Zf(P + 8 | 0, J + 8 | 0) | 0;
										J = J + 88 | 0;
										if ((J | 0) == (da | 0))
											break;
										else
											P = P + 88 | 0
									}
									ea = HEAP32[Z >> 2] | 0
								} else
									ea = da;
								HEAP32[Z >> 2] = ea + -88;
								Yf(ea + -80 | 0);
								HEAP32[n >> 2] = -1;
								HEAP32[t >> 2] = 0
							}
							if (U)
								break;
							P = T + 4 | 0;
							J = (HEAP32[P >> 2] | 0) + -1 | 0;
							HEAP32[P >> 2] = J;
							if (J)
								break;
							lc[c[(HEAP32[T >> 2] | 0) + 8 >> 2] & 255](T);
							J = T + 8 | 0;
							P = (HEAP32[J >> 2] | 0) + -1 | 0;
							HEAP32[J >> 2] = P;
							if (P)
								break;
							lc[c[(HEAP32[T >> 2] | 0) + 12 >> 2] & 255](T);
							break
						}
						P = HEAP32[v >> 2] | 0;
						J = 5 - P | 0;
						W = (J | 0) > (C | 0) ? C : J;
						if ((W | 0) > 0) {
							J = HEAP32[x >> 2] | 0;
							if (!J)
								fa = 0;
							else
								fa = HEAP32[J + 4 >> 2] | 0;
							J = Ji(HEAP32[o >> 2] | 0, fa + P | 0, W) | 0;
							W = (HEAP32[v >> 2] | 0) + J | 0;
							HEAP32[v >> 2] = W;
							if (W >>> 0 < 5) {
								if (U)
									break;
								W = T + 4 | 0;
								J = (HEAP32[W >> 2] | 0) + -1 | 0;
								HEAP32[W >> 2] = J;
								if (J)
									break;
								lc[c[(HEAP32[T >> 2] | 0) + 8 >> 2] & 255](T);
								J = T + 8 | 0;
								W = (HEAP32[J >> 2] | 0) + -1 | 0;
								HEAP32[J >> 2] = W;
								if (W)
									break;
								lc[c[(HEAP32[T >> 2] | 0) + 12 >> 2] & 255](T);
								break
							}
						}
						W = HEAP32[x >> 2] | 0;
						HEAP32[v >> 2] = 1;
						J = HEAP32[W + 4 >> 2] | 0;
						W = HEAP8[J >> 0] | 0;
						P = J + 1 | 0;
						HEAP32[v >> 2] = 5;
						J = HEAPU8[P >> 0] | HEAPU8[P + 1 >> 0] << 8 | HEAPU8[P + 2 >> 0] << 16 | HEAPU8[P + 3 >> 0] << 24;
						P = jy(J | 0) | 0;
						if ((P | 0) < 0 | (W & 255) > 3) {
							D = 51;
							break a
						}
						Y = P + (W << 24 >> 24 != 0 ? 9 : 5) + (HEAP32[S + 20 >> 2] | 0) | 0;
						P = zx(4, 40) | 0;
						if (!P) {
							ga = 0;
							ha = 0
						} else {
							K = P + 20 | 0;
							Mj(K, Y);
							HEAP32[P + 4 >> 2] = 1;
							HEAP32[P + 8 >> 2] = 1;
							HEAP32[P >> 2] = 1072;
							HEAP32[P + 12 >> 2] = 1;
							HEAP32[P + 16 >> 2] = K;
							ga = P;
							ha = K
						}
						K = HEAP32[G >> 2] | 0;
						HEAP32[G >> 2] = ga;
						HEAP32[N >> 2] = ha;
						if (((K | 0) != 0 ? (P = K + 4 | 0, Y = (HEAP32[P >> 2] | 0) + -1 | 0, HEAP32[P >> 2] = Y, (Y | 0) == 0) : 0) ? (lc[c[(HEAP32[K >> 2] | 0) + 8 >> 2] & 255](K), Y = K + 8 | 0, P = (HEAP32[Y >> 2] | 0) + -1 | 0, HEAP32[Y >> 2] = P, (P | 0) == 0) : 0)
							lc[c[(HEAP32[K >> 2] | 0) + 12 >> 2] & 255](K);
						K = HEAP32[G >> 2] | 0;
						P = HEAP32[N >> 2] | 0;
						Y = (K | 0) == 0;
						if (!Y) {
							E = K + 4 | 0;
							HEAP32[E >> 2] = (HEAP32[E >> 2] | 0) + 1
						}
						if ((!U ? (E = T + 4 | 0, X = (HEAP32[E >> 2] | 0) + -1 | 0, HEAP32[E >> 2] = X, (X | 0) == 0) : 0) ? (lc[c[(HEAP32[T >> 2] | 0) + 8 >> 2] & 255](T), X = T + 8 | 0, E = (HEAP32[X >> 2] | 0) + -1 | 0, HEAP32[X >> 2] = E, (E | 0) == 0) : 0)
							lc[c[(HEAP32[T >> 2] | 0) + 12 >> 2] & 255](T);
						E = P + 4 | 0;
						X = P + 8 | 0;
						a[(c[(HEAP32[E >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[X >> 2] | 0) >> 0] = W;
						W = (HEAP32[X >> 2] | 0) + 1 | 0;
						HEAP32[X >> 2] = W;
						P = (c[(HEAP32[E >> 2] | 0) + 4 >> 2] | 0) + W | 0;
						HEAP8[P >> 0] = J;
						HEAP8[P + 1 >> 0] = J >> 8;
						HEAP8[P + 2 >> 0] = J >> 16;
						HEAP8[P + 3 >> 0] = J >> 24;
						HEAP32[X >> 2] = (HEAP32[X >> 2] | 0) + 4;
						HEAP32[u >> 2] = (HEAP32[u >> 2] | 0) + 5;
						if ((!Y ? (Y = K + 4 | 0, X = (HEAP32[Y >> 2] | 0) + -1 | 0, HEAP32[Y >> 2] = X, (X | 0) == 0) : 0) ? (lc[c[(HEAP32[K >> 2] | 0) + 8 >> 2] & 255](K), X = K + 8 | 0, Y = (HEAP32[X >> 2] | 0) + -1 | 0, HEAP32[X >> 2] = Y, (Y | 0) == 0) : 0)
							lc[c[(HEAP32[K >> 2] | 0) + 12 >> 2] & 255](K)
					}
				while (0);
				y = y + 1 | 0;
				if ((y | 0) >= 500) {
					p = 1;
					D = 100;
					break
				}
			}
			if ((D | 0) == 13) {
				Ui(A, 0) | 0;
				Kj(z + 76 | 0);
				HEAP32[z >> 2] = 0;
				p = 1;
				i = e;
				return p | 0
			} else if ((D | 0) == 34) {
				HEAP32[n >> 2] = -1;
				n = HEAP32[o >> 2] | 0;
				Ui(n + 4 | 0, 0) | 0;
				Kj(n + 76 | 0);
				HEAP32[n >> 2] = 0;
				HEAP32[t >> 2] = 0;
				p = 0;
				i = e;
				return p | 0
			} else if ((D | 0) == 51) {
				t = HEAP32[o >> 2] | 0;
				Ui(t + 4 | 0, 0) | 0;
				Kj(t + 76 | 0);
				HEAP32[t >> 2] = 0;
				if (U) {
					p = 0;
					i = e;
					return p | 0
				}
				U = T + 4 | 0;
				t = (HEAP32[U >> 2] | 0) + -1 | 0;
				HEAP32[U >> 2] = t;
				if (t) {
					p = 0;
					i = e;
					return p | 0
				}
				lc[c[(HEAP32[T >> 2] | 0) + 8 >> 2] & 255](T);
				t = T + 8 | 0;
				U = (HEAP32[t >> 2] | 0) + -1 | 0;
				HEAP32[t >> 2] = U;
				if (U) {
					p = 0;
					i = e;
					return p | 0
				}
				lc[c[(HEAP32[T >> 2] | 0) + 12 >> 2] & 255](T);
				p = 0;
				i = e;
				return p | 0
			} else if ((D | 0) == 100) {
				i = e;
				return p | 0
			}
			return 0
		}
		function Ce(b, e) {
			b = b | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0;
			f = i;
			i = i + 1184 | 0;
			g = f;
			h = f + 904 | 0;
			j = f + 632 | 0;
			k = f + 608 | 0;
			l = f + 336 | 0;
			m = f + 328 | 0;
			n = f + 272 | 0;
			o = e + 4 | 0;
			p = HEAP32[o >> 2] | 0;
			q = e + 8 | 0;
			r = HEAP32[q >> 2] | 0;
			s = r + 1 | 0;
			HEAP32[q >> 2] = s;
			t = p + 4 | 0;
			p = HEAP32[t >> 2] | 0;
			switch (HEAPU8[p + r >> 0] | 0) {
			case 2: {
					u = h + 4 | 0;
					v = h + 13 | 0;
					HEAP32[u >> 2] = v;
					HEAP32[h >> 2] = v;
					HEAP32[h + 8 >> 2] = h + 269;
					HEAP8[v >> 0] = 0;
					w = j + 4 | 0;
					x = j + 13 | 0;
					HEAP32[w >> 2] = x;
					HEAP32[j >> 2] = x;
					HEAP32[j + 8 >> 2] = j + 269;
					HEAP8[x >> 0] = 0;
					y = HEAP32[t >> 2] | 0;
					z = y + s | 0;
					A = py(z | 0) | 0;
					HEAP32[u >> 2] = h + A + 13;
					if (!A) {
						B = 1;
						C = y
					} else {
						y = A + 1 | 0;
						qy(v | 0, z | 0, y | 0) | 0;
						B = y;
						C = HEAP32[t >> 2] | 0
					}
					y = s + B | 0;
					HEAP32[q >> 2] = y;
					B = C + y | 0;
					z = py(B | 0) | 0;
					HEAP32[w >> 2] = j + z + 13;
					if (!z) {
						D = 1;
						E = C
					} else {
						C = z + 1 | 0;
						qy(x | 0, B | 0, C | 0) | 0;
						D = C;
						E = HEAP32[t >> 2] | 0
					}
					C = y + D | 0;
					HEAP32[q >> 2] = C + 1;
					D = Yi(HEAPU8[E + C >> 0] | 0) | 0;
					C = HEAP32[q >> 2] | 0;
					E = (c[(HEAP32[o >> 2] | 0) + 4 >> 2] | 0) + C | 0;
					HEAP32[q >> 2] = C + 2;
					C = (HEAPU8[E >> 0] | HEAPU8[E + 1 >> 0] << 8) & 65535;
					Mj(k, C << 8 & 65280 | C >>> 8);
					C = HEAP32[k + 4 >> 2] | 0;
					if ((C | 0) != 0 ? (E = HEAP32[C >> 2] | 0, (E | 0) != 0) : 0)
						Pj(e, k, E);
					E = HEAP32[q >> 2] | 0;
					C = (c[(HEAP32[o >> 2] | 0) + 4 >> 2] | 0) + E | 0;
					HEAP32[q >> 2] = E + 2;
					E = (HEAPU8[C >> 0] | HEAPU8[C + 1 >> 0] << 8) & 65535;
					C = E << 8 & 65280 | E >>> 8;
					E = HEAP32[h >> 2] | 0;
					h = HEAP32[j >> 2] | 0;
					j = g + 16 | 0;
					HEAP32[j >> 2] = g;
					HEAP32[g >> 2] = 840;
					HEAP32[g + 4 >> 2] = b;
					bg(g, b + 280 | 0);
					o = HEAP32[j >> 2] | 0;
					if ((o | 0) != (g | 0)) {
						if (o)
							lc[c[(HEAP32[o >> 2] | 0) + 20 >> 2] & 255](o)
					} else
						lc[c[(HEAP32[g >> 2] | 0) + 16 >> 2] & 255](g);
					HEAP32[b + 160 >> 2] = D;
					cg(b + 164 | 0, k) | 0;
					HEAP32[b + 184 >> 2] = C;
					De(b, E, h);
					yd(b, 5);
					h = HEAP32[k + 12 >> 2] | 0;
					if (((h | 0) != 0 ? (E = h + 4 | 0, C = (HEAP32[E >> 2] | 0) + -1 | 0, HEAP32[E >> 2] = C, (C | 0) == 0) : 0) ? (lc[c[(HEAP32[h >> 2] | 0) + 8 >> 2] & 255](h), C = h + 8 | 0, E = (HEAP32[C >> 2] | 0) + -1 | 0, HEAP32[C >> 2] = E, (E | 0) == 0) : 0)
						lc[c[(HEAP32[h >> 2] | 0) + 12 >> 2] & 255](h);
					h = HEAP32[k >> 2] | 0;
					if (!h) {
						i = f;
						return
					}
					k = h + 4 | 0;
					E = (HEAP32[k >> 2] | 0) + -1 | 0;
					HEAP32[k >> 2] = E;
					if (E) {
						i = f;
						return
					}
					lc[c[(HEAP32[h >> 2] | 0) + 8 >> 2] & 255](h);
					E = h + 8 | 0;
					k = (HEAP32[E >> 2] | 0) + -1 | 0;
					HEAP32[E >> 2] = k;
					if (k) {
						i = f;
						return
					}
					lc[c[(HEAP32[h >> 2] | 0) + 12 >> 2] & 255](h);
					i = f;
					return
				}
			case 40: {
					Fe(b);
					i = f;
					return
				}
			case 10: {
					Ee(b);
					i = f;
					return
				}
			case 30: {
					HEAP32[n >> 2] = 30;
					h = n + 4 | 0;
					HEAP32[h >> 2] = -1;
					k = n + 8 | 0;
					HEAP32[k >> 2] = -1;
					E = n + 12 | 0;
					HEAP32[E >> 2] = 0;
					C = n + 16 | 0;
					HEAP32[C >> 2] = HEAP32[2138];
					D = n + 20 | 0;
					HEAP8[D >> 0] = 0;
					HEAP32[n + 24 >> 2] = -1;
					o = n + 28 | 0;
					HEAP8[o >> 0] = 0;
					HEAP8[n + 29 >> 0] = 0;
					j = n + 32 | 0;
					HEAP32[j >> 2] = 0;
					y = n + 36 | 0;
					HEAP32[y >> 2] = 0;
					B = n + 40 | 0;
					HEAP32[B >> 2] = HEAP32[2120];
					HEAP32[n + 44 >> 2] = 0;
					x = n + 48 | 0;
					HEAP32[x >> 2] = 0;
					dg(n, e);
					He(b, HEAP32[h >> 2] | 0, HEAP32[k >> 2] | 0, HEAP32[E >> 2] | 0, HEAP32[C >> 2] | 0, (HEAP8[D >> 0] | 0) != 0, (HEAP8[o >> 0] | 0) != 0, HEAP32[B >> 2] | 0, HEAP32[j >> 2] | 0, HEAP32[y >> 2] | 0, n + 44 | 0);
					n = HEAP32[x >> 2] | 0;
					if (!n) {
						i = f;
						return
					}
					ll(n);
					i = f;
					return
				}
			case 7: {
					n = g + 4 | 0;
					x = g + 13 | 0;
					HEAP32[n >> 2] = x;
					HEAP32[g >> 2] = x;
					HEAP32[g + 8 >> 2] = g + 269;
					HEAP8[x >> 0] = 0;
					y = l + 4 | 0;
					j = l + 13 | 0;
					HEAP32[y >> 2] = j;
					HEAP32[l >> 2] = j;
					HEAP32[l + 8 >> 2] = l + 269;
					HEAP8[j >> 0] = 0;
					B = HEAP32[t >> 2] | 0;
					o = B + s | 0;
					D = py(o | 0) | 0;
					HEAP32[n >> 2] = g + D + 13;
					if (!D) {
						F = 1;
						G = B
					} else {
						B = D + 1 | 0;
						qy(x | 0, o | 0, B | 0) | 0;
						F = B;
						G = HEAP32[t >> 2] | 0
					}
					t = s + F | 0;
					HEAP32[q >> 2] = t;
					F = G + t | 0;
					G = py(F | 0) | 0;
					HEAP32[y >> 2] = l + G + 13;
					if (!G)
						H = 1;
					else {
						l = G + 1 | 0;
						qy(j | 0, F | 0, l | 0) | 0;
						H = l
					}
					HEAP32[q >> 2] = t + H;
					De(b, x, j);
					i = f;
					return
				}
			case 20: {
					j = r + 2 | 0;
					HEAP32[q >> 2] = j;
					x = HEAP8[p + s >> 0] | 0;
					s = p + j | 0;
					HEAP32[q >> 2] = r + 6;
					r = HEAPU8[s >> 0] | HEAPU8[s + 1 >> 0] << 8 | HEAPU8[s + 2 >> 0] << 16 | HEAPU8[s + 3 >> 0] << 24;
					s = m + 4 | 0;
					HEAP32[m >> 2] = 64;
					q = jl(64) | 0;
					HEAP32[s >> 2] = q;
					Qj(e, q, 0, 64);
					Ge(b, x & 255, jy(r | 0) | 0, m);
					ll(q);
					HEAP32[s >> 2] = 0;
					i = f;
					return
				}
			default: {
					i = f;
					return
				}
			}
		}
		function De(b, d, e) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0;
			f = i;
			i = i + 16 | 0;
			g = f + 4 | 0;
			h = f;
			HEAP32[g >> 2] = e;
			j = d;
			while (1)
				if (!(HEAP8[j >> 0] | 0))
					break;
				else
					j = j + 1 | 0;
			k = b + 128 | 0;
			l = j - d | 0;
			j = b + 132 | 0;
			m = HEAP32[k >> 2] | 0;
			n = (HEAP32[j >> 2] | 0) - m | 0;
			if (l >>> 0 <= n >>> 0) {
				ry(m | 0, d | 0, l | 0) | 0;
				o = (HEAP32[k >> 2] | 0) + l | 0;
				p = HEAP32[j >> 2] | 0;
				if ((o | 0) == (p | 0))
					q = e;
				else {
					HEAP8[o >> 0] = HEAP8[p >> 0] | 0;
					HEAP32[j >> 2] = (HEAP32[j >> 2] | 0) + (o - p);
					q = e
				}
			} else {
				ry(m | 0, d | 0, n | 0) | 0;
				Ud(k, d + ((HEAP32[j >> 2] | 0) - (HEAP32[k >> 2] | 0)) | 0, d + l | 0) | 0;
				q = e
			}
			while (1)
				if (!(HEAP8[q >> 0] | 0))
					break;
				else
					q = q + 1 | 0;
			l = b + 144 | 0;
			d = q - e | 0;
			q = b + 148 | 0;
			k = HEAP32[l >> 2] | 0;
			j = (HEAP32[q >> 2] | 0) - k | 0;
			if (d >>> 0 <= j >>> 0) {
				ry(k | 0, e | 0, d | 0) | 0;
				n = (HEAP32[l >> 2] | 0) + d | 0;
				m = HEAP32[q >> 2] | 0;
				if ((n | 0) != (m | 0)) {
					HEAP8[n >> 0] = HEAP8[m >> 0] | 0;
					HEAP32[q >> 2] = (HEAP32[q >> 2] | 0) + (n - m)
				}
			} else {
				ry(k | 0, e | 0, j | 0) | 0;
				Ud(l, e + ((HEAP32[q >> 2] | 0) - (HEAP32[l >> 2] | 0)) | 0, e + d | 0) | 0
			}
			d = il(136) | 0;
			xe(d);
			e = b + 120 | 0;
			l = HEAP32[e >> 2] | 0;
			HEAP32[e >> 2] = d;
			if (l) {
				Yc(l);
				kl(l)
			}
			eg(h, g);
			g = HEAP32[h >> 2] | 0;
			HEAP32[h >> 2] = 0;
			h = b + 124 | 0;
			l = HEAP32[h >> 2] | 0;
			HEAP32[h >> 2] = g;
			if (!l) {
				r = b + 188 | 0;
				HEAP8[r >> 0] = 1;
				s = b + 252 | 0;
				HEAP32[s >> 2] = 0;
				i = f;
				return
			}
			_c(l);
			kl(l);
			r = b + 188 | 0;
			HEAP8[r >> 0] = 1;
			s = b + 252 | 0;
			HEAP32[s >> 2] = 0;
			i = f;
			return
		}
		function Ee(b) {
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0;
			d = i;
			i = i + 32 | 0;
			e = d;
			if ((HEAP32[b + 252 >> 2] | 0) != 3) {
				HEAP8[b + 188 >> 0] = 1;
				Ie(b);
				i = d;
				return
			}
			f = HEAP32[b + 120 >> 2] | 0;
			g = e + 16 | 0;
			HEAP32[g >> 2] = e;
			HEAP32[e >> 2] = 984;
			HEAP32[e + 4 >> 2] = b;
			h = fg(f, 255, 255, 0, 1, e) | 0;
			f = HEAP32[g >> 2] | 0;
			if ((f | 0) != (e | 0)) {
				if (f)
					lc[c[(HEAP32[f >> 2] | 0) + 20 >> 2] & 255](f)
			} else
				lc[c[(HEAP32[e >> 2] | 0) + 16 >> 2] & 255](e);
			if (h) {
				i = d;
				return
			}
			Ie(b);
			i = d;
			return
		}
		function Fe(b) {
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0;
			d = i;
			i = i + 32 | 0;
			e = d;
			if ((HEAP32[b + 252 >> 2] | 0) != 3) {
				HEAP8[b + 188 >> 0] = 1;
				Je(b);
				i = d;
				return
			}
			f = HEAP32[b + 124 >> 2] | 0;
			g = e + 16 | 0;
			HEAP32[g >> 2] = e;
			HEAP32[e >> 2] = 944;
			HEAP32[e + 4 >> 2] = b;
			h = gg(f, 255, 255, 0, 0, 0, 1, e) | 0;
			f = HEAP32[g >> 2] | 0;
			if ((f | 0) != (e | 0)) {
				if (f)
					lc[c[(HEAP32[f >> 2] | 0) + 20 >> 2] & 255](f)
			} else
				lc[c[(HEAP32[e >> 2] | 0) + 16 >> 2] & 255](e);
			if (h) {
				i = d;
				return
			}
			Je(b);
			i = d;
			return
		}
		function Ge(b, d, e, f) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0;
			g = i;
			i = i + 48 | 0;
			h = g + 24 | 0;
			j = g;
			Mj(h, (HEAP32[f >> 2] | 0) + 5 | 0);
			k = jy(e | 0) | 0;
			e = h + 4 | 0;
			l = h + 8 | 0;
			m = (c[(HEAP32[e >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[l >> 2] | 0) | 0;
			HEAP8[m >> 0] = k;
			HEAP8[m + 1 >> 0] = k >> 8;
			HEAP8[m + 2 >> 0] = k >> 16;
			HEAP8[m + 3 >> 0] = k >> 24;
			k = (HEAP32[l >> 2] | 0) + 4 | 0;
			HEAP32[l >> 2] = k;
			a[(c[(HEAP32[e >> 2] | 0) + 4 >> 2] | 0) + k >> 0] = (HEAP32[f >> 2] | 0) != 0 & 1;
			HEAP32[l >> 2] = (HEAP32[l >> 2] | 0) + 1;
			Ij(h, HEAP32[f + 4 >> 2] | 0, 0, HEAP32[f >> 2] | 0);
			if ((HEAP32[b + 252 >> 2] | 0) == 3) {
				f = HEAP32[b + 120 >> 2] | 0;
				l = j + 16 | 0;
				HEAP32[l >> 2] = j;
				HEAP32[j >> 2] = 904;
				HEAP32[j + 4 >> 2] = b;
				k = ze(f, 255, d, 0, 1, j, h, HEAP32[2118] | 0) | 0;
				f = HEAP32[l >> 2] | 0;
				if ((f | 0) != (j | 0)) {
					if (f)
						lc[c[(HEAP32[f >> 2] | 0) + 20 >> 2] & 255](f)
				} else
					lc[c[(HEAP32[j >> 2] | 0) + 16 >> 2] & 255](j);
				if (!k)
					Ne(b, d, 3)
			} else {
				HEAP8[b + 188 >> 0] = 1;
				Ne(b, d, 3)
			}
			d = HEAP32[h + 12 >> 2] | 0;
			if (((d | 0) != 0 ? (b = d + 4 | 0, k = (HEAP32[b >> 2] | 0) + -1 | 0, HEAP32[b >> 2] = k, (k | 0) == 0) : 0) ? (lc[c[(HEAP32[d >> 2] | 0) + 8 >> 2] & 255](d), k = d + 8 | 0, b = (HEAP32[k >> 2] | 0) + -1 | 0, HEAP32[k >> 2] = b, (b | 0) == 0) : 0)
				lc[c[(HEAP32[d >> 2] | 0) + 12 >> 2] & 255](d);
			d = HEAP32[h >> 2] | 0;
			if (!d) {
				i = g;
				return
			}
			h = d + 4 | 0;
			b = (HEAP32[h >> 2] | 0) + -1 | 0;
			HEAP32[h >> 2] = b;
			if (b) {
				i = g;
				return
			}
			lc[c[(HEAP32[d >> 2] | 0) + 8 >> 2] & 255](d);
			b = d + 8 | 0;
			h = (HEAP32[b >> 2] | 0) + -1 | 0;
			HEAP32[b >> 2] = h;
			if (h) {
				i = g;
				return
			}
			lc[c[(HEAP32[d >> 2] | 0) + 12 >> 2] & 255](d);
			i = g;
			return
		}
		function He(b, d, e, f, g, h, j, k, l, m, n) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			k = k | 0;
			l = l | 0;
			m = m | 0;
			n = n | 0;
			var o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0;
			o = i;
			i = i + 80 | 0;
			p = o + 48 | 0;
			q = o + 24 | 0;
			r = o;
			Mj(p, (HEAP32[n >> 2] | 0) + 11 | 0);
			s = jy(f | 0) | 0;
			f = p + 4 | 0;
			t = p + 8 | 0;
			u = (c[(HEAP32[f >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[t >> 2] | 0) | 0;
			HEAP8[u >> 0] = s;
			HEAP8[u + 1 >> 0] = s >> 8;
			HEAP8[u + 2 >> 0] = s >> 16;
			HEAP8[u + 3 >> 0] = s >> 24;
			s = (HEAP32[t >> 2] | 0) + 4 | 0;
			HEAP32[t >> 2] = s;
			a[(c[(HEAP32[f >> 2] | 0) + 4 >> 2] | 0) + s >> 0] = HEAP32[g >> 2];
			g = (HEAP32[t >> 2] | 0) + 1 | 0;
			HEAP32[t >> 2] = g;
			a[(c[(HEAP32[f >> 2] | 0) + 4 >> 2] | 0) + g >> 0] = h & 1;
			g = (HEAP32[t >> 2] | 0) + 1 | 0;
			HEAP32[t >> 2] = g;
			s = jy(l | 0) | 0;
			u = (c[(HEAP32[f >> 2] | 0) + 4 >> 2] | 0) + g | 0;
			HEAP8[u >> 0] = s;
			HEAP8[u + 1 >> 0] = s >> 8;
			HEAP8[u + 2 >> 0] = s >> 16;
			HEAP8[u + 3 >> 0] = s >> 24;
			s = (HEAP32[t >> 2] | 0) + 4 | 0;
			HEAP32[t >> 2] = s;
			a[(c[(HEAP32[f >> 2] | 0) + 4 >> 2] | 0) + s >> 0] = (HEAP32[n >> 2] | 0) != 0 & 1;
			HEAP32[t >> 2] = (HEAP32[t >> 2] | 0) + 1;
			Ij(p, HEAP32[n + 4 >> 2] | 0, 0, HEAP32[n >> 2] | 0);
			do
				if ((HEAP32[b + 252 >> 2] | 0) == 3 ? (n = HEAP32[b + 116 >> 2] | 0, (n | 0) != 0) : 0) {
					t = HEAP32[n >> 2] | 0;
					if ((t | 0) == 1) {
						if ((HEAP32[n + 4 >> 2] | 0) == -1) {
							v = 7;
							break
						}
						if (!(HEAP8[n + 32 >> 0] | 0)) {
							v = 7;
							break
						}
						HEAP32[n >> 2] = 2
					} else if ((t | 0) != 2) {
						v = 7;
						break
					}
					if (h) {
						t = HEAP32[b + 124 >> 2] | 0;
						n = HEAP32[b + 296 >> 2] | 0;
						do
							if (n)
								if ((n | 0) == (b + 280 | 0)) {
									HEAP32[q + 16 >> 2] = q;
									rc[c[(HEAP32[n >> 2] | 0) + 12 >> 2] & 127](n, q);
									break
								} else {
									HEAP32[q + 16 >> 2] = tc[c[(HEAP32[n >> 2] | 0) + 8 >> 2] & 127](n) | 0;
									break
								}
							else
								HEAP32[q + 16 >> 2] = 0;
						while (0);
						n = re(t, d, e, l, m, 2, j, q, p, k) | 0;
						s = HEAP32[q + 16 >> 2] | 0;
						if ((s | 0) != (q | 0)) {
							if (s)
								lc[c[(HEAP32[s >> 2] | 0) + 20 >> 2] & 255](s)
						} else
							lc[c[(HEAP32[s >> 2] | 0) + 16 >> 2] & 255](s);
						if (n)
							break;
						Pe(b, d, e, j, 6);
						break
					} else {
						n = HEAP32[b + 120 >> 2] | 0;
						s = HEAP32[b + 296 >> 2] | 0;
						do
							if (s) {
								f = b + 280 | 0;
								if ((s | 0) == (f | 0)) {
									HEAP32[r + 16 >> 2] = r;
									rc[c[(HEAP32[f >> 2] | 0) + 12 >> 2] & 127](f, r);
									break
								} else {
									HEAP32[r + 16 >> 2] = tc[c[(HEAP32[s >> 2] | 0) + 8 >> 2] & 127](s) | 0;
									break
								}
							} else
								HEAP32[r + 16 >> 2] = 0;
						while (0);
						s = ze(n, d, e, 2, j, r, p, k) | 0;
						t = HEAP32[r + 16 >> 2] | 0;
						if ((t | 0) != (r | 0)) {
							if (t)
								lc[c[(HEAP32[t >> 2] | 0) + 20 >> 2] & 255](t)
						} else
							lc[c[(HEAP32[t >> 2] | 0) + 16 >> 2] & 255](t);
						if (s)
							break;
						Pe(b, d, e, j, 6);
						break
					}
				} else
					v = 7;
			while (0);
			if ((v | 0) == 7) {
				HEAP8[b + 188 >> 0] = 1;
				Pe(b, d, e, j, 6)
			}
			j = HEAP32[p + 12 >> 2] | 0;
			if (((j | 0) != 0 ? (e = j + 4 | 0, d = (HEAP32[e >> 2] | 0) + -1 | 0, HEAP32[e >> 2] = d, (d | 0) == 0) : 0) ? (lc[c[(HEAP32[j >> 2] | 0) + 8 >> 2] & 255](j), d = j + 8 | 0, e = (HEAP32[d >> 2] | 0) + -1 | 0, HEAP32[d >> 2] = e, (e | 0) == 0) : 0)
				lc[c[(HEAP32[j >> 2] | 0) + 12 >> 2] & 255](j);
			j = HEAP32[p >> 2] | 0;
			if (!j) {
				i = o;
				return
			}
			p = j + 4 | 0;
			e = (HEAP32[p >> 2] | 0) + -1 | 0;
			HEAP32[p >> 2] = e;
			if (e) {
				i = o;
				return
			}
			lc[c[(HEAP32[j >> 2] | 0) + 8 >> 2] & 255](j);
			e = j + 8 | 0;
			p = (HEAP32[e >> 2] | 0) + -1 | 0;
			HEAP32[e >> 2] = p;
			if (p) {
				i = o;
				return
			}
			lc[c[(HEAP32[j >> 2] | 0) + 12 >> 2] & 255](j);
			i = o;
			return
		}
		function Ie(b) {
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0;
			d = i;
			i = i + 32 | 0;
			e = d;
			Mj(e, 3);
			f = e + 4 | 0;
			g = e + 8 | 0;
			a[(c[(HEAP32[f >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[g >> 2] | 0) >> 0] = 10;
			h = (HEAP32[g >> 2] | 0) + 1 | 0;
			HEAP32[g >> 2] = h;
			j = (c[(HEAP32[f >> 2] | 0) + 4 >> 2] | 0) + h | 0;
			HEAP8[j >> 0] = 0;
			HEAP8[j + 1 >> 0] = 0;
			HEAP32[g >> 2] = (HEAP32[g >> 2] | 0) + 2;
			zd(b, e);
			b = HEAP32[e + 12 >> 2] | 0;
			if (((b | 0) != 0 ? (g = b + 4 | 0, j = (HEAP32[g >> 2] | 0) + -1 | 0, HEAP32[g >> 2] = j, (j | 0) == 0) : 0) ? (lc[c[(HEAP32[b >> 2] | 0) + 8 >> 2] & 255](b), j = b + 8 | 0, g = (HEAP32[j >> 2] | 0) + -1 | 0, HEAP32[j >> 2] = g, (g | 0) == 0) : 0)
				lc[c[(HEAP32[b >> 2] | 0) + 12 >> 2] & 255](b);
			b = HEAP32[e >> 2] | 0;
			if (!b) {
				i = d;
				return
			}
			e = b + 4 | 0;
			g = (HEAP32[e >> 2] | 0) + -1 | 0;
			HEAP32[e >> 2] = g;
			if (g) {
				i = d;
				return
			}
			lc[c[(HEAP32[b >> 2] | 0) + 8 >> 2] & 255](b);
			g = b + 8 | 0;
			e = (HEAP32[g >> 2] | 0) + -1 | 0;
			HEAP32[g >> 2] = e;
			if (e) {
				i = d;
				return
			}
			lc[c[(HEAP32[b >> 2] | 0) + 12 >> 2] & 255](b);
			i = d;
			return
		}
		function Je(b) {
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0;
			d = i;
			i = i + 32 | 0;
			e = d;
			Mj(e, 3);
			f = e + 4 | 0;
			g = e + 8 | 0;
			a[(c[(HEAP32[f >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[g >> 2] | 0) >> 0] = 40;
			h = (HEAP32[g >> 2] | 0) + 1 | 0;
			HEAP32[g >> 2] = h;
			j = (c[(HEAP32[f >> 2] | 0) + 4 >> 2] | 0) + h | 0;
			HEAP8[j >> 0] = 0;
			HEAP8[j + 1 >> 0] = 0;
			HEAP32[g >> 2] = (HEAP32[g >> 2] | 0) + 2;
			zd(b, e);
			b = HEAP32[e + 12 >> 2] | 0;
			if (((b | 0) != 0 ? (g = b + 4 | 0, j = (HEAP32[g >> 2] | 0) + -1 | 0, HEAP32[g >> 2] = j, (j | 0) == 0) : 0) ? (lc[c[(HEAP32[b >> 2] | 0) + 8 >> 2] & 255](b), j = b + 8 | 0, g = (HEAP32[j >> 2] | 0) + -1 | 0, HEAP32[j >> 2] = g, (g | 0) == 0) : 0)
				lc[c[(HEAP32[b >> 2] | 0) + 12 >> 2] & 255](b);
			b = HEAP32[e >> 2] | 0;
			if (!b) {
				i = d;
				return
			}
			e = b + 4 | 0;
			g = (HEAP32[e >> 2] | 0) + -1 | 0;
			HEAP32[e >> 2] = g;
			if (g) {
				i = d;
				return
			}
			lc[c[(HEAP32[b >> 2] | 0) + 8 >> 2] & 255](b);
			g = b + 8 | 0;
			e = (HEAP32[g >> 2] | 0) + -1 | 0;
			HEAP32[g >> 2] = e;
			if (e) {
				i = d;
				return
			}
			lc[c[(HEAP32[b >> 2] | 0) + 12 >> 2] & 255](b);
			i = d;
			return
		}
		function Ke(b, d) {
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0;
			e = i;
			i = i + 32 | 0;
			f = e;
			g = d + 4 | 0;
			d = HEAP32[g >> 2] | 0;
			if (!d)
				h = 3;
			else
				h = (HEAP32[d >> 2] | 0) + 3 | 0;
			Mj(f, h);
			h = f + 4 | 0;
			d = f + 8 | 0;
			a[(c[(HEAP32[h >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[d >> 2] | 0) >> 0] = 10;
			j = (HEAP32[d >> 2] | 0) + 1 | 0;
			HEAP32[d >> 2] = j;
			k = HEAP32[g >> 2] | 0;
			if (!k)
				l = 0;
			else
				l = HEAP32[k >> 2] | 0;
			k = (l >>> 8 & 255 | l << 8) & 65535;
			l = (c[(HEAP32[h >> 2] | 0) + 4 >> 2] | 0) + j | 0;
			HEAP8[l >> 0] = k;
			HEAP8[l + 1 >> 0] = k >> 8;
			HEAP32[d >> 2] = (HEAP32[d >> 2] | 0) + 2;
			d = HEAP32[g >> 2] | 0;
			if (!d) {
				m = 0;
				n = 0
			} else {
				m = HEAP32[d >> 2] | 0;
				n = HEAP32[d + 4 >> 2] | 0
			}
			Ij(f, n, 0, m);
			zd(b, f);
			b = HEAP32[f + 12 >> 2] | 0;
			if (((b | 0) != 0 ? (m = b + 4 | 0, n = (HEAP32[m >> 2] | 0) + -1 | 0, HEAP32[m >> 2] = n, (n | 0) == 0) : 0) ? (lc[c[(HEAP32[b >> 2] | 0) + 8 >> 2] & 255](b), n = b + 8 | 0, m = (HEAP32[n >> 2] | 0) + -1 | 0, HEAP32[n >> 2] = m, (m | 0) == 0) : 0)
				lc[c[(HEAP32[b >> 2] | 0) + 12 >> 2] & 255](b);
			b = HEAP32[f >> 2] | 0;
			if (!b) {
				i = e;
				return
			}
			f = b + 4 | 0;
			m = (HEAP32[f >> 2] | 0) + -1 | 0;
			HEAP32[f >> 2] = m;
			if (m) {
				i = e;
				return
			}
			lc[c[(HEAP32[b >> 2] | 0) + 8 >> 2] & 255](b);
			m = b + 8 | 0;
			f = (HEAP32[m >> 2] | 0) + -1 | 0;
			HEAP32[m >> 2] = f;
			if (f) {
				i = e;
				return
			}
			lc[c[(HEAP32[b >> 2] | 0) + 12 >> 2] & 255](b);
			i = e;
			return
		}
		function Le(b, d) {
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0;
			e = i;
			i = i + 32 | 0;
			f = e;
			g = d + 4 | 0;
			d = HEAP32[g >> 2] | 0;
			if (!d)
				h = 3;
			else
				h = (HEAP32[d >> 2] | 0) + 3 | 0;
			Mj(f, h);
			h = f + 4 | 0;
			d = f + 8 | 0;
			a[(c[(HEAP32[h >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[d >> 2] | 0) >> 0] = 40;
			j = (HEAP32[d >> 2] | 0) + 1 | 0;
			HEAP32[d >> 2] = j;
			k = HEAP32[g >> 2] | 0;
			if (!k)
				l = 0;
			else
				l = HEAP32[k >> 2] | 0;
			k = (l >>> 8 & 255 | l << 8) & 65535;
			l = (c[(HEAP32[h >> 2] | 0) + 4 >> 2] | 0) + j | 0;
			HEAP8[l >> 0] = k;
			HEAP8[l + 1 >> 0] = k >> 8;
			HEAP32[d >> 2] = (HEAP32[d >> 2] | 0) + 2;
			d = HEAP32[g >> 2] | 0;
			if (!d) {
				m = 0;
				n = 0
			} else {
				m = HEAP32[d >> 2] | 0;
				n = HEAP32[d + 4 >> 2] | 0
			}
			Ij(f, n, 0, m);
			zd(b, f);
			b = HEAP32[f + 12 >> 2] | 0;
			if (((b | 0) != 0 ? (m = b + 4 | 0, n = (HEAP32[m >> 2] | 0) + -1 | 0, HEAP32[m >> 2] = n, (n | 0) == 0) : 0) ? (lc[c[(HEAP32[b >> 2] | 0) + 8 >> 2] & 255](b), n = b + 8 | 0, m = (HEAP32[n >> 2] | 0) + -1 | 0, HEAP32[n >> 2] = m, (m | 0) == 0) : 0)
				lc[c[(HEAP32[b >> 2] | 0) + 12 >> 2] & 255](b);
			b = HEAP32[f >> 2] | 0;
			if (!b) {
				i = e;
				return
			}
			f = b + 4 | 0;
			m = (HEAP32[f >> 2] | 0) + -1 | 0;
			HEAP32[f >> 2] = m;
			if (m) {
				i = e;
				return
			}
			lc[c[(HEAP32[b >> 2] | 0) + 8 >> 2] & 255](b);
			m = b + 8 | 0;
			f = (HEAP32[m >> 2] | 0) + -1 | 0;
			HEAP32[m >> 2] = f;
			if (f) {
				i = e;
				return
			}
			lc[c[(HEAP32[b >> 2] | 0) + 12 >> 2] & 255](b);
			i = e;
			return
		}
		function Me(b, e, f, g) {
			b = b | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0;
			h = i;
			i = i + 192 | 0;
			j = h;
			k = h + 168 | 0;
			l = g + 8 | 0;
			m = g + 4 | 0;
			n = HEAP32[(HEAP32[m >> 2] | 0) + 4 >> 2] | 0;
			HEAP32[l >> 2] = 4;
			o = jy(HEAPU8[n >> 0] | HEAPU8[n + 1 >> 0] << 8 | HEAPU8[n + 2 >> 0] << 16 | HEAPU8[n + 3 >> 0] << 24 | 0) | 0;
			n = f + 4 | 0;
			p = HEAP32[n >> 2] | 0;
			if (!p) {
				q = 0;
				r = 0
			} else {
				q = HEAP32[p >> 2] | 0;
				r = HEAP32[p + 4 >> 2] | 0
			}
			if ((Cl(r, q, -1) | 0) != (o | 0)) {
				Ne(b, e, 1);
				i = h;
				return
			}
			o = HEAP32[m >> 2] | 0;
			m = HEAP32[l >> 2] | 0;
			HEAP32[l >> 2] = m + 1;
			do
				if ((a[(HEAP32[o + 4 >> 2] | 0) + m >> 0] | 0) == 1) {
					Sj(j, j);
					l = HEAP32[n >> 2] | 0;
					if (!l)
						s = 0;
					else
						s = HEAP32[l + 4 >> 2] | 0;
					Tj(j, s, q << 3, j);
					l = jl(64) | 0;
					Uj(j, j, l);
					r = jl(64) | 0;
					Qj(g, r, 0, 64);
					p = 0;
					while (1) {
						if ((HEAP8[l + p >> 0] | 0) != (HEAP8[r + p >> 0] | 0))
							break;
						p = p + 1 | 0;
						if (p >>> 0 >= 64) {
							t = 12;
							break
						}
					}
					if ((t | 0) == 12) {
						ll(r);
						ll(l);
						break
					}
					Ne(b, e, 2);
					ll(r);
					ll(l);
					i = h;
					return
				}
			while (0);
			t = me(f) | 0;
			f = t + 4 | 0;
			g = HEAP32[f >> 2] | 0;
			if (!g)
				u = 7;
			else
				u = (HEAP32[g >> 2] | 0) + 7 | 0;
			Mj(k, u);
			u = k + 4 | 0;
			g = k + 8 | 0;
			a[(c[(HEAP32[u >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[g >> 2] | 0) >> 0] = 20;
			j = (HEAP32[g >> 2] | 0) + 1 | 0;
			HEAP32[g >> 2] = j;
			a[(c[(HEAP32[u >> 2] | 0) + 4 >> 2] | 0) + j >> 0] = e;
			e = (HEAP32[g >> 2] | 0) + 1 | 0;
			HEAP32[g >> 2] = e;
			a[(c[(HEAP32[u >> 2] | 0) + 4 >> 2] | 0) + e >> 0] = 0;
			e = (HEAP32[g >> 2] | 0) + 1 | 0;
			HEAP32[g >> 2] = e;
			j = HEAP32[f >> 2] | 0;
			if (!j)
				v = 0;
			else
				v = HEAP32[j >> 2] | 0;
			j = jy(v | 0) | 0;
			v = (c[(HEAP32[u >> 2] | 0) + 4 >> 2] | 0) + e | 0;
			HEAP8[v >> 0] = j;
			HEAP8[v + 1 >> 0] = j >> 8;
			HEAP8[v + 2 >> 0] = j >> 16;
			HEAP8[v + 3 >> 0] = j >> 24;
			HEAP32[g >> 2] = (HEAP32[g >> 2] | 0) + 4;
			g = HEAP32[f >> 2] | 0;
			if (!g) {
				w = 0;
				x = 0
			} else {
				w = HEAP32[g >> 2] | 0;
				x = HEAP32[g + 4 >> 2] | 0
			}
			Ij(k, x, 0, w);
			if (t) {
				w = HEAP32[t + 12 >> 2] | 0;
				if (((w | 0) != 0 ? (x = w + 4 | 0, g = (HEAP32[x >> 2] | 0) + -1 | 0, HEAP32[x >> 2] = g, (g | 0) == 0) : 0) ? (lc[c[(HEAP32[w >> 2] | 0) + 8 >> 2] & 255](w), g = w + 8 | 0, x = (HEAP32[g >> 2] | 0) + -1 | 0, HEAP32[g >> 2] = x, (x | 0) == 0) : 0)
					lc[c[(HEAP32[w >> 2] | 0) + 12 >> 2] & 255](w);
				w = HEAP32[t >> 2] | 0;
				if (((w | 0) != 0 ? (x = w + 4 | 0, g = (HEAP32[x >> 2] | 0) + -1 | 0, HEAP32[x >> 2] = g, (g | 0) == 0) : 0) ? (lc[c[(HEAP32[w >> 2] | 0) + 8 >> 2] & 255](w), g = w + 8 | 0, x = (HEAP32[g >> 2] | 0) + -1 | 0, HEAP32[g >> 2] = x, (x | 0) == 0) : 0)
					lc[c[(HEAP32[w >> 2] | 0) + 12 >> 2] & 255](w);
				kl(t)
			}
			zd(b, k);
			b = HEAP32[k + 12 >> 2] | 0;
			if (((b | 0) != 0 ? (t = b + 4 | 0, w = (HEAP32[t >> 2] | 0) + -1 | 0, HEAP32[t >> 2] = w, (w | 0) == 0) : 0) ? (lc[c[(HEAP32[b >> 2] | 0) + 8 >> 2] & 255](b), w = b + 8 | 0, t = (HEAP32[w >> 2] | 0) + -1 | 0, HEAP32[w >> 2] = t, (t | 0) == 0) : 0)
				lc[c[(HEAP32[b >> 2] | 0) + 12 >> 2] & 255](b);
			b = HEAP32[k >> 2] | 0;
			if (!b) {
				i = h;
				return
			}
			k = b + 4 | 0;
			t = (HEAP32[k >> 2] | 0) + -1 | 0;
			HEAP32[k >> 2] = t;
			if (t) {
				i = h;
				return
			}
			lc[c[(HEAP32[b >> 2] | 0) + 8 >> 2] & 255](b);
			t = b + 8 | 0;
			k = (HEAP32[t >> 2] | 0) + -1 | 0;
			HEAP32[t >> 2] = k;
			if (k) {
				i = h;
				return
			}
			lc[c[(HEAP32[b >> 2] | 0) + 12 >> 2] & 255](b);
			i = h;
			return
		}
		function Ne(b, d, e) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0;
			f = i;
			i = i + 32 | 0;
			g = f;
			Mj(g, 3);
			h = g + 4 | 0;
			j = g + 8 | 0;
			a[(c[(HEAP32[h >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[j >> 2] | 0) >> 0] = 20;
			k = (HEAP32[j >> 2] | 0) + 1 | 0;
			HEAP32[j >> 2] = k;
			a[(c[(HEAP32[h >> 2] | 0) + 4 >> 2] | 0) + k >> 0] = d;
			d = (HEAP32[j >> 2] | 0) + 1 | 0;
			HEAP32[j >> 2] = d;
			a[(c[(HEAP32[h >> 2] | 0) + 4 >> 2] | 0) + d >> 0] = e;
			HEAP32[j >> 2] = (HEAP32[j >> 2] | 0) + 1;
			zd(b, g);
			b = HEAP32[g + 12 >> 2] | 0;
			if (((b | 0) != 0 ? (j = b + 4 | 0, e = (HEAP32[j >> 2] | 0) + -1 | 0, HEAP32[j >> 2] = e, (e | 0) == 0) : 0) ? (lc[c[(HEAP32[b >> 2] | 0) + 8 >> 2] & 255](b), e = b + 8 | 0, j = (HEAP32[e >> 2] | 0) + -1 | 0, HEAP32[e >> 2] = j, (j | 0) == 0) : 0)
				lc[c[(HEAP32[b >> 2] | 0) + 12 >> 2] & 255](b);
			b = HEAP32[g >> 2] | 0;
			if (!b) {
				i = f;
				return
			}
			g = b + 4 | 0;
			j = (HEAP32[g >> 2] | 0) + -1 | 0;
			HEAP32[g >> 2] = j;
			if (j) {
				i = f;
				return
			}
			lc[c[(HEAP32[b >> 2] | 0) + 8 >> 2] & 255](b);
			j = b + 8 | 0;
			g = (HEAP32[j >> 2] | 0) + -1 | 0;
			HEAP32[j >> 2] = g;
			if (g) {
				i = f;
				return
			}
			lc[c[(HEAP32[b >> 2] | 0) + 12 >> 2] & 255](b);
			i = f;
			return
		}
		function Oe(b, e, f, g, h, j) {
			b = b | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			var k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0,
			O = 0,
			P = 0,
			Q = 0,
			R = 0,
			S = 0,
			T = 0,
			U = 0,
			V = 0,
			W = 0,
			X = 0,
			Y = 0,
			Z = 0,
			_ = 0,
			$ = 0,
			aa = 0,
			ba = 0,
			ca = 0,
			ea = 0,
			fa = 0,
			ga = 0,
			ha = 0,
			ia = 0,
			ja = 0,
			ka = 0,
			la = 0,
			ma = 0,
			na = 0,
			oa = 0,
			pa = 0,
			qa = 0,
			ra = 0,
			sa = 0,
			ta = 0,
			ua = 0,
			va = 0,
			wa = 0,
			xa = 0,
			ya = 0;
			k = i;
			i = i + 320 | 0;
			l = k;
			m = k + 288 | 0;
			n = k + 268 | 0;
			o = k + 248 | 0;
			p = k + 228 | 0;
			q = k + 208 | 0;
			r = k + 188 | 0;
			s = k + 168 | 0;
			t = g + 4 | 0;
			u = HEAP32[t >> 2] | 0;
			if (!u) {
				i = k;
				return
			}
			if ((HEAP32[u >> 2] | 0) >>> 0 < 3) {
				i = k;
				return
			}
			u = h + 8 | 0;
			v = h + 4 | 0;
			w = HEAP32[(HEAP32[v >> 2] | 0) + 4 >> 2] | 0;
			HEAP32[u >> 2] = 4;
			x = jy(HEAPU8[w >> 0] | HEAPU8[w + 1 >> 0] << 8 | HEAPU8[w + 2 >> 0] << 16 | HEAPU8[w + 3 >> 0] << 24 | 0) | 0;
			HEAP32[u >> 2] = 5;
			y = _i(HEAPU8[w + 4 >> 0] | 0) | 0;
			w = HEAP32[u >> 2] | 0;
			z = (c[(HEAP32[v >> 2] | 0) + 4 >> 2] | 0) + (w + 1) | 0;
			HEAP32[u >> 2] = w + 5;
			w = jy(HEAPU8[z >> 0] | HEAPU8[z + 1 >> 0] << 8 | HEAPU8[z + 2 >> 0] << 16 | HEAPU8[z + 3 >> 0] << 24 | 0) | 0;
			z = HEAP32[t >> 2] | 0;
			if (!z) {
				A = 0;
				B = -2
			} else {
				A = HEAP32[z + 4 >> 2] | 0;
				B = (HEAP32[z >> 2] | 0) + -2 | 0
			}
			if ((Cl(A, B, -1) | 0) != (w | 0)) {
				Pe(b, e, f, j, 1);
				i = k;
				return
			}
			w = HEAP32[v >> 2] | 0;
			v = HEAP32[u >> 2] | 0;
			HEAP32[u >> 2] = v + 1;
			do
				if ((a[(HEAP32[w + 4 >> 2] | 0) + v >> 0] | 0) == 1) {
					Sj(l, l);
					u = HEAP32[t >> 2] | 0;
					if (!u)
						C = 0;
					else
						C = HEAP32[u + 4 >> 2] | 0;
					Tj(l, C, B << 3, l);
					u = jl(64) | 0;
					Uj(l, l, u);
					A = jl(64) | 0;
					Qj(h, A, 0, 64);
					z = 0;
					while (1) {
						if ((HEAP8[u + z >> 0] | 0) != (HEAP8[A + z >> 0] | 0))
							break;
						z = z + 1 | 0;
						if (z >>> 0 >= 64) {
							D = 14;
							break
						}
					}
					if ((D | 0) == 14) {
						ll(A);
						ll(u);
						break
					}
					Pe(b, e, f, j, 2);
					ll(A);
					ll(u);
					i = k;
					return
				}
			while (0);
			h = me(g) | 0;
			if (!h) {
				Pe(b, e, f, j, 5);
				i = k;
				return
			}
			Lj(m);
			do
				if ((x | 0) <= 1) {
					if ((y | 0) == (HEAP32[2138] | 0)) {
						cg(m, h) | 0;
						D = 161;
						break
					}
					if ((y | 0) == (HEAP32[2140] | 0)) {
						g = h + 4 | 0;
						B = HEAP32[g >> 2] | 0;
						C = h + 8 | 0;
						t = HEAP32[C >> 2] | 0;
						v = t + 1 | 0;
						HEAP32[C >> 2] = v;
						w = HEAP32[B + 4 >> 2] | 0;
						B = HEAP8[w + t >> 0] | 0;
						t = B & 255;
						if (B << 24 >> 24) {
							B = n + 8 | 0;
							z = l + 4 | 0;
							E = l + 44 | 0;
							F = n + 12 | 0;
							G = w;
							w = v;
							v = 0;
							H = 0;
							I = 0;
							J = 1;
							while (1) {
								K = G + w | 0;
								HEAP32[C >> 2] = w + 4;
								L = jy(HEAPU8[K >> 0] | HEAPU8[K + 1 >> 0] << 8 | HEAPU8[K + 2 >> 0] << 16 | HEAPU8[K + 3 >> 0] << 24 | 0) | 0;
								Mj(n, L);
								Pj(h, n, L);
								HEAP32[B >> 2] = 0;
								vg(l);
								yg(l, n) | 0;
								M = HEAP32[l >> 2] | 0;
								N = HEAP32[z >> 2] | 0;
								L = da(M << 2, N) | 0;
								if (v)
									if ((H | 0) == (L | 0)) {
										O = H;
										P = I;
										D = 30
									} else {
										Q = 1;
										R = H;
										S = I;
										T = 0;
										D = 33
									}
								else {
									K = il(20) | 0;
									Mj(K, (da(L, t) | 0) + 8 | 0);
									O = L;
									P = K;
									D = 30
								}
								if ((D | 0) == 30) {
									D = 0;
									if (P) {
										K = HEAP32[E >> 2] | 0;
										if (!K) {
											U = 1;
											V = O;
											W = P;
											X = 0
										} else {
											Ij(P, K, 0, O);
											Q = 0;
											R = O;
											S = P;
											T = J;
											D = 33
										}
									} else {
										Q = 1;
										R = O;
										S = 0;
										T = 0;
										D = 33
									}
								}
								if ((D | 0) == 33) {
									D = 0;
									K = HEAP32[E >> 2] | 0;
									if (!K) {
										U = Q;
										V = R;
										W = S;
										X = T
									} else {
										ll(K);
										U = Q;
										V = R;
										W = S;
										X = T
									}
								}
								K = HEAP32[F >> 2] | 0;
								if (((K | 0) != 0 ? (L = K + 4 | 0, Y = (HEAP32[L >> 2] | 0) + -1 | 0, HEAP32[L >> 2] = Y, (Y | 0) == 0) : 0) ? (lc[c[(HEAP32[K >> 2] | 0) + 8 >> 2] & 255](K), Y = K + 8 | 0, L = (HEAP32[Y >> 2] | 0) + -1 | 0, HEAP32[Y >> 2] = L, (L | 0) == 0) : 0)
									lc[c[(HEAP32[K >> 2] | 0) + 12 >> 2] & 255](K);
								K = HEAP32[n >> 2] | 0;
								if (((K | 0) != 0 ? (L = K + 4 | 0, Y = (HEAP32[L >> 2] | 0) + -1 | 0, HEAP32[L >> 2] = Y, (Y | 0) == 0) : 0) ? (lc[c[(HEAP32[K >> 2] | 0) + 8 >> 2] & 255](K), Y = K + 8 | 0, L = (HEAP32[Y >> 2] | 0) + -1 | 0, HEAP32[Y >> 2] = L, (L | 0) == 0) : 0)
									lc[c[(HEAP32[K >> 2] | 0) + 12 >> 2] & 255](K);
								K = v + 1 | 0;
								if (!((K | 0) < (t | 0) & (U ^ 1)))
									break;
								G = HEAP32[(HEAP32[g >> 2] | 0) + 4 >> 2] | 0;
								w = HEAP32[C >> 2] | 0;
								v = K;
								H = V;
								I = W;
								J = X
							}
							if (!W) {
								Z = 1;
								_ = 0;
								$ = X
							} else {
								J = jy(M | 0) | 0;
								I = W + 4 | 0;
								H = W + 8 | 0;
								v = (c[(HEAP32[I >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[H >> 2] | 0) | 0;
								HEAP8[v >> 0] = J;
								HEAP8[v + 1 >> 0] = J >> 8;
								HEAP8[v + 2 >> 0] = J >> 16;
								HEAP8[v + 3 >> 0] = J >> 24;
								J = (HEAP32[H >> 2] | 0) + 4 | 0;
								HEAP32[H >> 2] = J;
								v = jy(N | 0) | 0;
								C = (c[(HEAP32[I >> 2] | 0) + 4 >> 2] | 0) + J | 0;
								HEAP8[C >> 0] = v;
								HEAP8[C + 1 >> 0] = v >> 8;
								HEAP8[C + 2 >> 0] = v >> 16;
								HEAP8[C + 3 >> 0] = v >> 24;
								HEAP32[H >> 2] = (HEAP32[H >> 2] | 0) + 4;
								Z = 0;
								_ = W;
								$ = X
							}
						} else {
							Z = 1;
							_ = 0;
							$ = 1
						}
						H = HEAP32[h + 12 >> 2] | 0;
						if (((H | 0) != 0 ? (v = H + 4 | 0, C = (HEAP32[v >> 2] | 0) + -1 | 0, HEAP32[v >> 2] = C, (C | 0) == 0) : 0) ? (lc[c[(HEAP32[H >> 2] | 0) + 8 >> 2] & 255](H), C = H + 8 | 0, v = (HEAP32[C >> 2] | 0) + -1 | 0, HEAP32[C >> 2] = v, (v | 0) == 0) : 0)
							lc[c[(HEAP32[H >> 2] | 0) + 12 >> 2] & 255](H);
						H = HEAP32[h >> 2] | 0;
						if (((H | 0) != 0 ? (v = H + 4 | 0, C = (HEAP32[v >> 2] | 0) + -1 | 0, HEAP32[v >> 2] = C, (C | 0) == 0) : 0) ? (lc[c[(HEAP32[H >> 2] | 0) + 8 >> 2] & 255](H), C = H + 8 | 0, v = (HEAP32[C >> 2] | 0) + -1 | 0, HEAP32[C >> 2] = v, (v | 0) == 0) : 0)
							lc[c[(HEAP32[H >> 2] | 0) + 12 >> 2] & 255](H);
						kl(h);
						if (Z | $ ^ 1) {
							if (!((_ | 0) == 0 | Z)) {
								H = HEAP32[_ + 12 >> 2] | 0;
								do
									if (H) {
										v = H + 4 | 0;
										C = (HEAP32[v >> 2] | 0) + -1 | 0;
										HEAP32[v >> 2] = C;
										if (C)
											break;
										lc[c[(HEAP32[H >> 2] | 0) + 8 >> 2] & 255](H);
										C = H + 8 | 0;
										v = (HEAP32[C >> 2] | 0) + -1 | 0;
										HEAP32[C >> 2] = v;
										if (v)
											break;
										lc[c[(HEAP32[H >> 2] | 0) + 12 >> 2] & 255](H)
									}
								while (0);
								H = HEAP32[_ >> 2] | 0;
								do
									if (H) {
										v = H + 4 | 0;
										C = (HEAP32[v >> 2] | 0) + -1 | 0;
										HEAP32[v >> 2] = C;
										if (C)
											break;
										lc[c[(HEAP32[H >> 2] | 0) + 8 >> 2] & 255](H);
										C = H + 8 | 0;
										v = (HEAP32[C >> 2] | 0) + -1 | 0;
										HEAP32[C >> 2] = v;
										if (v)
											break;
										lc[c[(HEAP32[H >> 2] | 0) + 12 >> 2] & 255](H)
									}
								while (0);
								kl(_)
							}
							Pe(b, e, f, j, 3);
							break
						}
						H = _ + 4 | 0;
						v = HEAP32[H >> 2] | 0;
						if (!v)
							aa = 12;
						else
							aa = (HEAP32[v >> 2] | 0) + 12 | 0;
						Mj(o, aa);
						v = o + 4 | 0;
						C = o + 8 | 0;
						a[(c[(HEAP32[v >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[C >> 2] | 0) >> 0] = 30;
						J = (HEAP32[C >> 2] | 0) + 1 | 0;
						HEAP32[C >> 2] = J;
						a[(c[(HEAP32[v >> 2] | 0) + 4 >> 2] | 0) + J >> 0] = e;
						J = (HEAP32[C >> 2] | 0) + 1 | 0;
						HEAP32[C >> 2] = J;
						I = jy(f | 0) | 0;
						w = (c[(HEAP32[v >> 2] | 0) + 4 >> 2] | 0) + J | 0;
						HEAP8[w >> 0] = I;
						HEAP8[w + 1 >> 0] = I >> 8;
						HEAP8[w + 2 >> 0] = I >> 16;
						HEAP8[w + 3 >> 0] = I >> 24;
						I = (HEAP32[C >> 2] | 0) + 4 | 0;
						HEAP32[C >> 2] = I;
						a[(c[(HEAP32[v >> 2] | 0) + 4 >> 2] | 0) + I >> 0] = j & 1;
						I = (HEAP32[C >> 2] | 0) + 1 | 0;
						HEAP32[C >> 2] = I;
						a[(c[(HEAP32[v >> 2] | 0) + 4 >> 2] | 0) + I >> 0] = 0;
						I = (HEAP32[C >> 2] | 0) + 1 | 0;
						HEAP32[C >> 2] = I;
						w = HEAP32[H >> 2] | 0;
						if (!w)
							ba = 0;
						else
							ba = HEAP32[w >> 2] | 0;
						w = jy(ba | 0) | 0;
						J = (c[(HEAP32[v >> 2] | 0) + 4 >> 2] | 0) + I | 0;
						HEAP8[J >> 0] = w;
						HEAP8[J + 1 >> 0] = w >> 8;
						HEAP8[J + 2 >> 0] = w >> 16;
						HEAP8[J + 3 >> 0] = w >> 24;
						HEAP32[C >> 2] = (HEAP32[C >> 2] | 0) + 4;
						C = HEAP32[H >> 2] | 0;
						if (!C) {
							ca = 0;
							ea = 0
						} else {
							ca = HEAP32[C >> 2] | 0;
							ea = HEAP32[C + 4 >> 2] | 0
						}
						Ij(o, ea, 0, ca);
						if (_) {
							C = HEAP32[_ + 12 >> 2] | 0;
							do
								if (C) {
									H = C + 4 | 0;
									w = (HEAP32[H >> 2] | 0) + -1 | 0;
									HEAP32[H >> 2] = w;
									if (w)
										break;
									lc[c[(HEAP32[C >> 2] | 0) + 8 >> 2] & 255](C);
									w = C + 8 | 0;
									H = (HEAP32[w >> 2] | 0) + -1 | 0;
									HEAP32[w >> 2] = H;
									if (H)
										break;
									lc[c[(HEAP32[C >> 2] | 0) + 12 >> 2] & 255](C)
								}
							while (0);
							C = HEAP32[_ >> 2] | 0;
							do
								if (C) {
									H = C + 4 | 0;
									w = (HEAP32[H >> 2] | 0) + -1 | 0;
									HEAP32[H >> 2] = w;
									if (w)
										break;
									lc[c[(HEAP32[C >> 2] | 0) + 8 >> 2] & 255](C);
									w = C + 8 | 0;
									H = (HEAP32[w >> 2] | 0) + -1 | 0;
									HEAP32[w >> 2] = H;
									if (H)
										break;
									lc[c[(HEAP32[C >> 2] | 0) + 12 >> 2] & 255](C)
								}
							while (0);
							kl(_)
						}
						zd(b, o);
						C = HEAP32[o + 12 >> 2] | 0;
						do
							if (C) {
								H = C + 4 | 0;
								w = (HEAP32[H >> 2] | 0) + -1 | 0;
								HEAP32[H >> 2] = w;
								if (w)
									break;
								lc[c[(HEAP32[C >> 2] | 0) + 8 >> 2] & 255](C);
								w = C + 8 | 0;
								H = (HEAP32[w >> 2] | 0) + -1 | 0;
								HEAP32[w >> 2] = H;
								if (H)
									break;
								lc[c[(HEAP32[C >> 2] | 0) + 12 >> 2] & 255](C)
							}
						while (0);
						C = HEAP32[o >> 2] | 0;
						if (!C)
							break;
						H = C + 4 | 0;
						w = (HEAP32[H >> 2] | 0) + -1 | 0;
						HEAP32[H >> 2] = w;
						if (w)
							break;
						lc[c[(HEAP32[C >> 2] | 0) + 8 >> 2] & 255](C);
						w = C + 8 | 0;
						H = (HEAP32[w >> 2] | 0) + -1 | 0;
						HEAP32[w >> 2] = H;
						if (H)
							break;
						lc[c[(HEAP32[C >> 2] | 0) + 12 >> 2] & 255](C);
						break
					}
					if ((y | 0) != (HEAP32[2144] | 0)) {
						if ((y | 0) != (HEAP32[2142] | 0)) {
							D = 161;
							break
						}
						C = HEAP32[h + 8 >> 2] | 0;
						H = h + 4 | 0;
						w = (HEAP32[HEAP32[H >> 2] >> 2] | 0) - C | 0;
						Mj(r, w + 12 | 0);
						J = r + 4 | 0;
						I = r + 8 | 0;
						a[(c[(HEAP32[J >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[I >> 2] | 0) >> 0] = 30;
						v = (HEAP32[I >> 2] | 0) + 1 | 0;
						HEAP32[I >> 2] = v;
						a[(c[(HEAP32[J >> 2] | 0) + 4 >> 2] | 0) + v >> 0] = e;
						v = (HEAP32[I >> 2] | 0) + 1 | 0;
						HEAP32[I >> 2] = v;
						g = jy(f | 0) | 0;
						G = (c[(HEAP32[J >> 2] | 0) + 4 >> 2] | 0) + v | 0;
						HEAP8[G >> 0] = g;
						HEAP8[G + 1 >> 0] = g >> 8;
						HEAP8[G + 2 >> 0] = g >> 16;
						HEAP8[G + 3 >> 0] = g >> 24;
						g = (HEAP32[I >> 2] | 0) + 4 | 0;
						HEAP32[I >> 2] = g;
						a[(c[(HEAP32[J >> 2] | 0) + 4 >> 2] | 0) + g >> 0] = j & 1;
						g = (HEAP32[I >> 2] | 0) + 1 | 0;
						HEAP32[I >> 2] = g;
						a[(c[(HEAP32[J >> 2] | 0) + 4 >> 2] | 0) + g >> 0] = 0;
						g = (HEAP32[I >> 2] | 0) + 1 | 0;
						HEAP32[I >> 2] = g;
						G = jy(w | 0) | 0;
						v = (c[(HEAP32[J >> 2] | 0) + 4 >> 2] | 0) + g | 0;
						HEAP8[v >> 0] = G;
						HEAP8[v + 1 >> 0] = G >> 8;
						HEAP8[v + 2 >> 0] = G >> 16;
						HEAP8[v + 3 >> 0] = G >> 24;
						HEAP32[I >> 2] = (HEAP32[I >> 2] | 0) + 4;
						I = HEAP32[H >> 2] | 0;
						if (!I)
							fa = 0;
						else
							fa = HEAP32[I + 4 >> 2] | 0;
						Ij(r, fa, C, w);
						w = HEAP32[h + 12 >> 2] | 0;
						if (((w | 0) != 0 ? (C = w + 4 | 0, I = (HEAP32[C >> 2] | 0) + -1 | 0, HEAP32[C >> 2] = I, (I | 0) == 0) : 0) ? (lc[c[(HEAP32[w >> 2] | 0) + 8 >> 2] & 255](w), I = w + 8 | 0, C = (HEAP32[I >> 2] | 0) + -1 | 0, HEAP32[I >> 2] = C, (C | 0) == 0) : 0)
							lc[c[(HEAP32[w >> 2] | 0) + 12 >> 2] & 255](w);
						w = HEAP32[h >> 2] | 0;
						if (((w | 0) != 0 ? (C = w + 4 | 0, I = (HEAP32[C >> 2] | 0) + -1 | 0, HEAP32[C >> 2] = I, (I | 0) == 0) : 0) ? (lc[c[(HEAP32[w >> 2] | 0) + 8 >> 2] & 255](w), I = w + 8 | 0, C = (HEAP32[I >> 2] | 0) + -1 | 0, HEAP32[I >> 2] = C, (C | 0) == 0) : 0)
							lc[c[(HEAP32[w >> 2] | 0) + 12 >> 2] & 255](w);
						kl(h);
						zd(b, r);
						w = HEAP32[r + 12 >> 2] | 0;
						if (((w | 0) != 0 ? (C = w + 4 | 0, I = (HEAP32[C >> 2] | 0) + -1 | 0, HEAP32[C >> 2] = I, (I | 0) == 0) : 0) ? (lc[c[(HEAP32[w >> 2] | 0) + 8 >> 2] & 255](w), I = w + 8 | 0, C = (HEAP32[I >> 2] | 0) + -1 | 0, HEAP32[I >> 2] = C, (C | 0) == 0) : 0)
							lc[c[(HEAP32[w >> 2] | 0) + 12 >> 2] & 255](w);
						w = HEAP32[r >> 2] | 0;
						if (!w)
							break;
						C = w + 4 | 0;
						I = (HEAP32[C >> 2] | 0) + -1 | 0;
						HEAP32[C >> 2] = I;
						if (I)
							break;
						lc[c[(HEAP32[w >> 2] | 0) + 8 >> 2] & 255](w);
						I = w + 8 | 0;
						C = (HEAP32[I >> 2] | 0) + -1 | 0;
						HEAP32[I >> 2] = C;
						if (C)
							break;
						lc[c[(HEAP32[w >> 2] | 0) + 12 >> 2] & 255](w);
						break
					}
					w = h + 4 | 0;
					C = h + 8 | 0;
					I = HEAP32[C >> 2] | 0;
					H = HEAP32[w >> 2] | 0;
					G = I + 2 | 0;
					HEAP32[C >> 2] = G;
					v = HEAP32[H + 4 >> 2] | 0;
					H = HEAP8[v + (I + 1) >> 0] | 0;
					I = H & 255;
					a: do
						if (!(H << 24 >> 24))
							ga = 0;
						else {
							g = p + 8 | 0;
							J = l + 4 | 0;
							t = l + 44 | 0;
							F = p + 12 | 0;
							E = v;
							z = G;
							B = 0;
							u = 0;
							while (1) {
								A = E + z | 0;
								HEAP32[C >> 2] = z + 4;
								K = jy(HEAPU8[A >> 0] | HEAPU8[A + 1 >> 0] << 8 | HEAPU8[A + 2 >> 0] << 16 | HEAPU8[A + 3 >> 0] << 24 | 0) | 0;
								Mj(p, K);
								Pj(h, p, K);
								HEAP32[g >> 2] = 0;
								vg(l);
								b: do
									if (yg(l, p) | 0) {
										if (!B) {
											K = HEAP32[l >> 2] | 0;
											A = HEAP32[J >> 2] | 0;
											L = 0;
											Y = 0;
											do {
												L = (da(A >>> Y << 2, K >>> Y) | 0) + L | 0;
												Y = Y + 1 | 0
											} while ((Y | 0) < (I | 0));
											Y = il(20) | 0;
											Mj(Y, L + 9 | 0);
											ha = Y + 4 | 0;
											ia = Y + 8 | 0;
											a[(c[(HEAP32[ha >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[ia >> 2] | 0) >> 0] = H;
											ja = (HEAP32[ia >> 2] | 0) + 1 | 0;
											HEAP32[ia >> 2] = ja;
											ka = jy(K | 0) | 0;
											la = (c[(HEAP32[ha >> 2] | 0) + 4 >> 2] | 0) + ja | 0;
											HEAP8[la >> 0] = ka;
											HEAP8[la + 1 >> 0] = ka >> 8;
											HEAP8[la + 2 >> 0] = ka >> 16;
											HEAP8[la + 3 >> 0] = ka >> 24;
											ka = (HEAP32[ia >> 2] | 0) + 4 | 0;
											HEAP32[ia >> 2] = ka;
											la = jy(A | 0) | 0;
											ja = (c[(HEAP32[ha >> 2] | 0) + 4 >> 2] | 0) + ka | 0;
											HEAP8[ja >> 0] = la;
											HEAP8[ja + 1 >> 0] = la >> 8;
											HEAP8[ja + 2 >> 0] = la >> 16;
											HEAP8[ja + 3 >> 0] = la >> 24;
											HEAP32[ia >> 2] = (HEAP32[ia >> 2] | 0) + 4;
											ma = Y
										} else
											ma = u;
										if (!ma) {
											na = 1;
											oa = 0
										} else {
											Ij(ma, HEAP32[t >> 2] | 0, 0, da(HEAP32[l >> 2] << 2, HEAP32[J >> 2] | 0) | 0);
											na = 1;
											oa = ma
										}
									} else if (!u) {
										na = 0;
										oa = 0
									} else {
										Y = u + 8 | 0;
										ia = u + 4 | 0;
										la = HEAP32[Y >> 2] | 0;
										while (1) {
											ja = HEAP32[ia >> 2] | 0;
											if (!ja)
												pa = 0;
											else
												pa = HEAP32[ja >> 2] | 0;
											if (la >>> 0 >= pa >>> 0) {
												na = 0;
												oa = u;
												break b
											}
											a[(HEAP32[ja + 4 >> 2] | 0) + la >> 0] = 0;
											ja = (HEAP32[Y >> 2] | 0) + 1 | 0;
											HEAP32[Y >> 2] = ja;
											la = ja
										}
									}
								while (0);
								la = HEAP32[t >> 2] | 0;
								if (la)
									ll(la);
								la = HEAP32[F >> 2] | 0;
								if (((la | 0) != 0 ? (Y = la + 4 | 0, ia = (HEAP32[Y >> 2] | 0) + -1 | 0, HEAP32[Y >> 2] = ia, (ia | 0) == 0) : 0) ? (lc[c[(HEAP32[la >> 2] | 0) + 8 >> 2] & 255](la), ia = la + 8 | 0, Y = (HEAP32[ia >> 2] | 0) + -1 | 0, HEAP32[ia >> 2] = Y, (Y | 0) == 0) : 0)
									lc[c[(HEAP32[la >> 2] | 0) + 12 >> 2] & 255](la);
								la = HEAP32[p >> 2] | 0;
								do
									if ((la | 0) != 0 ? (Y = la + 4 | 0, ia = (HEAP32[Y >> 2] | 0) + -1 | 0, HEAP32[Y >> 2] = ia, (ia | 0) == 0) : 0) {
										lc[c[(HEAP32[la >> 2] | 0) + 8 >> 2] & 255](la);
										ia = la + 8 | 0;
										Y = (HEAP32[ia >> 2] | 0) + -1 | 0;
										HEAP32[ia >> 2] = Y;
										if (Y)
											break;
										lc[c[(HEAP32[la >> 2] | 0) + 12 >> 2] & 255](la)
									}
								while (0);
								la = B + 1 | 0;
								if (!(na & (la | 0) < (I | 0))) {
									ga = oa;
									break a
								}
								E = HEAP32[(HEAP32[w >> 2] | 0) + 4 >> 2] | 0;
								z = HEAP32[C >> 2] | 0;
								B = la;
								u = oa
							}
						}
					while (0);
					C = HEAP32[h + 12 >> 2] | 0;
					if (((C | 0) != 0 ? (w = C + 4 | 0, I = (HEAP32[w >> 2] | 0) + -1 | 0, HEAP32[w >> 2] = I, (I | 0) == 0) : 0) ? (lc[c[(HEAP32[C >> 2] | 0) + 8 >> 2] & 255](C), I = C + 8 | 0, w = (HEAP32[I >> 2] | 0) + -1 | 0, HEAP32[I >> 2] = w, (w | 0) == 0) : 0)
						lc[c[(HEAP32[C >> 2] | 0) + 12 >> 2] & 255](C);
					C = HEAP32[h >> 2] | 0;
					if (((C | 0) != 0 ? (w = C + 4 | 0, I = (HEAP32[w >> 2] | 0) + -1 | 0, HEAP32[w >> 2] = I, (I | 0) == 0) : 0) ? (lc[c[(HEAP32[C >> 2] | 0) + 8 >> 2] & 255](C), I = C + 8 | 0, w = (HEAP32[I >> 2] | 0) + -1 | 0, HEAP32[I >> 2] = w, (w | 0) == 0) : 0)
						lc[c[(HEAP32[C >> 2] | 0) + 12 >> 2] & 255](C);
					kl(h);
					if (!ga) {
						Pe(b, e, f, j, 3);
						break
					}
					C = ga + 4 | 0;
					w = HEAP32[C >> 2] | 0;
					if (!w)
						qa = 12;
					else
						qa = (HEAP32[w >> 2] | 0) + 12 | 0;
					Mj(q, qa);
					w = q + 4 | 0;
					I = q + 8 | 0;
					a[(c[(HEAP32[w >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[I >> 2] | 0) >> 0] = 30;
					H = (HEAP32[I >> 2] | 0) + 1 | 0;
					HEAP32[I >> 2] = H;
					a[(c[(HEAP32[w >> 2] | 0) + 4 >> 2] | 0) + H >> 0] = e;
					H = (HEAP32[I >> 2] | 0) + 1 | 0;
					HEAP32[I >> 2] = H;
					G = jy(f | 0) | 0;
					v = (c[(HEAP32[w >> 2] | 0) + 4 >> 2] | 0) + H | 0;
					HEAP8[v >> 0] = G;
					HEAP8[v + 1 >> 0] = G >> 8;
					HEAP8[v + 2 >> 0] = G >> 16;
					HEAP8[v + 3 >> 0] = G >> 24;
					G = (HEAP32[I >> 2] | 0) + 4 | 0;
					HEAP32[I >> 2] = G;
					a[(c[(HEAP32[w >> 2] | 0) + 4 >> 2] | 0) + G >> 0] = j & 1;
					G = (HEAP32[I >> 2] | 0) + 1 | 0;
					HEAP32[I >> 2] = G;
					a[(c[(HEAP32[w >> 2] | 0) + 4 >> 2] | 0) + G >> 0] = 0;
					G = (HEAP32[I >> 2] | 0) + 1 | 0;
					HEAP32[I >> 2] = G;
					v = HEAP32[C >> 2] | 0;
					if (!v)
						ra = 0;
					else
						ra = HEAP32[v >> 2] | 0;
					v = jy(ra | 0) | 0;
					H = (c[(HEAP32[w >> 2] | 0) + 4 >> 2] | 0) + G | 0;
					HEAP8[H >> 0] = v;
					HEAP8[H + 1 >> 0] = v >> 8;
					HEAP8[H + 2 >> 0] = v >> 16;
					HEAP8[H + 3 >> 0] = v >> 24;
					HEAP32[I >> 2] = (HEAP32[I >> 2] | 0) + 4;
					I = HEAP32[C >> 2] | 0;
					if (!I) {
						sa = 0;
						ta = 0
					} else {
						sa = HEAP32[I >> 2] | 0;
						ta = HEAP32[I + 4 >> 2] | 0
					}
					Ij(q, ta, 0, sa);
					zd(b, q);
					I = HEAP32[q + 12 >> 2] | 0;
					do
						if (I) {
							C = I + 4 | 0;
							v = (HEAP32[C >> 2] | 0) + -1 | 0;
							HEAP32[C >> 2] = v;
							if (v)
								break;
							lc[c[(HEAP32[I >> 2] | 0) + 8 >> 2] & 255](I);
							v = I + 8 | 0;
							C = (HEAP32[v >> 2] | 0) + -1 | 0;
							HEAP32[v >> 2] = C;
							if (C)
								break;
							lc[c[(HEAP32[I >> 2] | 0) + 12 >> 2] & 255](I)
						}
					while (0);
					I = HEAP32[q >> 2] | 0;
					if (I) {
						C = I + 4 | 0;
						v = (HEAP32[C >> 2] | 0) + -1 | 0;
						HEAP32[C >> 2] = v;
						if (v)
							break;
						lc[c[(HEAP32[I >> 2] | 0) + 8 >> 2] & 255](I);
						v = I + 8 | 0;
						C = (HEAP32[v >> 2] | 0) + -1 | 0;
						HEAP32[v >> 2] = C;
						if (C)
							break;
						lc[c[(HEAP32[I >> 2] | 0) + 12 >> 2] & 255](I)
					}
				} else {
					I = HEAP32[h + 4 >> 2] | 0;
					if (!I)
						ua = 0;
					else
						ua = HEAP32[I >> 2] | 0;
					ne(m, h, 0, ua, x);
					D = 161
				}
			while (0);
			if ((D | 0) == 161) {
				D = m + 4 | 0;
				x = HEAP32[D >> 2] | 0;
				if (!x)
					va = 12;
				else
					va = (HEAP32[x >> 2] | 0) + 12 | 0;
				Mj(s, va);
				va = s + 4 | 0;
				x = s + 8 | 0;
				a[(c[(HEAP32[va >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[x >> 2] | 0) >> 0] = 30;
				ua = (HEAP32[x >> 2] | 0) + 1 | 0;
				HEAP32[x >> 2] = ua;
				a[(c[(HEAP32[va >> 2] | 0) + 4 >> 2] | 0) + ua >> 0] = e;
				e = (HEAP32[x >> 2] | 0) + 1 | 0;
				HEAP32[x >> 2] = e;
				ua = jy(f | 0) | 0;
				f = (c[(HEAP32[va >> 2] | 0) + 4 >> 2] | 0) + e | 0;
				HEAP8[f >> 0] = ua;
				HEAP8[f + 1 >> 0] = ua >> 8;
				HEAP8[f + 2 >> 0] = ua >> 16;
				HEAP8[f + 3 >> 0] = ua >> 24;
				ua = (HEAP32[x >> 2] | 0) + 4 | 0;
				HEAP32[x >> 2] = ua;
				a[(c[(HEAP32[va >> 2] | 0) + 4 >> 2] | 0) + ua >> 0] = j & 1;
				j = (HEAP32[x >> 2] | 0) + 1 | 0;
				HEAP32[x >> 2] = j;
				a[(c[(HEAP32[va >> 2] | 0) + 4 >> 2] | 0) + j >> 0] = 0;
				j = (HEAP32[x >> 2] | 0) + 1 | 0;
				HEAP32[x >> 2] = j;
				ua = HEAP32[D >> 2] | 0;
				if (!ua)
					wa = 0;
				else
					wa = HEAP32[ua >> 2] | 0;
				ua = jy(wa | 0) | 0;
				wa = (c[(HEAP32[va >> 2] | 0) + 4 >> 2] | 0) + j | 0;
				HEAP8[wa >> 0] = ua;
				HEAP8[wa + 1 >> 0] = ua >> 8;
				HEAP8[wa + 2 >> 0] = ua >> 16;
				HEAP8[wa + 3 >> 0] = ua >> 24;
				HEAP32[x >> 2] = (HEAP32[x >> 2] | 0) + 4;
				x = HEAP32[D >> 2] | 0;
				if (!x) {
					xa = 0;
					ya = 0
				} else {
					xa = HEAP32[x >> 2] | 0;
					ya = HEAP32[x + 4 >> 2] | 0
				}
				Ij(s, ya, 0, xa);
				xa = HEAP32[h + 12 >> 2] | 0;
				if (((xa | 0) != 0 ? (ya = xa + 4 | 0, x = (HEAP32[ya >> 2] | 0) + -1 | 0, HEAP32[ya >> 2] = x, (x | 0) == 0) : 0) ? (lc[c[(HEAP32[xa >> 2] | 0) + 8 >> 2] & 255](xa), x = xa + 8 | 0, ya = (HEAP32[x >> 2] | 0) + -1 | 0, HEAP32[x >> 2] = ya, (ya | 0) == 0) : 0)
					lc[c[(HEAP32[xa >> 2] | 0) + 12 >> 2] & 255](xa);
				xa = HEAP32[h >> 2] | 0;
				if (((xa | 0) != 0 ? (ya = xa + 4 | 0, x = (HEAP32[ya >> 2] | 0) + -1 | 0, HEAP32[ya >> 2] = x, (x | 0) == 0) : 0) ? (lc[c[(HEAP32[xa >> 2] | 0) + 8 >> 2] & 255](xa), x = xa + 8 | 0, ya = (HEAP32[x >> 2] | 0) + -1 | 0, HEAP32[x >> 2] = ya, (ya | 0) == 0) : 0)
					lc[c[(HEAP32[xa >> 2] | 0) + 12 >> 2] & 255](xa);
				kl(h);
				zd(b, s);
				b = HEAP32[s + 12 >> 2] | 0;
				if (((b | 0) != 0 ? (h = b + 4 | 0, xa = (HEAP32[h >> 2] | 0) + -1 | 0, HEAP32[h >> 2] = xa, (xa | 0) == 0) : 0) ? (lc[c[(HEAP32[b >> 2] | 0) + 8 >> 2] & 255](b), xa = b + 8 | 0, h = (HEAP32[xa >> 2] | 0) + -1 | 0, HEAP32[xa >> 2] = h, (h | 0) == 0) : 0)
					lc[c[(HEAP32[b >> 2] | 0) + 12 >> 2] & 255](b);
				b = HEAP32[s >> 2] | 0;
				if (((b | 0) != 0 ? (s = b + 4 | 0, h = (HEAP32[s >> 2] | 0) + -1 | 0, HEAP32[s >> 2] = h, (h | 0) == 0) : 0) ? (lc[c[(HEAP32[b >> 2] | 0) + 8 >> 2] & 255](b), h = b + 8 | 0, s = (HEAP32[h >> 2] | 0) + -1 | 0, HEAP32[h >> 2] = s, (s | 0) == 0) : 0)
					lc[c[(HEAP32[b >> 2] | 0) + 12 >> 2] & 255](b)
			}
			b = HEAP32[m + 12 >> 2] | 0;
			if (((b | 0) != 0 ? (s = b + 4 | 0, h = (HEAP32[s >> 2] | 0) + -1 | 0, HEAP32[s >> 2] = h, (h | 0) == 0) : 0) ? (lc[c[(HEAP32[b >> 2] | 0) + 8 >> 2] & 255](b), h = b + 8 | 0, s = (HEAP32[h >> 2] | 0) + -1 | 0, HEAP32[h >> 2] = s, (s | 0) == 0) : 0)
				lc[c[(HEAP32[b >> 2] | 0) + 12 >> 2] & 255](b);
			b = HEAP32[m >> 2] | 0;
			if (!b) {
				i = k;
				return
			}
			m = b + 4 | 0;
			s = (HEAP32[m >> 2] | 0) + -1 | 0;
			HEAP32[m >> 2] = s;
			if (s) {
				i = k;
				return
			}
			lc[c[(HEAP32[b >> 2] | 0) + 8 >> 2] & 255](b);
			s = b + 8 | 0;
			m = (HEAP32[s >> 2] | 0) + -1 | 0;
			HEAP32[s >> 2] = m;
			if (m) {
				i = k;
				return
			}
			lc[c[(HEAP32[b >> 2] | 0) + 12 >> 2] & 255](b);
			i = k;
			return
		}
		function Pe(b, d, e, f, g) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0;
			h = i;
			i = i + 32 | 0;
			j = h;
			Mj(j, 8);
			k = j + 4 | 0;
			l = j + 8 | 0;
			a[(c[(HEAP32[k >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[l >> 2] | 0) >> 0] = 30;
			m = (HEAP32[l >> 2] | 0) + 1 | 0;
			HEAP32[l >> 2] = m;
			a[(c[(HEAP32[k >> 2] | 0) + 4 >> 2] | 0) + m >> 0] = d;
			d = (HEAP32[l >> 2] | 0) + 1 | 0;
			HEAP32[l >> 2] = d;
			m = jy(e | 0) | 0;
			e = (c[(HEAP32[k >> 2] | 0) + 4 >> 2] | 0) + d | 0;
			HEAP8[e >> 0] = m;
			HEAP8[e + 1 >> 0] = m >> 8;
			HEAP8[e + 2 >> 0] = m >> 16;
			HEAP8[e + 3 >> 0] = m >> 24;
			m = (HEAP32[l >> 2] | 0) + 4 | 0;
			HEAP32[l >> 2] = m;
			a[(c[(HEAP32[k >> 2] | 0) + 4 >> 2] | 0) + m >> 0] = f & 1;
			f = (HEAP32[l >> 2] | 0) + 1 | 0;
			HEAP32[l >> 2] = f;
			a[(c[(HEAP32[k >> 2] | 0) + 4 >> 2] | 0) + f >> 0] = g;
			HEAP32[l >> 2] = (HEAP32[l >> 2] | 0) + 1;
			zd(b, j);
			b = HEAP32[j + 12 >> 2] | 0;
			if (((b | 0) != 0 ? (l = b + 4 | 0, g = (HEAP32[l >> 2] | 0) + -1 | 0, HEAP32[l >> 2] = g, (g | 0) == 0) : 0) ? (lc[c[(HEAP32[b >> 2] | 0) + 8 >> 2] & 255](b), g = b + 8 | 0, l = (HEAP32[g >> 2] | 0) + -1 | 0, HEAP32[g >> 2] = l, (l | 0) == 0) : 0)
				lc[c[(HEAP32[b >> 2] | 0) + 12 >> 2] & 255](b);
			b = HEAP32[j >> 2] | 0;
			if (!b) {
				i = h;
				return
			}
			j = b + 4 | 0;
			l = (HEAP32[j >> 2] | 0) + -1 | 0;
			HEAP32[j >> 2] = l;
			if (l) {
				i = h;
				return
			}
			lc[c[(HEAP32[b >> 2] | 0) + 8 >> 2] & 255](b);
			l = b + 8 | 0;
			j = (HEAP32[l >> 2] | 0) + -1 | 0;
			HEAP32[l >> 2] = j;
			if (j) {
				i = h;
				return
			}
			lc[c[(HEAP32[b >> 2] | 0) + 12 >> 2] & 255](b);
			i = h;
			return
		}
		function Qe(b, d) {
			b = b | 0;
			d = +d;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0;
			e = i;
			f = Ek() | 0;
			g = H;
			h = Cy(f | 0, g | 0, 1e6, 0) | 0;
			j = H;
			k = Cy(f | 0, g | 0, 1e9, 0) | 0;
			g = H;
			f = b + 200 | 0;
			l = f;
			if (!((HEAP32[l >> 2] | 0) == (k | 0) ? (HEAP32[l + 4 >> 2] | 0) == (g | 0) : 0) ? (l = b + 212 | 0, HEAP32[b + 208 >> 2] = HEAP32[l >> 2], HEAP32[l >> 2] = 0, l = f, HEAP32[l >> 2] = k, HEAP32[l + 4 >> 2] = g, l = b + 216 | 0, f = l, m = HEAP32[f >> 2] | 0, n = HEAP32[f + 4 >> 2] | 0, f = ky(k | 0, g | 0, -10, -1) | 0, o = H, n >>> 0 < o >>> 0 | (n | 0) == (o | 0) & m >>> 0 < f >>> 0) : 0) {
				f = b + 224 | 0;
				HEAP32[f >> 2] = k;
				HEAP32[f + 4 >> 2] = g;
				f = b + 232 | 0;
				HEAP32[f + 0 >> 2] = 0;
				HEAP32[f + 4 >> 2] = 0;
				HEAP32[f + 8 >> 2] = 0;
				HEAP32[f + 12 >> 2] = 0;
				f = l;
				HEAP32[f >> 2] = k;
				HEAP32[f + 4 >> 2] = g
			}
			g = b + 116 | 0;
			do
				if ((HEAP8[b + 189 >> 0] | 0) != 0 ? (f = HEAP32[g >> 2] | 0, (f | 0) != 0) : 0) {
					k = HEAP32[f >> 2] | 0;
					if (!k) {
						Re(b, (HEAP32[b + 248 >> 2] | 0) + 1 | 0, -1);
						break
					} else if ((k | 0) != 1)
						break;
					if ((HEAP32[f + 4 >> 2] | 0) != -1 ? (HEAP8[f + 32 >> 0] | 0) != 0 : 0)
						HEAP32[f >> 2] = 2
				}
			while (0);
			f = HEAP32[g >> 2] | 0;
			a: do
				if (!f)
					p = 21;
				else {
					g = HEAP32[f >> 2] | 0;
					b: do
						if (!g) {
							p = 21;
							break a
						} else if ((g | 0) == 1) {
							do
								if ((HEAP32[f + 4 >> 2] | 0) != -1)
									if (!(HEAP8[f + 32 >> 0] | 0))
										if (!g) {
											p = 21;
											break a
										} else if ((g | 0) == 1)
											break;
										else
											break a;
									else {
										HEAP32[f >> 2] = 2;
										break b
									}
							while (0);
							if ((HEAP32[f + 4 >> 2] | 0) == -1)
								break a;
							if (!(HEAP8[f + 32 >> 0] | 0))
								break a;
							HEAP32[f >> 2] = 2;
							break a
						} else if ((g | 0) != 2)
							break a;
					while (0);
					Se(b)
				}
			while (0);
			if ((p | 0) == 21)
				Te(b);
			se(HEAP32[b + 124 >> 2] | 0) | 0;
			p = b + 212 | 0;
			HEAP32[p >> 2] = (HEAP32[p >> 2] | 0) + 1;
			p = Ek() | 0;
			f = Cy(p | 0, H | 0, 1e6, 0) | 0;
			p = ly(f | 0, H | 0, h | 0, j | 0) | 0;
			j = b + 240 | 0;
			b = j;
			h = ky(p | 0, H | 0, HEAP32[b >> 2] | 0, HEAP32[b + 4 >> 2] | 0) | 0;
			b = j;
			HEAP32[b >> 2] = h;
			HEAP32[b + 4 >> 2] = H;
			i = e;
			return
		}
		function Re(b, d, e) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0;
			f = i;
			i = i + 32 | 0;
			g = f;
			HEAP32[b + 248 >> 2] = d;
			Mj(g, 9);
			h = g + 4 | 0;
			j = g + 8 | 0;
			a[(c[(HEAP32[h >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[j >> 2] | 0) >> 0] = 6;
			k = (HEAP32[j >> 2] | 0) + 1 | 0;
			HEAP32[j >> 2] = k;
			l = jy(d | 0) | 0;
			d = (c[(HEAP32[h >> 2] | 0) + 4 >> 2] | 0) + k | 0;
			HEAP8[d >> 0] = l;
			HEAP8[d + 1 >> 0] = l >> 8;
			HEAP8[d + 2 >> 0] = l >> 16;
			HEAP8[d + 3 >> 0] = l >> 24;
			l = (HEAP32[j >> 2] | 0) + 4 | 0;
			HEAP32[j >> 2] = l;
			d = jy(e | 0) | 0;
			e = (c[(HEAP32[h >> 2] | 0) + 4 >> 2] | 0) + l | 0;
			HEAP8[e >> 0] = d;
			HEAP8[e + 1 >> 0] = d >> 8;
			HEAP8[e + 2 >> 0] = d >> 16;
			HEAP8[e + 3 >> 0] = d >> 24;
			HEAP32[j >> 2] = (HEAP32[j >> 2] | 0) + 4;
			zd(b, g);
			b = HEAP32[g + 12 >> 2] | 0;
			if (((b | 0) != 0 ? (j = b + 4 | 0, d = (HEAP32[j >> 2] | 0) + -1 | 0, HEAP32[j >> 2] = d, (d | 0) == 0) : 0) ? (lc[c[(HEAP32[b >> 2] | 0) + 8 >> 2] & 255](b), d = b + 8 | 0, j = (HEAP32[d >> 2] | 0) + -1 | 0, HEAP32[d >> 2] = j, (j | 0) == 0) : 0)
				lc[c[(HEAP32[b >> 2] | 0) + 12 >> 2] & 255](b);
			b = HEAP32[g >> 2] | 0;
			if (!b) {
				i = f;
				return
			}
			g = b + 4 | 0;
			j = (HEAP32[g >> 2] | 0) + -1 | 0;
			HEAP32[g >> 2] = j;
			if (j) {
				i = f;
				return
			}
			lc[c[(HEAP32[b >> 2] | 0) + 8 >> 2] & 255](b);
			j = b + 8 | 0;
			g = (HEAP32[j >> 2] | 0) + -1 | 0;
			HEAP32[j >> 2] = g;
			if (g) {
				i = f;
				return
			}
			lc[c[(HEAP32[b >> 2] | 0) + 12 >> 2] & 255](b);
			i = f;
			return
		}
		function Se(b) {
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0;
			d = i;
			e = b + 252 | 0;
			f = HEAP32[e >> 2] | 0;
			if ((f | 0) == 1) {
				g = b + 116 | 0;
				h = HEAP32[g >> 2] | 0;
				j = HEAP32[h >> 2] | 0;
				if ((j | 0) == 1)
					if ((HEAP32[h + 4 >> 2] | 0) != -1 ? (HEAP8[h + 32 >> 0] | 0) != 0 : 0)
						HEAP32[h >> 2] = 2;
					else
						k = 24;
				else if ((j | 0) != 2)
					k = 24;
				if ((k | 0) == 24) {
					HEAP32[e >> 2] = 0;
					HEAP8[b + 188 >> 0] = 1;
					i = d;
					return
				}
				j = b + 260 | 0;
				l = HEAP32[j >> 2] | 0;
				if (!l)
					m = 0;
				else
					m = HEAP32[l + 4 >> 2] | 0;
				l = b + 264 | 0;
				n = Ji(h, m + (HEAP32[l >> 2] | 0) | 0, 1) | 0;
				HEAP32[l >> 2] = (HEAP32[l >> 2] | 0) + n;
				if ((n | 0) != 1) {
					i = d;
					return
				}
				n = HEAP32[j >> 2] | 0;
				HEAP32[l >> 2] = 1;
				l = HEAP8[HEAP32[n + 4 >> 2] >> 0] | 0;
				if (!(l << 24 >> 24)) {
					HEAP32[e >> 2] = 2;
					i = d;
					return
				}
				n = l & 255;
				l = HEAP32[g >> 2] | 0;
				Ui(l + 4 | 0, 0) | 0;
				Kj(l + 76 | 0);
				HEAP32[l >> 2] = 0;
				l = b + 112 | 0;
				j = HEAP32[l >> 2] | 0;
				HEAP32[l >> 2] = 0;
				HEAP32[g >> 2] = 0;
				if (((j | 0) != 0 ? (g = j + 4 | 0, l = (HEAP32[g >> 2] | 0) + -1 | 0, HEAP32[g >> 2] = l, (l | 0) == 0) : 0) ? (lc[c[(HEAP32[j >> 2] | 0) + 8 >> 2] & 255](j), l = j + 8 | 0, g = (HEAP32[l >> 2] | 0) + -1 | 0, HEAP32[l >> 2] = g, (g | 0) == 0) : 0)
					lc[c[(HEAP32[j >> 2] | 0) + 12 >> 2] & 255](j);
				HEAP32[e >> 2] = 0;
				HEAP8[b + 188 >> 0] = 1;
				Re(b, (HEAP32[b + 248 >> 2] | 0) + 1 | 0, n);
				i = d;
				return
			} else if (!f) {
				n = b + 116 | 0;
				j = HEAP32[n >> 2] | 0;
				g = HEAP32[j >> 2] | 0;
				if ((g | 0) == 1)
					k = 3;
				else if ((g | 0) != 2) {
					i = d;
					return
				}
				do
					if ((k | 0) == 3) {
						if ((HEAP32[j + 4 >> 2] | 0) == -1) {
							i = d;
							return
						}
						if (!(HEAP8[j + 32 >> 0] | 0)) {
							i = d;
							return
						} else {
							HEAP32[j >> 2] = 2;
							break
						}
					}
				while (0);
				g = HEAP32[b + 168 >> 2] | 0;
				if ((g | 0) != 0 ? (l = HEAP32[g >> 2] | 0, (l | 0) != 0) : 0) {
					Ki(j, HEAP32[g + 4 >> 2] | 0, l) | 0;
					Li(HEAP32[n >> 2] | 0)
				}
				HEAP32[e >> 2] = 1;
				i = d;
				return
			} else if ((f | 0) == 2) {
				f = b + 112 | 0;
				n = b + 116 | 0;
				l = HEAP32[n >> 2] | 0;
				g = HEAP32[l >> 2] | 0;
				if ((g | 0) == 1)
					if ((HEAP32[l + 4 >> 2] | 0) != -1 ? (HEAP8[l + 32 >> 0] | 0) != 0 : 0)
						HEAP32[l >> 2] = 2;
					else
						k = 38;
				else if ((g | 0) != 2)
					k = 38;
				if ((k | 0) == 38) {
					HEAP32[e >> 2] = 0;
					HEAP8[b + 188 >> 0] = 1;
					i = d;
					return
				}
				k = b + 184 | 0;
				g = HEAP32[k >> 2] | 0;
				j = g << 2;
				m = l + 4 | 0;
				h = l + 124 | 0;
				o = Vi(m, h) | 0;
				if (!(HEAP32[h >> 2] | 0))
					p = o;
				else {
					Ui(m, 0) | 0;
					Kj(l + 76 | 0);
					HEAP32[l >> 2] = 0;
					p = 0
				}
				if ((p | 0) < (j | 0)) {
					i = d;
					return
				}
				if ((g | 0) > 0) {
					g = b + 264 | 0;
					HEAP32[g >> 2] = 0;
					p = HEAP32[b + 260 >> 2] | 0;
					if (!p)
						q = 0;
					else
						q = HEAP32[p + 4 >> 2] | 0;
					Ji(HEAP32[n >> 2] | 0, q, j) | 0;
					HEAP32[g >> 2] = 0;
					j = HEAP32[k >> 2] | 0;
					if ((j | 0) > 0)
						HEAP32[g >> 2] = (j | 0) > 1 ? j << 2 : 4
				}
				ye(HEAP32[b + 120 >> 2] | 0, f, 0);
				HEAP32[e >> 2] = 3;
				HEAP8[b + 188 >> 0] = 0;
				HEAP8[b + 189 >> 0] = 0;
				Re(b, 0, 0);
				i = d;
				return
			} else {
				HEAP8[b + 188 >> 0] = (Be(HEAP32[b + 120 >> 2] | 0) | 0) & 1 ^ 1;
				i = d;
				return
			}
		}
		function Te(b) {
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0;
			d = i;
			e = Ek() | 0;
			f = Cy(e | 0, H | 0, 1e6, 0) | 0;
			e = H;
			g = b + 188 | 0;
			if ((HEAP8[g >> 0] | 0) != 0 ? (h = b + 192 | 0, j = h, k = HEAP32[j >> 2] | 0, l = HEAP32[j + 4 >> 2] | 0, j = ky(f | 0, e | 0, -1e3, -1) | 0, m = H, l >>> 0 < m >>> 0 | (l | 0) == (m | 0) & k >>> 0 < j >>> 0) : 0) {
				j = HEAP32[b + 128 >> 2] | 0;
				k = zx(4, 148) | 0;
				if (!k) {
					n = 0;
					o = 0
				} else {
					m = k + 20 | 0;
					Hi(m, j, 4194304, 10240, 1048576, 8192, 1);
					HEAP32[k + 4 >> 2] = 1;
					HEAP32[k + 8 >> 2] = 1;
					HEAP32[k >> 2] = 880;
					HEAP32[k + 12 >> 2] = 1;
					HEAP32[k + 16 >> 2] = m;
					n = k;
					o = m
				}
				m = b + 112 | 0;
				k = HEAP32[m >> 2] | 0;
				HEAP32[m >> 2] = n;
				n = b + 116 | 0;
				HEAP32[n >> 2] = o;
				if (((k | 0) != 0 ? (o = k + 4 | 0, m = (HEAP32[o >> 2] | 0) + -1 | 0, HEAP32[o >> 2] = m, (m | 0) == 0) : 0) ? (lc[c[(HEAP32[k >> 2] | 0) + 8 >> 2] & 255](k), m = k + 8 | 0, o = (HEAP32[m >> 2] | 0) + -1 | 0, HEAP32[m >> 2] = o, (o | 0) == 0) : 0)
					lc[c[(HEAP32[k >> 2] | 0) + 12 >> 2] & 255](k);
				k = h;
				HEAP32[k >> 2] = f;
				HEAP32[k + 4 >> 2] = e;
				HEAP8[g >> 0] = 0;
				HEAP32[b + 252 >> 2] = 0;
				HEAP8[b + 189 >> 0] = 1;
				g = HEAP32[n >> 2] | 0;
				do
					if ((HEAP32[g >> 2] | 0) == 1) {
						if ((HEAP32[g + 4 >> 2] | 0) != -1 ? (HEAP8[g + 32 >> 0] | 0) != 0 : 0) {
							HEAP32[g >> 2] = 2;
							break
						}
						if ((HEAP32[g + 4 >> 2] | 0) != -1 ? (HEAP8[g + 32 >> 0] | 0) != 0 : 0)
							HEAP32[g >> 2] = 2
					}
				while (0);
				if (!(HEAP32[g + 124 >> 2] | 0)) {
					i = d;
					return
				}
				Ui(g + 4 | 0, 0) | 0;
				Kj(g + 76 | 0);
				HEAP32[g >> 2] = 0;
				i = d;
				return
			}
			g = b + 116 | 0;
			if (!(HEAP32[g >> 2] | 0)) {
				i = d;
				return
			}
			n = b + 112 | 0;
			e = HEAP32[n >> 2] | 0;
			HEAP32[n >> 2] = 0;
			HEAP32[g >> 2] = 0;
			if (((e | 0) != 0 ? (g = e + 4 | 0, n = (HEAP32[g >> 2] | 0) + -1 | 0, HEAP32[g >> 2] = n, (n | 0) == 0) : 0) ? (lc[c[(HEAP32[e >> 2] | 0) + 8 >> 2] & 255](e), n = e + 8 | 0, g = (HEAP32[n >> 2] | 0) + -1 | 0, HEAP32[n >> 2] = g, (g | 0) == 0) : 0)
				lc[c[(HEAP32[e >> 2] | 0) + 12 >> 2] & 255](e);
			HEAP32[b + 252 >> 2] = 0;
			i = d;
			return
		}
		function Ue() {
			var b = 0,
			d = 0;
			b = i;
			if (HEAP8[728] | 0) {
				i = b;
				return
			}
			Yj(720);
			Sa(163, 720, o | 0) | 0;
			d = 728;
			HEAP32[d >> 2] = 1;
			HEAP32[d + 4 >> 2] = 0;
			i = b;
			return
		}
		function Ve() {
			var b = 0,
			d = 0;
			b = i;
			if (HEAP8[760] | 0) {
				i = b;
				return
			};
			HEAP32[184] = 0;
			HEAP32[185] = 0;
			HEAP32[186] = 0;
			HEAP32[187] = 0;
			HEAP32[188] = 0;
			HEAP32[189] = 0;
			hg(736, 256, 4);
			Sa(164, 736, o | 0) | 0;
			d = 760;
			HEAP32[d >> 2] = 1;
			HEAP32[d + 4 >> 2] = 0;
			i = b;
			return
		}
		function We() {
			var b = 0,
			d = 0;
			b = i;
			if (HEAP8[776] | 0) {
				i = b;
				return
			}
			Yj(768);
			Sa(163, 768, o | 0) | 0;
			d = 776;
			HEAP32[d >> 2] = 1;
			HEAP32[d + 4 >> 2] = 0;
			i = b;
			return
		}
		function Xe() {
			var b = 0,
			d = 0;
			b = i;
			if (HEAP8[808] | 0) {
				i = b;
				return
			};
			HEAP32[196] = 0;
			HEAP32[197] = 0;
			HEAP32[198] = 0;
			HEAP32[199] = 0;
			HEAP32[200] = 0;
			HEAP32[201] = 0;
			jg(784, 5120, 4);
			Sa(165, 784, o | 0) | 0;
			d = 808;
			HEAP32[d >> 2] = 1;
			HEAP32[d + 4 >> 2] = 0;
			i = b;
			return
		}
		function Ye() {
			var b = 0,
			d = 0;
			b = i;
			if (HEAP8[824] | 0) {
				i = b;
				return
			}
			HEAP32[204] = 0;
			HEAP32[205] = 0;
			Sa(166, 816, o | 0) | 0;
			d = 824;
			HEAP32[d >> 2] = 1;
			HEAP32[d + 4 >> 2] = 0;
			i = b;
			return
		}
		function Ze() {
			var a = 0,
			b = 0;
			a = i;
			i = i + 16 | 0;
			b = a;
			HEAP32[b + 0 >> 2] = 0;
			HEAP32[b + 4 >> 2] = 0;
			HEAP32[b + 8 >> 2] = 0;
			HEAP32[b + 12 >> 2] = 0;
			HEAP32[136] = 560;
			HEAP32[138] = 576;
			HEAP32[140] = HEAP32[b + 0 >> 2];
			HEAP32[141] = HEAP32[b + 4 >> 2];
			HEAP32[142] = HEAP32[b + 8 >> 2];
			HEAP32[143] = HEAP32[b + 12 >> 2];
			HEAP32[137] = 576;
			Sa(167, 544, o | 0) | 0;
			HEAP32[148] = 0;
			HEAP32[149] = 0;
			Sa(166, 592, o | 0) | 0;
			HEAP32[150] = 3343801;
			i = a;
			return
		}
		function _e(a, b) {
			a = a | 0;
			b = b | 0;
			var c = 0;
			a = i;
			c = vx(b) | 0;
			i = a;
			return c | 0
		}
		function $e(a, b) {
			a = a | 0;
			b = b | 0;
			a = i;
			wx(b);
			i = a;
			return
		}
		function af(a) {
			a = a | 0;
			var b = 0,
			d = 0,
			e = 0,
			f = 0;
			b = i;
			HEAP32[a >> 2] = 680;
			d = HEAP32[a + 296 >> 2] | 0;
			if ((d | 0) != (a + 280 | 0)) {
				if (d)
					lc[c[(HEAP32[d >> 2] | 0) + 20 >> 2] & 255](d)
			} else
				lc[c[(HEAP32[d >> 2] | 0) + 16 >> 2] & 255](d);
			d = HEAP32[a + 268 >> 2] | 0;
			if (((d | 0) != 0 ? (e = d + 4 | 0, f = (HEAP32[e >> 2] | 0) + -1 | 0, HEAP32[e >> 2] = f, (f | 0) == 0) : 0) ? (lc[c[(HEAP32[d >> 2] | 0) + 8 >> 2] & 255](d), f = d + 8 | 0, e = (HEAP32[f >> 2] | 0) + -1 | 0, HEAP32[f >> 2] = e, (e | 0) == 0) : 0)
				lc[c[(HEAP32[d >> 2] | 0) + 12 >> 2] & 255](d);
			d = HEAP32[a + 256 >> 2] | 0;
			if (((d | 0) != 0 ? (e = d + 4 | 0, f = (HEAP32[e >> 2] | 0) + -1 | 0, HEAP32[e >> 2] = f, (f | 0) == 0) : 0) ? (lc[c[(HEAP32[d >> 2] | 0) + 8 >> 2] & 255](d), f = d + 8 | 0, e = (HEAP32[f >> 2] | 0) + -1 | 0, HEAP32[f >> 2] = e, (e | 0) == 0) : 0)
				lc[c[(HEAP32[d >> 2] | 0) + 12 >> 2] & 255](d);
			d = HEAP32[a + 176 >> 2] | 0;
			if (((d | 0) != 0 ? (e = d + 4 | 0, f = (HEAP32[e >> 2] | 0) + -1 | 0, HEAP32[e >> 2] = f, (f | 0) == 0) : 0) ? (lc[c[(HEAP32[d >> 2] | 0) + 8 >> 2] & 255](d), f = d + 8 | 0, e = (HEAP32[f >> 2] | 0) + -1 | 0, HEAP32[f >> 2] = e, (e | 0) == 0) : 0)
				lc[c[(HEAP32[d >> 2] | 0) + 12 >> 2] & 255](d);
			d = HEAP32[a + 164 >> 2] | 0;
			if (((d | 0) != 0 ? (e = d + 4 | 0, f = (HEAP32[e >> 2] | 0) + -1 | 0, HEAP32[e >> 2] = f, (f | 0) == 0) : 0) ? (lc[c[(HEAP32[d >> 2] | 0) + 8 >> 2] & 255](d), f = d + 8 | 0, e = (HEAP32[f >> 2] | 0) + -1 | 0, HEAP32[f >> 2] = e, (e | 0) == 0) : 0)
				lc[c[(HEAP32[d >> 2] | 0) + 12 >> 2] & 255](d);
			d = HEAP32[a + 144 >> 2] | 0;
			if (!((d | 0) == 0 ? 1 : ((HEAP32[a + 152 >> 2] | 0) - d | 0) < 2))
				ll(d);
			d = HEAP32[a + 128 >> 2] | 0;
			if (!((d | 0) == 0 ? 1 : ((HEAP32[a + 136 >> 2] | 0) - d | 0) < 2))
				ll(d);
			d = a + 124 | 0;
			e = HEAP32[d >> 2] | 0;
			HEAP32[d >> 2] = 0;
			if (e) {
				_c(e);
				kl(e)
			}
			e = a + 120 | 0;
			d = HEAP32[e >> 2] | 0;
			HEAP32[e >> 2] = 0;
			if (d) {
				Yc(d);
				kl(d)
			}
			d = HEAP32[a + 112 >> 2] | 0;
			if (((d | 0) != 0 ? (e = d + 4 | 0, f = (HEAP32[e >> 2] | 0) + -1 | 0, HEAP32[e >> 2] = f, (f | 0) == 0) : 0) ? (lc[c[(HEAP32[d >> 2] | 0) + 8 >> 2] & 255](d), f = d + 8 | 0, e = (HEAP32[f >> 2] | 0) + -1 | 0, HEAP32[f >> 2] = e, (e | 0) == 0) : 0)
				lc[c[(HEAP32[d >> 2] | 0) + 12 >> 2] & 255](d);
			d = HEAP32[a + 104 >> 2] | 0;
			if ((d | 0) == (a + 88 | 0)) {
				lc[c[(HEAP32[d >> 2] | 0) + 16 >> 2] & 255](d);
				pd(a);
				i = b;
				return
			}
			if (!d) {
				pd(a);
				i = b;
				return
			}
			lc[c[(HEAP32[d >> 2] | 0) + 20 >> 2] & 255](d);
			pd(a);
			i = b;
			return
		}
		function bf(a) {
			a = a | 0;
			var b = 0;
			b = i;
			af(a);
			kl(a);
			i = b;
			return
		}
		function cf(a, b) {
			a = a | 0;
			b = b | 0;
			return
		}
		function df(a, b) {
			a = a | 0;
			b = b | 0;
			return
		}
		function ef(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0,
			e = 0;
			d = i;
			e = HEAP32[a + 104 >> 2] | 0;
			if (!e) {
				i = d;
				return
			}
			rc[c[(HEAP32[e >> 2] | 0) + 24 >> 2] & 127](e, b);
			i = d;
			return
		}
		function ff(a) {
			a = a | 0;
			return
		}
		function gf(a) {
			a = a | 0;
			var b = 0;
			b = i;
			kl(a);
			i = b;
			return
		}
		function hf(a) {
			a = a | 0;
			var b = 0,
			d = 0;
			b = i;
			d = il(8) | 0;
			if (!d) {
				i = b;
				return d | 0
			}
			HEAP32[d >> 2] = 840;
			HEAP32[d + 4 >> 2] = HEAP32[a + 4 >> 2];
			i = b;
			return d | 0
		}
		function jf(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0;
			d = i;
			if (!b) {
				i = d;
				return
			}
			HEAP32[b >> 2] = 840;
			HEAP32[b + 4 >> 2] = HEAP32[a + 4 >> 2];
			i = d;
			return
		}
		function kf(a) {
			a = a | 0;
			return
		}
		function lf(a) {
			a = a | 0;
			var b = 0;
			b = i;
			kl(a);
			i = b;
			return
		}
		function mf(b, d, e, f, g, h) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			var j = 0;
			j = i;
			Oe(HEAP32[b + 4 >> 2] | 0, HEAP32[d >> 2] | 0, HEAP32[e >> 2] | 0, f, g, (HEAP8[h >> 0] | 0) != 0);
			i = j;
			return
		}
		function nf(a) {
			a = a | 0;
			var b = 0;
			b = i;
			kl(a);
			i = b;
			return
		}
		function of(a) {
			a = a | 0;
			var b = 0,
			d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0;
			b = i;
			d = a + 16 | 0;
			e = HEAP32[d >> 2] | 0;
			if (!e) {
				i = b;
				return
			}
			f = a + 12 | 0;
			a: do
				if (HEAP32[f >> 2] | 0) {
					a = e;
					g = 0;
					while (1) {
						Ii(a + (g << 7) | 0);
						h = g + 1 | 0;
						if (h >>> 0 >= (HEAP32[f >> 2] | 0) >>> 0)
							break a;
						a = HEAP32[d >> 2] | 0;
						g = h
					}
				}
			while (0);
			HEAP32[d >> 2] = 0;
			i = b;
			return
		}
		function pf(a) {
			a = a | 0;
			var b = 0;
			b = i;
			wx(a);
			i = b;
			return
		}
		function qf(a) {
			a = a | 0;
			var b = 0;
			b = i;
			kl(a);
			i = b;
			return
		}
		function rf(a) {
			a = a | 0;
			var b = 0,
			d = 0;
			b = i;
			d = il(8) | 0;
			if (!d) {
				i = b;
				return d | 0
			}
			HEAP32[d >> 2] = 904;
			HEAP32[d + 4 >> 2] = HEAP32[a + 4 >> 2];
			i = b;
			return d | 0
		}
		function sf(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0;
			d = i;
			if (!b) {
				i = d;
				return
			}
			HEAP32[b >> 2] = 904;
			HEAP32[b + 4 >> 2] = HEAP32[a + 4 >> 2];
			i = d;
			return
		}
		function tf(a) {
			a = a | 0;
			return
		}
		function uf(a) {
			a = a | 0;
			var b = 0;
			b = i;
			kl(a);
			i = b;
			return
		}
		function vf(a, b, d, e, f, g) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			g = i;
			Me(HEAP32[a + 4 >> 2] | 0, HEAP32[d >> 2] | 0, e, f);
			i = g;
			return
		}
		function wf(a) {
			a = a | 0;
			var b = 0;
			b = i;
			kl(a);
			i = b;
			return
		}
		function xf(a) {
			a = a | 0;
			var b = 0,
			d = 0;
			b = i;
			d = il(8) | 0;
			if (!d) {
				i = b;
				return d | 0
			}
			HEAP32[d >> 2] = 944;
			HEAP32[d + 4 >> 2] = HEAP32[a + 4 >> 2];
			i = b;
			return d | 0
		}
		function yf(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0;
			d = i;
			if (!b) {
				i = d;
				return
			}
			HEAP32[b >> 2] = 944;
			HEAP32[b + 4 >> 2] = HEAP32[a + 4 >> 2];
			i = d;
			return
		}
		function zf(a) {
			a = a | 0;
			return
		}
		function Af(a) {
			a = a | 0;
			var b = 0;
			b = i;
			kl(a);
			i = b;
			return
		}
		function Bf(a, b, d, e, f, g) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			g = i;
			Le(HEAP32[a + 4 >> 2] | 0, e);
			i = g;
			return
		}
		function Cf(a) {
			a = a | 0;
			var b = 0;
			b = i;
			kl(a);
			i = b;
			return
		}
		function Df(a) {
			a = a | 0;
			var b = 0,
			d = 0;
			b = i;
			d = il(8) | 0;
			if (!d) {
				i = b;
				return d | 0
			}
			HEAP32[d >> 2] = 984;
			HEAP32[d + 4 >> 2] = HEAP32[a + 4 >> 2];
			i = b;
			return d | 0
		}
		function Ef(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0;
			d = i;
			if (!b) {
				i = d;
				return
			}
			HEAP32[b >> 2] = 984;
			HEAP32[b + 4 >> 2] = HEAP32[a + 4 >> 2];
			i = d;
			return
		}
		function Ff(a) {
			a = a | 0;
			return
		}
		function Gf(a) {
			a = a | 0;
			var b = 0;
			b = i;
			kl(a);
			i = b;
			return
		}
		function Hf(a, b, d, e, f, g) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			g = i;
			Ke(HEAP32[a + 4 >> 2] | 0, e);
			i = g;
			return
		}
		function If(a) {
			a = a | 0;
			var b = 0;
			b = i;
			kl(a);
			i = b;
			return
		}
		function Jf(a) {
			a = a | 0;
			var b = 0,
			d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0;
			b = i;
			d = a + 16 | 0;
			e = HEAP32[d >> 2] | 0;
			if (!e) {
				i = b;
				return
			}
			f = a + 12 | 0;
			a: do
				if (HEAP32[f >> 2] | 0) {
					a = e;
					g = 0;
					while (1) {
						ng(a + (g * 96 | 0) | 0);
						h = g + 1 | 0;
						if (h >>> 0 >= (HEAP32[f >> 2] | 0) >>> 0)
							break a;
						a = HEAP32[d >> 2] | 0;
						g = h
					}
				}
			while (0);
			HEAP32[d >> 2] = 0;
			i = b;
			return
		}
		function Kf(a) {
			a = a | 0;
			var b = 0;
			b = i;
			wx(a);
			i = b;
			return
		}
		function Lf(a) {
			a = a | 0;
			var b = 0;
			b = i;
			kl(a);
			i = b;
			return
		}
		function Mf(a) {
			a = a | 0;
			var b = 0,
			d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0;
			b = i;
			d = a + 16 | 0;
			e = HEAP32[d >> 2] | 0;
			if (!e) {
				i = b;
				return
			}
			f = a + 12 | 0;
			a = HEAP32[f >> 2] | 0;
			a: do
				if (a) {
					g = a;
					h = e;
					j = 0;
					while (1) {
						k = h + (j << 3) + 4 | 0;
						l = HEAP32[k >> 2] | 0;
						if (!l)
							m = g;
						else {
							ll(l);
							m = HEAP32[f >> 2] | 0
						}
						HEAP32[k >> 2] = 0;
						k = j + 1 | 0;
						if (k >>> 0 >= m >>> 0)
							break a;
						g = m;
						h = HEAP32[d >> 2] | 0;
						j = k
					}
				}
			while (0);
			HEAP32[d >> 2] = 0;
			i = b;
			return
		}
		function Nf(a) {
			a = a | 0;
			var b = 0;
			b = i;
			wx(a);
			i = b;
			return
		}
		function Of(a) {
			a = a | 0;
			var b = 0;
			b = i;
			kl(a);
			i = b;
			return
		}
		function Pf(a) {
			a = a | 0;
			var b = 0,
			d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0;
			b = i;
			d = a + 16 | 0;
			e = HEAP32[d >> 2] | 0;
			if (!e) {
				i = b;
				return
			}
			f = a + 12 | 0;
			a: do
				if (HEAP32[f >> 2] | 0) {
					a = e;
					g = 0;
					while (1) {
						h = HEAP32[a + (g * 20 | 0) + 12 >> 2] | 0;
						if (((h | 0) != 0 ? (j = h + 4 | 0, k = (HEAP32[j >> 2] | 0) + -1 | 0, HEAP32[j >> 2] = k, (k | 0) == 0) : 0) ? (lc[c[(HEAP32[h >> 2] | 0) + 8 >> 2] & 255](h), k = h + 8 | 0, j = (HEAP32[k >> 2] | 0) + -1 | 0, HEAP32[k >> 2] = j, (j | 0) == 0) : 0)
							lc[c[(HEAP32[h >> 2] | 0) + 12 >> 2] & 255](h);
						h = HEAP32[a + (g * 20 | 0) >> 2] | 0;
						if (((h | 0) != 0 ? (j = h + 4 | 0, k = (HEAP32[j >> 2] | 0) + -1 | 0, HEAP32[j >> 2] = k, (k | 0) == 0) : 0) ? (lc[c[(HEAP32[h >> 2] | 0) + 8 >> 2] & 255](h), k = h + 8 | 0, j = (HEAP32[k >> 2] | 0) + -1 | 0, HEAP32[k >> 2] = j, (j | 0) == 0) : 0)
							lc[c[(HEAP32[h >> 2] | 0) + 12 >> 2] & 255](h);
						h = g + 1 | 0;
						if (h >>> 0 >= (HEAP32[f >> 2] | 0) >>> 0)
							break a;
						a = HEAP32[d >> 2] | 0;
						g = h
					}
				}
			while (0);
			HEAP32[d >> 2] = 0;
			i = b;
			return
		}
		function Qf(a) {
			a = a | 0;
			var b = 0;
			b = i;
			wx(a);
			i = b;
			return
		}
		function Rf(b, d, e) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0;
			f = i;
			if ((d | 0) == (e | 0)) {
				i = f;
				return b | 0
			}
			g = b + 4 | 0;
			h = HEAP32[g >> 2] | 0;
			j = HEAP32[b >> 2] | 0;
			k = e;
			e = k - d | 0;
			l = b + 8 | 0;
			m = (HEAP32[l >> 2] | 0) - j + -1 | 0;
			n = h - j + e | 0;
			if (n >>> 0 <= m >>> 0) {
				j = d + 1 | 0;
				ry(h + 1 | 0, j | 0, k - j | 0) | 0;
				a[(HEAP32[g >> 2] | 0) + e >> 0] = 0;
				HEAP8[HEAP32[g >> 2] >> 0] = HEAP8[d >> 0] | 0;
				HEAP32[g >> 2] = (HEAP32[g >> 2] | 0) + e;
				i = f;
				return b | 0
			}
			j = m >>> 0 > 8 ? m << 1 : 8;
			m = (j >>> 0 < n >>> 0 ? n : j) + 1 | 0;
			j = ml(m, 0, 0, 0, 0, 0) | 0;
			n = HEAP32[b >> 2] | 0;
			k = (HEAP32[g >> 2] | 0) - n | 0;
			ry(j | 0, n | 0, k | 0) | 0;
			ry(j + k | 0, d | 0, e | 0) | 0;
			d = j + (k + e) | 0;
			HEAP8[d >> 0] = 0;
			e = HEAP32[b >> 2] | 0;
			if (!((e | 0) == 0 ? 1 : ((HEAP32[l >> 2] | 0) - e | 0) < 2) ? (HEAP32[b + 16 >> 2] | 0) != (e | 0) : 0)
				ll(e);
			HEAP32[b >> 2] = j;
			HEAP32[g >> 2] = d;
			HEAP32[l >> 2] = j + m;
			i = f;
			return b | 0
		}
		function Sf(a, b, d) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0;
			e = i;
			i = i + 16 | 0;
			f = e;
			HEAP32[f >> 2] = d;
			HEAP32[a + 4 >> 2] = HEAP32[a >> 2];
			og(a, b, f) | 0;
			i = e;
			return a | 0
		}
		function Tf(b, d, e, f) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0;
			f = i;
			i = i + 16 | 0;
			g = f;
			h = HEAP32[e >> 2] | 0;
			j = HEAP32[d + 8 >> 2] | 0;
			k = (h >>> 0) % (j >>> 0) | 0;
			l = d + 4 | 0;
			m = (HEAP32[l >> 2] | 0) + (k << 2) | 0;
			n = HEAP32[m >> 2] | 0;
			a: do
				if (n) {
					o = n;
					while (1) {
						if ((h | 0) == (HEAP32[o >> 2] | 0))
							break;
						p = HEAP32[o + 8 >> 2] | 0;
						if (!p)
							break a;
						else
							o = p
					}
					HEAP32[b >> 2] = o;
					HEAP32[b + 4 >> 2] = m;
					HEAP8[b + 8 >> 0] = 0;
					i = f;
					return
				}
			while (0);
			m = d + 12 | 0;
			rl(g, d + 16 | 0, j, HEAP32[m >> 2] | 0, 1);
			j = ml(12, 0, 0, 0, 0, 0) | 0;
			if (j) {
				n = e;
				e = HEAP32[n + 4 >> 2] | 0;
				p = j;
				HEAP32[p >> 2] = HEAP32[n >> 2];
				HEAP32[p + 4 >> 2] = e
			}
			e = j + 8 | 0;
			HEAP32[e >> 2] = 0;
			if (!(HEAP8[g >> 0] | 0))
				q = k;
			else {
				k = HEAP32[g + 4 >> 2] | 0;
				qg(d, k);
				q = (h >>> 0) % (k >>> 0) | 0
			}
			HEAP32[e >> 2] = HEAP32[(HEAP32[l >> 2] | 0) + (q << 2) >> 2];
			c[(HEAP32[l >> 2] | 0) + (q << 2) >> 2] = j;
			HEAP32[m >> 2] = (HEAP32[m >> 2] | 0) + 1;
			m = (HEAP32[l >> 2] | 0) + (q << 2) | 0;
			HEAP32[b >> 2] = j;
			HEAP32[b + 4 >> 2] = m;
			HEAP8[b + 8 >> 0] = 1;
			i = f;
			return
		}
		function Uf(a, b, d) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0;
			e = i;
			f = HEAP32[a >> 2] | 0;
			if ((f | 0) == (b | 0)) {
				i = e;
				return
			}
			if ((d & 1 | 0) == 0 & (b | 0) != 0 ? (HEAP32[a + 4 >> 2] | 0) != 0 : 0) {
				i = e;
				return
			}
			HEAP32[a >> 2] = b;
			if (!b) {
				g = a + 4 | 0;
				h = HEAP32[g >> 2] | 0;
				if (h)
					ll(h);
				HEAP32[g >> 2] = 0;
				i = e;
				return
			}
			if (!(d & 4))
				j = jl(b >>> 0 > 1073741823 ? -1 : b << 2) | 0;
			else
				j = jl(b << 2) | 0;
			g = a + 4 | 0;
			a = HEAP32[g >> 2] | 0;
			h = (a | 0) == 0;
			if (!(h | (d & 2 | 0) == 0) ? (d = f >>> 0 < b >>> 0 ? f : b, (d | 0) != 0) : 0) {
				b = 0;
				do {
					HEAP32[j + (b << 2) >> 2] = HEAP32[a + (b << 2) >> 2];
					b = b + 1 | 0
				} while (b >>> 0 < d >>> 0)
			}
			if (!h)
				ll(a);
			HEAP32[g >> 2] = j;
			i = e;
			return
		}
		function Vf(a, b, d) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0;
			e = i;
			i = i + 16 | 0;
			f = e;
			HEAP32[f >> 2] = d;
			HEAP32[a + 4 >> 2] = HEAP32[a >> 2];
			rg(a, b, f) | 0;
			i = e;
			return a | 0
		}
		function Wf(a, b, d) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0;
			d = i;
			if (!a) {
				i = d;
				return
			}
			e = a + 4 | 0;
			HEAP32[e >> 2] = (HEAP32[e >> 2] | 0) + 1;
			f = a + 8 | 0;
			g = (HEAP32[f >> 2] | 0) + 2 | 0;
			HEAP32[f >> 2] = g;
			h = HEAP32[b >> 2] | 0;
			HEAP32[b >> 2] = a;
			HEAP32[b + 4 >> 2] = b;
			if (!h)
				j = g;
			else {
				g = h + 8 | 0;
				b = (HEAP32[g >> 2] | 0) + -1 | 0;
				HEAP32[g >> 2] = b;
				if (!b)
					lc[c[(HEAP32[h >> 2] | 0) + 12 >> 2] & 255](h);
				j = HEAP32[f >> 2] | 0
			}
			h = j + -1 | 0;
			HEAP32[f >> 2] = h;
			if (!h)
				lc[c[(HEAP32[a >> 2] | 0) + 12 >> 2] & 255](a);
			h = (HEAP32[e >> 2] | 0) + -1 | 0;
			HEAP32[e >> 2] = h;
			if (h) {
				i = d;
				return
			}
			lc[c[(HEAP32[a >> 2] | 0) + 8 >> 2] & 255](a);
			h = (HEAP32[f >> 2] | 0) + -1 | 0;
			HEAP32[f >> 2] = h;
			if (h) {
				i = d;
				return
			}
			lc[c[(HEAP32[a >> 2] | 0) + 12 >> 2] & 255](a);
			i = d;
			return
		}
		function Xf(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0;
			d = i;
			e = a + 8 | 0;
			f = HEAP32[a >> 2] | 0;
			if ((((HEAP32[e >> 2] | 0) - f | 0) / 88 | 0) >>> 0 >= b >>> 0) {
				i = d;
				return
			}
			g = a + 4 | 0;
			h = HEAP32[g >> 2] | 0;
			if (!b)
				j = 0;
			else
				j = ml(b * 88 | 0, 0, 0, 0, 0, 0) | 0;
			if ((f | 0) != (h | 0)) {
				k = j;
				l = f;
				while (1) {
					if (k) {
						HEAP32[k >> 2] = HEAP32[l >> 2];
						_f(k + 8 | 0, l + 8 | 0);
						HEAP32[k >> 2] = HEAP32[l >> 2]
					}
					l = l + 88 | 0;
					if ((l | 0) == (h | 0))
						break;
					else
						k = k + 88 | 0
				}
			}
			k = HEAP32[a >> 2] | 0;
			h = HEAP32[g >> 2] | 0;
			if (k >>> 0 < h >>> 0) {
				l = k;
				do {
					Yf(l + 8 | 0);
					l = l + 88 | 0
				} while (l >>> 0 < h >>> 0);
				m = HEAP32[a >> 2] | 0
			} else
				m = k;
			if (!m)
				n = 0;
			else {
				ll(m);
				n = HEAP32[a >> 2] | 0
			}
			m = ((HEAP32[g >> 2] | 0) - n | 0) / 88 | 0;
			HEAP32[a >> 2] = j;
			HEAP32[g >> 2] = j + (m * 88 | 0);
			HEAP32[e >> 2] = j + (b * 88 | 0);
			i = d;
			return
		}
		function Yf(a) {
			a = a | 0;
			var b = 0,
			d = 0,
			e = 0,
			f = 0;
			b = i;
			d = HEAP32[a + 64 >> 2] | 0;
			if (((d | 0) != 0 ? (e = d + 4 | 0, f = (HEAP32[e >> 2] | 0) + -1 | 0, HEAP32[e >> 2] = f, (f | 0) == 0) : 0) ? (lc[c[(HEAP32[d >> 2] | 0) + 8 >> 2] & 255](d), f = d + 8 | 0, e = (HEAP32[f >> 2] | 0) + -1 | 0, HEAP32[f >> 2] = e, (e | 0) == 0) : 0)
				lc[c[(HEAP32[d >> 2] | 0) + 12 >> 2] & 255](d);
			d = HEAP32[a + 56 >> 2] | 0;
			if ((d | 0) != (a + 40 | 0)) {
				if (d)
					lc[c[(HEAP32[d >> 2] | 0) + 20 >> 2] & 255](d)
			} else
				lc[c[(HEAP32[d >> 2] | 0) + 16 >> 2] & 255](d);
			d = HEAP32[a + 28 >> 2] | 0;
			if (((d | 0) != 0 ? (e = d + 4 | 0, f = (HEAP32[e >> 2] | 0) + -1 | 0, HEAP32[e >> 2] = f, (f | 0) == 0) : 0) ? (lc[c[(HEAP32[d >> 2] | 0) + 8 >> 2] & 255](d), f = d + 8 | 0, e = (HEAP32[f >> 2] | 0) + -1 | 0, HEAP32[f >> 2] = e, (e | 0) == 0) : 0)
				lc[c[(HEAP32[d >> 2] | 0) + 12 >> 2] & 255](d);
			d = HEAP32[a + 16 >> 2] | 0;
			if (!d) {
				i = b;
				return
			}
			a = d + 4 | 0;
			e = (HEAP32[a >> 2] | 0) + -1 | 0;
			HEAP32[a >> 2] = e;
			if (e) {
				i = b;
				return
			}
			lc[c[(HEAP32[d >> 2] | 0) + 8 >> 2] & 255](d);
			e = d + 8 | 0;
			a = (HEAP32[e >> 2] | 0) + -1 | 0;
			HEAP32[e >> 2] = a;
			if (a) {
				i = b;
				return
			}
			lc[c[(HEAP32[d >> 2] | 0) + 12 >> 2] & 255](d);
			i = b;
			return
		}
		function Zf(b, d) {
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0;
			e = i;
			i = i + 32 | 0;
			f = e;
			HEAP32[b + 0 >> 2] = HEAP32[d + 0 >> 2];
			HEAP32[b + 4 >> 2] = HEAP32[d + 4 >> 2];
			HEAP32[b + 8 >> 2] = HEAP32[d + 8 >> 2];
			HEAP32[b + 12 >> 2] = HEAP32[d + 12 >> 2];
			cg(b + 16 | 0, d + 16 | 0) | 0;
			HEAP32[b + 36 >> 2] = HEAP32[d + 36 >> 2];
			g = b + 40 | 0;
			h = HEAP32[d + 56 >> 2] | 0;
			do
				if (h)
					if ((h | 0) == (d + 40 | 0)) {
						HEAP32[f + 16 >> 2] = f;
						rc[c[(HEAP32[h >> 2] | 0) + 12 >> 2] & 127](h, f);
						break
					} else {
						HEAP32[f + 16 >> 2] = tc[c[(HEAP32[h >> 2] | 0) + 8 >> 2] & 127](h) | 0;
						break
					}
				else
					HEAP32[f + 16 >> 2] = 0;
			while (0);
			bg(f, g);
			g = HEAP32[f + 16 >> 2] | 0;
			if ((g | 0) != (f | 0)) {
				if (g)
					lc[c[(HEAP32[g >> 2] | 0) + 20 >> 2] & 255](g)
			} else
				lc[c[(HEAP32[g >> 2] | 0) + 16 >> 2] & 255](g);
			g = HEAP32[d + 64 >> 2] | 0;
			f = HEAP32[d + 68 >> 2] | 0;
			if (g) {
				h = g + 4 | 0;
				HEAP32[h >> 2] = (HEAP32[h >> 2] | 0) + 1
			}
			h = b + 64 | 0;
			j = HEAP32[h >> 2] | 0;
			HEAP32[h >> 2] = g;
			HEAP32[b + 68 >> 2] = f;
			if (!j) {
				k = d + 72 | 0;
				l = HEAP8[k >> 0] | 0;
				m = b + 72 | 0;
				HEAP8[m >> 0] = l;
				i = e;
				return b | 0
			}
			f = j + 4 | 0;
			g = (HEAP32[f >> 2] | 0) + -1 | 0;
			HEAP32[f >> 2] = g;
			if (g) {
				k = d + 72 | 0;
				l = HEAP8[k >> 0] | 0;
				m = b + 72 | 0;
				HEAP8[m >> 0] = l;
				i = e;
				return b | 0
			}
			lc[c[(HEAP32[j >> 2] | 0) + 8 >> 2] & 255](j);
			g = j + 8 | 0;
			f = (HEAP32[g >> 2] | 0) + -1 | 0;
			HEAP32[g >> 2] = f;
			if (f) {
				k = d + 72 | 0;
				l = HEAP8[k >> 0] | 0;
				m = b + 72 | 0;
				HEAP8[m >> 0] = l;
				i = e;
				return b | 0
			}
			lc[c[(HEAP32[j >> 2] | 0) + 12 >> 2] & 255](j);
			k = d + 72 | 0;
			l = HEAP8[k >> 0] | 0;
			m = b + 72 | 0;
			HEAP8[m >> 0] = l;
			i = e;
			return b | 0
		}
		function _f(b, d) {
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0;
			e = i;
			HEAP32[b + 0 >> 2] = HEAP32[d + 0 >> 2];
			HEAP32[b + 4 >> 2] = HEAP32[d + 4 >> 2];
			HEAP32[b + 8 >> 2] = HEAP32[d + 8 >> 2];
			HEAP32[b + 12 >> 2] = HEAP32[d + 12 >> 2];
			f = HEAP32[d + 16 >> 2] | 0;
			HEAP32[b + 16 >> 2] = f;
			HEAP32[b + 20 >> 2] = HEAP32[d + 20 >> 2];
			if (f) {
				g = f + 4 | 0;
				HEAP32[g >> 2] = (HEAP32[g >> 2] | 0) + 1
			}
			HEAP32[b + 24 >> 2] = HEAP32[d + 24 >> 2];
			g = HEAP32[d + 28 >> 2] | 0;
			HEAP32[b + 28 >> 2] = g;
			HEAP32[b + 32 >> 2] = HEAP32[d + 32 >> 2];
			if (g) {
				f = g + 4 | 0;
				HEAP32[f >> 2] = (HEAP32[f >> 2] | 0) + 1
			}
			f = b + 36 | 0;
			g = d + 36 | 0;
			HEAP32[f >> 2] = HEAP32[g >> 2];
			h = b + 40 | 0;
			j = d + 56 | 0;
			k = HEAP32[j >> 2] | 0;
			do
				if (k)
					if ((k | 0) == (d + 40 | 0)) {
						HEAP32[b + 56 >> 2] = h;
						l = HEAP32[j >> 2] | 0;
						rc[c[(HEAP32[l >> 2] | 0) + 12 >> 2] & 127](l, h);
						break
					} else {
						HEAP32[b + 56 >> 2] = tc[c[(HEAP32[k >> 2] | 0) + 8 >> 2] & 127](k) | 0;
						break
					}
				else
					HEAP32[b + 56 >> 2] = 0;
			while (0);
			HEAP32[f >> 2] = HEAP32[g >> 2];
			g = HEAP32[d + 64 >> 2] | 0;
			HEAP32[b + 64 >> 2] = g;
			HEAP32[b + 68 >> 2] = HEAP32[d + 68 >> 2];
			if (!g) {
				m = b + 72 | 0;
				n = d + 72 | 0;
				o = HEAP8[n >> 0] | 0;
				HEAP8[m >> 0] = o;
				i = e;
				return
			}
			f = g + 4 | 0;
			HEAP32[f >> 2] = (HEAP32[f >> 2] | 0) + 1;
			m = b + 72 | 0;
			n = d + 72 | 0;
			o = HEAP8[n >> 0] | 0;
			HEAP8[m >> 0] = o;
			i = e;
			return
		}
		function $f(b, d, e) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0;
			f = i;
			g = HEAP32[d >> 2] | 0;
			h = d + 4 | 0;
			j = HEAP32[h >> 2] | 0;
			k = g;
			l = g;
			g = (j - k | 0) / 88 | 0;
			a: while (1) {
				m = g;
				while (1) {
					if ((m | 0) <= 0)
						break a;
					n = m >> 1;
					if ((HEAP32[l + (n * 88 | 0) >> 2] | 0) < (HEAP32[e >> 2] | 0))
						break;
					else
						m = n
				}
				l = l + ((n + 1 | 0) * 88 | 0) | 0;
				g = m + -1 - n | 0
			}
			n = (l | 0) == (j | 0);
			if (!n ? (HEAP32[e >> 2] | 0) >= (HEAP32[l >> 2] | 0) : 0) {
				HEAP32[b >> 2] = l;
				HEAP8[b + 4 >> 0] = 0;
				i = f;
				return
			}
			g = (l - k | 0) / 88 | 0;
			if ((j | 0) != (HEAP32[d + 8 >> 2] | 0) & n) {
				HEAP32[h >> 2] = j + 88;
				if (j) {
					HEAP32[j >> 2] = HEAP32[e >> 2];
					_f(j + 8 | 0, e + 8 | 0);
					HEAP32[j >> 2] = HEAP32[e >> 2]
				}
			} else
				sg(d, l, e);
			HEAP32[b >> 2] = (HEAP32[d >> 2] | 0) + (g * 88 | 0);
			HEAP8[b + 4 >> 0] = 1;
			i = f;
			return
		}
		function ag(b, d, e, f, g, h, j, k) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			k = k | 0;
			var l = 0;
			l = i;
			HEAP32[b >> 2] = d;
			HEAP32[b + 4 >> 2] = e;
			HEAP8[b + 8 >> 0] = g & 1;
			HEAP32[b + 12 >> 2] = f;
			f = b + 16 | 0;
			Lj(f);
			HEAP32[b + 36 >> 2] = k;
			k = b + 40 | 0;
			g = h + 16 | 0;
			e = HEAP32[g >> 2] | 0;
			do
				if (e)
					if ((e | 0) == (h | 0)) {
						HEAP32[b + 56 >> 2] = k;
						d = HEAP32[g >> 2] | 0;
						rc[c[(HEAP32[d >> 2] | 0) + 12 >> 2] & 127](d, k);
						break
					} else {
						HEAP32[b + 56 >> 2] = tc[c[(HEAP32[e >> 2] | 0) + 8 >> 2] & 127](e) | 0;
						break
					}
				else
					HEAP32[b + 56 >> 2] = 0;
			while (0);
			HEAP32[b + 64 >> 2] = 0;
			HEAP32[b + 68 >> 2] = 0;
			HEAP8[b + 72 >> 0] = 0;
			e = b + 24 | 0;
			k = j + 8 | 0;
			g = HEAP32[e >> 2] | 0;
			HEAP32[e >> 2] = HEAP32[k >> 2];
			HEAP32[k >> 2] = g;
			g = HEAP32[f >> 2] | 0;
			HEAP32[f >> 2] = HEAP32[j >> 2];
			HEAP32[j >> 2] = g;
			g = b + 20 | 0;
			f = j + 4 | 0;
			k = HEAP32[g >> 2] | 0;
			HEAP32[g >> 2] = HEAP32[f >> 2];
			HEAP32[f >> 2] = k;
			k = b + 28 | 0;
			f = j + 12 | 0;
			g = HEAP32[k >> 2] | 0;
			HEAP32[k >> 2] = HEAP32[f >> 2];
			HEAP32[f >> 2] = g;
			g = b + 32 | 0;
			b = j + 16 | 0;
			j = HEAP32[g >> 2] | 0;
			HEAP32[g >> 2] = HEAP32[b >> 2];
			HEAP32[b >> 2] = j;
			i = l;
			return
		}
		function bg(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0;
			d = i;
			i = i + 16 | 0;
			e = d;
			f = a + 16 | 0;
			g = HEAP32[f >> 2] | 0;
			h = b + 16 | 0;
			j = HEAP32[h >> 2] | 0;
			k = (j | 0) == (b | 0);
			if ((g | 0) == (a | 0)) {
				l = HEAP32[(HEAP32[g >> 2] | 0) + 12 >> 2] | 0;
				if (k) {
					rc[l & 127](g, e);
					m = HEAP32[f >> 2] | 0;
					lc[c[(HEAP32[m >> 2] | 0) + 16 >> 2] & 255](m);
					HEAP32[f >> 2] = 0;
					m = HEAP32[h >> 2] | 0;
					rc[c[(HEAP32[m >> 2] | 0) + 12 >> 2] & 127](m, g);
					m = HEAP32[h >> 2] | 0;
					lc[c[(HEAP32[m >> 2] | 0) + 16 >> 2] & 255](m);
					HEAP32[h >> 2] = 0;
					HEAP32[f >> 2] = g;
					rc[c[(HEAP32[e >> 2] | 0) + 12 >> 2] & 127](e, j);
					lc[c[(HEAP32[e >> 2] | 0) + 16 >> 2] & 255](e);
					HEAP32[h >> 2] = j;
					i = d;
					return
				} else {
					rc[l & 127](g, b);
					l = HEAP32[f >> 2] | 0;
					lc[c[(HEAP32[l >> 2] | 0) + 16 >> 2] & 255](l);
					l = b + 16 | 0;
					HEAP32[f >> 2] = HEAP32[l >> 2];
					HEAP32[l >> 2] = b;
					i = d;
					return
				}
			} else if (k) {
				rc[c[(HEAP32[b >> 2] | 0) + 12 >> 2] & 127](b, a);
				b = HEAP32[h >> 2] | 0;
				lc[c[(HEAP32[b >> 2] | 0) + 16 >> 2] & 255](b);
				HEAP32[h >> 2] = HEAP32[f >> 2];
				HEAP32[f >> 2] = a;
				i = d;
				return
			} else {
				HEAP32[f >> 2] = j;
				HEAP32[h >> 2] = g;
				i = d;
				return
			}
		}
		function cg(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0,
			g = 0;
			d = i;
			HEAP32[a + 8 >> 2] = HEAP32[b + 8 >> 2];
			e = HEAP32[b >> 2] | 0;
			f = HEAP32[b + 4 >> 2] | 0;
			if (e) {
				g = e + 4 | 0;
				HEAP32[g >> 2] = (HEAP32[g >> 2] | 0) + 1
			}
			g = HEAP32[a >> 2] | 0;
			HEAP32[a >> 2] = e;
			HEAP32[a + 4 >> 2] = f;
			if (((g | 0) != 0 ? (f = g + 4 | 0, e = (HEAP32[f >> 2] | 0) + -1 | 0, HEAP32[f >> 2] = e, (e | 0) == 0) : 0) ? (lc[c[(HEAP32[g >> 2] | 0) + 8 >> 2] & 255](g), e = g + 8 | 0, f = (HEAP32[e >> 2] | 0) + -1 | 0, HEAP32[e >> 2] = f, (f | 0) == 0) : 0)
				lc[c[(HEAP32[g >> 2] | 0) + 12 >> 2] & 255](g);
			g = HEAP32[b + 12 >> 2] | 0;
			f = HEAP32[b + 16 >> 2] | 0;
			if (g) {
				b = g + 4 | 0;
				HEAP32[b >> 2] = (HEAP32[b >> 2] | 0) + 1
			}
			b = a + 12 | 0;
			e = HEAP32[b >> 2] | 0;
			HEAP32[b >> 2] = g;
			HEAP32[a + 16 >> 2] = f;
			if (!e) {
				i = d;
				return a | 0
			}
			f = e + 4 | 0;
			g = (HEAP32[f >> 2] | 0) + -1 | 0;
			HEAP32[f >> 2] = g;
			if (g) {
				i = d;
				return a | 0
			}
			lc[c[(HEAP32[e >> 2] | 0) + 8 >> 2] & 255](e);
			g = e + 8 | 0;
			f = (HEAP32[g >> 2] | 0) + -1 | 0;
			HEAP32[g >> 2] = f;
			if (f) {
				i = d;
				return a | 0
			}
			lc[c[(HEAP32[e >> 2] | 0) + 12 >> 2] & 255](e);
			i = d;
			return a | 0
		}
		function dg(b, e) {
			b = b | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0;
			f = i;
			i = i + 16 | 0;
			g = f;
			h = e + 8 | 0;
			j = HEAP32[h >> 2] | 0;
			k = e + 4 | 0;
			l = HEAP32[k >> 2] | 0;
			if (!l)
				m = 0;
			else
				m = HEAP32[l >> 2] | 0;
			if ((j - m | 0) >>> 0 <= 24) {
				i = f;
				return
			}
			m = j + 1 | 0;
			HEAP32[h >> 2] = m;
			n = HEAP32[l + 4 >> 2] | 0;
			HEAP32[b + 4 >> 2] = HEAPU8[n + j >> 0];
			l = n + m | 0;
			m = j + 5 | 0;
			HEAP32[h >> 2] = m;
			HEAP32[b + 8 >> 2] = jy(HEAPU8[l >> 0] | HEAPU8[l + 1 >> 0] << 8 | HEAPU8[l + 2 >> 0] << 16 | HEAPU8[l + 3 >> 0] << 24 | 0) | 0;
			l = n + m | 0;
			m = j + 9 | 0;
			HEAP32[h >> 2] = m;
			HEAP32[b + 12 >> 2] = jy(HEAPU8[l >> 0] | HEAPU8[l + 1 >> 0] << 8 | HEAPU8[l + 2 >> 0] << 16 | HEAPU8[l + 3 >> 0] << 24 | 0) | 0;
			HEAP32[h >> 2] = j + 10;
			HEAP32[b + 16 >> 2] = _i(HEAPU8[n + m >> 0] | 0) | 0;
			m = HEAP32[k >> 2] | 0;
			k = HEAP32[h >> 2] | 0;
			n = k + 1 | 0;
			HEAP32[h >> 2] = n;
			j = HEAP32[m + 4 >> 2] | 0;
			m = HEAPU8[j + k >> 0] | 0;
			HEAP8[b + 20 >> 0] = m & 1;
			HEAP8[b + 28 >> 0] = m >>> 1 & 1;
			HEAP8[b + 29 >> 0] = m >>> 2 & 1;
			l = j + n | 0;
			n = k + 5 | 0;
			HEAP32[h >> 2] = n;
			HEAP32[b + 24 >> 2] = jy(HEAPU8[l >> 0] | HEAPU8[l + 1 >> 0] << 8 | HEAPU8[l + 2 >> 0] << 16 | HEAPU8[l + 3 >> 0] << 24 | 0) | 0;
			l = j + n | 0;
			n = k + 9 | 0;
			HEAP32[h >> 2] = n;
			HEAP32[b + 32 >> 2] = jy(HEAPU8[l >> 0] | HEAPU8[l + 1 >> 0] << 8 | HEAPU8[l + 2 >> 0] << 16 | HEAPU8[l + 3 >> 0] << 24 | 0) | 0;
			l = j + n | 0;
			n = k + 13 | 0;
			HEAP32[h >> 2] = n;
			HEAP32[b + 36 >> 2] = jy(HEAPU8[l >> 0] | HEAPU8[l + 1 >> 0] << 8 | HEAPU8[l + 2 >> 0] << 16 | HEAPU8[l + 3 >> 0] << 24 | 0) | 0;
			HEAP32[h >> 2] = k + 14;
			HEAP32[b + 40 >> 2] = Zi(HEAPU8[j + n >> 0] | 0) | 0;
			if (!(m & 8)) {
				i = f;
				return
			}
			m = b + 44 | 0;
			n = g + 4 | 0;
			HEAP32[g >> 2] = 64;
			j = jl(64) | 0;
			HEAP32[n >> 2] = j;
			if ((g | 0) == (m | 0))
				o = j;
			else {
				k = HEAP32[m >> 2] | 0;
				HEAP32[m >> 2] = 64;
				HEAP32[g >> 2] = k;
				k = b + 48 | 0;
				g = HEAP32[k >> 2] | 0;
				HEAP32[k >> 2] = j;
				HEAP32[n >> 2] = g;
				o = g
			}
			if (o)
				ll(o);
			HEAP32[n >> 2] = 0;
			Qj(e, HEAP32[b + 48 >> 2] | 0, 0, 64);
			i = f;
			return
		}
		function eg(b, d) {
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0;
			e = i;
			f = il(108) | 0;
			h = HEAP32[d >> 2] | 0;
			d = h;
			while (1)
				if (!(HEAP8[d >> 0] | 0))
					break;
				else
					d = d + 1 | 0;
			j = d - h | 0;
			d = j + 1 | 0;
			k = d >>> 0 > 1;
			if (k) {
				l = ml(d, 0, 0, 0, 0, 0) | 0;
				m = l;
				n = l + d | 0
			} else {
				m = 43112;
				n = 43113
			}
			ry(m | 0, h | 0, j | 0) | 0;
			HEAP8[m + j >> 0] = 0;
			HEAP32[f >> 2] = 0;
			h = f + 4 | 0;
			HEAP32[h >> 2] = 0;
			l = f + 8 | 0;
			HEAP32[l >> 2] = 0;
			if (k) {
				k = ml(d, 0, 0, 0, 0, 0) | 0;
				HEAP32[f >> 2] = k;
				HEAP32[h >> 2] = k;
				o = k;
				p = k + d | 0
			} else {
				HEAP32[f >> 2] = 43112;
				HEAP32[h >> 2] = 43112;
				o = 43112;
				p = 43113
			}
			HEAP32[l >> 2] = p;
			ry(o | 0, m | 0, j | 0) | 0;
			p = o + j | 0;
			HEAP32[h >> 2] = p;
			HEAP8[p >> 0] = 0;
			p = f + 20 | 0;
			HEAP32[p + 0 >> 2] = 0;
			HEAP32[p + 4 >> 2] = 0;
			HEAP32[p + 8 >> 2] = 0;
			HEAP32[p + 12 >> 2] = 0;
			HEAPF32[f + 52 >> 2] = 1.0;
			HEAPF32[f + 56 >> 2] = 2.0;
			HEAP32[f + 44 >> 2] = 1;
			HEAP32[f + 40 >> 2] = 42072;
			HEAP32[f + 48 >> 2] = 0;
			HEAP32[f + 60 >> 2] = 0;
			HEAP32[f + 68 >> 2] = 0;
			HEAP32[f + 72 >> 2] = 0;
			HEAP32[f + 76 >> 2] = 43112;
			HEAP32[f + 80 >> 2] = 43112;
			HEAP32[f + 84 >> 2] = 43113;
			HEAP32[f + 92 >> 2] = 43112;
			HEAP32[f + 96 >> 2] = 43112;
			HEAP32[f + 100 >> 2] = 43113;
			HEAP32[b >> 2] = f;
			if ((n - m | 0) < 2 | (m | 0) == 0) {
				i = e;
				return
			}
			ll(m);
			i = e;
			return
		}
		function fg(a, b, d, e, f, g) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0,
			k = 0,
			l = 0;
			h = i;
			i = i + 48 | 0;
			j = h;
			k = h + 24 | 0;
			l = HEAP32[g + 16 >> 2] | 0;
			do
				if (l)
					if ((l | 0) == (g | 0)) {
						HEAP32[j + 16 >> 2] = j;
						rc[c[(HEAP32[l >> 2] | 0) + 12 >> 2] & 127](l, j);
						break
					} else {
						HEAP32[j + 16 >> 2] = tc[c[(HEAP32[l >> 2] | 0) + 8 >> 2] & 127](l) | 0;
						break
					}
				else
					HEAP32[j + 16 >> 2] = 0;
			while (0);
			Lj(k);
			l = ze(a, b, d, e, f, j, k, HEAP32[2120] | 0) | 0;
			f = HEAP32[k + 12 >> 2] | 0;
			if (((f | 0) != 0 ? (e = f + 4 | 0, d = (HEAP32[e >> 2] | 0) + -1 | 0, HEAP32[e >> 2] = d, (d | 0) == 0) : 0) ? (lc[c[(HEAP32[f >> 2] | 0) + 8 >> 2] & 255](f), d = f + 8 | 0, e = (HEAP32[d >> 2] | 0) + -1 | 0, HEAP32[d >> 2] = e, (e | 0) == 0) : 0)
				lc[c[(HEAP32[f >> 2] | 0) + 12 >> 2] & 255](f);
			f = HEAP32[k >> 2] | 0;
			if (((f | 0) != 0 ? (k = f + 4 | 0, e = (HEAP32[k >> 2] | 0) + -1 | 0, HEAP32[k >> 2] = e, (e | 0) == 0) : 0) ? (lc[c[(HEAP32[f >> 2] | 0) + 8 >> 2] & 255](f), e = f + 8 | 0, k = (HEAP32[e >> 2] | 0) + -1 | 0, HEAP32[e >> 2] = k, (k | 0) == 0) : 0)
				lc[c[(HEAP32[f >> 2] | 0) + 12 >> 2] & 255](f);
			f = HEAP32[j + 16 >> 2] | 0;
			if ((f | 0) == (j | 0)) {
				lc[c[(HEAP32[f >> 2] | 0) + 16 >> 2] & 255](f);
				i = h;
				return l | 0
			}
			if (!f) {
				i = h;
				return l | 0
			}
			lc[c[(HEAP32[f >> 2] | 0) + 20 >> 2] & 255](f);
			i = h;
			return l | 0
		}
		function gg(a, b, d, e, f, g, h, j) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			var k = 0,
			l = 0,
			m = 0,
			n = 0;
			k = i;
			i = i + 48 | 0;
			l = k;
			m = k + 24 | 0;
			n = HEAP32[j + 16 >> 2] | 0;
			do
				if (n)
					if ((n | 0) == (j | 0)) {
						HEAP32[l + 16 >> 2] = l;
						rc[c[(HEAP32[n >> 2] | 0) + 12 >> 2] & 127](n, l);
						break
					} else {
						HEAP32[l + 16 >> 2] = tc[c[(HEAP32[n >> 2] | 0) + 8 >> 2] & 127](n) | 0;
						break
					}
				else
					HEAP32[l + 16 >> 2] = 0;
			while (0);
			Lj(m);
			n = re(a, b, d, e, f, g, h, l, m, HEAP32[2120] | 0) | 0;
			h = HEAP32[m + 12 >> 2] | 0;
			if (((h | 0) != 0 ? (g = h + 4 | 0, f = (HEAP32[g >> 2] | 0) + -1 | 0, HEAP32[g >> 2] = f, (f | 0) == 0) : 0) ? (lc[c[(HEAP32[h >> 2] | 0) + 8 >> 2] & 255](h), f = h + 8 | 0, g = (HEAP32[f >> 2] | 0) + -1 | 0, HEAP32[f >> 2] = g, (g | 0) == 0) : 0)
				lc[c[(HEAP32[h >> 2] | 0) + 12 >> 2] & 255](h);
			h = HEAP32[m >> 2] | 0;
			if (((h | 0) != 0 ? (m = h + 4 | 0, g = (HEAP32[m >> 2] | 0) + -1 | 0, HEAP32[m >> 2] = g, (g | 0) == 0) : 0) ? (lc[c[(HEAP32[h >> 2] | 0) + 8 >> 2] & 255](h), g = h + 8 | 0, m = (HEAP32[g >> 2] | 0) + -1 | 0, HEAP32[g >> 2] = m, (m | 0) == 0) : 0)
				lc[c[(HEAP32[h >> 2] | 0) + 12 >> 2] & 255](h);
			h = HEAP32[l + 16 >> 2] | 0;
			if ((h | 0) == (l | 0)) {
				lc[c[(HEAP32[h >> 2] | 0) + 16 >> 2] & 255](h);
				i = k;
				return n | 0
			}
			if (!h) {
				i = k;
				return n | 0
			}
			lc[c[(HEAP32[h >> 2] | 0) + 20 >> 2] & 255](h);
			i = k;
			return n | 0
		}
		function hg(a, b, d) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0;
			e = i;
			f = a + 16 | 0;
			g = HEAP32[f >> 2] | 0;
			if ((g | 0) > 0) {
				h = a + 8 | 0;
				j = g;
				g = 0;
				while (1) {
					k = (HEAP32[a >> 2] | 0) + ((c[(HEAP32[h >> 2] | 0) + (g << 2) >> 2] | 0) * 72 | 0) + 68 | 0;
					l = HEAP32[k >> 2] | 0;
					if (!l)
						m = j;
					else {
						ll(l);
						m = HEAP32[f >> 2] | 0
					}
					HEAP32[k >> 2] = 0;
					g = g + 1 | 0;
					if ((g | 0) >= (m | 0))
						break;
					else
						j = m
				}
			}
			m = a + 20 | 0;
			j = HEAP32[m >> 2] | 0;
			if ((j | 0) > 0) {
				g = HEAP32[a + 8 >> 2] | 0;
				h = 0;
				do {
					HEAP32[g + (h << 2) >> 2] = h;
					h = h + 1 | 0;
					k = HEAP32[m >> 2] | 0
				} while ((h | 0) < (k | 0));
				n = k
			} else
				n = j;
			HEAP32[f >> 2] = 0;
			if ((b | 0) < 1 | (n | 0) == (b | 0))
				o = n;
			else {
				n = a + 12 | 0;
				j = HEAP32[n >> 2] | 0;
				if (j)
					ll(j);
				HEAP32[n >> 2] = 0;
				j = a + 8 | 0;
				h = HEAP32[j >> 2] | 0;
				if (h)
					ll(h);
				HEAP32[j >> 2] = 0;
				h = a + 4 | 0;
				g = HEAP32[h >> 2] | 0;
				if (g)
					ll(g);
				g = jl((b * 72 | 0) + d | 0) | 0;
				HEAP32[h >> 2] = g;
				h = d + -1 + g | 0;
				HEAP32[a >> 2] = h - ((h >>> 0) % (d >>> 0) | 0);
				d = b >>> 0 > 1073741823 ? -1 : b << 2;
				HEAP32[j >> 2] = jl(d) | 0;
				HEAP32[n >> 2] = jl(d) | 0;
				HEAP32[m >> 2] = b;
				o = b
			}
			if ((o | 0) <= 0) {
				HEAP32[f >> 2] = 0;
				i = e;
				return
			}
			o = HEAP32[a + 8 >> 2] | 0;
			a = 0;
			do {
				HEAP32[o + (a << 2) >> 2] = a;
				a = a + 1 | 0
			} while ((a | 0) < (HEAP32[m >> 2] | 0));
			HEAP32[f >> 2] = 0;
			i = e;
			return
		}
		function ig(a) {
			a = a | 0;
			var b = 0,
			d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0;
			b = i;
			d = a + 16 | 0;
			e = HEAP32[d >> 2] | 0;
			if ((e | 0) > 0) {
				f = a + 8 | 0;
				g = e;
				e = 0;
				while (1) {
					h = (HEAP32[a >> 2] | 0) + ((c[(HEAP32[f >> 2] | 0) + (e << 2) >> 2] | 0) * 72 | 0) + 68 | 0;
					j = HEAP32[h >> 2] | 0;
					if (!j)
						k = g;
					else {
						ll(j);
						k = HEAP32[d >> 2] | 0
					}
					HEAP32[h >> 2] = 0;
					e = e + 1 | 0;
					if ((e | 0) >= (k | 0))
						break;
					else
						g = k
				}
			}
			k = a + 20 | 0;
			if ((HEAP32[k >> 2] | 0) > 0) {
				g = HEAP32[a + 8 >> 2] | 0;
				e = 0;
				do {
					HEAP32[g + (e << 2) >> 2] = e;
					e = e + 1 | 0
				} while ((e | 0) < (HEAP32[k >> 2] | 0))
			}
			HEAP32[d >> 2] = 0;
			d = a + 12 | 0;
			k = HEAP32[d >> 2] | 0;
			if (k)
				ll(k);
			HEAP32[d >> 2] = 0;
			d = a + 8 | 0;
			k = HEAP32[d >> 2] | 0;
			if (k)
				ll(k);
			HEAP32[d >> 2] = 0;
			d = a + 4 | 0;
			a = HEAP32[d >> 2] | 0;
			if (!a) {
				HEAP32[d >> 2] = 0;
				i = b;
				return
			}
			ll(a);
			HEAP32[d >> 2] = 0;
			i = b;
			return
		}
		function jg(a, b, d) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0;
			e = i;
			f = a + 16 | 0;
			if ((HEAP32[f >> 2] | 0) > 0) {
				g = a + 8 | 0;
				h = 0;
				do {
					j = HEAP32[(HEAP32[a >> 2] | 0) + ((c[(HEAP32[g >> 2] | 0) + (h << 2) >> 2] | 0) * 36 | 0) + 28 >> 2] | 0;
					if (((j | 0) != 0 ? (k = j + 4 | 0, l = (HEAP32[k >> 2] | 0) + -1 | 0, HEAP32[k >> 2] = l, (l | 0) == 0) : 0) ? (lc[c[(HEAP32[j >> 2] | 0) + 8 >> 2] & 255](j), l = j + 8 | 0, k = (HEAP32[l >> 2] | 0) + -1 | 0, HEAP32[l >> 2] = k, (k | 0) == 0) : 0)
						lc[c[(HEAP32[j >> 2] | 0) + 12 >> 2] & 255](j);
					h = h + 1 | 0
				} while ((h | 0) < (HEAP32[f >> 2] | 0))
			}
			h = a + 20 | 0;
			g = HEAP32[h >> 2] | 0;
			if ((g | 0) > 0) {
				j = HEAP32[a + 8 >> 2] | 0;
				k = 0;
				do {
					HEAP32[j + (k << 2) >> 2] = k;
					k = k + 1 | 0;
					l = HEAP32[h >> 2] | 0
				} while ((k | 0) < (l | 0));
				m = l
			} else
				m = g;
			HEAP32[f >> 2] = 0;
			if ((b | 0) < 1 | (m | 0) == (b | 0))
				n = m;
			else {
				m = a + 12 | 0;
				g = HEAP32[m >> 2] | 0;
				if (g)
					ll(g);
				HEAP32[m >> 2] = 0;
				g = a + 8 | 0;
				k = HEAP32[g >> 2] | 0;
				if (k)
					ll(k);
				HEAP32[g >> 2] = 0;
				k = a + 4 | 0;
				j = HEAP32[k >> 2] | 0;
				if (j)
					ll(j);
				j = jl((b * 36 | 0) + d | 0) | 0;
				HEAP32[k >> 2] = j;
				k = d + -1 + j | 0;
				HEAP32[a >> 2] = k - ((k >>> 0) % (d >>> 0) | 0);
				d = b >>> 0 > 1073741823 ? -1 : b << 2;
				HEAP32[g >> 2] = jl(d) | 0;
				HEAP32[m >> 2] = jl(d) | 0;
				HEAP32[h >> 2] = b;
				n = b
			}
			if ((n | 0) <= 0) {
				HEAP32[f >> 2] = 0;
				i = e;
				return
			}
			n = HEAP32[a + 8 >> 2] | 0;
			a = 0;
			do {
				HEAP32[n + (a << 2) >> 2] = a;
				a = a + 1 | 0
			} while ((a | 0) < (HEAP32[h >> 2] | 0));
			HEAP32[f >> 2] = 0;
			i = e;
			return
		}
		function kg(a) {
			a = a | 0;
			var b = 0,
			d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0;
			b = i;
			d = a + 16 | 0;
			if ((HEAP32[d >> 2] | 0) > 0) {
				e = a + 8 | 0;
				f = 0;
				do {
					g = HEAP32[(HEAP32[a >> 2] | 0) + ((c[(HEAP32[e >> 2] | 0) + (f << 2) >> 2] | 0) * 36 | 0) + 28 >> 2] | 0;
					if (((g | 0) != 0 ? (h = g + 4 | 0, j = (HEAP32[h >> 2] | 0) + -1 | 0, HEAP32[h >> 2] = j, (j | 0) == 0) : 0) ? (lc[c[(HEAP32[g >> 2] | 0) + 8 >> 2] & 255](g), j = g + 8 | 0, h = (HEAP32[j >> 2] | 0) + -1 | 0, HEAP32[j >> 2] = h, (h | 0) == 0) : 0)
						lc[c[(HEAP32[g >> 2] | 0) + 12 >> 2] & 255](g);
					f = f + 1 | 0
				} while ((f | 0) < (HEAP32[d >> 2] | 0))
			}
			f = a + 20 | 0;
			if ((HEAP32[f >> 2] | 0) > 0) {
				e = HEAP32[a + 8 >> 2] | 0;
				g = 0;
				do {
					HEAP32[e + (g << 2) >> 2] = g;
					g = g + 1 | 0
				} while ((g | 0) < (HEAP32[f >> 2] | 0))
			}
			HEAP32[d >> 2] = 0;
			d = a + 12 | 0;
			f = HEAP32[d >> 2] | 0;
			if (f)
				ll(f);
			HEAP32[d >> 2] = 0;
			d = a + 8 | 0;
			f = HEAP32[d >> 2] | 0;
			if (f)
				ll(f);
			HEAP32[d >> 2] = 0;
			d = a + 4 | 0;
			a = HEAP32[d >> 2] | 0;
			if (!a) {
				HEAP32[d >> 2] = 0;
				i = b;
				return
			}
			ll(a);
			HEAP32[d >> 2] = 0;
			i = b;
			return
		}
		function lg(a) {
			a = a | 0;
			var b = 0,
			d = 0,
			e = 0;
			b = i;
			d = HEAP32[a >> 2] | 0;
			if (!d) {
				i = b;
				return
			}
			a = d + 4 | 0;
			e = (HEAP32[a >> 2] | 0) + -1 | 0;
			HEAP32[a >> 2] = e;
			if (e) {
				i = b;
				return
			}
			lc[c[(HEAP32[d >> 2] | 0) + 8 >> 2] & 255](d);
			e = d + 8 | 0;
			a = (HEAP32[e >> 2] | 0) + -1 | 0;
			HEAP32[e >> 2] = a;
			if (a) {
				i = b;
				return
			}
			lc[c[(HEAP32[d >> 2] | 0) + 12 >> 2] & 255](d);
			i = b;
			return
		}
		function mg(a) {
			a = a | 0;
			return
		}
		function ng(a) {
			a = a | 0;
			var b = 0,
			d = 0,
			e = 0,
			f = 0;
			b = i;
			d = HEAP32[a + 60 >> 2] | 0;
			if (!((d | 0) == 0 ? 1 : ((HEAP32[a + 68 >> 2] | 0) - d | 0) < 2))
				ll(d);
			d = HEAP32[a + 44 >> 2] | 0;
			if (((d | 0) != 0 ? (e = d + 4 | 0, f = (HEAP32[e >> 2] | 0) + -1 | 0, HEAP32[e >> 2] = f, (f | 0) == 0) : 0) ? (lc[c[(HEAP32[d >> 2] | 0) + 8 >> 2] & 255](d), f = d + 8 | 0, e = (HEAP32[f >> 2] | 0) + -1 | 0, HEAP32[f >> 2] = e, (e | 0) == 0) : 0)
				lc[c[(HEAP32[d >> 2] | 0) + 12 >> 2] & 255](d);
			d = HEAP32[a + 28 >> 2] | 0;
			if (!((d | 0) == 0 ? 1 : ((HEAP32[a + 36 >> 2] | 0) - d | 0) < 2))
				ll(d);
			d = HEAP32[a + 12 >> 2] | 0;
			if (!((d | 0) == 0 ? 1 : ((HEAP32[a + 20 >> 2] | 0) - d | 0) < 2))
				ll(d);
			d = HEAP32[a >> 2] | 0;
			if (!d) {
				i = b;
				return
			}
			a = d + 8 | 0;
			e = (HEAP32[a >> 2] | 0) + -1 | 0;
			HEAP32[a >> 2] = e;
			if (e) {
				i = b;
				return
			}
			lc[c[(HEAP32[d >> 2] | 0) + 12 >> 2] & 255](d);
			i = b;
			return
		}
		function og(a, b, d) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0;
			e = i;
			i = i + 16 | 0;
			f = e;
			g = a + 4 | 0;
			h = (HEAP32[g >> 2] | 0) - (HEAP32[a >> 2] | 0) | 0;
			HEAP32[f >> 2] = HEAP32[d >> 2];
			j = HEAP32[g >> 2] | 0;
			if ((HEAP32[a >> 2] | 0) == 43112) {
				k = a + 8 | 0;
				l = pl(j, 0, b, d) | 0
			} else {
				m = a + 8 | 0;
				k = m;
				l = pl(j, (HEAP32[m >> 2] | 0) - j | 0, b, d) | 0
			}
			j = HEAP32[g >> 2] | 0;
			if ((l | 0) < ((HEAP32[k >> 2] | 0) - j | 0))
				if ((l | 0) < 0) {
					k = j - (HEAP32[a >> 2] | 0) << 1;
					j = k >>> 0 > 7 ? k : 7;
					if (j >>> 0 < 1e6) {
						k = j;
						do {
							HEAP32[d >> 2] = HEAP32[f >> 2];
							tg(a, k);
							j = k + 1 | 0;
							m = j - h | 0;
							n = pl((HEAP32[a >> 2] | 0) + h | 0, m, b, d) | 0;
							if ((n | 0) == (m | 0)) {
								tg(a, j);
								o = j;
								p = pl((HEAP32[a >> 2] | 0) + h | 0, m + 1 | 0, b, d) | 0
							} else {
								o = k;
								p = n
							}
							k = o << 1
						} while ((p | 0) < 0 & k >>> 0 < 1e6);
						q = p;
						r = 11
					} else {
						q = l;
						r = 11
					}
				} else
					s = l;
			else {
				HEAP32[d >> 2] = HEAP32[f >> 2];
				tg(a, l + h | 0);
				q = pl((HEAP32[a >> 2] | 0) + h | 0, l + 1 | 0, b, d) | 0;
				r = 11
			}
			if ((r | 0) == 11)
				if ((q | 0) > -1)
					s = q;
				else {
					i = e;
					return a | 0
				}
			HEAP32[g >> 2] = (HEAP32[a >> 2] | 0) + (s + h);
			i = e;
			return a | 0
		}
		function pg(b, d) {
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0;
			e = i;
			f = b + 4 | 0;
			g = HEAP32[b >> 2] | 0;
			h = g;
			j = (HEAP32[f >> 2] | 0) - h | 0;
			if ((d | 0) != -1)
				if (j >>> 0 > d >>> 0) {
					HEAP32[f >> 2] = g + d;
					k = d
				} else
					k = d;
			else
				k = j;
			j = b + 8 | 0;
			d = (HEAP32[j >> 2] | 0) - h | 0;
			if ((k | 0) == (d + -1 | 0)) {
				i = e;
				return
			}
			if (!k) {
				if (!((d | 0) < 2 | (g | 0) == 0))
					ll(g);
				HEAP32[b >> 2] = 43112;
				HEAP32[f >> 2] = 43112;
				HEAP32[j >> 2] = 43113;
				i = e;
				return
			} else {
				g = k + 1 | 0;
				k = ml(g, 0, 0, 0, 0, 0) | 0;
				d = HEAP32[b >> 2] | 0;
				h = (HEAP32[f >> 2] | 0) - d | 0;
				ry(k | 0, d | 0, h | 0) | 0;
				d = k + h | 0;
				HEAP8[d >> 0] = 0;
				h = HEAP32[b >> 2] | 0;
				if (!((h | 0) == 0 ? 1 : ((HEAP32[j >> 2] | 0) - h | 0) < 2))
					ll(h);
				HEAP32[b >> 2] = k;
				HEAP32[f >> 2] = d;
				HEAP32[j >> 2] = k + g;
				i = e;
				return
			}
		}
		function qg(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0;
			d = i;
			e = b << 2;
			f = ml(e + 4 | 0, 0, 4194304, 0, 0, 0) | 0;
			sy(f | 0, 0, e | 0) | 0;
			HEAP32[f + (b << 2) >> 2] = -1;
			e = a + 8 | 0;
			g = HEAP32[e >> 2] | 0;
			h = a + 4 | 0;
			if (!g) {
				j = h;
				HEAP32[e >> 2] = b;
				HEAP32[j >> 2] = f;
				i = d;
				return
			}
			k = g;
			g = HEAP32[h >> 2] | 0;
			l = 0;
			while (1) {
				m = g + (l << 2) | 0;
				n = HEAP32[m >> 2] | 0;
				if (!n) {
					o = k;
					p = g
				} else {
					q = n;
					n = m;
					do {
						m = ((HEAP32[q >> 2] | 0) >>> 0) % (b >>> 0) | 0;
						r = q + 8 | 0;
						HEAP32[n >> 2] = HEAP32[r >> 2];
						s = f + (m << 2) | 0;
						HEAP32[r >> 2] = HEAP32[s >> 2];
						HEAP32[s >> 2] = q;
						t = HEAP32[h >> 2] | 0;
						n = t + (l << 2) | 0;
						q = HEAP32[n >> 2] | 0
					} while ((q | 0) != 0);
					o = HEAP32[e >> 2] | 0;
					p = t
				}
				l = l + 1 | 0;
				if (l >>> 0 >= o >>> 0)
					break;
				else {
					k = o;
					g = p
				}
			}
			g = a + 4 | 0;
			if (o >>> 0 < 2 | (p | 0) == 0) {
				j = g;
				HEAP32[e >> 2] = b;
				HEAP32[j >> 2] = f;
				i = d;
				return
			}
			ll(p);
			j = g;
			HEAP32[e >> 2] = b;
			HEAP32[j >> 2] = f;
			i = d;
			return
		}
		function rg(a, b, d) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0;
			e = i;
			i = i + 16 | 0;
			f = e;
			g = a + 4 | 0;
			h = (HEAP32[g >> 2] | 0) - (HEAP32[a >> 2] | 0) | 0;
			HEAP32[f >> 2] = HEAP32[d >> 2];
			j = HEAP32[g >> 2] | 0;
			if ((HEAP32[a >> 2] | 0) == 43112) {
				k = a + 8 | 0;
				l = pl(j, 0, b, d) | 0
			} else {
				m = a + 8 | 0;
				k = m;
				l = pl(j, (HEAP32[m >> 2] | 0) - j | 0, b, d) | 0
			}
			j = HEAP32[g >> 2] | 0;
			if ((l | 0) < ((HEAP32[k >> 2] | 0) - j | 0))
				if ((l | 0) < 0) {
					k = j - (HEAP32[a >> 2] | 0) << 1;
					j = k >>> 0 > 7 ? k : 7;
					if (j >>> 0 < 1e6) {
						k = j;
						do {
							HEAP32[d >> 2] = HEAP32[f >> 2];
							ug(a, k);
							j = k + 1 | 0;
							m = j - h | 0;
							n = pl((HEAP32[a >> 2] | 0) + h | 0, m, b, d) | 0;
							if ((n | 0) == (m | 0)) {
								ug(a, j);
								o = j;
								p = pl((HEAP32[a >> 2] | 0) + h | 0, m + 1 | 0, b, d) | 0
							} else {
								o = k;
								p = n
							}
							k = o << 1
						} while ((p | 0) < 0 & k >>> 0 < 1e6);
						q = p;
						r = 11
					} else {
						q = l;
						r = 11
					}
				} else
					s = l;
			else {
				HEAP32[d >> 2] = HEAP32[f >> 2];
				ug(a, l + h | 0);
				q = pl((HEAP32[a >> 2] | 0) + h | 0, l + 1 | 0, b, d) | 0;
				r = 11
			}
			if ((r | 0) == 11)
				if ((q | 0) > -1)
					s = q;
				else {
					i = e;
					return a | 0
				}
			HEAP32[g >> 2] = (HEAP32[a >> 2] | 0) + (s + h);
			i = e;
			return a | 0
		}
		function sg(a, b, d) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0;
			e = i;
			f = a + 4 | 0;
			g = HEAP32[f >> 2] | 0;
			h = a + 8 | 0;
			if ((g | 0) != (HEAP32[h >> 2] | 0)) {
				j = d >>> 0 >= b >>> 0 & g >>> 0 > d >>> 0 ? d + 88 | 0 : d;
				if (!g)
					k = 0;
				else {
					l = g + -88 | 0;
					HEAP32[g >> 2] = HEAP32[l >> 2];
					_f(g + 8 | 0, g + -80 | 0);
					HEAP32[g >> 2] = HEAP32[l >> 2];
					k = HEAP32[f >> 2] | 0
				}
				l = k + -88 | 0;
				if ((l | 0) != (b | 0)) {
					m = l;
					l = k;
					do {
						k = l;
						l = l + -88 | 0;
						n = m;
						m = m + -88 | 0;
						HEAP32[l >> 2] = HEAP32[m >> 2];
						Zf(k + -80 | 0, n + -80 | 0) | 0
					} while ((m | 0) != (b | 0))
				}
				HEAP32[b >> 2] = HEAP32[j >> 2];
				Zf(b + 8 | 0, j + 8 | 0) | 0;
				HEAP32[f >> 2] = (HEAP32[f >> 2] | 0) + 88;
				i = e;
				return
			}
			j = HEAP32[a >> 2] | 0;
			m = (g | 0) == (j | 0) ? 1 : ((g - j | 0) / 88 | 0) << 1;
			if (!m) {
				o = j;
				p = 0
			} else {
				j = ml(m * 88 | 0, 0, 0, 0, 0, 0) | 0;
				o = HEAP32[a >> 2] | 0;
				p = j
			}
			if ((o | 0) == (b | 0))
				q = p;
			else {
				j = ((b + -88 - o | 0) >>> 0) / 88 | 0;
				g = p;
				l = o;
				while (1) {
					if (g) {
						HEAP32[g >> 2] = HEAP32[l >> 2];
						_f(g + 8 | 0, l + 8 | 0);
						HEAP32[g >> 2] = HEAP32[l >> 2]
					}
					l = l + 88 | 0;
					if ((l | 0) == (b | 0))
						break;
					else
						g = g + 88 | 0
				}
				q = p + ((j + 1 | 0) * 88 | 0) | 0
			}
			if (q) {
				HEAP32[q >> 2] = HEAP32[d >> 2];
				_f(q + 8 | 0, d + 8 | 0);
				HEAP32[q >> 2] = HEAP32[d >> 2]
			}
			d = HEAP32[f >> 2] | 0;
			j = q + 88 | 0;
			if ((d | 0) == (b | 0)) {
				r = b;
				s = j
			} else {
				g = d + -88 - b | 0;
				l = b;
				b = j;
				while (1) {
					HEAP32[b >> 2] = HEAP32[l >> 2];
					_f(b + 8 | 0, l + 8 | 0);
					HEAP32[b >> 2] = HEAP32[l >> 2];
					l = l + 88 | 0;
					if ((l | 0) == (d | 0))
						break;
					else
						b = b + 88 | 0
				}
				r = HEAP32[f >> 2] | 0;
				s = q + ((((g >>> 0) / 88 | 0) + 2 | 0) * 88 | 0) | 0
			}
			g = HEAP32[a >> 2] | 0;
			if (g >>> 0 < r >>> 0) {
				q = g;
				do {
					Yf(q + 8 | 0);
					q = q + 88 | 0
				} while (q >>> 0 < r >>> 0);
				t = HEAP32[a >> 2] | 0
			} else
				t = g;
			if (t)
				ll(t);
			HEAP32[a >> 2] = p;
			HEAP32[f >> 2] = s;
			HEAP32[h >> 2] = p + (m * 88 | 0);
			i = e;
			return
		}
		function tg(b, d) {
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0;
			e = i;
			f = b + 4 | 0;
			g = HEAP32[f >> 2] | 0;
			h = HEAP32[b >> 2] | 0;
			j = g;
			k = h;
			l = j - k | 0;
			if (l >>> 0 > d >>> 0) {
				m = h + d | 0;
				if ((m | 0) == (g | 0)) {
					i = e;
					return
				}
				HEAP8[m >> 0] = HEAP8[g >> 0] | 0;
				HEAP32[f >> 2] = (HEAP32[f >> 2] | 0) + (m - j);
				i = e;
				return
			}
			if (l >>> 0 >= d >>> 0) {
				i = e;
				return
			}
			j = d - l | 0;
			m = b + 8 | 0;
			n = HEAP32[m >> 2] | 0;
			o = n - k | 0;
			p = o + -1 | 0;
			do
				if ((p >>> 0 < d >>> 0 ? (q = p >>> 0 > 8 ? p << 1 : 8, r = q >>> 0 < d >>> 0 ? d : q, q = l >>> 0 > r >>> 0 ? l : r, q >>> 0 >= o >>> 0) : 0) ? (r = (q | 0) == -1 ? l : q, (r | 0) != (n + ~k | 0)) : 0)
					if (!r) {
						HEAP32[b >> 2] = 43112;
						HEAP32[f >> 2] = 43112;
						HEAP32[m >> 2] = 43113;
						s = 43112;
						break
					} else {
						qy(0, h | 0, l | 0) | 0;
						q = 0 + l | 0;
						HEAP8[q >> 0] = 0;
						HEAP32[b >> 2] = 0;
						HEAP32[f >> 2] = q;
						HEAP32[m >> 2] = r + 1;
						s = q;
						break
					}
				else
					s = g;
			while (0);
			if ((l | 0) == (d | 0)) {
				i = e;
				return
			}
			d = j + -1 | 0;
			if (!d)
				t = s;
			else {
				sy(s + 1 | 0, 0, d | 0) | 0;
				t = HEAP32[f >> 2] | 0
			}
			HEAP8[t >> 0] = 0;
			t = (HEAP32[f >> 2] | 0) + j | 0;
			HEAP32[f >> 2] = t;
			HEAP8[t >> 0] = 0;
			i = e;
			return
		}
		function ug(b, d) {
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0;
			e = i;
			f = b + 4 | 0;
			g = HEAP32[f >> 2] | 0;
			h = HEAP32[b >> 2] | 0;
			j = g;
			k = h;
			l = j - k | 0;
			if (l >>> 0 > d >>> 0) {
				m = h + d | 0;
				if ((m | 0) == (g | 0)) {
					i = e;
					return
				}
				HEAP8[m >> 0] = HEAP8[g >> 0] | 0;
				HEAP32[f >> 2] = (HEAP32[f >> 2] | 0) + (m - j);
				i = e;
				return
			}
			if (l >>> 0 >= d >>> 0) {
				i = e;
				return
			}
			j = d - l | 0;
			m = b + 8 | 0;
			n = HEAP32[m >> 2] | 0;
			o = n - k | 0;
			p = o + -1 | 0;
			do
				if ((p >>> 0 < d >>> 0 ? (q = p >>> 0 > 8 ? p << 1 : 8, r = q >>> 0 < d >>> 0 ? d : q, q = l >>> 0 > r >>> 0 ? l : r, q >>> 0 >= o >>> 0) : 0) ? (r = (q | 0) == -1 ? l : q, (r | 0) != (n + ~k | 0)) : 0)
					if (!r) {
						HEAP32[b >> 2] = 43112;
						HEAP32[f >> 2] = 43112;
						HEAP32[m >> 2] = 43113;
						s = 43112;
						break
					} else {
						qy(0, h | 0, l | 0) | 0;
						q = 0 + l | 0;
						HEAP8[q >> 0] = 0;
						HEAP32[b >> 2] = 0;
						HEAP32[f >> 2] = q;
						HEAP32[m >> 2] = r + 1;
						s = q;
						break
					}
				else
					s = g;
			while (0);
			if ((l | 0) == (d | 0)) {
				i = e;
				return
			}
			d = j + -1 | 0;
			if (!d)
				t = s;
			else {
				sy(s + 1 | 0, 0, d | 0) | 0;
				t = HEAP32[f >> 2] | 0
			}
			HEAP8[t >> 0] = 0;
			t = (HEAP32[f >> 2] | 0) + j | 0;
			HEAP32[f >> 2] = t;
			HEAP8[t >> 0] = 0;
			i = e;
			return
		}
		function vg(a) {
			a = a | 0;
			var b = 0;
			HEAP32[a >> 2] = 0;
			HEAP32[a + 4 >> 2] = 0;
			b = a + 24 | 0;
			HEAP32[a + 12 >> 2] = b;
			HEAP32[a + 8 >> 2] = b;
			HEAP32[a + 16 >> 2] = a + 40;
			HEAP32[a + 40 >> 2] = 0;
			HEAP32[a + 44 >> 2] = 0;
			return
		}
		function wg(b, d, e, f) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0;
			g = i;
			i = i + 64 | 0;
			h = g + 49 | 0;
			j = g + 48 | 0;
			k = g + 16 | 0;
			l = g;
			xg(b);
			m = da(e, d) | 0;
			n = m << 2;
			o = b + 40 | 0;
			do
				if ((HEAP32[o >> 2] | 0) != (n | 0)) {
					if (m) {
						p = b + 44 | 0;
						if (HEAP32[p >> 2] | 0)
							break;
						HEAP32[o >> 2] = n;
						HEAP32[p >> 2] = jl(n) | 0;
						break
					}
					HEAP32[o >> 2] = n;
					p = HEAP32[b + 44 >> 2] | 0;
					if (p)
						ll(p);
					HEAP32[b + 44 >> 2] = 0
				}
			while (0);
			if ((m | 0) != 0 ? (HEAP32[b + 44 >> 2] | 0) == 0 : 0) {
				q = 0;
				i = g;
				return q | 0
			}
			if (f)
				qy(HEAP32[b + 44 >> 2] | 0, f | 0, n | 0) | 0;
			HEAP32[b >> 2] = d;
			HEAP32[b + 4 >> 2] = e;
			e = b + 8 | 0;
			d = k + 16 | 0;
			n = k + 4 | 0;
			HEAP32[l + 0 >> 2] = 0;
			HEAP32[l + 4 >> 2] = 0;
			HEAP32[l + 8 >> 2] = 0;
			HEAP32[l + 12 >> 2] = 0;
			HEAP32[n >> 2] = d;
			HEAP32[k >> 2] = d;
			HEAP32[k + 8 >> 2] = k + 32;
			HEAP8[h + 0 >> 0] = HEAP8[j + 0 >> 0] | 0;
			Dg(k, d, l, l + 16 | 0, h);
			if ((e | 0) == (k | 0)) {
				q = 1;
				i = g;
				return q | 0
			}
			h = b + 12 | 0;
			l = HEAP32[e >> 2] | 0;
			HEAP32[h >> 2] = l;
			d = HEAP32[k >> 2] | 0;
			k = (HEAP32[n >> 2] | 0) - d | 0;
			n = k >> 2;
			j = b + 16 | 0;
			if (n >>> 0 > (HEAP32[j >> 2] | 0) - l >> 2 >>> 0) {
				qy(0, d | 0, k | 0) | 0;
				HEAP32[e >> 2] = 0;
				e = 0 + (n << 2) | 0;
				HEAP32[h >> 2] = e;
				HEAP32[j >> 2] = e;
				q = 1;
				i = g;
				return q | 0
			} else {
				ry(l | 0, d | 0, k | 0) | 0;
				HEAP32[h >> 2] = l + (n << 2);
				q = 1;
				i = g;
				return q | 0
			}
			return 0
		}
		function xg(b) {
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0;
			d = i;
			i = i + 64 | 0;
			e = d + 49 | 0;
			f = d + 16 | 0;
			g = d;
			HEAP32[b + 40 >> 2] = 0;
			h = b + 44 | 0;
			j = HEAP32[h >> 2] | 0;
			HEAP32[h >> 2] = 0;
			if (j)
				ll(j);
			HEAP32[b >> 2] = 0;
			HEAP32[b + 4 >> 2] = 0;
			j = b + 8 | 0;
			h = f + 16 | 0;
			k = f + 4 | 0;
			HEAP32[g + 0 >> 2] = 0;
			HEAP32[g + 4 >> 2] = 0;
			HEAP32[g + 8 >> 2] = 0;
			HEAP32[g + 12 >> 2] = 0;
			HEAP32[k >> 2] = h;
			HEAP32[f >> 2] = h;
			HEAP32[f + 8 >> 2] = f + 32;
			HEAP8[e + 0 >> 0] = HEAP8[d + 48 >> 0] | 0;
			Dg(f, h, g, g + 16 | 0, e);
			if ((j | 0) == (f | 0)) {
				i = d;
				return
			}
			e = b + 12 | 0;
			g = HEAP32[j >> 2] | 0;
			HEAP32[e >> 2] = g;
			h = HEAP32[f >> 2] | 0;
			f = (HEAP32[k >> 2] | 0) - h | 0;
			k = f >> 2;
			l = b + 16 | 0;
			if (k >>> 0 > (HEAP32[l >> 2] | 0) - g >> 2 >>> 0) {
				qy(0, h | 0, f | 0) | 0;
				HEAP32[j >> 2] = 0;
				j = 0 + (k << 2) | 0;
				HEAP32[e >> 2] = j;
				HEAP32[l >> 2] = j;
				i = d;
				return
			} else {
				ry(g | 0, h | 0, f | 0) | 0;
				HEAP32[e >> 2] = g + (k << 2);
				i = d;
				return
			}
		}
		function lr(b, e, f, g, h, j, k, l, m, n, o) {
			b = b | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			k = k | 0;
			l = l | 0;
			m = m | 0;
			n = n | 0;
			o = o | 0;
			var p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0,
			O = 0,
			P = 0,
			Q = 0,
			R = 0,
			S = 0,
			T = 0,
			U = 0,
			V = 0,
			W = 0,
			X = 0,
			Y = 0,
			Z = 0,
			_ = 0,
			$ = 0,
			aa = 0,
			ba = 0,
			ca = 0,
			da = 0,
			ea = 0,
			fa = 0,
			ga = 0,
			ha = 0,
			ia = 0,
			ja = 0,
			ka = 0,
			la = 0,
			ma = 0,
			na = 0,
			oa = 0,
			pa = 0,
			qa = 0,
			ra = 0,
			sa = 0,
			ta = 0,
			ua = 0,
			va = 0,
			wa = 0,
			xa = 0,
			ya = 0,
			za = 0,
			Aa = 0,
			Ba = 0,
			Ca = 0,
			Da = 0,
			Ea = 0,
			Fa = 0,
			Ga = 0,
			Ha = 0,
			Ia = 0,
			Ja = 0,
			Ka = 0,
			La = 0,
			Ma = 0,
			Na = 0,
			Oa = 0,
			Pa = 0,
			Qa = 0,
			Ra = 0,
			Sa = 0,
			Ta = 0,
			Ua = 0,
			Va = 0,
			Wa = 0,
			Xa = 0,
			Ya = 0,
			Za = 0,
			_a = 0,
			$a = 0,
			ab = 0,
			bb = 0,
			cb = 0,
			db = 0,
			eb = 0,
			fb = 0,
			gb = 0,
			hb = 0,
			ib = 0,
			jb = 0,
			kb = 0,
			lb = 0,
			mb = 0,
			nb = 0,
			ob = 0,
			pb = 0,
			qb = 0,
			rb = 0,
			sb = 0,
			tb = 0,
			ub = 0,
			vb = 0,
			wb = 0,
			xb = 0,
			yb = 0,
			zb = 0,
			Ab = 0,
			Bb = 0,
			Cb = 0,
			Db = 0,
			Eb = 0,
			Fb = 0,
			Gb = 0,
			Hb = 0,
			Ib = 0,
			Jb = 0,
			Kb = 0,
			Lb = 0,
			Mb = 0,
			Nb = 0,
			Ob = 0,
			Pb = 0,
			Qb = 0,
			Rb = 0,
			Sb = 0,
			Tb = 0,
			Ub = 0,
			Vb = 0,
			Wb = 0;
			p = i;
			i = i + 512 | 0;
			q = p + 496 | 0;
			r = p + 96 | 0;
			s = p + 88 | 0;
			t = p + 84 | 0;
			u = p + 80 | 0;
			v = p + 76 | 0;
			w = p + 72 | 0;
			x = p + 68 | 0;
			y = p + 56 | 0;
			z = p + 44 | 0;
			A = p + 32 | 0;
			B = p + 20 | 0;
			C = p + 8 | 0;
			D = p + 4 | 0;
			E = p;
			HEAP32[q >> 2] = o;
			HEAP32[s >> 2] = r;
			o = s + 4 | 0;
			HEAP32[o >> 2] = 185;
			HEAP32[t >> 2] = r;
			HEAP32[u >> 2] = r + 400;
			HEAP32[v >> 2] = 0;
			HEAP32[y + 0 >> 2] = 0;
			HEAP32[y + 4 >> 2] = 0;
			HEAP32[y + 8 >> 2] = 0;
			HEAP32[z + 0 >> 2] = 0;
			HEAP32[z + 4 >> 2] = 0;
			HEAP32[z + 8 >> 2] = 0;
			HEAP32[A + 0 >> 2] = 0;
			HEAP32[A + 4 >> 2] = 0;
			HEAP32[A + 8 >> 2] = 0;
			HEAP32[B + 0 >> 2] = 0;
			HEAP32[B + 4 >> 2] = 0;
			HEAP32[B + 8 >> 2] = 0;
			HEAP32[C + 0 >> 2] = 0;
			HEAP32[C + 4 >> 2] = 0;
			HEAP32[C + 8 >> 2] = 0;
			nr(f, g, v, w, x, y, z, A, B, D);
			HEAP32[n >> 2] = HEAP32[m >> 2];
			g = B + 4 | 0;
			f = B + 8 | 0;
			F = A + 4 | 0;
			G = A + 8 | 0;
			H = (h & 512 | 0) != 0;
			h = z + 4 | 0;
			I = z + 8 | 0;
			J = C + 4 | 0;
			K = C + 8 | 0;
			L = v + 3 | 0;
			M = y + 4 | 0;
			N = r;
			r = 0;
			O = 0;
			a: while (1) {
				P = HEAP32[b >> 2] | 0;
				do
					if (P) {
						Q = HEAP32[P + 12 >> 2] | 0;
						if ((Q | 0) == (HEAP32[P + 16 >> 2] | 0))
							R = tc[c[(HEAP32[P >> 2] | 0) + 36 >> 2] & 127](P) | 0;
						else
							R = HEAP32[Q >> 2] | 0;
						if ((R | 0) == -1) {
							HEAP32[b >> 2] = 0;
							S = 1;
							break
						} else {
							S = (HEAP32[b >> 2] | 0) == 0;
							break
						}
					} else
						S = 1;
				while (0);
				P = HEAP32[e >> 2] | 0;
				do
					if (P) {
						Q = HEAP32[P + 12 >> 2] | 0;
						if ((Q | 0) == (HEAP32[P + 16 >> 2] | 0))
							T = tc[c[(HEAP32[P >> 2] | 0) + 36 >> 2] & 127](P) | 0;
						else
							T = HEAP32[Q >> 2] | 0;
						if ((T | 0) != -1)
							if (S) {
								U = P;
								break
							} else {
								V = N;
								W = P;
								X = O;
								Y = 267;
								break a
							}
						else {
							HEAP32[e >> 2] = 0;
							Y = 15;
							break
						}
					} else
						Y = 15;
				while (0);
				if ((Y | 0) == 15) {
					Y = 0;
					if (S) {
						V = N;
						W = 0;
						X = O;
						Y = 267;
						break
					} else
						U = 0
				}
				b: do
					switch (HEAP8[v + r >> 0] | 0) {
					case 0: {
							Y = 29;
							break
						}
					case 3: {
							P = HEAP8[A >> 0] | 0;
							Q = (P & 1) == 0;
							if (Q)
								Z = (P & 255) >>> 1;
							else
								Z = HEAP32[F >> 2] | 0;
							_ = HEAP8[B >> 0] | 0;
							$ = (_ & 1) == 0;
							if ($)
								aa = (_ & 255) >>> 1;
							else
								aa = HEAP32[g >> 2] | 0;
							if ((Z | 0) == (0 - aa | 0)) {
								ba = U;
								ca = N;
								da = O
							} else {
								if (Q)
									ea = (P & 255) >>> 1;
								else
									ea = HEAP32[F >> 2] | 0;
								if (ea) {
									if ($)
										fa = (_ & 255) >>> 1;
									else
										fa = HEAP32[g >> 2] | 0;
									if (fa) {
										$ = HEAP32[b >> 2] | 0;
										ga = HEAP32[$ + 12 >> 2] | 0;
										if ((ga | 0) == (c[$ + 16 >> 2] | 0)) {
											ha = tc[c[(c[$ >> 2] | 0) + 36 >> 2] & 127]($) | 0;
											ia = ha;
											ja = HEAP8[A >> 0] | 0
										} else {
											ia = HEAP32[ga >> 2] | 0;
											ja = P
										}
										ga = HEAP32[b >> 2] | 0;
										ha = ga + 12 | 0;
										$ = HEAP32[ha >> 2] | 0;
										ka = ($ | 0) == (HEAP32[ga + 16 >> 2] | 0);
										if ((ia | 0) == (c[((ja & 1) == 0 ? F : HEAP32[G >> 2] | 0) >> 2] | 0)) {
											if (ka)
												tc[c[(HEAP32[ga >> 2] | 0) + 40 >> 2] & 127](ga) | 0;
											else
												HEAP32[ha >> 2] = $ + 4;
											ha = HEAP8[A >> 0] | 0;
											if (!(ha & 1))
												la = (ha & 255) >>> 1;
											else
												la = HEAP32[F >> 2] | 0;
											ba = U;
											ca = N;
											da = la >>> 0 > 1 ? A : O;
											break b
										}
										if (ka)
											ma = tc[c[(HEAP32[ga >> 2] | 0) + 36 >> 2] & 127](ga) | 0;
										else
											ma = HEAP32[$ >> 2] | 0;
										if ((ma | 0) != (c[((HEAP8[B >> 0] & 1) == 0 ? g : HEAP32[f >> 2] | 0) >> 2] | 0)) {
											Y = 117;
											break a
										}
										$ = HEAP32[b >> 2] | 0;
										ga = $ + 12 | 0;
										ka = HEAP32[ga >> 2] | 0;
										if ((ka | 0) == (c[$ + 16 >> 2] | 0))
											tc[c[(c[$ >> 2] | 0) + 40 >> 2] & 127]($) | 0;
										else
											HEAP32[ga >> 2] = ka + 4;
										HEAP8[k >> 0] = 1;
										ka = HEAP8[B >> 0] | 0;
										if (!(ka & 1))
											na = (ka & 255) >>> 1;
										else
											na = HEAP32[g >> 2] | 0;
										ba = U;
										ca = N;
										da = na >>> 0 > 1 ? B : O;
										break b
									}
								}
								if (Q)
									oa = (P & 255) >>> 1;
								else
									oa = HEAP32[F >> 2] | 0;
								Q = HEAP32[b >> 2] | 0;
								ka = HEAP32[Q + 12 >> 2] | 0;
								ga = (ka | 0) == (HEAP32[Q + 16 >> 2] | 0);
								if (!oa) {
									if (ga) {
										$ = tc[c[(HEAP32[Q >> 2] | 0) + 36 >> 2] & 127](Q) | 0;
										pa = $;
										qa = HEAP8[B >> 0] | 0
									} else {
										pa = HEAP32[ka >> 2] | 0;
										qa = _
									}
									if ((pa | 0) != (c[((qa & 1) == 0 ? g : HEAP32[f >> 2] | 0) >> 2] | 0)) {
										ba = U;
										ca = N;
										da = O;
										break b
									}
									_ = HEAP32[b >> 2] | 0;
									$ = _ + 12 | 0;
									ha = HEAP32[$ >> 2] | 0;
									if ((ha | 0) == (HEAP32[_ + 16 >> 2] | 0))
										tc[c[(HEAP32[_ >> 2] | 0) + 40 >> 2] & 127](_) | 0;
									else
										c[$ >> 2] = ha + 4;
									HEAP8[k >> 0] = 1;
									ha = HEAP8[B >> 0] | 0;
									if (!(ha & 1))
										ra = (ha & 255) >>> 1;
									else
										ra = HEAP32[g >> 2] | 0;
									ba = U;
									ca = N;
									da = ra >>> 0 > 1 ? B : O;
									break b
								}
								if (ga) {
									ga = tc[c[(HEAP32[Q >> 2] | 0) + 36 >> 2] & 127](Q) | 0;
									sa = ga;
									ta = HEAP8[A >> 0] | 0
								} else {
									sa = HEAP32[ka >> 2] | 0;
									ta = P
								}
								if ((sa | 0) != (c[((ta & 1) == 0 ? F : HEAP32[G >> 2] | 0) >> 2] | 0)) {
									HEAP8[k >> 0] = 1;
									ba = U;
									ca = N;
									da = O;
									break b
								}
								P = HEAP32[b >> 2] | 0;
								ka = P + 12 | 0;
								ga = HEAP32[ka >> 2] | 0;
								if ((ga | 0) == (HEAP32[P + 16 >> 2] | 0))
									tc[c[(HEAP32[P >> 2] | 0) + 40 >> 2] & 127](P) | 0;
								else
									HEAP32[ka >> 2] = ga + 4;
								ga = HEAP8[A >> 0] | 0;
								if (!(ga & 1))
									ua = (ga & 255) >>> 1;
								else
									ua = HEAP32[F >> 2] | 0;
								ba = U;
								ca = N;
								da = ua >>> 0 > 1 ? A : O
							}
							break
						}
					case 2: {
							if (!((O | 0) != 0 | r >>> 0 < 2)) {
								if ((r | 0) == 2)
									va = (HEAP8[L >> 0] | 0) != 0;
								else
									va = 0;
								if (!(H | va)) {
									ba = U;
									ca = N;
									da = 0;
									break b
								}
							}
							ga = HEAP8[z >> 0] | 0;
							ka = (ga & 1) == 0 ? h : HEAP32[I >> 2] | 0;
							c: do
								if ((r | 0) != 0 ? (HEAPU8[v + (r + -1) >> 0] | 0) < 2 : 0) {
									P = ga;
									Q = ka;
									while (1) {
										if (!(P & 1)) {
											wa = h;
											xa = (P & 255) >>> 1
										} else {
											wa = HEAP32[I >> 2] | 0;
											xa = HEAP32[h >> 2] | 0
										}
										if ((Q | 0) == (wa + (xa << 2) | 0)) {
											ya = P;
											break
										}
										if (!(mc[c[(HEAP32[l >> 2] | 0) + 12 >> 2] & 31](l, 8192, HEAP32[Q >> 2] | 0) | 0)) {
											Y = 129;
											break
										}
										P = HEAP8[z >> 0] | 0;
										Q = Q + 4 | 0
									}
									if ((Y | 0) == 129) {
										Y = 0;
										ya = HEAP8[z >> 0] | 0
									}
									P = (ya & 1) == 0;
									ha = Q - (P ? h : HEAP32[I >> 2] | 0) >> 2;
									$ = HEAP8[C >> 0] | 0;
									_ = ($ & 1) == 0;
									if (_)
										za = ($ & 255) >>> 1;
									else
										za = HEAP32[J >> 2] | 0;
									d: do
										if (ha >>> 0 <= za >>> 0) {
											if (_) {
												Aa = J;
												Ba = ($ & 255) >>> 1;
												Ca = J + ((($ & 255) >>> 1) - ha << 2) | 0
											} else {
												Da = HEAP32[K >> 2] | 0;
												Ea = HEAP32[J >> 2] | 0;
												Aa = Da;
												Ba = Ea;
												Ca = Da + (Ea - ha << 2) | 0
											}
											Ea = Aa + (Ba << 2) | 0;
											if ((Ca | 0) == (Ea | 0)) {
												Fa = U;
												Ga = ya;
												Ha = Q;
												Ia = U;
												break c
											} else {
												Ja = Ca;
												Ka = P ? h : HEAP32[I >> 2] | 0
											}
											while (1) {
												if ((HEAP32[Ja >> 2] | 0) != (HEAP32[Ka >> 2] | 0))
													break d;
												Ja = Ja + 4 | 0;
												if ((Ja | 0) == (Ea | 0)) {
													Fa = U;
													Ga = ya;
													Ha = Q;
													Ia = U;
													break c
												} else
													Ka = Ka + 4 | 0
											}
										}
									while (0);
									Fa = U;
									Ga = ya;
									Ha = P ? h : HEAP32[I >> 2] | 0;
									Ia = U
								} else {
									Fa = U;
									Ga = ga;
									Ha = ka;
									Ia = U
								}
							while (0);
							e: while (1) {
								if (!(Ga & 1)) {
									La = h;
									Ma = (Ga & 255) >>> 1
								} else {
									La = HEAP32[I >> 2] | 0;
									Ma = HEAP32[h >> 2] | 0
								}
								if ((Ha | 0) == (La + (Ma << 2) | 0)) {
									Na = Fa;
									break
								}
								ka = HEAP32[b >> 2] | 0;
								do
									if (ka) {
										ga = HEAP32[ka + 12 >> 2] | 0;
										if ((ga | 0) == (HEAP32[ka + 16 >> 2] | 0))
											Oa = tc[c[(HEAP32[ka >> 2] | 0) + 36 >> 2] & 127](ka) | 0;
										else
											Oa = HEAP32[ga >> 2] | 0;
										if ((Oa | 0) == -1) {
											HEAP32[b >> 2] = 0;
											Pa = 1;
											break
										} else {
											Pa = (HEAP32[b >> 2] | 0) == 0;
											break
										}
									} else
										Pa = 1;
								while (0);
								do
									if (Ia) {
										ka = HEAP32[Ia + 12 >> 2] | 0;
										if ((ka | 0) == (HEAP32[Ia + 16 >> 2] | 0))
											Qa = tc[c[(HEAP32[Ia >> 2] | 0) + 36 >> 2] & 127](Ia) | 0;
										else
											Qa = HEAP32[ka >> 2] | 0;
										if ((Qa | 0) != -1)
											if (Pa ^ (Fa | 0) == 0) {
												Ra = Fa;
												Sa = Fa;
												break
											} else {
												Na = Fa;
												break e
											}
										else {
											HEAP32[e >> 2] = 0;
											Ta = 0;
											Y = 159;
											break
										}
									} else {
										Ta = Fa;
										Y = 159
									}
								while (0);
								if ((Y | 0) == 159) {
									Y = 0;
									if (Pa) {
										Na = Ta;
										break
									} else {
										Ra = Ta;
										Sa = 0
									}
								}
								ka = HEAP32[b >> 2] | 0;
								P = HEAP32[ka + 12 >> 2] | 0;
								if ((P | 0) == (HEAP32[ka + 16 >> 2] | 0))
									Ua = tc[c[(HEAP32[ka >> 2] | 0) + 36 >> 2] & 127](ka) | 0;
								else
									Ua = HEAP32[P >> 2] | 0;
								if ((Ua | 0) != (HEAP32[Ha >> 2] | 0)) {
									Na = Ra;
									break
								}
								P = HEAP32[b >> 2] | 0;
								ka = P + 12 | 0;
								ga = HEAP32[ka >> 2] | 0;
								if ((ga | 0) == (HEAP32[P + 16 >> 2] | 0))
									tc[c[(HEAP32[P >> 2] | 0) + 40 >> 2] & 127](P) | 0;
								else
									HEAP32[ka >> 2] = ga + 4;
								Fa = Ra;
								Ga = HEAP8[z >> 0] | 0;
								Ha = Ha + 4 | 0;
								Ia = Sa
							}
							if (H) {
								ga = HEAP8[z >> 0] | 0;
								if (!(ga & 1)) {
									Va = h;
									Wa = (ga & 255) >>> 1
								} else {
									Va = HEAP32[I >> 2] | 0;
									Wa = HEAP32[h >> 2] | 0
								}
								if ((Ha | 0) != (Va + (Wa << 2) | 0)) {
									Y = 174;
									break a
								} else {
									ba = Na;
									ca = N;
									da = O
								}
							} else {
								ba = Na;
								ca = N;
								da = O
							}
							break
						}
					case 4: {
							ga = HEAP32[x >> 2] | 0;
							ka = U;
							P = U;
							Q = N;
							ha = 0;
							f: while (1) {
								$ = HEAP32[b >> 2] | 0;
								do
									if ($) {
										_ = HEAP32[$ + 12 >> 2] | 0;
										if ((_ | 0) == (c[$ + 16 >> 2] | 0))
											Xa = tc[c[(c[$ >> 2] | 0) + 36 >> 2] & 127]($) | 0;
										else
											Xa = HEAP32[_ >> 2] | 0;
										if ((Xa | 0) == -1) {
											HEAP32[b >> 2] = 0;
											Ya = 1;
											break
										} else {
											Ya = (HEAP32[b >> 2] | 0) == 0;
											break
										}
									} else
										Ya = 1;
								while (0);
								do
									if (P) {
										$ = HEAP32[P + 12 >> 2] | 0;
										if (($ | 0) == (HEAP32[P + 16 >> 2] | 0))
											Za = tc[c[(HEAP32[P >> 2] | 0) + 36 >> 2] & 127](P) | 0;
										else
											Za = HEAP32[$ >> 2] | 0;
										if ((Za | 0) != -1)
											if (Ya ^ (ka | 0) == 0) {
												_a = ka;
												$a = ka;
												break
											} else {
												ab = ka;
												break f
											}
										else {
											HEAP32[e >> 2] = 0;
											bb = 0;
											Y = 188;
											break
										}
									} else {
										bb = ka;
										Y = 188
									}
								while (0);
								if ((Y | 0) == 188) {
									Y = 0;
									if (Ya) {
										ab = bb;
										break
									} else {
										_a = bb;
										$a = 0
									}
								}
								$ = HEAP32[b >> 2] | 0;
								_ = HEAP32[$ + 12 >> 2] | 0;
								if ((_ | 0) == (c[$ + 16 >> 2] | 0))
									cb = tc[c[(c[$ >> 2] | 0) + 36 >> 2] & 127]($) | 0;
								else
									cb = HEAP32[_ >> 2] | 0;
								if (mc[c[(HEAP32[l >> 2] | 0) + 12 >> 2] & 31](l, 2048, cb) | 0) {
									_ = HEAP32[n >> 2] | 0;
									if ((_ | 0) == (HEAP32[q >> 2] | 0)) {
										Ru(m, n, q);
										db = HEAP32[n >> 2] | 0
									} else
										db = _;
									HEAP32[n >> 2] = db + 4;
									HEAP32[db >> 2] = cb;
									eb = Q;
									fb = ha + 1 | 0
								} else {
									_ = HEAP8[y >> 0] | 0;
									if (!(_ & 1))
										gb = (_ & 255) >>> 1;
									else
										gb = HEAP32[M >> 2] | 0;
									if (!((gb | 0) != 0 & (ha | 0) != 0 & (cb | 0) == (ga | 0))) {
										ab = _a;
										break
									}
									if ((Q | 0) == (HEAP32[u >> 2] | 0)) {
										Pu(s, t, u);
										hb = HEAP32[t >> 2] | 0
									} else
										hb = Q;
									_ = hb + 4 | 0;
									HEAP32[t >> 2] = _;
									HEAP32[hb >> 2] = ha;
									eb = _;
									fb = 0
								}
								_ = HEAP32[b >> 2] | 0;
								$ = _ + 12 | 0;
								Ea = HEAP32[$ >> 2] | 0;
								if ((Ea | 0) == (HEAP32[_ + 16 >> 2] | 0)) {
									tc[c[(HEAP32[_ >> 2] | 0) + 40 >> 2] & 127](_) | 0;
									ka = _a;
									P = $a;
									Q = eb;
									ha = fb;
									continue
								} else {
									c[$ >> 2] = Ea + 4;
									ka = _a;
									P = $a;
									Q = eb;
									ha = fb;
									continue
								}
							}
							if ((ha | 0) != 0 ? (HEAP32[s >> 2] | 0) != (Q | 0) : 0) {
								if ((Q | 0) == (HEAP32[u >> 2] | 0)) {
									Pu(s, t, u);
									ib = HEAP32[t >> 2] | 0
								} else
									ib = Q;
								P = ib + 4 | 0;
								HEAP32[t >> 2] = P;
								HEAP32[ib >> 2] = ha;
								jb = P
							} else
								jb = Q;
							P = HEAP32[D >> 2] | 0;
							if ((P | 0) > 0) {
								ka = HEAP32[b >> 2] | 0;
								do
									if (ka) {
										ga = HEAP32[ka + 12 >> 2] | 0;
										if ((ga | 0) == (HEAP32[ka + 16 >> 2] | 0))
											kb = tc[c[(HEAP32[ka >> 2] | 0) + 36 >> 2] & 127](ka) | 0;
										else
											kb = HEAP32[ga >> 2] | 0;
										if ((kb | 0) == -1) {
											HEAP32[b >> 2] = 0;
											lb = 1;
											break
										} else {
											lb = (HEAP32[b >> 2] | 0) == 0;
											break
										}
									} else
										lb = 1;
								while (0);
								do
									if (ab) {
										ka = HEAP32[ab + 12 >> 2] | 0;
										if ((ka | 0) == (HEAP32[ab + 16 >> 2] | 0))
											mb = tc[c[(HEAP32[ab >> 2] | 0) + 36 >> 2] & 127](ab) | 0;
										else
											mb = HEAP32[ka >> 2] | 0;
										if ((mb | 0) != -1)
											if (lb) {
												nb = ab;
												break
											} else {
												Y = 231;
												break a
											}
										else {
											HEAP32[e >> 2] = 0;
											Y = 225;
											break
										}
									} else
										Y = 225;
								while (0);
								if ((Y | 0) == 225) {
									Y = 0;
									if (lb) {
										Y = 231;
										break a
									} else
										nb = 0
								}
								ka = HEAP32[b >> 2] | 0;
								Q = HEAP32[ka + 12 >> 2] | 0;
								if ((Q | 0) == (HEAP32[ka + 16 >> 2] | 0))
									ob = tc[c[(HEAP32[ka >> 2] | 0) + 36 >> 2] & 127](ka) | 0;
								else
									ob = HEAP32[Q >> 2] | 0;
								if ((ob | 0) != (HEAP32[w >> 2] | 0)) {
									Y = 231;
									break a
								}
								Q = HEAP32[b >> 2] | 0;
								ka = Q + 12 | 0;
								ha = HEAP32[ka >> 2] | 0;
								if ((ha | 0) == (HEAP32[Q + 16 >> 2] | 0)) {
									tc[c[(HEAP32[Q >> 2] | 0) + 40 >> 2] & 127](Q) | 0;
									pb = nb;
									qb = nb;
									rb = P
								} else {
									HEAP32[ka >> 2] = ha + 4;
									pb = nb;
									qb = nb;
									rb = P
								}
								while (1) {
									ha = HEAP32[b >> 2] | 0;
									do
										if (ha) {
											ka = HEAP32[ha + 12 >> 2] | 0;
											if ((ka | 0) == (HEAP32[ha + 16 >> 2] | 0))
												sb = tc[c[(HEAP32[ha >> 2] | 0) + 36 >> 2] & 127](ha) | 0;
											else
												sb = HEAP32[ka >> 2] | 0;
											if ((sb | 0) == -1) {
												HEAP32[b >> 2] = 0;
												tb = 1;
												break
											} else {
												tb = (HEAP32[b >> 2] | 0) == 0;
												break
											}
										} else
											tb = 1;
									while (0);
									do
										if (qb) {
											ha = HEAP32[qb + 12 >> 2] | 0;
											if ((ha | 0) == (HEAP32[qb + 16 >> 2] | 0))
												ub = tc[c[(HEAP32[qb >> 2] | 0) + 36 >> 2] & 127](qb) | 0;
											else
												ub = HEAP32[ha >> 2] | 0;
											if ((ub | 0) != -1)
												if (tb ^ (pb | 0) == 0) {
													vb = pb;
													wb = pb;
													break
												} else {
													Y = 254;
													break a
												}
											else {
												HEAP32[e >> 2] = 0;
												xb = 0;
												Y = 248;
												break
											}
										} else {
											xb = pb;
											Y = 248
										}
									while (0);
									if ((Y | 0) == 248) {
										Y = 0;
										if (tb) {
											Y = 254;
											break a
										} else {
											vb = xb;
											wb = 0
										}
									}
									ha = HEAP32[b >> 2] | 0;
									ka = HEAP32[ha + 12 >> 2] | 0;
									if ((ka | 0) == (HEAP32[ha + 16 >> 2] | 0))
										yb = tc[c[(HEAP32[ha >> 2] | 0) + 36 >> 2] & 127](ha) | 0;
									else
										yb = HEAP32[ka >> 2] | 0;
									if (!(mc[c[(HEAP32[l >> 2] | 0) + 12 >> 2] & 31](l, 2048, yb) | 0)) {
										Y = 254;
										break a
									}
									if ((HEAP32[n >> 2] | 0) == (HEAP32[q >> 2] | 0))
										Ru(m, n, q);
									ka = HEAP32[b >> 2] | 0;
									ha = HEAP32[ka + 12 >> 2] | 0;
									if ((ha | 0) == (HEAP32[ka + 16 >> 2] | 0))
										zb = tc[c[(HEAP32[ka >> 2] | 0) + 36 >> 2] & 127](ka) | 0;
									else
										zb = HEAP32[ha >> 2] | 0;
									ha = HEAP32[n >> 2] | 0;
									HEAP32[n >> 2] = ha + 4;
									HEAP32[ha >> 2] = zb;
									rb = rb + -1 | 0;
									HEAP32[D >> 2] = rb;
									ha = HEAP32[b >> 2] | 0;
									ka = ha + 12 | 0;
									Q = HEAP32[ka >> 2] | 0;
									if ((Q | 0) == (HEAP32[ha + 16 >> 2] | 0))
										tc[c[(HEAP32[ha >> 2] | 0) + 40 >> 2] & 127](ha) | 0;
									else
										HEAP32[ka >> 2] = Q + 4;
									if ((rb | 0) <= 0) {
										Ab = vb;
										break
									} else {
										pb = vb;
										qb = wb
									}
								}
							} else
								Ab = ab;
							if ((HEAP32[n >> 2] | 0) == (HEAP32[m >> 2] | 0)) {
								Y = 265;
								break a
							} else {
								ba = Ab;
								ca = jb;
								da = O
							}
							break
						}
					case 1: {
							if ((r | 0) == 3) {
								V = N;
								W = U;
								X = O;
								Y = 267;
								break a
							}
							P = HEAP32[b >> 2] | 0;
							Q = HEAP32[P + 12 >> 2] | 0;
							if ((Q | 0) == (HEAP32[P + 16 >> 2] | 0))
								Bb = tc[c[(HEAP32[P >> 2] | 0) + 36 >> 2] & 127](P) | 0;
							else
								Bb = HEAP32[Q >> 2] | 0;
							if (!(mc[c[(HEAP32[l >> 2] | 0) + 12 >> 2] & 31](l, 8192, Bb) | 0)) {
								Y = 28;
								break a
							}
							Q = HEAP32[b >> 2] | 0;
							P = Q + 12 | 0;
							ka = HEAP32[P >> 2] | 0;
							if ((ka | 0) == (HEAP32[Q + 16 >> 2] | 0))
								Cb = tc[c[(HEAP32[Q >> 2] | 0) + 40 >> 2] & 127](Q) | 0;
							else {
								HEAP32[P >> 2] = ka + 4;
								Cb = HEAP32[ka >> 2] | 0
							}
							tm(C, Cb);
							Y = 29;
							break
						}
					default: {
							ba = U;
							ca = N;
							da = O
						}
					}
				while (0);
				g: do
					if ((Y | 0) == 29) {
						Y = 0;
						if ((r | 0) == 3) {
							V = N;
							W = U;
							X = O;
							Y = 267;
							break a
						} else {
							Db = U;
							Eb = U
						}
						while (1) {
							ka = HEAP32[b >> 2] | 0;
							do
								if (ka) {
									P = HEAP32[ka + 12 >> 2] | 0;
									if ((P | 0) == (HEAP32[ka + 16 >> 2] | 0))
										Fb = tc[c[(HEAP32[ka >> 2] | 0) + 36 >> 2] & 127](ka) | 0;
									else
										Fb = HEAP32[P >> 2] | 0;
									if ((Fb | 0) == -1) {
										HEAP32[b >> 2] = 0;
										Gb = 1;
										break
									} else {
										Gb = (HEAP32[b >> 2] | 0) == 0;
										break
									}
								} else
									Gb = 1;
							while (0);
							do
								if (Eb) {
									ka = HEAP32[Eb + 12 >> 2] | 0;
									if ((ka | 0) == (HEAP32[Eb + 16 >> 2] | 0))
										Hb = tc[c[(HEAP32[Eb >> 2] | 0) + 36 >> 2] & 127](Eb) | 0;
									else
										Hb = HEAP32[ka >> 2] | 0;
									if ((Hb | 0) != -1)
										if (Gb ^ (Db | 0) == 0) {
											Ib = Db;
											Jb = Db;
											break
										} else {
											ba = Db;
											ca = N;
											da = O;
											break g
										}
									else {
										HEAP32[e >> 2] = 0;
										Kb = 0;
										Y = 43;
										break
									}
								} else {
									Kb = Db;
									Y = 43
								}
							while (0);
							if ((Y | 0) == 43) {
								Y = 0;
								if (Gb) {
									ba = Kb;
									ca = N;
									da = O;
									break g
								} else {
									Ib = Kb;
									Jb = 0
								}
							}
							ka = HEAP32[b >> 2] | 0;
							P = HEAP32[ka + 12 >> 2] | 0;
							if ((P | 0) == (HEAP32[ka + 16 >> 2] | 0))
								Lb = tc[c[(HEAP32[ka >> 2] | 0) + 36 >> 2] & 127](ka) | 0;
							else
								Lb = HEAP32[P >> 2] | 0;
							if (!(mc[c[(HEAP32[l >> 2] | 0) + 12 >> 2] & 31](l, 8192, Lb) | 0)) {
								ba = Ib;
								ca = N;
								da = O;
								break g
							}
							P = HEAP32[b >> 2] | 0;
							ka = P + 12 | 0;
							Q = HEAP32[ka >> 2] | 0;
							if ((Q | 0) == (HEAP32[P + 16 >> 2] | 0))
								Mb = tc[c[(HEAP32[P >> 2] | 0) + 40 >> 2] & 127](P) | 0;
							else {
								HEAP32[ka >> 2] = Q + 4;
								Mb = HEAP32[Q >> 2] | 0
							}
							tm(C, Mb);
							Db = Ib;
							Eb = Jb
						}
					}
				while (0);
				r = r + 1 | 0;
				if (r >>> 0 >= 4) {
					V = ca;
					W = ba;
					X = da;
					Y = 267;
					break
				} else {
					N = ca;
					O = da
				}
			}
			h: do
				if ((Y | 0) == 28) {
					HEAP32[j >> 2] = HEAP32[j >> 2] | 4;
					Nb = 0
				} else if ((Y | 0) == 117) {
					HEAP32[j >> 2] = HEAP32[j >> 2] | 4;
					Nb = 0
				} else if ((Y | 0) == 174) {
					HEAP32[j >> 2] = HEAP32[j >> 2] | 4;
					Nb = 0
				} else if ((Y | 0) == 231) {
					HEAP32[j >> 2] = HEAP32[j >> 2] | 4;
					Nb = 0
				} else if ((Y | 0) == 254) {
					HEAP32[j >> 2] = HEAP32[j >> 2] | 4;
					Nb = 0
				} else if ((Y | 0) == 265) {
					HEAP32[j >> 2] = HEAP32[j >> 2] | 4;
					Nb = 0
				} else if ((Y | 0) == 267) {
					i: do
						if (X) {
							da = X + 4 | 0;
							O = X + 8 | 0;
							ca = W;
							N = W;
							ba = 1;
							j: while (1) {
								r = HEAP8[X >> 0] | 0;
								if (!(r & 1))
									Ob = (r & 255) >>> 1;
								else
									Ob = HEAP32[da >> 2] | 0;
								if (ba >>> 0 >= Ob >>> 0)
									break i;
								r = HEAP32[b >> 2] | 0;
								do
									if (r) {
										Jb = HEAP32[r + 12 >> 2] | 0;
										if ((Jb | 0) == (HEAP32[r + 16 >> 2] | 0))
											Pb = tc[c[(HEAP32[r >> 2] | 0) + 36 >> 2] & 127](r) | 0;
										else
											Pb = HEAP32[Jb >> 2] | 0;
										if ((Pb | 0) == -1) {
											HEAP32[b >> 2] = 0;
											Qb = 1;
											break
										} else {
											Qb = (HEAP32[b >> 2] | 0) == 0;
											break
										}
									} else
										Qb = 1;
								while (0);
								do
									if (N) {
										r = HEAP32[N + 12 >> 2] | 0;
										if ((r | 0) == (HEAP32[N + 16 >> 2] | 0))
											Rb = tc[c[(HEAP32[N >> 2] | 0) + 36 >> 2] & 127](N) | 0;
										else
											Rb = HEAP32[r >> 2] | 0;
										if ((Rb | 0) != -1)
											if (Qb ^ (ca | 0) == 0) {
												Sb = ca;
												Tb = ca;
												break
											} else
												break j;
										else {
											HEAP32[e >> 2] = 0;
											Ub = 0;
											Y = 286;
											break
										}
									} else {
										Ub = ca;
										Y = 286
									}
								while (0);
								if ((Y | 0) == 286) {
									Y = 0;
									if (Qb)
										break;
									else {
										Sb = Ub;
										Tb = 0
									}
								}
								r = HEAP32[b >> 2] | 0;
								Jb = HEAP32[r + 12 >> 2] | 0;
								if ((Jb | 0) == (HEAP32[r + 16 >> 2] | 0))
									Vb = tc[c[(HEAP32[r >> 2] | 0) + 36 >> 2] & 127](r) | 0;
								else
									Vb = HEAP32[Jb >> 2] | 0;
								if (!(HEAP8[X >> 0] & 1))
									Wb = da;
								else
									Wb = HEAP32[O >> 2] | 0;
								if ((Vb | 0) != (HEAP32[Wb + (ba << 2) >> 2] | 0))
									break;
								Jb = ba + 1 | 0;
								r = HEAP32[b >> 2] | 0;
								Eb = r + 12 | 0;
								Ib = HEAP32[Eb >> 2] | 0;
								if ((Ib | 0) == (HEAP32[r + 16 >> 2] | 0)) {
									tc[c[(HEAP32[r >> 2] | 0) + 40 >> 2] & 127](r) | 0;
									ca = Sb;
									N = Tb;
									ba = Jb;
									continue
								} else {
									HEAP32[Eb >> 2] = Ib + 4;
									ca = Sb;
									N = Tb;
									ba = Jb;
									continue
								}
							}
							HEAP32[j >> 2] = HEAP32[j >> 2] | 4;
							Nb = 0;
							break h
						}
					while (0);
					ba = HEAP32[s >> 2] | 0;
					if ((ba | 0) != (V | 0) ? (HEAP32[E >> 2] = 0, hr(y, ba, V, E), (HEAP32[E >> 2] | 0) != 0) : 0) {
						HEAP32[j >> 2] = HEAP32[j >> 2] | 4;
						Nb = 0
					} else
						Nb = 1
				}
			while (0);
			pm(C);
			pm(B);
			pm(A);
			pm(z);
			bm(y);
			y = HEAP32[s >> 2] | 0;
			HEAP32[s >> 2] = 0;
			if (!y) {
				i = p;
				return Nb | 0
			}
			lc[HEAP32[o >> 2] & 255](y);
			i = p;
			return Nb | 0
		}
		function mr(b, d, e, f, g, h, j, k) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			k = k | 0;
			var l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0;
			d = i;
			i = i + 432 | 0;
			l = d + 424 | 0;
			m = d + 24 | 0;
			n = d + 16 | 0;
			o = d + 8 | 0;
			p = d + 4 | 0;
			q = d + 428 | 0;
			r = d;
			HEAP32[n >> 2] = m;
			s = n + 4 | 0;
			HEAP32[s >> 2] = 185;
			Am(p, h);
			t = Yr(p, 130768) | 0;
			HEAP8[q >> 0] = 0;
			u = HEAP32[f >> 2] | 0;
			HEAP32[r >> 2] = u;
			v = HEAP32[h + 4 >> 2] | 0;
			HEAP32[l + 0 >> 2] = HEAP32[r + 0 >> 2];
			if (lr(e, l, g, p, v, j, q, t, n, o, m + 400 | 0) | 0) {
				if (!(HEAP8[k >> 0] & 1)) {
					HEAP32[k + 4 >> 2] = 0;
					HEAP8[k >> 0] = 0
				} else {
					HEAP32[HEAP32[k + 8 >> 2] >> 2] = 0;
					HEAP32[k + 4 >> 2] = 0
				}
				if (HEAP8[q >> 0] | 0)
					tm(k, Cc[c[(HEAP32[t >> 2] | 0) + 44 >> 2] & 31](t, 45) | 0);
				q = Cc[c[(HEAP32[t >> 2] | 0) + 44 >> 2] & 31](t, 48) | 0;
				t = HEAP32[n >> 2] | 0;
				m = HEAP32[o >> 2] | 0;
				o = m + -4 | 0;
				a: do
					if (t >>> 0 < o >>> 0) {
						v = t;
						while (1) {
							g = v + 4 | 0;
							if ((HEAP32[v >> 2] | 0) != (q | 0)) {
								w = v;
								break a
							}
							if (g >>> 0 < o >>> 0)
								v = g;
							else {
								w = g;
								break
							}
						}
					} else
						w = t;
				while (0);
				Su(k, w, m) | 0
			}
			m = HEAP32[e >> 2] | 0;
			do
				if (m) {
					w = HEAP32[m + 12 >> 2] | 0;
					if ((w | 0) == (HEAP32[m + 16 >> 2] | 0))
						x = tc[c[(HEAP32[m >> 2] | 0) + 36 >> 2] & 127](m) | 0;
					else
						x = HEAP32[w >> 2] | 0;
					if ((x | 0) == -1) {
						HEAP32[e >> 2] = 0;
						y = 1;
						break
					} else {
						y = (HEAP32[e >> 2] | 0) == 0;
						break
					}
				} else
					y = 1;
			while (0);
			do
				if (u) {
					x = HEAP32[u + 12 >> 2] | 0;
					if ((x | 0) == (HEAP32[u + 16 >> 2] | 0))
						z = tc[c[(HEAP32[u >> 2] | 0) + 36 >> 2] & 127](u) | 0;
					else
						z = HEAP32[x >> 2] | 0;
					if ((z | 0) != -1)
						if (y)
							break;
						else {
							A = 26;
							break
						}
					else {
						HEAP32[f >> 2] = 0;
						A = 24;
						break
					}
				} else
					A = 24;
			while (0);
			if ((A | 0) == 24 ? y : 0)
				A = 26;
			if ((A | 0) == 26)
				HEAP32[j >> 2] = HEAP32[j >> 2] | 2;
			HEAP32[b >> 2] = HEAP32[e >> 2];
			Jl(HEAP32[p >> 2] | 0) | 0;
			p = HEAP32[n >> 2] | 0;
			HEAP32[n >> 2] = 0;
			if (!p) {
				i = d;
				return
			}
			lc[HEAP32[s >> 2] & 255](p);
			i = d;
			return
		}
		function nr(b, d, e, f, g, h, j, k, l, m) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			k = k | 0;
			l = l | 0;
			m = m | 0;
			var n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0;
			n = i;
			i = i + 112 | 0;
			o = n + 100 | 0;
			p = n + 88 | 0;
			q = n + 76 | 0;
			r = n + 64 | 0;
			s = n + 52 | 0;
			t = n + 48 | 0;
			u = n + 36 | 0;
			v = n + 24 | 0;
			w = n + 12 | 0;
			x = n;
			if (b) {
				b = Yr(d, 130344) | 0;
				rc[c[(HEAP32[b >> 2] | 0) + 44 >> 2] & 127](o, b);
				y = HEAP32[o >> 2] | 0;
				HEAP8[e >> 0] = y;
				HEAP8[e + 1 >> 0] = y >> 8;
				HEAP8[e + 2 >> 0] = y >> 16;
				HEAP8[e + 3 >> 0] = y >> 24;
				rc[c[(HEAP32[b >> 2] | 0) + 32 >> 2] & 127](p, b);
				if (!(HEAP8[l >> 0] & 1)) {
					HEAP32[l + 4 >> 2] = 0;
					HEAP8[l >> 0] = 0
				} else {
					HEAP32[HEAP32[l + 8 >> 2] >> 2] = 0;
					HEAP32[l + 4 >> 2] = 0
				}
				sm(l, 0);
				HEAP32[l + 0 >> 2] = HEAP32[p + 0 >> 2];
				HEAP32[l + 4 >> 2] = HEAP32[p + 4 >> 2];
				HEAP32[l + 8 >> 2] = HEAP32[p + 8 >> 2];
				HEAP32[p + 0 >> 2] = 0;
				HEAP32[p + 4 >> 2] = 0;
				HEAP32[p + 8 >> 2] = 0;
				pm(p);
				rc[c[(HEAP32[b >> 2] | 0) + 28 >> 2] & 127](q, b);
				if (!(HEAP8[k >> 0] & 1)) {
					HEAP32[k + 4 >> 2] = 0;
					HEAP8[k >> 0] = 0
				} else {
					HEAP32[HEAP32[k + 8 >> 2] >> 2] = 0;
					HEAP32[k + 4 >> 2] = 0
				}
				sm(k, 0);
				HEAP32[k + 0 >> 2] = HEAP32[q + 0 >> 2];
				HEAP32[k + 4 >> 2] = HEAP32[q + 4 >> 2];
				HEAP32[k + 8 >> 2] = HEAP32[q + 8 >> 2];
				HEAP32[q + 0 >> 2] = 0;
				HEAP32[q + 4 >> 2] = 0;
				HEAP32[q + 8 >> 2] = 0;
				pm(q);
				HEAP32[f >> 2] = tc[c[(HEAP32[b >> 2] | 0) + 12 >> 2] & 127](b) | 0;
				HEAP32[g >> 2] = tc[c[(HEAP32[b >> 2] | 0) + 16 >> 2] & 127](b) | 0;
				rc[c[(HEAP32[b >> 2] | 0) + 20 >> 2] & 127](r, b);
				if (!(HEAP8[h >> 0] & 1)) {
					HEAP8[h + 1 >> 0] = 0;
					HEAP8[h >> 0] = 0
				} else {
					HEAP8[HEAP32[h + 8 >> 2] >> 0] = 0;
					HEAP32[h + 4 >> 2] = 0
				}
				gm(h, 0);
				HEAP32[h + 0 >> 2] = HEAP32[r + 0 >> 2];
				HEAP32[h + 4 >> 2] = HEAP32[r + 4 >> 2];
				HEAP32[h + 8 >> 2] = HEAP32[r + 8 >> 2];
				HEAP32[r + 0 >> 2] = 0;
				HEAP32[r + 4 >> 2] = 0;
				HEAP32[r + 8 >> 2] = 0;
				bm(r);
				rc[c[(HEAP32[b >> 2] | 0) + 24 >> 2] & 127](s, b);
				if (!(HEAP8[j >> 0] & 1)) {
					HEAP32[j + 4 >> 2] = 0;
					HEAP8[j >> 0] = 0
				} else {
					HEAP32[HEAP32[j + 8 >> 2] >> 2] = 0;
					HEAP32[j + 4 >> 2] = 0
				}
				sm(j, 0);
				HEAP32[j + 0 >> 2] = HEAP32[s + 0 >> 2];
				HEAP32[j + 4 >> 2] = HEAP32[s + 4 >> 2];
				HEAP32[j + 8 >> 2] = HEAP32[s + 8 >> 2];
				HEAP32[s + 0 >> 2] = 0;
				HEAP32[s + 4 >> 2] = 0;
				HEAP32[s + 8 >> 2] = 0;
				pm(s);
				z = tc[c[(HEAP32[b >> 2] | 0) + 36 >> 2] & 127](b) | 0;
				HEAP32[m >> 2] = z;
				i = n;
				return
			} else {
				b = Yr(d, 130280) | 0;
				rc[c[(HEAP32[b >> 2] | 0) + 44 >> 2] & 127](t, b);
				d = HEAP32[t >> 2] | 0;
				HEAP8[e >> 0] = d;
				HEAP8[e + 1 >> 0] = d >> 8;
				HEAP8[e + 2 >> 0] = d >> 16;
				HEAP8[e + 3 >> 0] = d >> 24;
				rc[c[(HEAP32[b >> 2] | 0) + 32 >> 2] & 127](u, b);
				if (!(HEAP8[l >> 0] & 1)) {
					HEAP32[l + 4 >> 2] = 0;
					HEAP8[l >> 0] = 0
				} else {
					HEAP32[HEAP32[l + 8 >> 2] >> 2] = 0;
					HEAP32[l + 4 >> 2] = 0
				}
				sm(l, 0);
				HEAP32[l + 0 >> 2] = HEAP32[u + 0 >> 2];
				HEAP32[l + 4 >> 2] = HEAP32[u + 4 >> 2];
				HEAP32[l + 8 >> 2] = HEAP32[u + 8 >> 2];
				HEAP32[u + 0 >> 2] = 0;
				HEAP32[u + 4 >> 2] = 0;
				HEAP32[u + 8 >> 2] = 0;
				pm(u);
				rc[c[(HEAP32[b >> 2] | 0) + 28 >> 2] & 127](v, b);
				if (!(HEAP8[k >> 0] & 1)) {
					HEAP32[k + 4 >> 2] = 0;
					HEAP8[k >> 0] = 0
				} else {
					HEAP32[HEAP32[k + 8 >> 2] >> 2] = 0;
					HEAP32[k + 4 >> 2] = 0
				}
				sm(k, 0);
				HEAP32[k + 0 >> 2] = HEAP32[v + 0 >> 2];
				HEAP32[k + 4 >> 2] = HEAP32[v + 4 >> 2];
				HEAP32[k + 8 >> 2] = HEAP32[v + 8 >> 2];
				HEAP32[v + 0 >> 2] = 0;
				HEAP32[v + 4 >> 2] = 0;
				HEAP32[v + 8 >> 2] = 0;
				pm(v);
				HEAP32[f >> 2] = tc[c[(HEAP32[b >> 2] | 0) + 12 >> 2] & 127](b) | 0;
				HEAP32[g >> 2] = tc[c[(HEAP32[b >> 2] | 0) + 16 >> 2] & 127](b) | 0;
				rc[c[(HEAP32[b >> 2] | 0) + 20 >> 2] & 127](w, b);
				if (!(HEAP8[h >> 0] & 1)) {
					HEAP8[h + 1 >> 0] = 0;
					HEAP8[h >> 0] = 0
				} else {
					HEAP8[HEAP32[h + 8 >> 2] >> 0] = 0;
					HEAP32[h + 4 >> 2] = 0
				}
				gm(h, 0);
				HEAP32[h + 0 >> 2] = HEAP32[w + 0 >> 2];
				HEAP32[h + 4 >> 2] = HEAP32[w + 4 >> 2];
				HEAP32[h + 8 >> 2] = HEAP32[w + 8 >> 2];
				HEAP32[w + 0 >> 2] = 0;
				HEAP32[w + 4 >> 2] = 0;
				HEAP32[w + 8 >> 2] = 0;
				bm(w);
				rc[c[(HEAP32[b >> 2] | 0) + 24 >> 2] & 127](x, b);
				if (!(HEAP8[j >> 0] & 1)) {
					HEAP32[j + 4 >> 2] = 0;
					HEAP8[j >> 0] = 0
				} else {
					HEAP32[HEAP32[j + 8 >> 2] >> 2] = 0;
					HEAP32[j + 4 >> 2] = 0
				}
				sm(j, 0);
				HEAP32[j + 0 >> 2] = HEAP32[x + 0 >> 2];
				HEAP32[j + 4 >> 2] = HEAP32[x + 4 >> 2];
				HEAP32[j + 8 >> 2] = HEAP32[x + 8 >> 2];
				HEAP32[x + 0 >> 2] = 0;
				HEAP32[x + 4 >> 2] = 0;
				HEAP32[x + 8 >> 2] = 0;
				pm(x);
				z = tc[c[(HEAP32[b >> 2] | 0) + 36 >> 2] & 127](b) | 0;
				HEAP32[m >> 2] = z;
				i = n;
				return
			}
		}
		function or(a) {
			a = a | 0;
			var b = 0;
			b = i;
			kl(a);
			i = b;
			return
		}
		function pr(a) {
			a = a | 0;
			return
		}
		function qr(b, d, e, f, g, j, l) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			j = j | 0;
			l = +l;
			var m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0,
			O = 0,
			P = 0,
			Q = 0;
			d = i;
			i = i + 384 | 0;
			m = d;
			n = d + 276 | 0;
			o = d + 68 | 0;
			p = d + 176 | 0;
			q = d + 64 | 0;
			r = d + 60 | 0;
			s = d + 173 | 0;
			t = d + 172 | 0;
			u = d + 48 | 0;
			v = d + 36 | 0;
			w = d + 24 | 0;
			x = d + 20 | 0;
			y = d + 72 | 0;
			z = d + 16 | 0;
			A = d + 12 | 0;
			B = d + 8 | 0;
			HEAP32[o >> 2] = n;
			HEAPF64[k >> 3] = l;
			HEAP32[m >> 2] = HEAP32[k >> 2];
			HEAP32[m + 4 >> 2] = HEAP32[k + 4 >> 2];
			C = Vx(n, 100, 130528, m) | 0;
			if (C >>> 0 > 99) {
				n = ko() | 0;
				HEAPF64[k >> 3] = l;
				HEAP32[m >> 2] = HEAP32[k >> 2];
				HEAP32[m + 4 >> 2] = HEAP32[k + 4 >> 2];
				D = Ku(o, n, 130528, m) | 0;
				n = HEAP32[o >> 2] | 0;
				if (!n)
					qx();
				E = vx(D) | 0;
				if (!E)
					qx();
				else {
					F = E;
					G = n;
					H = E;
					I = D
				}
			} else {
				F = 0;
				G = 0;
				H = p;
				I = C
			}
			Am(q, g);
			C = Yr(q, 130776) | 0;
			p = HEAP32[o >> 2] | 0;
			zc[c[(HEAP32[C >> 2] | 0) + 32 >> 2] & 15](C, p, p + I | 0, H) | 0;
			if (!I)
				J = 0;
			else
				J = (HEAP8[HEAP32[o >> 2] >> 0] | 0) == 45;
			HEAP32[r >> 2] = 0;
			HEAP32[u + 0 >> 2] = 0;
			HEAP32[u + 4 >> 2] = 0;
			HEAP32[u + 8 >> 2] = 0;
			HEAP32[v + 0 >> 2] = 0;
			HEAP32[v + 4 >> 2] = 0;
			HEAP32[v + 8 >> 2] = 0;
			HEAP32[w + 0 >> 2] = 0;
			HEAP32[w + 4 >> 2] = 0;
			HEAP32[w + 8 >> 2] = 0;
			rr(f, J, q, r, s, t, u, v, w, x);
			f = HEAP32[x >> 2] | 0;
			if ((I | 0) > (f | 0)) {
				x = HEAP8[w >> 0] | 0;
				if (!(x & 1))
					K = (x & 255) >>> 1;
				else
					K = HEAP32[w + 4 >> 2] | 0;
				x = HEAP8[v >> 0] | 0;
				if (!(x & 1))
					L = (x & 255) >>> 1;
				else
					L = HEAP32[v + 4 >> 2] | 0;
				M = K + (I - f << 1 | 1) + L | 0
			} else {
				L = HEAP8[w >> 0] | 0;
				if (!(L & 1))
					N = (L & 255) >>> 1;
				else
					N = HEAP32[w + 4 >> 2] | 0;
				L = HEAP8[v >> 0] | 0;
				if (!(L & 1))
					O = (L & 255) >>> 1;
				else
					O = HEAP32[v + 4 >> 2] | 0;
				M = N + 2 + O | 0
			}
			O = M + f | 0;
			if (O >>> 0 > 100) {
				M = vx(O) | 0;
				if (!M)
					qx();
				else {
					P = M;
					Q = M
				}
			} else {
				P = 0;
				Q = y
			}
			sr(Q, z, A, HEAP32[g + 4 >> 2] | 0, H, H + I | 0, C, J, r, HEAP8[s >> 0] | 0, HEAP8[t >> 0] | 0, u, v, w, f);
			HEAP32[B >> 2] = HEAP32[e >> 2];
			e = HEAP32[z >> 2] | 0;
			z = HEAP32[A >> 2] | 0;
			HEAP32[m + 0 >> 2] = HEAP32[B + 0 >> 2];
			Ju(b, m, Q, e, z, g, j);
			wx(P);
			bm(w);
			bm(v);
			bm(u);
			Jl(HEAP32[q >> 2] | 0) | 0;
			wx(F);
			wx(G);
			i = d;
			return
		}
		function rr(b, d, e, f, g, h, j, k, l, m) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			k = k | 0;
			l = l | 0;
			m = m | 0;
			var n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0;
			n = i;
			i = i + 112 | 0;
			o = n + 108 | 0;
			p = n + 96 | 0;
			q = n + 92 | 0;
			r = n + 80 | 0;
			s = n + 68 | 0;
			t = n + 56 | 0;
			u = n + 52 | 0;
			v = n + 40 | 0;
			w = n + 36 | 0;
			x = n + 24 | 0;
			y = n + 12 | 0;
			z = n;
			if (b) {
				b = Yr(e, 130216) | 0;
				A = HEAP32[b >> 2] | 0;
				if (d) {
					rc[HEAP32[A + 44 >> 2] & 127](o, b);
					B = HEAP32[o >> 2] | 0;
					HEAP8[f >> 0] = B;
					HEAP8[f + 1 >> 0] = B >> 8;
					HEAP8[f + 2 >> 0] = B >> 16;
					HEAP8[f + 3 >> 0] = B >> 24;
					rc[c[(HEAP32[b >> 2] | 0) + 32 >> 2] & 127](p, b);
					if (!(HEAP8[l >> 0] & 1)) {
						HEAP8[l + 1 >> 0] = 0;
						HEAP8[l >> 0] = 0
					} else {
						HEAP8[HEAP32[l + 8 >> 2] >> 0] = 0;
						HEAP32[l + 4 >> 2] = 0
					}
					gm(l, 0);
					HEAP32[l + 0 >> 2] = HEAP32[p + 0 >> 2];
					HEAP32[l + 4 >> 2] = HEAP32[p + 4 >> 2];
					HEAP32[l + 8 >> 2] = HEAP32[p + 8 >> 2];
					HEAP32[p + 0 >> 2] = 0;
					HEAP32[p + 4 >> 2] = 0;
					HEAP32[p + 8 >> 2] = 0;
					bm(p)
				} else {
					rc[HEAP32[A + 40 >> 2] & 127](q, b);
					A = HEAP32[q >> 2] | 0;
					HEAP8[f >> 0] = A;
					HEAP8[f + 1 >> 0] = A >> 8;
					HEAP8[f + 2 >> 0] = A >> 16;
					HEAP8[f + 3 >> 0] = A >> 24;
					rc[c[(HEAP32[b >> 2] | 0) + 28 >> 2] & 127](r, b);
					if (!(HEAP8[l >> 0] & 1)) {
						HEAP8[l + 1 >> 0] = 0;
						HEAP8[l >> 0] = 0
					} else {
						HEAP8[HEAP32[l + 8 >> 2] >> 0] = 0;
						HEAP32[l + 4 >> 2] = 0
					}
					gm(l, 0);
					HEAP32[l + 0 >> 2] = HEAP32[r + 0 >> 2];
					HEAP32[l + 4 >> 2] = HEAP32[r + 4 >> 2];
					HEAP32[l + 8 >> 2] = HEAP32[r + 8 >> 2];
					HEAP32[r + 0 >> 2] = 0;
					HEAP32[r + 4 >> 2] = 0;
					HEAP32[r + 8 >> 2] = 0;
					bm(r)
				}
				HEAP8[g >> 0] = tc[c[(HEAP32[b >> 2] | 0) + 12 >> 2] & 127](b) | 0;
				HEAP8[h >> 0] = tc[c[(HEAP32[b >> 2] | 0) + 16 >> 2] & 127](b) | 0;
				rc[c[(HEAP32[b >> 2] | 0) + 20 >> 2] & 127](s, b);
				if (!(HEAP8[j >> 0] & 1)) {
					HEAP8[j + 1 >> 0] = 0;
					HEAP8[j >> 0] = 0
				} else {
					HEAP8[HEAP32[j + 8 >> 2] >> 0] = 0;
					HEAP32[j + 4 >> 2] = 0
				}
				gm(j, 0);
				HEAP32[j + 0 >> 2] = HEAP32[s + 0 >> 2];
				HEAP32[j + 4 >> 2] = HEAP32[s + 4 >> 2];
				HEAP32[j + 8 >> 2] = HEAP32[s + 8 >> 2];
				HEAP32[s + 0 >> 2] = 0;
				HEAP32[s + 4 >> 2] = 0;
				HEAP32[s + 8 >> 2] = 0;
				bm(s);
				rc[c[(HEAP32[b >> 2] | 0) + 24 >> 2] & 127](t, b);
				if (!(HEAP8[k >> 0] & 1)) {
					HEAP8[k + 1 >> 0] = 0;
					HEAP8[k >> 0] = 0
				} else {
					HEAP8[HEAP32[k + 8 >> 2] >> 0] = 0;
					HEAP32[k + 4 >> 2] = 0
				}
				gm(k, 0);
				HEAP32[k + 0 >> 2] = HEAP32[t + 0 >> 2];
				HEAP32[k + 4 >> 2] = HEAP32[t + 4 >> 2];
				HEAP32[k + 8 >> 2] = HEAP32[t + 8 >> 2];
				HEAP32[t + 0 >> 2] = 0;
				HEAP32[t + 4 >> 2] = 0;
				HEAP32[t + 8 >> 2] = 0;
				bm(t);
				C = tc[c[(HEAP32[b >> 2] | 0) + 36 >> 2] & 127](b) | 0;
				HEAP32[m >> 2] = C;
				i = n;
				return
			} else {
				b = Yr(e, 130152) | 0;
				e = HEAP32[b >> 2] | 0;
				if (d) {
					rc[HEAP32[e + 44 >> 2] & 127](u, b);
					d = HEAP32[u >> 2] | 0;
					HEAP8[f >> 0] = d;
					HEAP8[f + 1 >> 0] = d >> 8;
					HEAP8[f + 2 >> 0] = d >> 16;
					HEAP8[f + 3 >> 0] = d >> 24;
					rc[c[(HEAP32[b >> 2] | 0) + 32 >> 2] & 127](v, b);
					if (!(HEAP8[l >> 0] & 1)) {
						HEAP8[l + 1 >> 0] = 0;
						HEAP8[l >> 0] = 0
					} else {
						HEAP8[HEAP32[l + 8 >> 2] >> 0] = 0;
						HEAP32[l + 4 >> 2] = 0
					}
					gm(l, 0);
					HEAP32[l + 0 >> 2] = HEAP32[v + 0 >> 2];
					HEAP32[l + 4 >> 2] = HEAP32[v + 4 >> 2];
					HEAP32[l + 8 >> 2] = HEAP32[v + 8 >> 2];
					HEAP32[v + 0 >> 2] = 0;
					HEAP32[v + 4 >> 2] = 0;
					HEAP32[v + 8 >> 2] = 0;
					bm(v)
				} else {
					rc[HEAP32[e + 40 >> 2] & 127](w, b);
					e = HEAP32[w >> 2] | 0;
					HEAP8[f >> 0] = e;
					HEAP8[f + 1 >> 0] = e >> 8;
					HEAP8[f + 2 >> 0] = e >> 16;
					HEAP8[f + 3 >> 0] = e >> 24;
					rc[c[(HEAP32[b >> 2] | 0) + 28 >> 2] & 127](x, b);
					if (!(HEAP8[l >> 0] & 1)) {
						HEAP8[l + 1 >> 0] = 0;
						HEAP8[l >> 0] = 0
					} else {
						HEAP8[HEAP32[l + 8 >> 2] >> 0] = 0;
						HEAP32[l + 4 >> 2] = 0
					}
					gm(l, 0);
					HEAP32[l + 0 >> 2] = HEAP32[x + 0 >> 2];
					HEAP32[l + 4 >> 2] = HEAP32[x + 4 >> 2];
					HEAP32[l + 8 >> 2] = HEAP32[x + 8 >> 2];
					HEAP32[x + 0 >> 2] = 0;
					HEAP32[x + 4 >> 2] = 0;
					HEAP32[x + 8 >> 2] = 0;
					bm(x)
				}
				HEAP8[g >> 0] = tc[c[(HEAP32[b >> 2] | 0) + 12 >> 2] & 127](b) | 0;
				HEAP8[h >> 0] = tc[c[(HEAP32[b >> 2] | 0) + 16 >> 2] & 127](b) | 0;
				rc[c[(HEAP32[b >> 2] | 0) + 20 >> 2] & 127](y, b);
				if (!(HEAP8[j >> 0] & 1)) {
					HEAP8[j + 1 >> 0] = 0;
					HEAP8[j >> 0] = 0
				} else {
					HEAP8[HEAP32[j + 8 >> 2] >> 0] = 0;
					HEAP32[j + 4 >> 2] = 0
				}
				gm(j, 0);
				HEAP32[j + 0 >> 2] = HEAP32[y + 0 >> 2];
				HEAP32[j + 4 >> 2] = HEAP32[y + 4 >> 2];
				HEAP32[j + 8 >> 2] = HEAP32[y + 8 >> 2];
				HEAP32[y + 0 >> 2] = 0;
				HEAP32[y + 4 >> 2] = 0;
				HEAP32[y + 8 >> 2] = 0;
				bm(y);
				rc[c[(HEAP32[b >> 2] | 0) + 24 >> 2] & 127](z, b);
				if (!(HEAP8[k >> 0] & 1)) {
					HEAP8[k + 1 >> 0] = 0;
					HEAP8[k >> 0] = 0
				} else {
					HEAP8[HEAP32[k + 8 >> 2] >> 0] = 0;
					HEAP32[k + 4 >> 2] = 0
				}
				gm(k, 0);
				HEAP32[k + 0 >> 2] = HEAP32[z + 0 >> 2];
				HEAP32[k + 4 >> 2] = HEAP32[z + 4 >> 2];
				HEAP32[k + 8 >> 2] = HEAP32[z + 8 >> 2];
				HEAP32[z + 0 >> 2] = 0;
				HEAP32[z + 4 >> 2] = 0;
				HEAP32[z + 8 >> 2] = 0;
				bm(z);
				C = tc[c[(HEAP32[b >> 2] | 0) + 36 >> 2] & 127](b) | 0;
				HEAP32[m >> 2] = C;
				i = n;
				return
			}
		}
		function sr(d, e, f, g, h, j, k, l, m, n, o, p, q, r, s) {
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			k = k | 0;
			l = l | 0;
			m = m | 0;
			n = n | 0;
			o = o | 0;
			p = p | 0;
			q = q | 0;
			r = r | 0;
			s = s | 0;
			var t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0,
			O = 0,
			P = 0,
			Q = 0,
			R = 0,
			S = 0,
			T = 0,
			U = 0,
			V = 0,
			W = 0,
			X = 0,
			Y = 0,
			Z = 0,
			_ = 0,
			$ = 0,
			aa = 0,
			ba = 0,
			ca = 0,
			da = 0,
			ea = 0,
			fa = 0,
			ga = 0,
			ha = 0,
			ia = 0,
			ja = 0,
			ka = 0,
			la = 0,
			ma = 0,
			na = 0,
			oa = 0,
			pa = 0,
			qa = 0,
			ra = 0,
			sa = 0,
			ta = 0,
			ua = 0,
			va = 0;
			t = i;
			HEAP32[f >> 2] = d;
			u = r + 1 | 0;
			v = r + 8 | 0;
			w = r + 4 | 0;
			x = (g & 512 | 0) == 0;
			y = q + 1 | 0;
			z = q + 8 | 0;
			A = q + 4 | 0;
			B = (s | 0) > 0;
			C = p + 1 | 0;
			D = p + 8 | 0;
			E = p + 4 | 0;
			F = k + 8 | 0;
			G = 0 - s | 0;
			H = h;
			h = 0;
			while (1) {
				switch (HEAP8[m + h >> 0] | 0) {
				case 3: {
						I = HEAP8[r >> 0] | 0;
						J = (I & 1) == 0;
						if (J)
							K = (I & 255) >>> 1;
						else
							K = HEAP32[w >> 2] | 0;
						if (!K)
							L = H;
						else {
							if (J)
								M = u;
							else
								M = HEAP32[v >> 2] | 0;
							J = HEAP8[M >> 0] | 0;
							I = HEAP32[f >> 2] | 0;
							HEAP32[f >> 2] = I + 1;
							HEAP8[I >> 0] = J;
							L = H
						}
						break
					}
				case 0: {
						HEAP32[e >> 2] = HEAP32[f >> 2];
						L = H;
						break
					}
				case 1: {
						HEAP32[e >> 2] = HEAP32[f >> 2];
						J = Cc[c[(HEAP32[k >> 2] | 0) + 28 >> 2] & 31](k, 32) | 0;
						I = HEAP32[f >> 2] | 0;
						HEAP32[f >> 2] = I + 1;
						HEAP8[I >> 0] = J;
						L = H;
						break
					}
				case 4: {
						J = HEAP32[f >> 2] | 0;
						I = l ? H + 1 | 0 : H;
						a: do
							if (I >>> 0 < j >>> 0) {
								N = I;
								while (1) {
									O = HEAP8[N >> 0] | 0;
									if (O << 24 >> 24 <= -1) {
										P = N;
										break a
									}
									Q = N + 1 | 0;
									if (!(b[(HEAP32[F >> 2] | 0) + (O << 24 >> 24 << 1) >> 1] & 2048)) {
										P = N;
										break a
									}
									if (Q >>> 0 < j >>> 0)
										N = Q;
									else {
										P = Q;
										break
									}
								}
							} else
								P = I;
						while (0);
						N = P;
						if (B) {
							if (P >>> 0 > I >>> 0) {
								Q = I - N | 0;
								N = Q >>> 0 < G >>> 0 ? G : Q;
								Q = N + s | 0;
								O = J;
								R = P;
								S = s;
								while (1) {
									T = R + -1 | 0;
									U = HEAP8[T >> 0] | 0;
									HEAP32[f >> 2] = O + 1;
									HEAP8[O >> 0] = U;
									U = S + -1 | 0;
									V = (U | 0) > 0;
									if (!(T >>> 0 > I >>> 0 & V))
										break;
									O = HEAP32[f >> 2] | 0;
									R = T;
									S = U
								}
								S = P + N | 0;
								if (V) {
									W = S;
									X = Q;
									Y = 32
								} else {
									Z = 0;
									_ = S;
									$ = Q
								}
							} else {
								W = P;
								X = s;
								Y = 32
							}
							if ((Y | 0) == 32) {
								Y = 0;
								Z = Cc[c[(HEAP32[k >> 2] | 0) + 28 >> 2] & 31](k, 48) | 0;
								_ = W;
								$ = X
							}
							S = HEAP32[f >> 2] | 0;
							HEAP32[f >> 2] = S + 1;
							if (($ | 0) > 0) {
								R = S;
								O = $;
								while (1) {
									HEAP8[R >> 0] = Z;
									O = O + -1 | 0;
									U = HEAP32[f >> 2] | 0;
									HEAP32[f >> 2] = U + 1;
									if ((O | 0) <= 0) {
										aa = U;
										break
									} else
										R = U
								}
							} else
								aa = S;
							HEAP8[aa >> 0] = n;
							ba = _
						} else
							ba = P;
						if ((ba | 0) == (I | 0)) {
							R = Cc[c[(HEAP32[k >> 2] | 0) + 28 >> 2] & 31](k, 48) | 0;
							O = HEAP32[f >> 2] | 0;
							HEAP32[f >> 2] = O + 1;
							HEAP8[O >> 0] = R
						} else {
							R = HEAP8[p >> 0] | 0;
							O = (R & 1) == 0;
							if (O)
								ca = (R & 255) >>> 1;
							else
								ca = HEAP32[E >> 2] | 0;
							if (!ca) {
								da = ba;
								ea = -1;
								fa = 0;
								ga = 0
							} else {
								if (O)
									ha = C;
								else
									ha = HEAP32[D >> 2] | 0;
								da = ba;
								ea = HEAP8[ha >> 0] | 0;
								fa = 0;
								ga = 0
							}
							while (1) {
								if ((ga | 0) == (ea | 0)) {
									O = HEAP32[f >> 2] | 0;
									HEAP32[f >> 2] = O + 1;
									HEAP8[O >> 0] = o;
									O = fa + 1 | 0;
									R = HEAP8[p >> 0] | 0;
									Q = (R & 1) == 0;
									if (Q)
										ia = (R & 255) >>> 1;
									else
										ia = HEAP32[E >> 2] | 0;
									if (O >>> 0 < ia >>> 0) {
										if (Q)
											ja = C;
										else
											ja = HEAP32[D >> 2] | 0;
										if ((HEAP8[ja + O >> 0] | 0) == 127) {
											ka = -1;
											la = O;
											ma = 0
										} else {
											if (Q)
												na = C;
											else
												na = HEAP32[D >> 2] | 0;
											ka = HEAP8[na + O >> 0] | 0;
											la = O;
											ma = 0
										}
									} else {
										ka = ea;
										la = O;
										ma = 0
									}
								} else {
									ka = ea;
									la = fa;
									ma = ga
								}
								da = da + -1 | 0;
								O = HEAP8[da >> 0] | 0;
								Q = HEAP32[f >> 2] | 0;
								HEAP32[f >> 2] = Q + 1;
								HEAP8[Q >> 0] = O;
								if ((da | 0) == (I | 0))
									break;
								else {
									ea = ka;
									fa = la;
									ga = ma + 1 | 0
								}
							}
						}
						S = HEAP32[f >> 2] | 0;
						if ((J | 0) != (S | 0) ? (O = S + -1 | 0, O >>> 0 > J >>> 0) : 0) {
							S = J;
							Q = O;
							do {
								O = HEAP8[S >> 0] | 0;
								HEAP8[S >> 0] = HEAP8[Q >> 0] | 0;
								HEAP8[Q >> 0] = O;
								S = S + 1 | 0;
								Q = Q + -1 | 0
							} while (S >>> 0 < Q >>> 0);
							L = I
						} else
							L = I;
						break
					}
				case 2: {
						Q = HEAP8[q >> 0] | 0;
						S = (Q & 1) == 0;
						if (S)
							oa = (Q & 255) >>> 1;
						else
							oa = HEAP32[A >> 2] | 0;
						if ((oa | 0) == 0 | x)
							L = H;
						else {
							if (S) {
								pa = y;
								qa = (Q & 255) >>> 1
							} else {
								pa = HEAP32[z >> 2] | 0;
								qa = HEAP32[A >> 2] | 0
							}
							Q = pa + qa | 0;
							S = HEAP32[f >> 2] | 0;
							if ((pa | 0) == (Q | 0))
								ra = S;
							else {
								J = S;
								S = pa;
								while (1) {
									HEAP8[J >> 0] = HEAP8[S >> 0] | 0;
									S = S + 1 | 0;
									O = J + 1 | 0;
									if ((S | 0) == (Q | 0)) {
										ra = O;
										break
									} else
										J = O
								}
							}
							HEAP32[f >> 2] = ra;
							L = H
						}
						break
					}
				default:
					L = H
				}
				h = h + 1 | 0;
				if ((h | 0) == 4)
					break;
				else
					H = L
			}
			L = HEAP8[r >> 0] | 0;
			r = (L & 1) == 0;
			if (r)
				sa = (L & 255) >>> 1;
			else
				sa = HEAP32[w >> 2] | 0;
			if (sa >>> 0 > 1) {
				if (r) {
					ta = u;
					ua = (L & 255) >>> 1
				} else {
					ta = HEAP32[v >> 2] | 0;
					ua = HEAP32[w >> 2] | 0
				}
				w = ta + 1 | 0;
				v = ta + ua | 0;
				ua = HEAP32[f >> 2] | 0;
				if ((w | 0) == (v | 0))
					va = ua;
				else {
					ta = ua;
					ua = w;
					while (1) {
						HEAP8[ta >> 0] = HEAP8[ua >> 0] | 0;
						ua = ua + 1 | 0;
						w = ta + 1 | 0;
						if ((ua | 0) == (v | 0)) {
							va = w;
							break
						} else
							ta = w
					}
				}
				HEAP32[f >> 2] = va
			}
			va = g & 176;
			if ((va | 0) == 16) {
				i = t;
				return
			} else if ((va | 0) == 32) {
				HEAP32[e >> 2] = HEAP32[f >> 2];
				i = t;
				return
			} else {
				HEAP32[e >> 2] = d;
				i = t;
				return
			}
		}
		function tr(b, d, e, f, g, h, j) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			var k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0;
			d = i;
			i = i + 176 | 0;
			k = d + 60 | 0;
			l = d + 56 | 0;
			m = d + 52 | 0;
			n = d + 165 | 0;
			o = d + 164 | 0;
			p = d + 40 | 0;
			q = d + 28 | 0;
			r = d + 16 | 0;
			s = d + 12 | 0;
			t = d + 64 | 0;
			u = d + 8 | 0;
			v = d + 4 | 0;
			w = d;
			Am(l, g);
			x = Yr(l, 130776) | 0;
			y = HEAP8[j >> 0] | 0;
			z = (y & 1) == 0;
			if (z)
				A = (y & 255) >>> 1;
			else
				A = HEAP32[j + 4 >> 2] | 0;
			if (!A)
				B = 0;
			else {
				if (z)
					C = j + 1 | 0;
				else
					C = HEAP32[j + 8 >> 2] | 0;
				z = HEAP8[C >> 0] | 0;
				B = z << 24 >> 24 == (Cc[c[(HEAP32[x >> 2] | 0) + 28 >> 2] & 31](x, 45) | 0) << 24 >> 24
			}
			HEAP32[m >> 2] = 0;
			HEAP32[p + 0 >> 2] = 0;
			HEAP32[p + 4 >> 2] = 0;
			HEAP32[p + 8 >> 2] = 0;
			HEAP32[q + 0 >> 2] = 0;
			HEAP32[q + 4 >> 2] = 0;
			HEAP32[q + 8 >> 2] = 0;
			HEAP32[r + 0 >> 2] = 0;
			HEAP32[r + 4 >> 2] = 0;
			HEAP32[r + 8 >> 2] = 0;
			rr(f, B, l, m, n, o, p, q, r, s);
			f = HEAP8[j >> 0] | 0;
			z = (f & 1) == 0;
			if (z)
				D = (f & 255) >>> 1;
			else
				D = HEAP32[j + 4 >> 2] | 0;
			C = HEAP32[s >> 2] | 0;
			if ((D | 0) > (C | 0)) {
				if (z)
					E = (f & 255) >>> 1;
				else
					E = HEAP32[j + 4 >> 2] | 0;
				z = HEAP8[r >> 0] | 0;
				if (!(z & 1))
					F = (z & 255) >>> 1;
				else
					F = HEAP32[r + 4 >> 2] | 0;
				z = HEAP8[q >> 0] | 0;
				if (!(z & 1))
					G = (z & 255) >>> 1;
				else
					G = HEAP32[q + 4 >> 2] | 0;
				H = F + (E - C << 1 | 1) + G | 0
			} else {
				G = HEAP8[r >> 0] | 0;
				if (!(G & 1))
					I = (G & 255) >>> 1;
				else
					I = HEAP32[r + 4 >> 2] | 0;
				G = HEAP8[q >> 0] | 0;
				if (!(G & 1))
					J = (G & 255) >>> 1;
				else
					J = HEAP32[q + 4 >> 2] | 0;
				H = I + 2 + J | 0
			}
			J = H + C | 0;
			if (J >>> 0 > 100) {
				H = vx(J) | 0;
				if (!H)
					qx();
				else {
					K = H;
					L = H
				}
			} else {
				K = 0;
				L = t
			}
			if (!(f & 1)) {
				M = j + 1 | 0;
				N = (f & 255) >>> 1
			} else {
				M = HEAP32[j + 8 >> 2] | 0;
				N = HEAP32[j + 4 >> 2] | 0
			}
			sr(L, u, v, HEAP32[g + 4 >> 2] | 0, M, M + N | 0, x, B, m, HEAP8[n >> 0] | 0, HEAP8[o >> 0] | 0, p, q, r, C);
			HEAP32[w >> 2] = HEAP32[e >> 2];
			e = HEAP32[u >> 2] | 0;
			u = HEAP32[v >> 2] | 0;
			HEAP32[k + 0 >> 2] = HEAP32[w + 0 >> 2];
			Ju(b, k, L, e, u, g, h);
			wx(K);
			bm(r);
			bm(q);
			bm(p);
			Jl(HEAP32[l >> 2] | 0) | 0;
			i = d;
			return
		}
		function ur(a) {
			a = a | 0;
			var b = 0;
			b = i;
			kl(a);
			i = b;
			return
		}
		function vr(a) {
			a = a | 0;
			return
		}
		function wr(b, d, e, f, g, j, l) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			j = j | 0;
			l = +l;
			var m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0,
			O = 0,
			P = 0,
			Q = 0;
			d = i;
			i = i + 992 | 0;
			m = d;
			n = d + 884 | 0;
			o = d + 880 | 0;
			p = d + 480 | 0;
			q = d + 476 | 0;
			r = d + 472 | 0;
			s = d + 468 | 0;
			t = d + 464 | 0;
			u = d + 452 | 0;
			v = d + 440 | 0;
			w = d + 428 | 0;
			x = d + 424 | 0;
			y = d + 24 | 0;
			z = d + 16 | 0;
			A = d + 12 | 0;
			B = d + 8 | 0;
			HEAP32[o >> 2] = n;
			HEAPF64[k >> 3] = l;
			HEAP32[m >> 2] = HEAP32[k >> 2];
			HEAP32[m + 4 >> 2] = HEAP32[k + 4 >> 2];
			C = Vx(n, 100, 130528, m) | 0;
			if (C >>> 0 > 99) {
				n = ko() | 0;
				HEAPF64[k >> 3] = l;
				HEAP32[m >> 2] = HEAP32[k >> 2];
				HEAP32[m + 4 >> 2] = HEAP32[k + 4 >> 2];
				D = Ku(o, n, 130528, m) | 0;
				n = HEAP32[o >> 2] | 0;
				if (!n)
					qx();
				E = vx(D << 2) | 0;
				if (!E)
					qx();
				else {
					F = E;
					G = n;
					H = E;
					I = D
				}
			} else {
				F = 0;
				G = 0;
				H = p;
				I = C
			}
			Am(q, g);
			C = Yr(q, 130768) | 0;
			p = HEAP32[o >> 2] | 0;
			zc[c[(HEAP32[C >> 2] | 0) + 48 >> 2] & 15](C, p, p + I | 0, H) | 0;
			if (!I)
				J = 0;
			else
				J = (HEAP8[HEAP32[o >> 2] >> 0] | 0) == 45;
			HEAP32[r >> 2] = 0;
			HEAP32[u + 0 >> 2] = 0;
			HEAP32[u + 4 >> 2] = 0;
			HEAP32[u + 8 >> 2] = 0;
			HEAP32[v + 0 >> 2] = 0;
			HEAP32[v + 4 >> 2] = 0;
			HEAP32[v + 8 >> 2] = 0;
			HEAP32[w + 0 >> 2] = 0;
			HEAP32[w + 4 >> 2] = 0;
			HEAP32[w + 8 >> 2] = 0;
			xr(f, J, q, r, s, t, u, v, w, x);
			f = HEAP32[x >> 2] | 0;
			if ((I | 0) > (f | 0)) {
				x = HEAP8[w >> 0] | 0;
				if (!(x & 1))
					K = (x & 255) >>> 1;
				else
					K = HEAP32[w + 4 >> 2] | 0;
				x = HEAP8[v >> 0] | 0;
				if (!(x & 1))
					L = (x & 255) >>> 1;
				else
					L = HEAP32[v + 4 >> 2] | 0;
				M = K + (I - f << 1 | 1) + L | 0
			} else {
				L = HEAP8[w >> 0] | 0;
				if (!(L & 1))
					N = (L & 255) >>> 1;
				else
					N = HEAP32[w + 4 >> 2] | 0;
				L = HEAP8[v >> 0] | 0;
				if (!(L & 1))
					O = (L & 255) >>> 1;
				else
					O = HEAP32[v + 4 >> 2] | 0;
				M = N + 2 + O | 0
			}
			O = M + f | 0;
			if (O >>> 0 > 100) {
				M = vx(O << 2) | 0;
				if (!M)
					qx();
				else {
					P = M;
					Q = M
				}
			} else {
				P = 0;
				Q = y
			}
			yr(Q, z, A, HEAP32[g + 4 >> 2] | 0, H, H + (I << 2) | 0, C, J, r, HEAP32[s >> 2] | 0, HEAP32[t >> 2] | 0, u, v, w, f);
			HEAP32[B >> 2] = HEAP32[e >> 2];
			e = HEAP32[z >> 2] | 0;
			z = HEAP32[A >> 2] | 0;
			HEAP32[m + 0 >> 2] = HEAP32[B + 0 >> 2];
			Lu(b, m, Q, e, z, g, j);
			if (P)
				wx(P);
			pm(w);
			pm(v);
			bm(u);
			Jl(HEAP32[q >> 2] | 0) | 0;
			if (!F) {
				wx(G);
				i = d;
				return
			}
			wx(F);
			wx(G);
			i = d;
			return
		}
		function xr(b, d, e, f, g, h, j, k, l, m) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			k = k | 0;
			l = l | 0;
			m = m | 0;
			var n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0;
			n = i;
			i = i + 112 | 0;
			o = n + 108 | 0;
			p = n + 96 | 0;
			q = n + 92 | 0;
			r = n + 80 | 0;
			s = n + 68 | 0;
			t = n + 56 | 0;
			u = n + 52 | 0;
			v = n + 40 | 0;
			w = n + 36 | 0;
			x = n + 24 | 0;
			y = n + 12 | 0;
			z = n;
			if (b) {
				b = Yr(e, 130344) | 0;
				A = HEAP32[b >> 2] | 0;
				if (d) {
					rc[HEAP32[A + 44 >> 2] & 127](o, b);
					B = HEAP32[o >> 2] | 0;
					HEAP8[f >> 0] = B;
					HEAP8[f + 1 >> 0] = B >> 8;
					HEAP8[f + 2 >> 0] = B >> 16;
					HEAP8[f + 3 >> 0] = B >> 24;
					rc[c[(HEAP32[b >> 2] | 0) + 32 >> 2] & 127](p, b);
					if (!(HEAP8[l >> 0] & 1)) {
						HEAP32[l + 4 >> 2] = 0;
						HEAP8[l >> 0] = 0
					} else {
						HEAP32[HEAP32[l + 8 >> 2] >> 2] = 0;
						HEAP32[l + 4 >> 2] = 0
					}
					sm(l, 0);
					HEAP32[l + 0 >> 2] = HEAP32[p + 0 >> 2];
					HEAP32[l + 4 >> 2] = HEAP32[p + 4 >> 2];
					HEAP32[l + 8 >> 2] = HEAP32[p + 8 >> 2];
					HEAP32[p + 0 >> 2] = 0;
					HEAP32[p + 4 >> 2] = 0;
					HEAP32[p + 8 >> 2] = 0;
					pm(p)
				} else {
					rc[HEAP32[A + 40 >> 2] & 127](q, b);
					A = HEAP32[q >> 2] | 0;
					HEAP8[f >> 0] = A;
					HEAP8[f + 1 >> 0] = A >> 8;
					HEAP8[f + 2 >> 0] = A >> 16;
					HEAP8[f + 3 >> 0] = A >> 24;
					rc[c[(HEAP32[b >> 2] | 0) + 28 >> 2] & 127](r, b);
					if (!(HEAP8[l >> 0] & 1)) {
						HEAP32[l + 4 >> 2] = 0;
						HEAP8[l >> 0] = 0
					} else {
						HEAP32[HEAP32[l + 8 >> 2] >> 2] = 0;
						HEAP32[l + 4 >> 2] = 0
					}
					sm(l, 0);
					HEAP32[l + 0 >> 2] = HEAP32[r + 0 >> 2];
					HEAP32[l + 4 >> 2] = HEAP32[r + 4 >> 2];
					HEAP32[l + 8 >> 2] = HEAP32[r + 8 >> 2];
					HEAP32[r + 0 >> 2] = 0;
					HEAP32[r + 4 >> 2] = 0;
					HEAP32[r + 8 >> 2] = 0;
					pm(r)
				}
				HEAP32[g >> 2] = tc[c[(HEAP32[b >> 2] | 0) + 12 >> 2] & 127](b) | 0;
				HEAP32[h >> 2] = tc[c[(HEAP32[b >> 2] | 0) + 16 >> 2] & 127](b) | 0;
				rc[c[(HEAP32[b >> 2] | 0) + 20 >> 2] & 127](s, b);
				if (!(HEAP8[j >> 0] & 1)) {
					HEAP8[j + 1 >> 0] = 0;
					HEAP8[j >> 0] = 0
				} else {
					HEAP8[HEAP32[j + 8 >> 2] >> 0] = 0;
					HEAP32[j + 4 >> 2] = 0
				}
				gm(j, 0);
				HEAP32[j + 0 >> 2] = HEAP32[s + 0 >> 2];
				HEAP32[j + 4 >> 2] = HEAP32[s + 4 >> 2];
				HEAP32[j + 8 >> 2] = HEAP32[s + 8 >> 2];
				HEAP32[s + 0 >> 2] = 0;
				HEAP32[s + 4 >> 2] = 0;
				HEAP32[s + 8 >> 2] = 0;
				bm(s);
				rc[c[(HEAP32[b >> 2] | 0) + 24 >> 2] & 127](t, b);
				if (!(HEAP8[k >> 0] & 1)) {
					HEAP32[k + 4 >> 2] = 0;
					HEAP8[k >> 0] = 0
				} else {
					HEAP32[HEAP32[k + 8 >> 2] >> 2] = 0;
					HEAP32[k + 4 >> 2] = 0
				}
				sm(k, 0);
				HEAP32[k + 0 >> 2] = HEAP32[t + 0 >> 2];
				HEAP32[k + 4 >> 2] = HEAP32[t + 4 >> 2];
				HEAP32[k + 8 >> 2] = HEAP32[t + 8 >> 2];
				HEAP32[t + 0 >> 2] = 0;
				HEAP32[t + 4 >> 2] = 0;
				HEAP32[t + 8 >> 2] = 0;
				pm(t);
				C = tc[c[(HEAP32[b >> 2] | 0) + 36 >> 2] & 127](b) | 0;
				HEAP32[m >> 2] = C;
				i = n;
				return
			} else {
				b = Yr(e, 130280) | 0;
				e = HEAP32[b >> 2] | 0;
				if (d) {
					rc[HEAP32[e + 44 >> 2] & 127](u, b);
					d = HEAP32[u >> 2] | 0;
					HEAP8[f >> 0] = d;
					HEAP8[f + 1 >> 0] = d >> 8;
					HEAP8[f + 2 >> 0] = d >> 16;
					HEAP8[f + 3 >> 0] = d >> 24;
					rc[c[(HEAP32[b >> 2] | 0) + 32 >> 2] & 127](v, b);
					if (!(HEAP8[l >> 0] & 1)) {
						HEAP32[l + 4 >> 2] = 0;
						HEAP8[l >> 0] = 0
					} else {
						HEAP32[HEAP32[l + 8 >> 2] >> 2] = 0;
						HEAP32[l + 4 >> 2] = 0
					}
					sm(l, 0);
					HEAP32[l + 0 >> 2] = HEAP32[v + 0 >> 2];
					HEAP32[l + 4 >> 2] = HEAP32[v + 4 >> 2];
					HEAP32[l + 8 >> 2] = HEAP32[v + 8 >> 2];
					HEAP32[v + 0 >> 2] = 0;
					HEAP32[v + 4 >> 2] = 0;
					HEAP32[v + 8 >> 2] = 0;
					pm(v)
				} else {
					rc[HEAP32[e + 40 >> 2] & 127](w, b);
					e = HEAP32[w >> 2] | 0;
					HEAP8[f >> 0] = e;
					HEAP8[f + 1 >> 0] = e >> 8;
					HEAP8[f + 2 >> 0] = e >> 16;
					HEAP8[f + 3 >> 0] = e >> 24;
					rc[c[(HEAP32[b >> 2] | 0) + 28 >> 2] & 127](x, b);
					if (!(HEAP8[l >> 0] & 1)) {
						HEAP32[l + 4 >> 2] = 0;
						HEAP8[l >> 0] = 0
					} else {
						HEAP32[HEAP32[l + 8 >> 2] >> 2] = 0;
						HEAP32[l + 4 >> 2] = 0
					}
					sm(l, 0);
					HEAP32[l + 0 >> 2] = HEAP32[x + 0 >> 2];
					HEAP32[l + 4 >> 2] = HEAP32[x + 4 >> 2];
					HEAP32[l + 8 >> 2] = HEAP32[x + 8 >> 2];
					HEAP32[x + 0 >> 2] = 0;
					HEAP32[x + 4 >> 2] = 0;
					HEAP32[x + 8 >> 2] = 0;
					pm(x)
				}
				HEAP32[g >> 2] = tc[c[(HEAP32[b >> 2] | 0) + 12 >> 2] & 127](b) | 0;
				HEAP32[h >> 2] = tc[c[(HEAP32[b >> 2] | 0) + 16 >> 2] & 127](b) | 0;
				rc[c[(HEAP32[b >> 2] | 0) + 20 >> 2] & 127](y, b);
				if (!(HEAP8[j >> 0] & 1)) {
					HEAP8[j + 1 >> 0] = 0;
					HEAP8[j >> 0] = 0
				} else {
					HEAP8[HEAP32[j + 8 >> 2] >> 0] = 0;
					HEAP32[j + 4 >> 2] = 0
				}
				gm(j, 0);
				HEAP32[j + 0 >> 2] = HEAP32[y + 0 >> 2];
				HEAP32[j + 4 >> 2] = HEAP32[y + 4 >> 2];
				HEAP32[j + 8 >> 2] = HEAP32[y + 8 >> 2];
				HEAP32[y + 0 >> 2] = 0;
				HEAP32[y + 4 >> 2] = 0;
				HEAP32[y + 8 >> 2] = 0;
				bm(y);
				rc[c[(HEAP32[b >> 2] | 0) + 24 >> 2] & 127](z, b);
				if (!(HEAP8[k >> 0] & 1)) {
					HEAP32[k + 4 >> 2] = 0;
					HEAP8[k >> 0] = 0
				} else {
					HEAP32[HEAP32[k + 8 >> 2] >> 2] = 0;
					HEAP32[k + 4 >> 2] = 0
				}
				sm(k, 0);
				HEAP32[k + 0 >> 2] = HEAP32[z + 0 >> 2];
				HEAP32[k + 4 >> 2] = HEAP32[z + 4 >> 2];
				HEAP32[k + 8 >> 2] = HEAP32[z + 8 >> 2];
				HEAP32[z + 0 >> 2] = 0;
				HEAP32[z + 4 >> 2] = 0;
				HEAP32[z + 8 >> 2] = 0;
				pm(z);
				C = tc[c[(HEAP32[b >> 2] | 0) + 36 >> 2] & 127](b) | 0;
				HEAP32[m >> 2] = C;
				i = n;
				return
			}
		}
		function yr(b, d, e, f, g, h, j, k, l, m, n, o, p, q, r) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			k = k | 0;
			l = l | 0;
			m = m | 0;
			n = n | 0;
			o = o | 0;
			p = p | 0;
			q = q | 0;
			r = r | 0;
			var s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0,
			O = 0,
			P = 0,
			Q = 0,
			R = 0,
			S = 0,
			T = 0,
			U = 0,
			V = 0,
			W = 0,
			X = 0,
			Y = 0,
			Z = 0,
			_ = 0,
			$ = 0,
			aa = 0,
			ba = 0,
			ca = 0,
			da = 0,
			ea = 0,
			fa = 0,
			ga = 0,
			ha = 0,
			ia = 0,
			ja = 0,
			ka = 0,
			la = 0,
			ma = 0,
			na = 0,
			oa = 0,
			pa = 0,
			qa = 0,
			ra = 0,
			sa = 0;
			s = i;
			HEAP32[e >> 2] = b;
			t = q + 4 | 0;
			u = q + 8 | 0;
			v = (f & 512 | 0) == 0;
			w = p + 4 | 0;
			x = p + 8 | 0;
			y = (r | 0) > 0;
			z = o + 1 | 0;
			A = o + 8 | 0;
			B = o + 4 | 0;
			C = g;
			g = 0;
			while (1) {
				switch (HEAP8[l + g >> 0] | 0) {
				case 3: {
						D = HEAP8[q >> 0] | 0;
						E = (D & 1) == 0;
						if (E)
							F = (D & 255) >>> 1;
						else
							F = HEAP32[t >> 2] | 0;
						if (!F)
							G = C;
						else {
							if (E)
								H = t;
							else
								H = HEAP32[u >> 2] | 0;
							E = HEAP32[H >> 2] | 0;
							D = HEAP32[e >> 2] | 0;
							HEAP32[e >> 2] = D + 4;
							HEAP32[D >> 2] = E;
							G = C
						}
						break
					}
				case 0: {
						HEAP32[d >> 2] = HEAP32[e >> 2];
						G = C;
						break
					}
				case 2: {
						E = HEAP8[p >> 0] | 0;
						D = (E & 1) == 0;
						if (D)
							I = (E & 255) >>> 1;
						else
							I = HEAP32[w >> 2] | 0;
						if ((I | 0) == 0 | v)
							G = C;
						else {
							if (D) {
								J = w;
								K = (E & 255) >>> 1
							} else {
								J = HEAP32[x >> 2] | 0;
								K = HEAP32[w >> 2] | 0
							}
							E = J + (K << 2) | 0;
							D = HEAP32[e >> 2] | 0;
							if ((J | 0) == (E | 0))
								L = D;
							else {
								M = (J + (K + -1 << 2) - J | 0) >>> 2;
								N = D;
								O = J;
								while (1) {
									HEAP32[N >> 2] = HEAP32[O >> 2];
									O = O + 4 | 0;
									if ((O | 0) == (E | 0))
										break;
									else
										N = N + 4 | 0
								}
								L = D + (M + 1 << 2) | 0
							}
							HEAP32[e >> 2] = L;
							G = C
						}
						break
					}
				case 1: {
						HEAP32[d >> 2] = HEAP32[e >> 2];
						N = Cc[c[(HEAP32[j >> 2] | 0) + 44 >> 2] & 31](j, 32) | 0;
						E = HEAP32[e >> 2] | 0;
						HEAP32[e >> 2] = E + 4;
						HEAP32[E >> 2] = N;
						G = C;
						break
					}
				case 4: {
						N = HEAP32[e >> 2] | 0;
						E = k ? C + 4 | 0 : C;
						a: do
							if (E >>> 0 < h >>> 0) {
								O = E;
								while (1) {
									P = O + 4 | 0;
									if (!(mc[c[(HEAP32[j >> 2] | 0) + 12 >> 2] & 31](j, 2048, HEAP32[O >> 2] | 0) | 0)) {
										Q = O;
										break a
									}
									if (P >>> 0 < h >>> 0)
										O = P;
									else {
										Q = P;
										break
									}
								}
							} else
								Q = E;
						while (0);
						if (y) {
							if (Q >>> 0 > E >>> 0) {
								M = HEAP32[e >> 2] | 0;
								D = Q;
								O = r;
								do {
									D = D + -4 | 0;
									P = M;
									M = M + 4 | 0;
									HEAP32[P >> 2] = HEAP32[D >> 2];
									O = O + -1 | 0;
									R = (O | 0) > 0
								} while (D >>> 0 > E >>> 0 & R);
								HEAP32[e >> 2] = M;
								if (R) {
									S = D;
									T = O;
									U = 33
								} else {
									P = HEAP32[e >> 2] | 0;
									HEAP32[e >> 2] = P + 4;
									V = P;
									W = D
								}
							} else {
								S = Q;
								T = r;
								U = 33
							}
							if ((U | 0) == 33) {
								U = 0;
								P = Cc[c[(HEAP32[j >> 2] | 0) + 44 >> 2] & 31](j, 48) | 0;
								X = HEAP32[e >> 2] | 0;
								Y = X + 4 | 0;
								HEAP32[e >> 2] = Y;
								if ((T | 0) > 0) {
									Z = X;
									_ = Y;
									Y = T;
									while (1) {
										HEAP32[Z >> 2] = P;
										Y = Y + -1 | 0;
										if ((Y | 0) <= 0)
											break;
										else {
											$ = _;
											_ = _ + 4 | 0;
											Z = $
										}
									}
									HEAP32[e >> 2] = X + (T + 1 << 2);
									V = X + (T << 2) | 0;
									W = S
								} else {
									V = X;
									W = S
								}
							}
							HEAP32[V >> 2] = m;
							aa = W
						} else
							aa = Q;
						if ((aa | 0) == (E | 0)) {
							Z = Cc[c[(HEAP32[j >> 2] | 0) + 44 >> 2] & 31](j, 48) | 0;
							_ = HEAP32[e >> 2] | 0;
							Y = _ + 4 | 0;
							HEAP32[e >> 2] = Y;
							HEAP32[_ >> 2] = Z;
							ba = Y
						} else {
							Y = HEAP8[o >> 0] | 0;
							Z = (Y & 1) == 0;
							if (Z)
								ca = (Y & 255) >>> 1;
							else
								ca = HEAP32[B >> 2] | 0;
							if (!ca) {
								da = aa;
								ea = -1;
								fa = 0;
								ga = 0
							} else {
								if (Z)
									ha = z;
								else
									ha = HEAP32[A >> 2] | 0;
								da = aa;
								ea = HEAP8[ha >> 0] | 0;
								fa = 0;
								ga = 0
							}
							while (1) {
								Z = HEAP32[e >> 2] | 0;
								if ((ga | 0) == (ea | 0)) {
									Y = Z + 4 | 0;
									HEAP32[e >> 2] = Y;
									HEAP32[Z >> 2] = n;
									_ = fa + 1 | 0;
									P = HEAP8[o >> 0] | 0;
									D = (P & 1) == 0;
									if (D)
										ia = (P & 255) >>> 1;
									else
										ia = HEAP32[B >> 2] | 0;
									if (_ >>> 0 < ia >>> 0) {
										if (D)
											ja = z;
										else
											ja = HEAP32[A >> 2] | 0;
										if ((HEAP8[ja + _ >> 0] | 0) == 127) {
											ka = Y;
											la = -1;
											ma = _;
											na = 0
										} else {
											if (D)
												oa = z;
											else
												oa = HEAP32[A >> 2] | 0;
											ka = Y;
											la = HEAP8[oa + _ >> 0] | 0;
											ma = _;
											na = 0
										}
									} else {
										ka = Y;
										la = ea;
										ma = _;
										na = 0
									}
								} else {
									ka = Z;
									la = ea;
									ma = fa;
									na = ga
								}
								da = da + -4 | 0;
								Z = HEAP32[da >> 2] | 0;
								_ = ka + 4 | 0;
								HEAP32[e >> 2] = _;
								HEAP32[ka >> 2] = Z;
								if ((da | 0) == (E | 0)) {
									ba = _;
									break
								} else {
									ea = la;
									fa = ma;
									ga = na + 1 | 0
								}
							}
						}
						if ((N | 0) != (ba | 0) ? (X = ba + -4 | 0, X >>> 0 > N >>> 0) : 0) {
							_ = N;
							Z = X;
							do {
								X = HEAP32[_ >> 2] | 0;
								HEAP32[_ >> 2] = HEAP32[Z >> 2];
								HEAP32[Z >> 2] = X;
								_ = _ + 4 | 0;
								Z = Z + -4 | 0
							} while (_ >>> 0 < Z >>> 0);
							G = E
						} else
							G = E;
						break
					}
				default:
					G = C
				}
				g = g + 1 | 0;
				if ((g | 0) == 4)
					break;
				else
					C = G
			}
			G = HEAP8[q >> 0] | 0;
			q = (G & 1) == 0;
			if (q)
				pa = (G & 255) >>> 1;
			else
				pa = HEAP32[t >> 2] | 0;
			if (pa >>> 0 > 1) {
				if (q) {
					qa = t;
					ra = (G & 255) >>> 1
				} else {
					qa = HEAP32[u >> 2] | 0;
					ra = HEAP32[t >> 2] | 0
				}
				t = qa + 4 | 0;
				u = qa + (ra << 2) | 0;
				G = HEAP32[e >> 2] | 0;
				if ((t | 0) == (u | 0))
					sa = G;
				else {
					q = (qa + (ra + -1 << 2) - t | 0) >>> 2;
					ra = G;
					qa = t;
					while (1) {
						HEAP32[ra >> 2] = HEAP32[qa >> 2];
						qa = qa + 4 | 0;
						if ((qa | 0) == (u | 0))
							break;
						else
							ra = ra + 4 | 0
					}
					sa = G + (q + 1 << 2) | 0
				}
				HEAP32[e >> 2] = sa
			}
			sa = f & 176;
			if ((sa | 0) == 32) {
				HEAP32[d >> 2] = HEAP32[e >> 2];
				i = s;
				return
			} else if ((sa | 0) == 16) {
				i = s;
				return
			} else {
				HEAP32[d >> 2] = b;
				i = s;
				return
			}
		}
		function zr(b, d, e, f, g, h, j) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			var k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0,
			O = 0;
			d = i;
			i = i + 480 | 0;
			k = d + 472 | 0;
			l = d + 468 | 0;
			m = d + 464 | 0;
			n = d + 460 | 0;
			o = d + 456 | 0;
			p = d + 444 | 0;
			q = d + 432 | 0;
			r = d + 420 | 0;
			s = d + 416 | 0;
			t = d + 16 | 0;
			u = d + 8 | 0;
			v = d + 4 | 0;
			w = d;
			Am(l, g);
			x = Yr(l, 130768) | 0;
			y = HEAP8[j >> 0] | 0;
			z = (y & 1) == 0;
			if (z)
				A = (y & 255) >>> 1;
			else
				A = HEAP32[j + 4 >> 2] | 0;
			if (!A)
				B = 0;
			else {
				if (z)
					C = j + 4 | 0;
				else
					C = HEAP32[j + 8 >> 2] | 0;
				z = HEAP32[C >> 2] | 0;
				B = (z | 0) == (Cc[c[(HEAP32[x >> 2] | 0) + 44 >> 2] & 31](x, 45) | 0)
			}
			HEAP32[m >> 2] = 0;
			HEAP32[p + 0 >> 2] = 0;
			HEAP32[p + 4 >> 2] = 0;
			HEAP32[p + 8 >> 2] = 0;
			HEAP32[q + 0 >> 2] = 0;
			HEAP32[q + 4 >> 2] = 0;
			HEAP32[q + 8 >> 2] = 0;
			HEAP32[r + 0 >> 2] = 0;
			HEAP32[r + 4 >> 2] = 0;
			HEAP32[r + 8 >> 2] = 0;
			xr(f, B, l, m, n, o, p, q, r, s);
			f = HEAP8[j >> 0] | 0;
			z = (f & 1) == 0;
			if (z)
				D = (f & 255) >>> 1;
			else
				D = HEAP32[j + 4 >> 2] | 0;
			C = HEAP32[s >> 2] | 0;
			if ((D | 0) > (C | 0)) {
				if (z)
					E = (f & 255) >>> 1;
				else
					E = HEAP32[j + 4 >> 2] | 0;
				z = HEAP8[r >> 0] | 0;
				if (!(z & 1))
					F = (z & 255) >>> 1;
				else
					F = HEAP32[r + 4 >> 2] | 0;
				z = HEAP8[q >> 0] | 0;
				if (!(z & 1))
					G = (z & 255) >>> 1;
				else
					G = HEAP32[q + 4 >> 2] | 0;
				H = F + (E - C << 1 | 1) + G | 0
			} else {
				G = HEAP8[r >> 0] | 0;
				if (!(G & 1))
					I = (G & 255) >>> 1;
				else
					I = HEAP32[r + 4 >> 2] | 0;
				G = HEAP8[q >> 0] | 0;
				if (!(G & 1))
					J = (G & 255) >>> 1;
				else
					J = HEAP32[q + 4 >> 2] | 0;
				H = I + 2 + J | 0
			}
			J = H + C | 0;
			if (J >>> 0 > 100) {
				H = vx(J << 2) | 0;
				if (!H)
					qx();
				else {
					K = H;
					L = H
				}
			} else {
				K = 0;
				L = t
			}
			if (!(f & 1)) {
				M = j + 4 | 0;
				N = (f & 255) >>> 1
			} else {
				M = HEAP32[j + 8 >> 2] | 0;
				N = HEAP32[j + 4 >> 2] | 0
			}
			yr(L, u, v, HEAP32[g + 4 >> 2] | 0, M, M + (N << 2) | 0, x, B, m, HEAP32[n >> 2] | 0, HEAP32[o >> 2] | 0, p, q, r, C);
			HEAP32[w >> 2] = HEAP32[e >> 2];
			e = HEAP32[u >> 2] | 0;
			u = HEAP32[v >> 2] | 0;
			HEAP32[k + 0 >> 2] = HEAP32[w + 0 >> 2];
			Lu(b, k, L, e, u, g, h);
			if (!K) {
				pm(r);
				pm(q);
				bm(p);
				O = HEAP32[l >> 2] | 0;
				Jl(O) | 0;
				i = d;
				return
			}
			wx(K);
			pm(r);
			pm(q);
			bm(p);
			O = HEAP32[l >> 2] | 0;
			Jl(O) | 0;
			i = d;
			return
		}
		function Ar(a) {
			a = a | 0;
			var b = 0;
			b = i;
			kl(a);
			i = b;
			return
		}
		function Br(a) {
			a = a | 0;
			return
		}
		function Cr(b, d, e) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0;
			e = i;
			if (!(HEAP8[d >> 0] & 1))
				f = d + 1 | 0;
			else
				f = HEAP32[d + 8 >> 2] | 0;
			d = pb(f | 0, 1) | 0;
			i = e;
			return d >>> ((d | 0) != (-1 | 0) & 1) | 0
		}
		function Dr(b, d, e, f, g, h) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			var j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0;
			d = i;
			i = i + 16 | 0;
			j = d;
			HEAP32[j + 0 >> 2] = 0;
			HEAP32[j + 4 >> 2] = 0;
			HEAP32[j + 8 >> 2] = 0;
			k = HEAP8[h >> 0] | 0;
			if (!(k & 1)) {
				l = h + 1 | 0;
				m = (k & 255) >>> 1;
				n = h + 1 | 0
			} else {
				k = HEAP32[h + 8 >> 2] | 0;
				l = k;
				m = HEAP32[h + 4 >> 2] | 0;
				n = k
			}
			k = l + m | 0;
			if (n >>> 0 < k >>> 0) {
				m = n;
				do {
					im(j, HEAP8[m >> 0] | 0);
					m = m + 1 | 0
				} while ((m | 0) != (k | 0));
				k = (e | 0) == -1 ? -1 : e << 1;
				if (!(HEAP8[j >> 0] & 1)) {
					o = k;
					p = 9
				} else {
					q = k;
					r = HEAP32[j + 8 >> 2] | 0
				}
			} else {
				o = (e | 0) == -1 ? -1 : e << 1;
				p = 9
			}
			if ((p | 0) == 9) {
				q = o;
				r = j + 1 | 0
			}
			o = Sb(q | 0, f | 0, g | 0, r | 0) | 0;
			HEAP32[b + 0 >> 2] = 0;
			HEAP32[b + 4 >> 2] = 0;
			HEAP32[b + 8 >> 2] = 0;
			r = py(o | 0) | 0;
			g = o + r | 0;
			if ((r | 0) > 0)
				s = o;
			else {
				bm(j);
				i = d;
				return
			}
			do {
				im(b, HEAP8[s >> 0] | 0);
				s = s + 1 | 0
			} while ((s | 0) != (g | 0));
			bm(j);
			i = d;
			return
		}
		function Er(a, b) {
			a = a | 0;
			b = b | 0;
			a = i;
			Va(((b | 0) == -1 ? -1 : b << 1) | 0) | 0;
			i = a;
			return
		}
		function Fr(a) {
			a = a | 0;
			var b = 0;
			b = i;
			kl(a);
			i = b;
			return
		}
		function Gr(a) {
			a = a | 0;
			return
		}
		function Hr(b, d, e) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0;
			e = i;
			if (!(HEAP8[d >> 0] & 1))
				f = d + 1 | 0;
			else
				f = HEAP32[d + 8 >> 2] | 0;
			d = pb(f | 0, 1) | 0;
			i = e;
			return d >>> ((d | 0) != (-1 | 0) & 1) | 0
		}
		function Ir(b, d, e, f, g, h) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			var j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0;
			d = i;
			i = i + 176 | 0;
			j = d;
			k = d + 48 | 0;
			l = d + 40 | 0;
			m = d + 36 | 0;
			n = d + 24 | 0;
			o = d + 16 | 0;
			p = d + 8 | 0;
			HEAP32[n + 0 >> 2] = 0;
			HEAP32[n + 4 >> 2] = 0;
			HEAP32[n + 8 >> 2] = 0;
			HEAP32[o + 4 >> 2] = 0;
			HEAP32[o >> 2] = 132432;
			q = HEAP8[h >> 0] | 0;
			if (!(q & 1)) {
				r = h + 4 | 0;
				s = (q & 255) >>> 1;
				t = h + 4 | 0
			} else {
				q = HEAP32[h + 8 >> 2] | 0;
				r = q;
				s = HEAP32[h + 4 >> 2] | 0;
				t = q
			}
			q = r + (s << 2) | 0;
			s = j;
			HEAP32[s >> 2] = 0;
			HEAP32[s + 4 >> 2] = 0;
			a: do
				if (t >>> 0 < q >>> 0) {
					s = k + 32 | 0;
					r = t;
					h = 132432 | 0;
					while (1) {
						HEAP32[m >> 2] = r;
						u = (yc[HEAP32[h + 12 >> 2] & 15](o, j, r, q, m, k, s, l) | 0) == 2;
						v = HEAP32[m >> 2] | 0;
						if (u | (v | 0) == (r | 0))
							break;
						if (k >>> 0 < (HEAP32[l >> 2] | 0) >>> 0) {
							u = k;
							do {
								im(n, HEAP8[u >> 0] | 0);
								u = u + 1 | 0
							} while (u >>> 0 < (HEAP32[l >> 2] | 0) >>> 0);
							w = HEAP32[m >> 2] | 0
						} else
							w = v;
						if (w >>> 0 >= q >>> 0)
							break a;
						r = w;
						h = HEAP32[o >> 2] | 0
					}
					er(131656)
				}
			while (0);
			if (!(HEAP8[n >> 0] & 1))
				x = n + 1 | 0;
			else
				x = HEAP32[n + 8 >> 2] | 0;
			o = Sb(((e | 0) == -1 ? -1 : e << 1) | 0, f | 0, g | 0, x | 0) | 0;
			HEAP32[b + 0 >> 2] = 0;
			HEAP32[b + 4 >> 2] = 0;
			HEAP32[b + 8 >> 2] = 0;
			HEAP32[p + 4 >> 2] = 0;
			HEAP32[p >> 2] = 132536;
			x = py(o | 0) | 0;
			g = o + x | 0;
			f = j;
			HEAP32[f >> 2] = 0;
			HEAP32[f + 4 >> 2] = 0;
			if ((x | 0) <= 0) {
				bm(n);
				i = d;
				return
			}
			x = g;
			f = k + 128 | 0;
			e = o;
			o = 132536 | 0;
			while (1) {
				HEAP32[m >> 2] = e;
				w = (yc[HEAP32[o + 16 >> 2] & 15](p, j, e, (x - e | 0) > 32 ? e + 32 | 0 : g, m, k, f, l) | 0) == 2;
				q = HEAP32[m >> 2] | 0;
				if (w | (q | 0) == (e | 0)) {
					y = 20;
					break
				}
				if (k >>> 0 < (HEAP32[l >> 2] | 0) >>> 0) {
					w = k;
					do {
						tm(b, HEAP32[w >> 2] | 0);
						w = w + 4 | 0
					} while (w >>> 0 < (HEAP32[l >> 2] | 0) >>> 0);
					z = HEAP32[m >> 2] | 0
				} else
					z = q;
				if (z >>> 0 >= g >>> 0) {
					y = 25;
					break
				}
				e = z;
				o = HEAP32[p >> 2] | 0
			}
			if ((y | 0) == 20)
				er(131656);
			else if ((y | 0) == 25) {
				bm(n);
				i = d;
				return
			}
		}
		function Jr(a, b) {
			a = a | 0;
			b = b | 0;
			a = i;
			Va(((b | 0) == -1 ? -1 : b << 1) | 0) | 0;
			i = a;
			return
		}
		function Kr(a) {
			a = a | 0;
			a = ub(8) | 0;
			Kl(a, 130656);
			HEAP32[a >> 2] = 139320;
			fc(a | 0, 139360, 148)
		}
		function Lr(b, d) {
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0;
			e = i;
			HEAP32[b + 4 >> 2] = d + -1;
			HEAP32[b >> 2] = 130696;
			d = b + 8 | 0;
			Tu(d, 28);
			_l(b + 144 | 0, 130680, 1);
			f = HEAP32[d >> 2] | 0;
			d = b + 12 | 0;
			g = HEAP32[d >> 2] | 0;
			if ((g | 0) != (f | 0))
				HEAP32[d >> 2] = g + (~((g + -4 - f | 0) >>> 2) << 2);
			HEAP32[33897] = 0;
			HEAP32[33896] = 129144;
			Uu(b, 135584);
			HEAP32[33895] = 0;
			HEAP32[33894] = 129184;
			Vu(b, 135576);
			qs(135560, 0, 0, 1);
			Wu(b, 135560);
			HEAP32[33889] = 0;
			HEAP32[33888] = 131752;
			Xu(b, 135552);
			HEAP32[33887] = 0;
			HEAP32[33886] = 131968;
			Yu(b, 135544);
			Js(135528, 1);
			Zu(b, 135528);
			HEAP32[33881] = 0;
			HEAP32[33880] = 132192;
			_u(b, 135520);
			HEAP32[33879] = 0;
			HEAP32[33878] = 132312;
			$u(b, 135512);
			HEAP32[33873] = 0;
			HEAP32[33872] = 130944;
			HEAP8[135496] = 46;
			HEAP8[135497] = 44;
			HEAP32[33875] = 0;
			HEAP32[33876] = 0;
			HEAP32[33877] = 0;
			av(b, 135488);
			HEAP32[33865] = 0;
			HEAP32[33864] = 130984;
			HEAP32[33866] = 46;
			HEAP32[33867] = 44;
			HEAP32[33868] = 0;
			HEAP32[33869] = 0;
			HEAP32[33870] = 0;
			bv(b, 135456);
			HEAP32[33863] = 0;
			HEAP32[33862] = 129224;
			cv(b, 135448);
			HEAP32[33861] = 0;
			HEAP32[33860] = 129344;
			dv(b, 135440);
			HEAP32[33859] = 0;
			HEAP32[33858] = 129416;
			ev(b, 135432);
			HEAP32[33857] = 0;
			HEAP32[33856] = 129512;
			fv(b, 135424);
			HEAP32[33855] = 0;
			HEAP32[33854] = 130104;
			gv(b, 135416);
			HEAP32[33853] = 0;
			HEAP32[33852] = 130168;
			hv(b, 135408);
			HEAP32[33851] = 0;
			HEAP32[33850] = 130232;
			iv(b, 135400);
			HEAP32[33849] = 0;
			HEAP32[33848] = 130296;
			jv(b, 135392);
			HEAP32[33847] = 0;
			HEAP32[33846] = 130360;
			kv(b, 135384);
			HEAP32[33845] = 0;
			HEAP32[33844] = 130440;
			lv(b, 135376);
			HEAP32[33843] = 0;
			HEAP32[33842] = 130496;
			mv(b, 135368);
			HEAP32[33841] = 0;
			HEAP32[33840] = 130544;
			nv(b, 135360);
			HEAP32[33837] = 0;
			HEAP32[33836] = 129592;
			HEAP32[33838] = 129640;
			ov(b, 135344);
			HEAP32[33833] = 0;
			HEAP32[33832] = 129744;
			HEAP32[33834] = 129792;
			pv(b, 135328);
			HEAP32[33829] = 0;
			HEAP32[33828] = 131688;
			HEAP32[33830] = ko() | 0;
			HEAP32[33828] = 130040;
			qv(b, 135312);
			HEAP32[33825] = 0;
			HEAP32[33824] = 131688;
			HEAP32[33826] = ko() | 0;
			HEAP32[33824] = 130072;
			rv(b, 135296);
			HEAP32[33823] = 0;
			HEAP32[33822] = 130584;
			sv(b, 135288);
			HEAP32[33821] = 0;
			HEAP32[33820] = 130624;
			tv(b, 135280);
			i = e;
			return
		}
		function Mr() {
			var b = 0;
			b = i;
			if ((HEAP8[130728] | 0) == 0 ? (Da(130728) | 0) != 0 : 0) {
				Rr() | 0;
				HEAP32[32680] = 130712;
				$a(130728)
			}
			i = b;
			return HEAP32[32680] | 0
		}
		function Nr(a, b, d) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0;
			e = i;
			Il(b);
			f = a + 8 | 0;
			g = HEAP32[f >> 2] | 0;
			if ((HEAP32[a + 12 >> 2] | 0) - g >> 2 >>> 0 > d >>> 0)
				h = g;
			else {
				vv(f, d + 1 | 0);
				h = HEAP32[f >> 2] | 0
			}
			g = HEAP32[h + (d << 2) >> 2] | 0;
			if (!g) {
				j = h;
				k = j + (d << 2) | 0;
				HEAP32[k >> 2] = b;
				i = e;
				return
			}
			Jl(g) | 0;
			j = HEAP32[f >> 2] | 0;
			k = j + (d << 2) | 0;
			HEAP32[k >> 2] = b;
			i = e;
			return
		}
		function Or(a) {
			a = a | 0;
			var b = 0;
			b = i;
			Pr(a);
			kl(a);
			i = b;
			return
		}
		function Pr(a) {
			a = a | 0;
			var b = 0,
			d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0;
			b = i;
			HEAP32[a >> 2] = 130696;
			d = a + 8 | 0;
			e = a + 12 | 0;
			f = HEAP32[e >> 2] | 0;
			g = HEAP32[d >> 2] | 0;
			if ((f | 0) != (g | 0)) {
				h = f;
				f = g;
				g = 0;
				while (1) {
					j = HEAP32[f + (g << 2) >> 2] | 0;
					if (!j) {
						k = h;
						l = f
					} else {
						Jl(j) | 0;
						k = HEAP32[e >> 2] | 0;
						l = HEAP32[d >> 2] | 0
					}
					g = g + 1 | 0;
					if (g >>> 0 >= k - l >> 2 >>> 0)
						break;
					else {
						h = k;
						f = l
					}
				}
			}
			bm(a + 144 | 0);
			uv(d);
			i = b;
			return
		}
		function Qr(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0;
			d = i;
			if (wv(a, b) | 0) {
				i = d;
				return HEAP32[(HEAP32[a + 8 >> 2] | 0) + (b << 2) >> 2] | 0
			} else {
				b = ub(4) | 0;
				Qw(b);
				fc(b | 0, 139496, 153)
			}
			return 0
		}
		function Rr() {
			var a = 0;
			a = i;
			Lr(135120, 1);
			HEAP32[32678] = 135120;
			i = a;
			return 130712
		}
		function Sr() {
			var a = 0,
			b = 0;
			a = i;
			b = HEAP32[(Mr() | 0) >> 2] | 0;
			HEAP32[32684] = b;
			Il(b);
			i = a;
			return 130736
		}
		function Tr() {
			var b = 0;
			b = i;
			if ((HEAP8[130752] | 0) == 0 ? (Da(130752) | 0) != 0 : 0) {
				Sr() | 0;
				HEAP32[32686] = 130736;
				$a(130752)
			}
			i = b;
			return HEAP32[32686] | 0
		}
		function Ur(a) {
			a = a | 0;
			var b = 0,
			d = 0;
			b = i;
			d = HEAP32[(Tr() | 0) >> 2] | 0;
			HEAP32[a >> 2] = d;
			Il(d);
			i = b;
			return
		}
		function Vr(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0,
			e = 0;
			d = i;
			e = HEAP32[b >> 2] | 0;
			HEAP32[a >> 2] = e;
			Il(e);
			i = d;
			return
		}
		function Wr(a) {
			a = a | 0;
			var b = 0;
			b = i;
			Jl(HEAP32[a >> 2] | 0) | 0;
			i = b;
			return
		}
		function Xr(a) {
			a = a | 0;
			var b = 0,
			d = 0;
			b = i;
			i = i + 16 | 0;
			d = b;
			if ((HEAP32[a >> 2] | 0) != -1) {
				HEAP32[d >> 2] = a;
				HEAP32[d + 4 >> 2] = 186;
				HEAP32[d + 8 >> 2] = 0;
				Wl(a, d, 187)
			}
			i = b;
			return (HEAP32[a + 4 >> 2] | 0) + -1 | 0
		}
		function Yr(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0,
			e = 0;
			d = i;
			e = HEAP32[a >> 2] | 0;
			a = Qr(e, Xr(b) | 0) | 0;
			i = d;
			return a | 0
		}
		function Zr(a) {
			a = a | 0;
			var b = 0;
			b = i;
			kl(a);
			i = b;
			return
		}
		function _r(a) {
			a = a | 0;
			var b = 0;
			b = i;
			if (!a) {
				i = b;
				return
			}
			lc[c[(HEAP32[a >> 2] | 0) + 4 >> 2] & 255](a);
			i = b;
			return
		}
		function $r(a) {
			a = a | 0;
			var b = 0;
			b = HEAP32[32690] | 0;
			HEAP32[32690] = b + 1;
			HEAP32[a + 4 >> 2] = b + 1;
			return
		}
		function as(a) {
			a = a | 0;
			var b = 0;
			b = i;
			kl(a);
			i = b;
			return
		}
		function bs(a, c, d) {
			a = a | 0;
			c = c | 0;
			d = d | 0;
			var e = 0;
			a = i;
			if (d >>> 0 >= 128) {
				e = 0;
				i = a;
				return e | 0
			}
			e = (b[(cs() | 0) + (d << 1) >> 1] & c) << 16 >> 16 != 0;
			i = a;
			return e | 0
		}
		function cs() {
			var a = 0,
			b = 0;
			a = i;
			b = HEAP32[(sb() | 0) >> 2] | 0;
			i = a;
			return b | 0
		}
		function ds(a, d, e, f) {
			a = a | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0;
			a = i;
			if ((d | 0) == (e | 0)) {
				g = d;
				i = a;
				return g | 0
			}
			h = ((e + -4 - d | 0) >>> 2) + 1 | 0;
			j = d;
			k = f;
			while (1) {
				f = HEAP32[j >> 2] | 0;
				if (f >>> 0 < 128)
					l = HEAP16[(cs() | 0) + (f << 1) >> 1] | 0;
				else
					l = 0;
				HEAP16[k >> 1] = l;
				j = j + 4 | 0;
				if ((j | 0) == (e | 0))
					break;
				else
					k = k + 2 | 0
			}
			g = d + (h << 2) | 0;
			i = a;
			return g | 0
		}
		function es(a, d, e, f) {
			a = a | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0;
			a = i;
			a: do
				if ((e | 0) == (f | 0))
					g = e;
				else {
					h = e;
					while (1) {
						j = HEAP32[h >> 2] | 0;
						if (j >>> 0 < 128 ? (b[(cs() | 0) + (j << 1) >> 1] & d) << 16 >> 16 != 0 : 0) {
							g = h;
							break a
						}
						h = h + 4 | 0;
						if ((h | 0) == (f | 0)) {
							g = f;
							break
						}
					}
				}
			while (0);
			i = a;
			return g | 0
		}
		function fs(a, d, e, f) {
			a = a | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0;
			a = i;
			a: do
				if ((e | 0) == (f | 0))
					g = e;
				else {
					h = e;
					while (1) {
						j = HEAP32[h >> 2] | 0;
						if (j >>> 0 >= 128) {
							g = h;
							break a
						}
						if (!((b[(cs() | 0) + (j << 1) >> 1] & d) << 16 >> 16)) {
							g = h;
							break a
						}
						h = h + 4 | 0;
						if ((h | 0) == (f | 0)) {
							g = f;
							break
						}
					}
				}
			while (0);
			i = a;
			return g | 0
		}
		function gs(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0;
			a = i;
			if (b >>> 0 >= 128) {
				d = b;
				i = a;
				return d | 0
			}
			d = HEAP32[(hs() | 0) + (b << 2) >> 2] | 0;
			i = a;
			return d | 0
		}
		function hs() {
			var a = 0,
			b = 0;
			a = i;
			b = HEAP32[(Ga() | 0) >> 2] | 0;
			i = a;
			return b | 0
		}
		function is(a, b, d) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0;
			a = i;
			if ((b | 0) == (d | 0)) {
				e = b;
				i = a;
				return e | 0
			}
			f = ((d + -4 - b | 0) >>> 2) + 1 | 0;
			g = b;
			do {
				h = HEAP32[g >> 2] | 0;
				if (h >>> 0 < 128)
					j = HEAP32[(hs() | 0) + (h << 2) >> 2] | 0;
				else
					j = h;
				HEAP32[g >> 2] = j;
				g = g + 4 | 0
			} while ((g | 0) != (d | 0));
			e = b + (f << 2) | 0;
			i = a;
			return e | 0
		}
		function js(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0;
			a = i;
			if (b >>> 0 >= 128) {
				d = b;
				i = a;
				return d | 0
			}
			d = HEAP32[(ks() | 0) + (b << 2) >> 2] | 0;
			i = a;
			return d | 0
		}
		function ks() {
			var a = 0,
			b = 0;
			a = i;
			b = HEAP32[(Xb() | 0) >> 2] | 0;
			i = a;
			return b | 0
		}
		function ls(a, b, d) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0;
			a = i;
			if ((b | 0) == (d | 0)) {
				e = b;
				i = a;
				return e | 0
			}
			f = ((d + -4 - b | 0) >>> 2) + 1 | 0;
			g = b;
			do {
				h = HEAP32[g >> 2] | 0;
				if (h >>> 0 < 128)
					j = HEAP32[(ks() | 0) + (h << 2) >> 2] | 0;
				else
					j = h;
				HEAP32[g >> 2] = j;
				g = g + 4 | 0
			} while ((g | 0) != (d | 0));
			e = b + (f << 2) | 0;
			i = a;
			return e | 0
		}
		function ms(a, b) {
			a = a | 0;
			b = b | 0;
			return b << 24 >> 24 | 0
		}
		function ns(b, d, e, f) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0;
			b = i;
			if ((d | 0) == (e | 0)) {
				g = d;
				i = b;
				return g | 0
			} else {
				h = d;
				j = f
			}
			while (1) {
				HEAP32[j >> 2] = HEAP8[h >> 0];
				h = h + 1 | 0;
				if ((h | 0) == (e | 0)) {
					g = e;
					break
				} else
					j = j + 4 | 0
			}
			i = b;
			return g | 0
		}
		function os(a, b, c) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			return (b >>> 0 < 128 ? b & 255 : c) | 0
		}
		function ps(b, d, e, f, g) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0,
			k = 0,
			l = 0;
			b = i;
			if ((d | 0) == (e | 0)) {
				h = d;
				i = b;
				return h | 0
			}
			j = ((e + -4 - d | 0) >>> 2) + 1 | 0;
			k = d;
			l = g;
			while (1) {
				g = HEAP32[k >> 2] | 0;
				HEAP8[l >> 0] = g >>> 0 < 128 ? g & 255 : f;
				k = k + 4 | 0;
				if ((k | 0) == (e | 0))
					break;
				else
					l = l + 1 | 0
			}
			h = d + (j << 2) | 0;
			i = b;
			return h | 0
		}
		function qs(b, d, e, f) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			var g = 0;
			g = i;
			HEAP32[b + 4 >> 2] = f + -1;
			HEAP32[b >> 2] = 130792;
			f = b + 8 | 0;
			HEAP32[f >> 2] = d;
			HEAP8[b + 12 >> 0] = e & 1;
			if (d) {
				i = g;
				return
			}
			HEAP32[f >> 2] = cs() | 0;
			i = g;
			return
		}
		function rs(a) {
			a = a | 0;
			var b = 0;
			b = i;
			ss(a);
			kl(a);
			i = b;
			return
		}
		function ss(b) {
			b = b | 0;
			var d = 0,
			e = 0;
			d = i;
			HEAP32[b >> 2] = 130792;
			e = HEAP32[b + 8 >> 2] | 0;
			if ((e | 0) != 0 ? (HEAP8[b + 12 >> 0] | 0) != 0 : 0)
				ll(e);
			i = d;
			return
		}
		function ts(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0;
			a = i;
			if (b << 24 >> 24 <= -1) {
				d = b;
				i = a;
				return d | 0
			}
			d = HEAP32[(hs() | 0) + ((b & 255) << 2) >> 2] & 255;
			i = a;
			return d | 0
		}
		function us(b, d, e) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0;
			b = i;
			if ((d | 0) == (e | 0)) {
				f = d;
				i = b;
				return f | 0
			} else
				g = d;
			do {
				d = HEAP8[g >> 0] | 0;
				if (d << 24 >> 24 > -1)
					h = HEAP32[(hs() | 0) + (d << 24 >> 24 << 2) >> 2] & 255;
				else
					h = d;
				HEAP8[g >> 0] = h;
				g = g + 1 | 0
			} while ((g | 0) != (e | 0));
			f = e;
			i = b;
			return f | 0
		}
		function vs(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0;
			a = i;
			if (b << 24 >> 24 <= -1) {
				d = b;
				i = a;
				return d | 0
			}
			d = HEAP32[(ks() | 0) + (b << 24 >> 24 << 2) >> 2] & 255;
			i = a;
			return d | 0
		}
		function ws(b, d, e) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0;
			b = i;
			if ((d | 0) == (e | 0)) {
				f = d;
				i = b;
				return f | 0
			} else
				g = d;
			do {
				d = HEAP8[g >> 0] | 0;
				if (d << 24 >> 24 > -1)
					h = HEAP32[(ks() | 0) + (d << 24 >> 24 << 2) >> 2] & 255;
				else
					h = d;
				HEAP8[g >> 0] = h;
				g = g + 1 | 0
			} while ((g | 0) != (e | 0));
			f = e;
			i = b;
			return f | 0
		}
		function xs(a, b) {
			a = a | 0;
			b = b | 0;
			return b | 0
		}
		function ys(b, c, d, e) {
			b = b | 0;
			c = c | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0;
			b = i;
			if ((c | 0) == (d | 0))
				f = c;
			else {
				g = c;
				c = e;
				while (1) {
					HEAP8[c >> 0] = HEAP8[g >> 0] | 0;
					g = g + 1 | 0;
					if ((g | 0) == (d | 0)) {
						f = d;
						break
					} else
						c = c + 1 | 0
				}
			}
			i = b;
			return f | 0
		}
		function zs(a, b, c) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			return (b << 24 >> 24 > -1 ? b : c) | 0
		}
		function As(b, c, d, e, f) {
			b = b | 0;
			c = c | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0;
			b = i;
			if ((c | 0) == (d | 0)) {
				g = c;
				i = b;
				return g | 0
			} else {
				h = c;
				j = f
			}
			while (1) {
				f = HEAP8[h >> 0] | 0;
				HEAP8[j >> 0] = f << 24 >> 24 > -1 ? f : e;
				h = h + 1 | 0;
				if ((h | 0) == (d | 0)) {
					g = d;
					break
				} else
					j = j + 1 | 0
			}
			i = b;
			return g | 0
		}
		function Bs(a) {
			a = a | 0;
			var b = 0;
			b = i;
			kl(a);
			i = b;
			return
		}
		function Cs(a, b, d, e, f, g, h, i) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			i = i | 0;
			HEAP32[f >> 2] = d;
			HEAP32[i >> 2] = g;
			return 3
		}
		function Ds(a, b, d, e, f, g, h, i) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			i = i | 0;
			HEAP32[f >> 2] = d;
			HEAP32[i >> 2] = g;
			return 3
		}
		function Es(a, b, d, e, f) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			HEAP32[f >> 2] = d;
			return 3
		}
		function Fs(a) {
			a = a | 0;
			return 1
		}
		function Gs(a) {
			a = a | 0;
			return 1
		}
		function Hs(a, b, c, d, e) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			d = d | 0;
			e = e | 0;
			b = d - c | 0;
			return (b >>> 0 < e >>> 0 ? b : e) | 0
		}
		function Is(a) {
			a = a | 0;
			return 1
		}
		function Js(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0;
			d = i;
			HEAP32[a + 4 >> 2] = b + -1;
			HEAP32[a >> 2] = 130864;
			HEAP32[a + 8 >> 2] = ko() | 0;
			i = d;
			return
		}
		function Ks(a) {
			a = a | 0;
			var b = 0;
			b = i;
			Lt(a);
			kl(a);
			i = b;
			return
		}
		function Ls(b, d, e, f, g, h, j, k) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			k = k | 0;
			var l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0,
			I = 0;
			l = i;
			i = i + 16 | 0;
			m = l;
			n = l + 8 | 0;
			o = (e | 0) == (f | 0);
			a: do
				if (!o) {
					p = e;
					while (1) {
						if (!(HEAP32[p >> 2] | 0)) {
							q = p;
							break
						}
						p = p + 4 | 0;
						if ((p | 0) == (f | 0)) {
							q = f;
							break
						}
					}
					HEAP32[k >> 2] = h;
					HEAP32[g >> 2] = e;
					if (!(o | (h | 0) == (j | 0))) {
						p = j;
						r = b + 8 | 0;
						s = e;
						t = h;
						u = q;
						while (1) {
							v = d;
							w = HEAP32[v + 4 >> 2] | 0;
							x = m;
							HEAP32[x >> 2] = HEAP32[v >> 2];
							HEAP32[x + 4 >> 2] = w;
							w = zb(HEAP32[r >> 2] | 0) | 0;
							x = kw(t, g, u - s >> 2, p - t | 0, d) | 0;
							if (w)
								zb(w | 0) | 0;
							if (!x) {
								y = 1;
								z = 33;
								break
							} else if ((x | 0) == -1) {
								z = 10;
								break
							}
							w = (HEAP32[k >> 2] | 0) + x | 0;
							HEAP32[k >> 2] = w;
							if ((w | 0) == (j | 0)) {
								z = 31;
								break
							}
							if ((u | 0) == (f | 0)) {
								A = HEAP32[g >> 2] | 0;
								B = w;
								C = f
							} else {
								w = zb(HEAP32[r >> 2] | 0) | 0;
								x = Qx(n, 0, d) | 0;
								if (w)
									zb(w | 0) | 0;
								if ((x | 0) == -1) {
									y = 2;
									z = 33;
									break
								}
								w = HEAP32[k >> 2] | 0;
								if (x >>> 0 > (p - w | 0) >>> 0) {
									y = 1;
									z = 33;
									break
								}
								b: do
									if (x) {
										v = w;
										D = x;
										E = n;
										while (1) {
											F = HEAP8[E >> 0] | 0;
											HEAP32[k >> 2] = v + 1;
											HEAP8[v >> 0] = F;
											F = D + -1 | 0;
											if (!F)
												break b;
											v = HEAP32[k >> 2] | 0;
											D = F;
											E = E + 1 | 0
										}
									}
								while (0);
								x = (HEAP32[g >> 2] | 0) + 4 | 0;
								HEAP32[g >> 2] = x;
								c: do
									if ((x | 0) == (f | 0))
										G = f;
									else {
										w = x;
										while (1) {
											if (!(HEAP32[w >> 2] | 0)) {
												G = w;
												break c
											}
											w = w + 4 | 0;
											if ((w | 0) == (f | 0)) {
												G = f;
												break
											}
										}
									}
								while (0);
								A = x;
								B = HEAP32[k >> 2] | 0;
								C = G
							}
							if ((A | 0) == (f | 0) | (B | 0) == (j | 0)) {
								H = A;
								break a
							} else {
								s = A;
								t = B;
								u = C
							}
						}
						if ((z | 0) == 10) {
							HEAP32[k >> 2] = t;
							d: do
								if ((s | 0) == (HEAP32[g >> 2] | 0))
									I = s;
								else {
									u = s;
									p = t;
									while (1) {
										w = HEAP32[u >> 2] | 0;
										E = zb(HEAP32[r >> 2] | 0) | 0;
										D = Qx(p, w, m) | 0;
										if (E)
											zb(E | 0) | 0;
										if ((D | 0) == -1) {
											I = u;
											break d
										}
										p = (HEAP32[k >> 2] | 0) + D | 0;
										HEAP32[k >> 2] = p;
										D = u + 4 | 0;
										if ((D | 0) == (HEAP32[g >> 2] | 0)) {
											I = D;
											break
										} else
											u = D
									}
								}
							while (0);
							HEAP32[g >> 2] = I;
							y = 2;
							i = l;
							return y | 0
						} else if ((z | 0) == 31) {
							H = HEAP32[g >> 2] | 0;
							break
						} else if ((z | 0) == 33) {
							i = l;
							return y | 0
						}
					} else
						H = e
				} else {
					HEAP32[k >> 2] = h;
					HEAP32[g >> 2] = e;
					H = e
				}
			while (0);
			y = (H | 0) != (f | 0) & 1;
			i = l;
			return y | 0
		}
		function Ms(b, d, e, f, g, h, j, k) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			k = k | 0;
			var l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0;
			l = i;
			i = i + 16 | 0;
			m = l;
			n = (e | 0) == (f | 0);
			a: do
				if (!n) {
					o = e;
					while (1) {
						if (!(HEAP8[o >> 0] | 0)) {
							p = o;
							break
						}
						o = o + 1 | 0;
						if ((o | 0) == (f | 0)) {
							p = f;
							break
						}
					}
					HEAP32[k >> 2] = h;
					HEAP32[g >> 2] = e;
					if (!(n | (h | 0) == (j | 0))) {
						o = j;
						q = b + 8 | 0;
						r = e;
						s = h;
						t = p;
						while (1) {
							u = d;
							v = HEAP32[u + 4 >> 2] | 0;
							w = m;
							HEAP32[w >> 2] = HEAP32[u >> 2];
							HEAP32[w + 4 >> 2] = v;
							x = t;
							v = zb(HEAP32[q >> 2] | 0) | 0;
							w = hw(s, g, x - r | 0, o - s >> 2, d) | 0;
							if (v)
								zb(v | 0) | 0;
							if ((w | 0) == -1) {
								y = 10;
								break
							} else if (!w) {
								z = 2;
								y = 32;
								break
							}
							v = (HEAP32[k >> 2] | 0) + (w << 2) | 0;
							HEAP32[k >> 2] = v;
							if ((v | 0) == (j | 0)) {
								y = 30;
								break
							}
							w = HEAP32[g >> 2] | 0;
							if ((t | 0) == (f | 0)) {
								A = w;
								B = v;
								C = f
							} else {
								u = zb(HEAP32[q >> 2] | 0) | 0;
								D = fw(v, w, 1, d) | 0;
								if (u)
									zb(u | 0) | 0;
								if (D) {
									z = 2;
									y = 32;
									break
								}
								HEAP32[k >> 2] = (HEAP32[k >> 2] | 0) + 4;
								D = (HEAP32[g >> 2] | 0) + 1 | 0;
								HEAP32[g >> 2] = D;
								b: do
									if ((D | 0) == (f | 0))
										E = f;
									else {
										u = D;
										while (1) {
											if (!(HEAP8[u >> 0] | 0)) {
												E = u;
												break b
											}
											u = u + 1 | 0;
											if ((u | 0) == (f | 0)) {
												E = f;
												break
											}
										}
									}
								while (0);
								A = D;
								B = HEAP32[k >> 2] | 0;
								C = E
							}
							if ((A | 0) == (f | 0) | (B | 0) == (j | 0)) {
								F = A;
								break a
							} else {
								r = A;
								s = B;
								t = C
							}
						}
						if ((y | 0) == 10) {
							HEAP32[k >> 2] = s;
							c: do
								if ((r | 0) != (HEAP32[g >> 2] | 0)) {
									t = r;
									o = s;
									while (1) {
										u = zb(HEAP32[q >> 2] | 0) | 0;
										w = fw(o, t, x - t | 0, m) | 0;
										if (u)
											zb(u | 0) | 0;
										if (!w)
											G = t + 1 | 0;
										else if ((w | 0) == -1) {
											y = 15;
											break
										} else if ((w | 0) == -2) {
											y = 16;
											break
										} else
											G = t + w | 0;
										o = (HEAP32[k >> 2] | 0) + 4 | 0;
										HEAP32[k >> 2] = o;
										if ((G | 0) == (HEAP32[g >> 2] | 0)) {
											H = G;
											break c
										} else
											t = G
									}
									if ((y | 0) == 15) {
										HEAP32[g >> 2] = t;
										z = 2;
										i = l;
										return z | 0
									} else if ((y | 0) == 16) {
										HEAP32[g >> 2] = t;
										z = 1;
										i = l;
										return z | 0
									}
								} else
									H = r;
							while (0);
							HEAP32[g >> 2] = H;
							z = (H | 0) != (f | 0) & 1;
							i = l;
							return z | 0
						} else if ((y | 0) == 30) {
							F = HEAP32[g >> 2] | 0;
							break
						} else if ((y | 0) == 32) {
							i = l;
							return z | 0
						}
					} else
						F = e
				} else {
					HEAP32[k >> 2] = h;
					HEAP32[g >> 2] = e;
					F = e
				}
			while (0);
			z = (F | 0) != (f | 0) & 1;
			i = l;
			return z | 0
		}
		function Ns(b, d, e, f, g) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0;
			h = i;
			i = i + 16 | 0;
			j = h;
			HEAP32[g >> 2] = e;
			e = zb(HEAP32[b + 8 >> 2] | 0) | 0;
			b = Qx(j, 0, d) | 0;
			if (e)
				zb(e | 0) | 0;
			if ((b | 0) == 0 | (b | 0) == -1) {
				k = 2;
				i = h;
				return k | 0
			}
			e = b + -1 | 0;
			b = HEAP32[g >> 2] | 0;
			if (e >>> 0 > (f - b | 0) >>> 0) {
				k = 1;
				i = h;
				return k | 0
			}
			if (!e) {
				k = 0;
				i = h;
				return k | 0
			} else {
				l = b;
				m = e;
				n = j
			}
			while (1) {
				j = HEAP8[n >> 0] | 0;
				HEAP32[g >> 2] = l + 1;
				HEAP8[l >> 0] = j;
				j = m + -1 | 0;
				if (!j) {
					k = 0;
					break
				}
				l = HEAP32[g >> 2] | 0;
				m = j;
				n = n + 1 | 0
			}
			i = h;
			return k | 0
		}
		function Os(a) {
			a = a | 0;
			var b = 0,
			d = 0,
			e = 0,
			f = 0;
			b = i;
			d = a + 8 | 0;
			a = zb(HEAP32[d >> 2] | 0) | 0;
			e = jw(0, 0, 4) | 0;
			if (a)
				zb(a | 0) | 0;
			if (!e) {
				e = HEAP32[d >> 2] | 0;
				if (e) {
					d = zb(e | 0) | 0;
					if (!d)
						f = 0;
					else {
						zb(d | 0) | 0;
						f = 0
					}
				} else
					f = 1
			} else
				f = -1;
			i = b;
			return f | 0
		}
		function Ps(a) {
			a = a | 0;
			return 0
		}
		function Qs(a, b, d, e, f) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0;
			g = i;
			if ((f | 0) == 0 | (d | 0) == (e | 0)) {
				h = 0;
				i = g;
				return h | 0
			}
			j = e;
			k = a + 8 | 0;
			a = d;
			d = 0;
			l = 0;
			while (1) {
				m = zb(HEAP32[k >> 2] | 0) | 0;
				n = ew(a, j - a | 0, b) | 0;
				if (m)
					zb(m | 0) | 0;
				if (!n) {
					o = a + 1 | 0;
					p = 1
				} else if ((n | 0) == -2 | (n | 0) == -1) {
					h = d;
					q = 9;
					break
				} else {
					o = a + n | 0;
					p = n
				}
				n = p + d | 0;
				l = l + 1 | 0;
				if (l >>> 0 >= f >>> 0 | (o | 0) == (e | 0)) {
					h = n;
					q = 9;
					break
				} else {
					a = o;
					d = n
				}
			}
			if ((q | 0) == 9) {
				i = g;
				return h | 0
			}
			return 0
		}
		function Rs(a) {
			a = a | 0;
			var b = 0,
			d = 0,
			e = 0;
			b = i;
			d = HEAP32[a + 8 >> 2] | 0;
			if (d) {
				a = zb(d | 0) | 0;
				if (!a)
					e = 4;
				else {
					zb(a | 0) | 0;
					e = 4
				}
			} else
				e = 1;
			i = b;
			return e | 0
		}
		function Ss(a) {
			a = a | 0;
			var b = 0;
			b = i;
			kl(a);
			i = b;
			return
		}
		function Ts(a, b, d, e, f, g, h, j) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			var k = 0,
			l = 0;
			b = i;
			i = i + 16 | 0;
			a = b + 4 | 0;
			k = b;
			HEAP32[a >> 2] = d;
			HEAP32[k >> 2] = g;
			l = yv(d, e, a, g, h, k, 1114111, 0) | 0;
			HEAP32[f >> 2] = d + ((HEAP32[a >> 2] | 0) - d >> 1 << 1);
			HEAP32[j >> 2] = g + ((HEAP32[k >> 2] | 0) - g);
			i = b;
			return l | 0
		}
		function Us(a, b, d, e, f, g, h, j) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			var k = 0,
			l = 0;
			b = i;
			i = i + 16 | 0;
			a = b + 4 | 0;
			k = b;
			HEAP32[a >> 2] = d;
			HEAP32[k >> 2] = g;
			l = zv(d, e, a, g, h, k, 1114111, 0) | 0;
			HEAP32[f >> 2] = d + ((HEAP32[a >> 2] | 0) - d);
			HEAP32[j >> 2] = g + ((HEAP32[k >> 2] | 0) - g >> 1 << 1);
			i = b;
			return l | 0
		}
		function Vs(a, b, d, e, f) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			HEAP32[f >> 2] = d;
			return 3
		}
		function Ws(a) {
			a = a | 0;
			return 0
		}
		function Xs(a) {
			a = a | 0;
			return 0
		}
		function Ys(a, b, c, d, e) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			d = d | 0;
			e = e | 0;
			b = i;
			a = Av(c, d, e, 1114111, 0) | 0;
			i = b;
			return a | 0
		}
		function Zs(a) {
			a = a | 0;
			return 4
		}
		function _s(a) {
			a = a | 0;
			var b = 0;
			b = i;
			kl(a);
			i = b;
			return
		}
		function $s(a, b, d, e, f, g, h, j) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			var k = 0,
			l = 0;
			b = i;
			i = i + 16 | 0;
			a = b + 4 | 0;
			k = b;
			HEAP32[a >> 2] = d;
			HEAP32[k >> 2] = g;
			l = Bv(d, e, a, g, h, k, 1114111, 0) | 0;
			HEAP32[f >> 2] = d + ((HEAP32[a >> 2] | 0) - d >> 2 << 2);
			HEAP32[j >> 2] = g + ((HEAP32[k >> 2] | 0) - g);
			i = b;
			return l | 0
		}
		function at(a, b, d, e, f, g, h, j) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			var k = 0,
			l = 0;
			b = i;
			i = i + 16 | 0;
			a = b + 4 | 0;
			k = b;
			HEAP32[a >> 2] = d;
			HEAP32[k >> 2] = g;
			l = Cv(d, e, a, g, h, k, 1114111, 0) | 0;
			HEAP32[f >> 2] = d + ((HEAP32[a >> 2] | 0) - d);
			HEAP32[j >> 2] = g + ((HEAP32[k >> 2] | 0) - g >> 2 << 2);
			i = b;
			return l | 0
		}
		function bt(a, b, d, e, f) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			HEAP32[f >> 2] = d;
			return 3
		}
		function ct(a) {
			a = a | 0;
			return 0
		}
		function dt(a) {
			a = a | 0;
			return 0
		}
		function et(a, b, c, d, e) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			d = d | 0;
			e = e | 0;
			b = i;
			a = Dv(c, d, e, 1114111, 0) | 0;
			i = b;
			return a | 0
		}
		function ft(a) {
			a = a | 0;
			return 4
		}
		function gt(a) {
			a = a | 0;
			var b = 0;
			b = i;
			kl(a);
			i = b;
			return
		}
		function ht(a) {
			a = a | 0;
			var b = 0;
			b = i;
			kl(a);
			i = b;
			return
		}
		function it(a) {
			a = a | 0;
			var b = 0;
			b = i;
			jt(a);
			kl(a);
			i = b;
			return
		}
		function jt(a) {
			a = a | 0;
			var b = 0;
			b = i;
			HEAP32[a >> 2] = 130944;
			bm(a + 12 | 0);
			i = b;
			return
		}
		function kt(a) {
			a = a | 0;
			var b = 0;
			b = i;
			lt(a);
			kl(a);
			i = b;
			return
		}
		function lt(a) {
			a = a | 0;
			var b = 0;
			b = i;
			HEAP32[a >> 2] = 130984;
			bm(a + 16 | 0);
			i = b;
			return
		}
		function mt(b) {
			b = b | 0;
			return HEAP8[b + 8 >> 0] | 0
		}
		function nt(a) {
			a = a | 0;
			return HEAP32[a + 8 >> 2] | 0
		}
		function ot(b) {
			b = b | 0;
			return HEAP8[b + 9 >> 0] | 0
		}
		function pt(a) {
			a = a | 0;
			return HEAP32[a + 12 >> 2] | 0
		}
		function qt(a, b) {
			a = a | 0;
			b = b | 0;
			var c = 0;
			c = i;
			Zl(a, b + 12 | 0);
			i = c;
			return
		}
		function rt(a, b) {
			a = a | 0;
			b = b | 0;
			var c = 0;
			c = i;
			Zl(a, b + 16 | 0);
			i = c;
			return
		}
		function st(a, b) {
			a = a | 0;
			b = b | 0;
			b = i;
			_l(a, 131016, 4);
			i = b;
			return
		}
		function tt(a, b) {
			a = a | 0;
			b = b | 0;
			b = i;
			mm(a, 131024, tw(131024) | 0);
			i = b;
			return
		}
		function ut(a, b) {
			a = a | 0;
			b = b | 0;
			b = i;
			_l(a, 131048, 5);
			i = b;
			return
		}
		function vt(a, b) {
			a = a | 0;
			b = b | 0;
			b = i;
			mm(a, 131056, tw(131056) | 0);
			i = b;
			return
		}
		function wt(a) {
			a = a | 0;
			var b = 0,
			d = 0,
			e = 0;
			b = i;
			d = HEAP32[a + 4 >> 2] & 74;
			if (!d)
				e = 0;
			else if ((d | 0) == 64)
				e = 8;
			else if ((d | 0) == 8)
				e = 16;
			else
				e = 10;
			i = b;
			return e | 0
		}
		function xt(b) {
			b = b | 0;
			var d = 0;
			b = i;
			if (HEAP8[131088] | 0) {
				d = HEAP32[32770] | 0;
				i = b;
				return d | 0
			}
			if (!(Da(131088) | 0)) {
				d = HEAP32[32770] | 0;
				i = b;
				return d | 0
			}
			if ((HEAP8[138288] | 0) == 0 ? (Da(138288) | 0) != 0 : 0) {
				sy(138120, 0, 168) | 0;
				Sa(188, 0, o | 0) | 0;
				$a(138288)
			}
			cm(138120, 138296) | 0;
			cm(138132, 138304) | 0;
			cm(138144, 138312) | 0;
			cm(138156, 138320) | 0;
			cm(138168, 138336) | 0;
			cm(138180, 138352) | 0;
			cm(138192, 138360) | 0;
			cm(138204, 138376) | 0;
			cm(138216, 138384) | 0;
			cm(138228, 138392) | 0;
			cm(138240, 138400) | 0;
			cm(138252, 138408) | 0;
			cm(138264, 138416) | 0;
			cm(138276, 138424) | 0;
			HEAP32[32770] = 138120;
			$a(131088);
			d = HEAP32[32770] | 0;
			i = b;
			return d | 0
		}
		function yt(b) {
			b = b | 0;
			var d = 0;
			b = i;
			if (HEAP8[131104] | 0) {
				d = HEAP32[32774] | 0;
				i = b;
				return d | 0
			}
			if (!(Da(131104) | 0)) {
				d = HEAP32[32774] | 0;
				i = b;
				return d | 0
			}
			if ((HEAP8[137752] | 0) == 0 ? (Da(137752) | 0) != 0 : 0) {
				sy(137584, 0, 168) | 0;
				Sa(189, 0, o | 0) | 0;
				$a(137752)
			}
			qm(137584, 137760) | 0;
			qm(137596, 137792) | 0;
			qm(137608, 137824) | 0;
			qm(137620, 137856) | 0;
			qm(137632, 137896) | 0;
			qm(137644, 137936) | 0;
			qm(137656, 137968) | 0;
			qm(137668, 138008) | 0;
			qm(137680, 138024) | 0;
			qm(137692, 138040) | 0;
			qm(137704, 138056) | 0;
			qm(137716, 138072) | 0;
			qm(137728, 138088) | 0;
			qm(137740, 138104) | 0;
			HEAP32[32774] = 137584;
			$a(131104);
			d = HEAP32[32774] | 0;
			i = b;
			return d | 0
		}
		function zt(b) {
			b = b | 0;
			var d = 0;
			b = i;
			if (HEAP8[131120] | 0) {
				d = HEAP32[32778] | 0;
				i = b;
				return d | 0
			}
			if (!(Da(131120) | 0)) {
				d = HEAP32[32778] | 0;
				i = b;
				return d | 0
			}
			if ((HEAP8[137360] | 0) == 0 ? (Da(137360) | 0) != 0 : 0) {
				sy(137072, 0, 288) | 0;
				Sa(190, 0, o | 0) | 0;
				$a(137360)
			}
			cm(137072, 137368) | 0;
			cm(137084, 137376) | 0;
			cm(137096, 137392) | 0;
			cm(137108, 137400) | 0;
			cm(137120, 137408) | 0;
			cm(137132, 137416) | 0;
			cm(137144, 137424) | 0;
			cm(137156, 137432) | 0;
			cm(137168, 137440) | 0;
			cm(137180, 137456) | 0;
			cm(137192, 137464) | 0;
			cm(137204, 137480) | 0;
			cm(137216, 137496) | 0;
			cm(137228, 137504) | 0;
			cm(137240, 137512) | 0;
			cm(137252, 137520) | 0;
			cm(137264, 137408) | 0;
			cm(137276, 137528) | 0;
			cm(137288, 137536) | 0;
			cm(137300, 137544) | 0;
			cm(137312, 137552) | 0;
			cm(137324, 137560) | 0;
			cm(137336, 137568) | 0;
			cm(137348, 137576) | 0;
			HEAP32[32778] = 137072;
			$a(131120);
			d = HEAP32[32778] | 0;
			i = b;
			return d | 0
		}
		function At(b) {
			b = b | 0;
			var d = 0;
			b = i;
			if (HEAP8[131136] | 0) {
				d = HEAP32[32782] | 0;
				i = b;
				return d | 0
			}
			if (!(Da(131136) | 0)) {
				d = HEAP32[32782] | 0;
				i = b;
				return d | 0
			}
			if ((HEAP8[136520] | 0) == 0 ? (Da(136520) | 0) != 0 : 0) {
				sy(136232, 0, 288) | 0;
				Sa(191, 0, o | 0) | 0;
				$a(136520)
			}
			qm(136232, 136528) | 0;
			qm(136244, 136560) | 0;
			qm(136256, 136600) | 0;
			qm(136268, 136624) | 0;
			qm(136280, 136944) | 0;
			qm(136292, 136648) | 0;
			qm(136304, 136672) | 0;
			qm(136316, 136696) | 0;
			qm(136328, 136728) | 0;
			qm(136340, 136768) | 0;
			qm(136352, 136800) | 0;
			qm(136364, 136840) | 0;
			qm(136376, 136880) | 0;
			qm(136388, 136896) | 0;
			qm(136400, 136912) | 0;
			qm(136412, 136928) | 0;
			qm(136424, 136944) | 0;
			qm(136436, 136960) | 0;
			qm(136448, 136976) | 0;
			qm(136460, 136992) | 0;
			qm(136472, 137008) | 0;
			qm(136484, 137024) | 0;
			qm(136496, 137040) | 0;
			qm(136508, 137056) | 0;
			HEAP32[32782] = 136232;
			$a(131136);
			d = HEAP32[32782] | 0;
			i = b;
			return d | 0
		}
		function Bt(b) {
			b = b | 0;
			var d = 0;
			b = i;
			if (HEAP8[131152] | 0) {
				d = HEAP32[32786] | 0;
				i = b;
				return d | 0
			}
			if (!(Da(131152) | 0)) {
				d = HEAP32[32786] | 0;
				i = b;
				return d | 0
			}
			if ((HEAP8[136208] | 0) == 0 ? (Da(136208) | 0) != 0 : 0) {
				sy(135920, 0, 288) | 0;
				Sa(192, 0, o | 0) | 0;
				$a(136208)
			}
			cm(135920, 136216) | 0;
			cm(135932, 136224) | 0;
			HEAP32[32786] = 135920;
			$a(131152);
			d = HEAP32[32786] | 0;
			i = b;
			return d | 0
		}
		function Ct(b) {
			b = b | 0;
			var d = 0;
			b = i;
			if (HEAP8[131168] | 0) {
				d = HEAP32[32790] | 0;
				i = b;
				return d | 0
			}
			if (!(Da(131168) | 0)) {
				d = HEAP32[32790] | 0;
				i = b;
				return d | 0
			}
			if ((HEAP8[135880] | 0) == 0 ? (Da(135880) | 0) != 0 : 0) {
				sy(135592, 0, 288) | 0;
				Sa(193, 0, o | 0) | 0;
				$a(135880)
			}
			qm(135592, 135888) | 0;
			qm(135604, 135904) | 0;
			HEAP32[32790] = 135592;
			$a(131168);
			d = HEAP32[32790] | 0;
			i = b;
			return d | 0
		}
		function Dt(b) {
			b = b | 0;
			b = i;
			if ((HEAP8[131192] | 0) == 0 ? (Da(131192) | 0) != 0 : 0) {
				_l(131176, 131200, 8);
				Sa(194, 131176, o | 0) | 0;
				$a(131192)
			}
			i = b;
			return 131176
		}
		function Et(b) {
			b = b | 0;
			b = i;
			if (HEAP8[131232] | 0) {
				i = b;
				return 131216
			}
			if (!(Da(131232) | 0)) {
				i = b;
				return 131216
			}
			mm(131216, 131240, tw(131240) | 0);
			Sa(195, 131216, o | 0) | 0;
			$a(131232);
			i = b;
			return 131216
		}
		function Ft(b) {
			b = b | 0;
			b = i;
			if ((HEAP8[131296] | 0) == 0 ? (Da(131296) | 0) != 0 : 0) {
				_l(131280, 131304, 8);
				Sa(194, 131280, o | 0) | 0;
				$a(131296)
			}
			i = b;
			return 131280
		}
		function Gt(b) {
			b = b | 0;
			b = i;
			if (HEAP8[131336] | 0) {
				i = b;
				return 131320
			}
			if (!(Da(131336) | 0)) {
				i = b;
				return 131320
			}
			mm(131320, 131344, tw(131344) | 0);
			Sa(195, 131320, o | 0) | 0;
			$a(131336);
			i = b;
			return 131320
		}
		function Ht(b) {
			b = b | 0;
			b = i;
			if (HEAP8[131400] | 0) {
				i = b;
				return 131384
			}
			if (!(Da(131400) | 0)) {
				i = b;
				return 131384
			}
			_l(131384, 131408, 20);
			Sa(194, 131384, o | 0) | 0;
			$a(131400);
			i = b;
			return 131384
		}
		function It(b) {
			b = b | 0;
			b = i;
			if (HEAP8[131448] | 0) {
				i = b;
				return 131432
			}
			if (!(Da(131448) | 0)) {
				i = b;
				return 131432
			}
			mm(131432, 131456, tw(131456) | 0);
			Sa(195, 131432, o | 0) | 0;
			$a(131448);
			i = b;
			return 131432
		}
		function Jt(b) {
			b = b | 0;
			b = i;
			if (HEAP8[131560] | 0) {
				i = b;
				return 131544
			}
			if (!(Da(131560) | 0)) {
				i = b;
				return 131544
			}
			_l(131544, 131568, 11);
			Sa(194, 131544, o | 0) | 0;
			$a(131560);
			i = b;
			return 131544
		}
		function Kt(b) {
			b = b | 0;
			b = i;
			if (HEAP8[131600] | 0) {
				i = b;
				return 131584
			}
			if (!(Da(131600) | 0)) {
				i = b;
				return 131584
			}
			mm(131584, 131608, tw(131608) | 0);
			Sa(195, 131584, o | 0) | 0;
			$a(131600);
			i = b;
			return 131584
		}
		function Lt(a) {
			a = a | 0;
			var b = 0,
			d = 0;
			b = i;
			HEAP32[a >> 2] = 130864;
			d = a + 8 | 0;
			a = HEAP32[d >> 2] | 0;
			if ((a | 0) == (ko() | 0)) {
				i = b;
				return
			}
			fb(HEAP32[d >> 2] | 0);
			i = b;
			return
		}
		function Mt() {
			var a = 0;
			a = i;
			Fl(0);
			Sa(196, 126896, o | 0) | 0;
			i = a;
			return
		}
		function Nt(a) {
			a = a | 0;
			var b = 0;
			b = i;
			Vm(a);
			kl(a);
			i = b;
			return
		}
		function Ot(b, d) {
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0;
			e = i;
			tc[c[(HEAP32[b >> 2] | 0) + 24 >> 2] & 127](b) | 0;
			f = Yr(d, 130848) | 0;
			HEAP32[b + 36 >> 2] = f;
			HEAP8[b + 44 >> 0] = (tc[c[(HEAP32[f >> 2] | 0) + 28 >> 2] & 127](f) | 0) & 1;
			i = e;
			return
		}
		function Pt(a) {
			a = a | 0;
			var b = 0,
			d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0;
			b = i;
			i = i + 16 | 0;
			d = b + 8 | 0;
			e = b;
			f = a + 36 | 0;
			g = a + 40 | 0;
			h = d + 8 | 0;
			j = d;
			k = a + 32 | 0;
			while (1) {
				a = HEAP32[f >> 2] | 0;
				l = Dc[c[(HEAP32[a >> 2] | 0) + 20 >> 2] & 15](a, HEAP32[g >> 2] | 0, d, h, e) | 0;
				a = (HEAP32[e >> 2] | 0) - j | 0;
				if ((mb(d | 0, 1, a | 0, HEAP32[k >> 2] | 0) | 0) != (a | 0)) {
					m = -1;
					n = 5;
					break
				}
				if ((l | 0) == 2) {
					m = -1;
					n = 5;
					break
				} else if ((l | 0) != 1) {
					n = 4;
					break
				}
			}
			if ((n | 0) == 4) {
				m = ((Nb(HEAP32[k >> 2] | 0) | 0) != 0) << 31 >> 31;
				i = b;
				return m | 0
			} else if ((n | 0) == 5) {
				i = b;
				return m | 0
			}
			return 0
		}
		function Qt(b, d, e) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0;
			f = i;
			if (HEAP8[b + 44 >> 0] | 0) {
				g = mb(d | 0, 4, e | 0, HEAP32[b + 32 >> 2] | 0) | 0;
				i = f;
				return g | 0
			}
			if ((e | 0) > 0) {
				h = d;
				j = 0
			} else {
				g = 0;
				i = f;
				return g | 0
			}
			while (1) {
				if ((Cc[c[(HEAP32[b >> 2] | 0) + 52 >> 2] & 31](b, HEAP32[h >> 2] | 0) | 0) == -1) {
					g = j;
					k = 6;
					break
				}
				d = j + 1 | 0;
				if ((d | 0) < (e | 0)) {
					h = h + 4 | 0;
					j = d
				} else {
					g = d;
					k = 6;
					break
				}
			}
			if ((k | 0) == 6) {
				i = f;
				return g | 0
			}
			return 0
		}
		function Rt(b, d) {
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0;
			e = i;
			i = i + 32 | 0;
			f = e + 16 | 0;
			g = e + 8 | 0;
			h = e + 4 | 0;
			j = e;
			k = (d | 0) == -1;
			a: do
				if (!k) {
					HEAP32[g >> 2] = d;
					if (HEAP8[b + 44 >> 0] | 0) {
						if ((mb(g | 0, 4, 1, HEAP32[b + 32 >> 2] | 0) | 0) == 1)
							break;
						else
							l = -1;
						i = e;
						return l | 0
					}
					HEAP32[h >> 2] = f;
					m = g + 4 | 0;
					n = b + 36 | 0;
					o = b + 40 | 0;
					p = f + 8 | 0;
					q = f;
					r = b + 32 | 0;
					s = g;
					while (1) {
						t = HEAP32[n >> 2] | 0;
						u = yc[c[(HEAP32[t >> 2] | 0) + 12 >> 2] & 15](t, HEAP32[o >> 2] | 0, s, m, j, f, p, h) | 0;
						if ((HEAP32[j >> 2] | 0) == (s | 0)) {
							l = -1;
							v = 12;
							break
						}
						if ((u | 0) == 3) {
							v = 7;
							break
						}
						t = (u | 0) == 1;
						if (u >>> 0 >= 2) {
							l = -1;
							v = 12;
							break
						}
						u = (HEAP32[h >> 2] | 0) - q | 0;
						if ((mb(f | 0, 1, u | 0, HEAP32[r >> 2] | 0) | 0) != (u | 0)) {
							l = -1;
							v = 12;
							break
						}
						if (t)
							s = t ? HEAP32[j >> 2] | 0 : s;
						else
							break a
					}
					if ((v | 0) == 7) {
						if ((mb(s | 0, 1, 1, HEAP32[r >> 2] | 0) | 0) == 1)
							break;
						else
							l = -1;
						i = e;
						return l | 0
					} else if ((v | 0) == 12) {
						i = e;
						return l | 0
					}
				}
			while (0);
			l = k ? 0 : d;
			i = e;
			return l | 0
		}
		function St(a) {
			a = a | 0;
			var b = 0;
			b = i;
			Vm(a);
			kl(a);
			i = b;
			return
		}
		function Tt(b, d) {
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0;
			e = i;
			f = Yr(d, 130848) | 0;
			d = b + 36 | 0;
			HEAP32[d >> 2] = f;
			g = b + 44 | 0;
			HEAP32[g >> 2] = tc[c[(HEAP32[f >> 2] | 0) + 24 >> 2] & 127](f) | 0;
			f = HEAP32[d >> 2] | 0;
			HEAP8[b + 53 >> 0] = (tc[c[(HEAP32[f >> 2] | 0) + 28 >> 2] & 127](f) | 0) & 1;
			if ((HEAP32[g >> 2] | 0) > 8)
				er(127472);
			else {
				i = e;
				return
			}
		}
		function Ut(a) {
			a = a | 0;
			var b = 0,
			c = 0;
			b = i;
			c = Kv(a, 0) | 0;
			i = b;
			return c | 0
		}
		function Vt(a) {
			a = a | 0;
			var b = 0,
			c = 0;
			b = i;
			c = Kv(a, 1) | 0;
			i = b;
			return c | 0
		}
		function Wt(b, d) {
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0;
			e = i;
			i = i + 32 | 0;
			f = e + 16 | 0;
			g = e + 8 | 0;
			h = e + 4 | 0;
			j = e;
			k = b + 52 | 0;
			l = (HEAP8[k >> 0] | 0) != 0;
			if ((d | 0) == -1) {
				if (l) {
					m = -1;
					i = e;
					return m | 0
				}
				n = HEAP32[b + 48 >> 2] | 0;
				HEAP8[k >> 0] = (n | 0) != -1 & 1;
				m = n;
				i = e;
				return m | 0
			}
			n = b + 48 | 0;
			a: do
				if (l) {
					HEAP32[h >> 2] = HEAP32[n >> 2];
					o = HEAP32[b + 36 >> 2] | 0;
					p = yc[c[(HEAP32[o >> 2] | 0) + 12 >> 2] & 15](o, HEAP32[b + 40 >> 2] | 0, h, h + 4 | 0, j, f, f + 8 | 0, g) | 0;
					if ((p | 0) == 3) {
						HEAP8[f >> 0] = HEAP32[n >> 2];
						HEAP32[g >> 2] = f + 1
					} else if ((p | 0) == 1 | (p | 0) == 2) {
						m = -1;
						i = e;
						return m | 0
					}
					p = b + 32 | 0;
					while (1) {
						o = HEAP32[g >> 2] | 0;
						if (o >>> 0 <= f >>> 0)
							break a;
						q = o + -1 | 0;
						HEAP32[g >> 2] = q;
						if ((Mb(HEAP8[q >> 0] | 0, HEAP32[p >> 2] | 0) | 0) == -1) {
							m = -1;
							break
						}
					}
					i = e;
					return m | 0
				}
			while (0);
			HEAP32[n >> 2] = d;
			HEAP8[k >> 0] = 1;
			m = d;
			i = e;
			return m | 0
		}
		function Xt(a) {
			a = a | 0;
			var b = 0;
			b = i;
			Fm(a);
			kl(a);
			i = b;
			return
		}
		function Yt(b, d) {
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0;
			e = i;
			tc[c[(HEAP32[b >> 2] | 0) + 24 >> 2] & 127](b) | 0;
			f = Yr(d, 130840) | 0;
			HEAP32[b + 36 >> 2] = f;
			HEAP8[b + 44 >> 0] = (tc[c[(HEAP32[f >> 2] | 0) + 28 >> 2] & 127](f) | 0) & 1;
			i = e;
			return
		}
		function Zt(a) {
			a = a | 0;
			var b = 0,
			d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0;
			b = i;
			i = i + 16 | 0;
			d = b + 8 | 0;
			e = b;
			f = a + 36 | 0;
			g = a + 40 | 0;
			h = d + 8 | 0;
			j = d;
			k = a + 32 | 0;
			while (1) {
				a = HEAP32[f >> 2] | 0;
				l = Dc[c[(HEAP32[a >> 2] | 0) + 20 >> 2] & 15](a, HEAP32[g >> 2] | 0, d, h, e) | 0;
				a = (HEAP32[e >> 2] | 0) - j | 0;
				if ((mb(d | 0, 1, a | 0, HEAP32[k >> 2] | 0) | 0) != (a | 0)) {
					m = -1;
					n = 5;
					break
				}
				if ((l | 0) == 2) {
					m = -1;
					n = 5;
					break
				} else if ((l | 0) != 1) {
					n = 4;
					break
				}
			}
			if ((n | 0) == 4) {
				m = ((Nb(HEAP32[k >> 2] | 0) | 0) != 0) << 31 >> 31;
				i = b;
				return m | 0
			} else if ((n | 0) == 5) {
				i = b;
				return m | 0
			}
			return 0
		}
		function _t(b, e, f) {
			b = b | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0;
			g = i;
			if (HEAP8[b + 44 >> 0] | 0) {
				h = mb(e | 0, 1, f | 0, HEAP32[b + 32 >> 2] | 0) | 0;
				i = g;
				return h | 0
			}
			if ((f | 0) > 0) {
				j = e;
				k = 0
			} else {
				h = 0;
				i = g;
				return h | 0
			}
			while (1) {
				if ((Cc[c[(HEAP32[b >> 2] | 0) + 52 >> 2] & 31](b, HEAPU8[j >> 0] | 0) | 0) == -1) {
					h = k;
					l = 6;
					break
				}
				e = k + 1 | 0;
				if ((e | 0) < (f | 0)) {
					j = j + 1 | 0;
					k = e
				} else {
					h = e;
					l = 6;
					break
				}
			}
			if ((l | 0) == 6) {
				i = g;
				return h | 0
			}
			return 0
		}
		function $t(b, d) {
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0;
			e = i;
			i = i + 32 | 0;
			f = e + 16 | 0;
			g = e + 8 | 0;
			h = e + 4 | 0;
			j = e;
			k = (d | 0) == -1;
			a: do
				if (!k) {
					HEAP8[g >> 0] = d;
					if (HEAP8[b + 44 >> 0] | 0) {
						if ((mb(g | 0, 1, 1, HEAP32[b + 32 >> 2] | 0) | 0) == 1)
							break;
						else
							l = -1;
						i = e;
						return l | 0
					}
					HEAP32[h >> 2] = f;
					m = g + 1 | 0;
					n = b + 36 | 0;
					o = b + 40 | 0;
					p = f + 8 | 0;
					q = f;
					r = b + 32 | 0;
					s = g;
					while (1) {
						t = HEAP32[n >> 2] | 0;
						u = yc[c[(HEAP32[t >> 2] | 0) + 12 >> 2] & 15](t, HEAP32[o >> 2] | 0, s, m, j, f, p, h) | 0;
						if ((HEAP32[j >> 2] | 0) == (s | 0)) {
							l = -1;
							v = 12;
							break
						}
						if ((u | 0) == 3) {
							v = 7;
							break
						}
						t = (u | 0) == 1;
						if (u >>> 0 >= 2) {
							l = -1;
							v = 12;
							break
						}
						u = (HEAP32[h >> 2] | 0) - q | 0;
						if ((mb(f | 0, 1, u | 0, HEAP32[r >> 2] | 0) | 0) != (u | 0)) {
							l = -1;
							v = 12;
							break
						}
						if (t)
							s = t ? HEAP32[j >> 2] | 0 : s;
						else
							break a
					}
					if ((v | 0) == 7) {
						if ((mb(s | 0, 1, 1, HEAP32[r >> 2] | 0) | 0) == 1)
							break;
						else
							l = -1;
						i = e;
						return l | 0
					} else if ((v | 0) == 12) {
						i = e;
						return l | 0
					}
				}
			while (0);
			l = k ? 0 : d;
			i = e;
			return l | 0
		}
		function au(a) {
			a = a | 0;
			var b = 0;
			b = i;
			Fm(a);
			kl(a);
			i = b;
			return
		}
		function bu(b, d) {
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0;
			e = i;
			f = Yr(d, 130840) | 0;
			d = b + 36 | 0;
			HEAP32[d >> 2] = f;
			g = b + 44 | 0;
			HEAP32[g >> 2] = tc[c[(HEAP32[f >> 2] | 0) + 24 >> 2] & 127](f) | 0;
			f = HEAP32[d >> 2] | 0;
			HEAP8[b + 53 >> 0] = (tc[c[(HEAP32[f >> 2] | 0) + 28 >> 2] & 127](f) | 0) & 1;
			if ((HEAP32[g >> 2] | 0) > 8)
				er(127472);
			else {
				i = e;
				return
			}
		}
		function cu(a) {
			a = a | 0;
			var b = 0,
			c = 0;
			b = i;
			c = Lv(a, 0) | 0;
			i = b;
			return c | 0
		}
		function du(a) {
			a = a | 0;
			var b = 0,
			c = 0;
			b = i;
			c = Lv(a, 1) | 0;
			i = b;
			return c | 0
		}
		function eu(b, d) {
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0;
			e = i;
			i = i + 32 | 0;
			f = e + 16 | 0;
			g = e + 4 | 0;
			h = e + 8 | 0;
			j = e;
			k = b + 52 | 0;
			l = (HEAP8[k >> 0] | 0) != 0;
			if ((d | 0) == -1) {
				if (l) {
					m = -1;
					i = e;
					return m | 0
				}
				n = HEAP32[b + 48 >> 2] | 0;
				HEAP8[k >> 0] = (n | 0) != -1 & 1;
				m = n;
				i = e;
				return m | 0
			}
			n = b + 48 | 0;
			a: do
				if (l) {
					HEAP8[h >> 0] = HEAP32[n >> 2];
					o = HEAP32[b + 36 >> 2] | 0;
					p = yc[c[(HEAP32[o >> 2] | 0) + 12 >> 2] & 15](o, HEAP32[b + 40 >> 2] | 0, h, h + 1 | 0, j, f, f + 8 | 0, g) | 0;
					if ((p | 0) == 1 | (p | 0) == 2) {
						m = -1;
						i = e;
						return m | 0
					} else if ((p | 0) == 3) {
						HEAP8[f >> 0] = HEAP32[n >> 2];
						HEAP32[g >> 2] = f + 1
					}
					p = b + 32 | 0;
					while (1) {
						o = HEAP32[g >> 2] | 0;
						if (o >>> 0 <= f >>> 0)
							break a;
						q = o + -1 | 0;
						HEAP32[g >> 2] = q;
						if ((Mb(HEAP8[q >> 0] | 0, HEAP32[p >> 2] | 0) | 0) == -1) {
							m = -1;
							break
						}
					}
					i = e;
					return m | 0
				}
			while (0);
			HEAP32[n >> 2] = d;
			HEAP8[k >> 0] = 1;
			m = d;
			i = e;
			return m | 0
		}
		function fu(a) {
			a = a | 0;
			var b = 0;
			b = i;
			kl(a);
			i = b;
			return
		}
		function gu(b, d, e) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0;
			f = i;
			i = i + 16 | 0;
			g = f;
			Gm(b);
			HEAP32[b >> 2] = 127632;
			HEAP32[b + 32 >> 2] = d;
			HEAP32[b + 40 >> 2] = e;
			HEAP32[b + 48 >> 2] = -1;
			HEAP8[b + 52 >> 0] = 0;
			Vr(g, b + 4 | 0);
			bu(b, g);
			Wr(g);
			i = f;
			return
		}
		function hu(b, d, e) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0;
			f = i;
			i = i + 16 | 0;
			g = f;
			Gm(b);
			HEAP32[b >> 2] = 127520;
			HEAP32[b + 32 >> 2] = d;
			Vr(g, b + 4 | 0);
			d = Yr(g, 130840) | 0;
			Wr(g);
			HEAP32[b + 36 >> 2] = d;
			HEAP32[b + 40 >> 2] = e;
			HEAP8[b + 44 >> 0] = (tc[c[(HEAP32[d >> 2] | 0) + 28 >> 2] & 127](d) | 0) & 1;
			i = f;
			return
		}
		function iu(b, d, e) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0;
			f = i;
			i = i + 16 | 0;
			g = f;
			Wm(b);
			HEAP32[b >> 2] = 127376;
			HEAP32[b + 32 >> 2] = d;
			HEAP32[b + 40 >> 2] = e;
			HEAP32[b + 48 >> 2] = -1;
			HEAP8[b + 52 >> 0] = 0;
			Vr(g, b + 4 | 0);
			Tt(b, g);
			Wr(g);
			i = f;
			return
		}
		function ju(b, d, e) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0;
			f = i;
			i = i + 16 | 0;
			g = f;
			Wm(b);
			HEAP32[b >> 2] = 127264;
			HEAP32[b + 32 >> 2] = d;
			Vr(g, b + 4 | 0);
			d = Yr(g, 130848) | 0;
			Wr(g);
			HEAP32[b + 36 >> 2] = d;
			HEAP32[b + 40 >> 2] = e;
			HEAP8[b + 44 >> 0] = (tc[c[(HEAP32[d >> 2] | 0) + 28 >> 2] & 127](d) | 0) & 1;
			i = f;
			return
		}
		function ku(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0,
			g = 0;
			d = i;
			e = py(b | 0) | 0;
			f = il(e + 13 | 0) | 0;
			HEAP32[f >> 2] = e;
			HEAP32[f + 4 >> 2] = e;
			HEAP32[f + 8 >> 2] = 0;
			g = f + 12 | 0;
			qy(g | 0, b | 0, e + 1 | 0) | 0;
			HEAP32[a >> 2] = g;
			i = d;
			return
		}
		function lu(b, d, e) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0;
			f = i;
			g = d;
			h = e - g | 0;
			if (h >>> 0 > 4294967279)
				Xl(b);
			if (h >>> 0 < 11) {
				HEAP8[b >> 0] = h << 1;
				j = b + 1 | 0
			} else {
				k = h + 16 & -16;
				l = il(k) | 0;
				HEAP32[b + 8 >> 2] = l;
				HEAP32[b >> 2] = k | 1;
				HEAP32[b + 4 >> 2] = h;
				j = l
			}
			if ((d | 0) == (e | 0)) {
				m = j;
				HEAP8[m >> 0] = 0;
				i = f;
				return
			}
			l = e - g | 0;
			g = d;
			d = j;
			while (1) {
				HEAP8[d >> 0] = HEAP8[g >> 0] | 0;
				g = g + 1 | 0;
				if ((g | 0) == (e | 0))
					break;
				else
					d = d + 1 | 0
			}
			m = j + l | 0;
			HEAP8[m >> 0] = 0;
			i = f;
			return
		}
		function mu(b, d, e) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0;
			f = i;
			g = d;
			h = e - g | 0;
			j = h >> 2;
			if (j >>> 0 > 1073741807)
				Xl(b);
			if (j >>> 0 < 2) {
				HEAP8[b >> 0] = h >>> 1;
				k = b + 4 | 0
			} else {
				h = j + 4 & -4;
				l = il(h << 2) | 0;
				HEAP32[b + 8 >> 2] = l;
				HEAP32[b >> 2] = h | 1;
				HEAP32[b + 4 >> 2] = j;
				k = l
			}
			if ((d | 0) == (e | 0)) {
				m = k;
				HEAP32[m >> 2] = 0;
				i = f;
				return
			}
			l = ((e + -4 - g | 0) >>> 2) + 1 | 0;
			g = d;
			d = k;
			while (1) {
				HEAP32[d >> 2] = HEAP32[g >> 2];
				g = g + 4 | 0;
				if ((g | 0) == (e | 0))
					break;
				else
					d = d + 4 | 0
			}
			m = k + (l << 2) | 0;
			HEAP32[m >> 2] = 0;
			i = f;
			return
		}
		function nu(b, e, f, g, h, j, k) {
			b = b | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			k = k | 0;
			var l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0,
			O = 0,
			P = 0,
			Q = 0,
			R = 0,
			S = 0,
			T = 0,
			U = 0,
			V = 0,
			W = 0,
			X = 0;
			l = i;
			i = i + 112 | 0;
			m = l;
			n = (g - f | 0) / 12 | 0;
			if (n >>> 0 > 100) {
				o = vx(n) | 0;
				if (!o)
					qx();
				else {
					p = o;
					q = o
				}
			} else {
				p = 0;
				q = m
			}
			m = (f | 0) == (g | 0);
			if (m) {
				r = 0;
				s = n
			} else {
				o = f;
				t = 0;
				u = n;
				n = q;
				while (1) {
					v = HEAP8[o >> 0] | 0;
					if (!(v & 1))
						w = (v & 255) >>> 1;
					else
						w = HEAP32[o + 4 >> 2] | 0;
					if (!w) {
						HEAP8[n >> 0] = 2;
						x = t + 1 | 0;
						y = u + -1 | 0
					} else {
						HEAP8[n >> 0] = 1;
						x = t;
						y = u
					}
					o = o + 12 | 0;
					if ((o | 0) == (g | 0)) {
						r = x;
						s = y;
						break
					} else {
						t = x;
						u = y;
						n = n + 1 | 0
					}
				}
			}
			n = 0;
			y = r;
			r = s;
			a: while (1) {
				s = HEAP32[b >> 2] | 0;
				do
					if (s)
						if ((HEAP32[s + 12 >> 2] | 0) == (HEAP32[s + 16 >> 2] | 0))
							if ((tc[c[(HEAP32[s >> 2] | 0) + 36 >> 2] & 127](s) | 0) == -1) {
								HEAP32[b >> 2] = 0;
								z = 0;
								break
							} else {
								z = HEAP32[b >> 2] | 0;
								break
							}
						else
							z = s;
					else
						z = 0;
				while (0);
				s = (z | 0) == 0;
				u = HEAP32[e >> 2] | 0;
				if (u)
					if ((HEAP32[u + 12 >> 2] | 0) == (HEAP32[u + 16 >> 2] | 0) ? (tc[c[(HEAP32[u >> 2] | 0) + 36 >> 2] & 127](u) | 0) == -1 : 0) {
						HEAP32[e >> 2] = 0;
						A = 0
					} else
						A = u;
				else
					A = 0;
				B = (A | 0) == 0;
				C = HEAP32[b >> 2] | 0;
				if (!((s ^ B) & (r | 0) != 0))
					break;
				s = HEAP32[C + 12 >> 2] | 0;
				if ((s | 0) == (HEAP32[C + 16 >> 2] | 0))
					D = tc[c[(HEAP32[C >> 2] | 0) + 36 >> 2] & 127](C) | 0;
				else
					D = HEAPU8[s >> 0] | 0;
				s = D & 255;
				if (k)
					E = s;
				else
					E = Cc[c[(HEAP32[h >> 2] | 0) + 12 >> 2] & 31](h, s) | 0;
				s = n + 1 | 0;
				if (m) {
					n = s;
					continue
				} else {
					F = 0;
					G = f;
					H = y;
					I = r;
					J = q
				}
				while (1) {
					do
						if ((HEAP8[J >> 0] | 0) == 1) {
							if (!(HEAP8[G >> 0] & 1))
								K = G + 1 | 0;
							else
								K = HEAP32[G + 8 >> 2] | 0;
							u = HEAP8[K + n >> 0] | 0;
							if (k)
								L = u;
							else
								L = Cc[c[(HEAP32[h >> 2] | 0) + 12 >> 2] & 31](h, u) | 0;
							if (E << 24 >> 24 != L << 24 >> 24) {
								HEAP8[J >> 0] = 0;
								M = F;
								N = H;
								O = I + -1 | 0;
								break
							}
							u = HEAP8[G >> 0] | 0;
							if (!(u & 1))
								P = (u & 255) >>> 1;
							else
								P = HEAP32[G + 4 >> 2] | 0;
							if ((P | 0) == (s | 0)) {
								HEAP8[J >> 0] = 2;
								M = 1;
								N = H + 1 | 0;
								O = I + -1 | 0
							} else {
								M = 1;
								N = H;
								O = I
							}
						} else {
							M = F;
							N = H;
							O = I
						}
					while (0);
					G = G + 12 | 0;
					if ((G | 0) == (g | 0))
						break;
					else {
						F = M;
						H = N;
						I = O;
						J = J + 1 | 0
					}
				}
				if (!M) {
					n = s;
					y = N;
					r = O;
					continue
				}
				u = HEAP32[b >> 2] | 0;
				x = u + 12 | 0;
				t = HEAP32[x >> 2] | 0;
				if ((t | 0) == (HEAP32[u + 16 >> 2] | 0))
					tc[c[(HEAP32[u >> 2] | 0) + 40 >> 2] & 127](u) | 0;
				else
					HEAP32[x >> 2] = t + 1;
				if ((N + O | 0) >>> 0 < 2) {
					n = s;
					y = N;
					r = O;
					continue
				} else {
					Q = f;
					R = N;
					S = q
				}
				while (1) {
					if ((HEAP8[S >> 0] | 0) == 2) {
						t = HEAP8[Q >> 0] | 0;
						if (!(t & 1))
							T = (t & 255) >>> 1;
						else
							T = HEAP32[Q + 4 >> 2] | 0;
						if ((T | 0) != (s | 0)) {
							HEAP8[S >> 0] = 0;
							U = R + -1 | 0
						} else
							U = R
					} else
						U = R;
					t = Q + 12 | 0;
					if ((t | 0) == (g | 0)) {
						n = s;
						y = U;
						r = O;
						continue a
					} else {
						Q = t;
						R = U;
						S = S + 1 | 0
					}
				}
			}
			do
				if (C)
					if ((HEAP32[C + 12 >> 2] | 0) == (HEAP32[C + 16 >> 2] | 0))
						if ((tc[c[(HEAP32[C >> 2] | 0) + 36 >> 2] & 127](C) | 0) == -1) {
							HEAP32[b >> 2] = 0;
							V = 0;
							break
						} else {
							V = HEAP32[b >> 2] | 0;
							break
						}
					else
						V = C;
				else
					V = 0;
			while (0);
			C = (V | 0) == 0;
			do
				if (!B) {
					if ((HEAP32[A + 12 >> 2] | 0) != (HEAP32[A + 16 >> 2] | 0))
						if (C)
							break;
						else {
							W = 67;
							break
						}
					if ((tc[c[(HEAP32[A >> 2] | 0) + 36 >> 2] & 127](A) | 0) != -1)
						if (C)
							break;
						else {
							W = 67;
							break
						}
					else {
						HEAP32[e >> 2] = 0;
						W = 65;
						break
					}
				} else
					W = 65;
			while (0);
			if ((W | 0) == 65 ? C : 0)
				W = 67;
			if ((W | 0) == 67)
				HEAP32[j >> 2] = HEAP32[j >> 2] | 2;
			b: do
				if (m)
					W = 71;
				else {
					C = f;
					e = q;
					while (1) {
						if ((HEAP8[e >> 0] | 0) == 2) {
							X = C;
							break b
						}
						C = C + 12 | 0;
						if ((C | 0) == (g | 0)) {
							W = 71;
							break
						} else
							e = e + 1 | 0
					}
				}
			while (0);
			if ((W | 0) == 71) {
				HEAP32[j >> 2] = HEAP32[j >> 2] | 4;
				X = g
			}
			if (!p) {
				i = l;
				return X | 0
			}
			wx(p);
			i = l;
			return X | 0
		}
		function ou(b, e, f, g, h, j, k) {
			b = b | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			k = k | 0;
			var l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0,
			O = 0,
			P = 0;
			e = i;
			i = i + 224 | 0;
			l = e + 198 | 0;
			m = e + 196 | 0;
			n = e + 184 | 0;
			o = e + 172 | 0;
			p = e + 168 | 0;
			q = e + 8 | 0;
			r = e + 4 | 0;
			s = e;
			t = wt(h) | 0;
			zo(n, h, l, m);
			HEAP32[o + 0 >> 2] = 0;
			HEAP32[o + 4 >> 2] = 0;
			HEAP32[o + 8 >> 2] = 0;
			em(o, 10, 0);
			if (!(HEAP8[o >> 0] & 1)) {
				h = o + 1 | 0;
				u = h;
				v = o + 8 | 0;
				w = h
			} else {
				h = o + 8 | 0;
				u = o + 1 | 0;
				v = h;
				w = HEAP32[h >> 2] | 0
			}
			HEAP32[p >> 2] = w;
			HEAP32[r >> 2] = q;
			HEAP32[s >> 2] = 0;
			h = o + 4 | 0;
			x = HEAP8[m >> 0] | 0;
			m = HEAP32[f >> 2] | 0;
			y = w;
			a: while (1) {
				if (m)
					if ((HEAP32[m + 12 >> 2] | 0) == (HEAP32[m + 16 >> 2] | 0) ? (tc[c[(HEAP32[m >> 2] | 0) + 36 >> 2] & 127](m) | 0) == -1 : 0) {
						HEAP32[f >> 2] = 0;
						z = 0
					} else
						z = m;
				else
					z = 0;
				w = (z | 0) == 0;
				A = HEAP32[g >> 2] | 0;
				do
					if (A) {
						if ((HEAP32[A + 12 >> 2] | 0) != (HEAP32[A + 16 >> 2] | 0))
							if (w) {
								B = A;
								break
							} else {
								C = A;
								D = y;
								break a
							}
						if ((tc[c[(HEAP32[A >> 2] | 0) + 36 >> 2] & 127](A) | 0) != -1)
							if (w) {
								B = A;
								break
							} else {
								C = A;
								D = y;
								break a
							}
						else {
							HEAP32[g >> 2] = 0;
							E = 14;
							break
						}
					} else
						E = 14;
				while (0);
				if ((E | 0) == 14) {
					E = 0;
					if (w) {
						C = 0;
						D = y;
						break
					} else
						B = 0
				}
				A = HEAP8[o >> 0] | 0;
				F = (A & 1) == 0;
				if (F)
					G = (A & 255) >>> 1;
				else
					G = HEAP32[h >> 2] | 0;
				if ((HEAP32[p >> 2] | 0) == (y + G | 0)) {
					if (F) {
						H = (A & 255) >>> 1;
						I = (A & 255) >>> 1
					} else {
						A = HEAP32[h >> 2] | 0;
						H = A;
						I = A
					}
					em(o, H << 1, 0);
					if (!(HEAP8[o >> 0] & 1))
						J = 10;
					else
						J = (HEAP32[o >> 2] & -2) + -1 | 0;
					em(o, J, 0);
					if (!(HEAP8[o >> 0] & 1))
						K = u;
					else
						K = HEAP32[v >> 2] | 0;
					HEAP32[p >> 2] = K + I;
					L = K
				} else
					L = y;
				A = z + 12 | 0;
				F = HEAP32[A >> 2] | 0;
				M = z + 16 | 0;
				if ((F | 0) == (HEAP32[M >> 2] | 0))
					N = tc[c[(HEAP32[z >> 2] | 0) + 36 >> 2] & 127](z) | 0;
				else
					N = HEAPU8[F >> 0] | 0;
				if (jo(N & 255, t, L, p, s, x, n, q, r, l) | 0) {
					C = B;
					D = L;
					break
				}
				F = HEAP32[A >> 2] | 0;
				if ((F | 0) == (HEAP32[M >> 2] | 0)) {
					tc[c[(HEAP32[z >> 2] | 0) + 40 >> 2] & 127](z) | 0;
					m = z;
					y = L;
					continue
				} else {
					HEAP32[A >> 2] = F + 1;
					m = z;
					y = L;
					continue
				}
			}
			L = HEAP8[n >> 0] | 0;
			if (!(L & 1))
				O = (L & 255) >>> 1;
			else
				O = HEAP32[n + 4 >> 2] | 0;
			if ((O | 0) != 0 ? (O = HEAP32[r >> 2] | 0, (O - q | 0) < 160) : 0) {
				L = HEAP32[s >> 2] | 0;
				HEAP32[r >> 2] = O + 4;
				HEAP32[O >> 2] = L
			}
			HEAP32[k >> 2] = Mv(D, HEAP32[p >> 2] | 0, j, t) | 0;
			hr(n, q, HEAP32[r >> 2] | 0, j);
			if (z)
				if ((HEAP32[z + 12 >> 2] | 0) == (HEAP32[z + 16 >> 2] | 0) ? (tc[c[(HEAP32[z >> 2] | 0) + 36 >> 2] & 127](z) | 0) == -1 : 0) {
					HEAP32[f >> 2] = 0;
					P = 0
				} else
					P = z;
			else
				P = 0;
			z = (P | 0) == 0;
			do
				if (C) {
					if ((HEAP32[C + 12 >> 2] | 0) != (HEAP32[C + 16 >> 2] | 0)) {
						if (!z)
							break;
						HEAP32[b >> 2] = P;
						bm(o);
						bm(n);
						i = e;
						return
					}
					if ((tc[c[(HEAP32[C >> 2] | 0) + 36 >> 2] & 127](C) | 0) == -1) {
						HEAP32[g >> 2] = 0;
						E = 50;
						break
					}
					if (z ^ (C | 0) == 0) {
						HEAP32[b >> 2] = P;
						bm(o);
						bm(n);
						i = e;
						return
					}
				} else
					E = 50;
			while (0);
			if ((E | 0) == 50 ? !z : 0) {
				HEAP32[b >> 2] = P;
				bm(o);
				bm(n);
				i = e;
				return
			}
			HEAP32[j >> 2] = HEAP32[j >> 2] | 2;
			HEAP32[b >> 2] = P;
			bm(o);
			bm(n);
			i = e;
			return
		}
		function pu(b, e, f, g, h, j, k) {
			b = b | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			k = k | 0;
			var l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0,
			O = 0,
			P = 0,
			Q = 0;
			e = i;
			i = i + 224 | 0;
			l = e + 198 | 0;
			m = e + 196 | 0;
			n = e + 184 | 0;
			o = e + 172 | 0;
			p = e + 168 | 0;
			q = e + 8 | 0;
			r = e + 4 | 0;
			s = e;
			t = wt(h) | 0;
			zo(n, h, l, m);
			HEAP32[o + 0 >> 2] = 0;
			HEAP32[o + 4 >> 2] = 0;
			HEAP32[o + 8 >> 2] = 0;
			em(o, 10, 0);
			if (!(HEAP8[o >> 0] & 1)) {
				h = o + 1 | 0;
				u = h;
				v = o + 8 | 0;
				w = h
			} else {
				h = o + 8 | 0;
				u = o + 1 | 0;
				v = h;
				w = HEAP32[h >> 2] | 0
			}
			HEAP32[p >> 2] = w;
			HEAP32[r >> 2] = q;
			HEAP32[s >> 2] = 0;
			h = o + 4 | 0;
			x = HEAP8[m >> 0] | 0;
			m = HEAP32[f >> 2] | 0;
			y = w;
			a: while (1) {
				if (m)
					if ((HEAP32[m + 12 >> 2] | 0) == (HEAP32[m + 16 >> 2] | 0) ? (tc[c[(HEAP32[m >> 2] | 0) + 36 >> 2] & 127](m) | 0) == -1 : 0) {
						HEAP32[f >> 2] = 0;
						z = 0
					} else
						z = m;
				else
					z = 0;
				w = (z | 0) == 0;
				A = HEAP32[g >> 2] | 0;
				do
					if (A) {
						if ((HEAP32[A + 12 >> 2] | 0) != (HEAP32[A + 16 >> 2] | 0))
							if (w) {
								B = A;
								break
							} else {
								C = A;
								D = y;
								break a
							}
						if ((tc[c[(HEAP32[A >> 2] | 0) + 36 >> 2] & 127](A) | 0) != -1)
							if (w) {
								B = A;
								break
							} else {
								C = A;
								D = y;
								break a
							}
						else {
							HEAP32[g >> 2] = 0;
							E = 14;
							break
						}
					} else
						E = 14;
				while (0);
				if ((E | 0) == 14) {
					E = 0;
					if (w) {
						C = 0;
						D = y;
						break
					} else
						B = 0
				}
				A = HEAP8[o >> 0] | 0;
				F = (A & 1) == 0;
				if (F)
					G = (A & 255) >>> 1;
				else
					G = HEAP32[h >> 2] | 0;
				if ((HEAP32[p >> 2] | 0) == (y + G | 0)) {
					if (F) {
						I = (A & 255) >>> 1;
						J = (A & 255) >>> 1
					} else {
						A = HEAP32[h >> 2] | 0;
						I = A;
						J = A
					}
					em(o, I << 1, 0);
					if (!(HEAP8[o >> 0] & 1))
						K = 10;
					else
						K = (HEAP32[o >> 2] & -2) + -1 | 0;
					em(o, K, 0);
					if (!(HEAP8[o >> 0] & 1))
						L = u;
					else
						L = HEAP32[v >> 2] | 0;
					HEAP32[p >> 2] = L + J;
					M = L
				} else
					M = y;
				A = z + 12 | 0;
				F = HEAP32[A >> 2] | 0;
				N = z + 16 | 0;
				if ((F | 0) == (HEAP32[N >> 2] | 0))
					O = tc[c[(HEAP32[z >> 2] | 0) + 36 >> 2] & 127](z) | 0;
				else
					O = HEAPU8[F >> 0] | 0;
				if (jo(O & 255, t, M, p, s, x, n, q, r, l) | 0) {
					C = B;
					D = M;
					break
				}
				F = HEAP32[A >> 2] | 0;
				if ((F | 0) == (HEAP32[N >> 2] | 0)) {
					tc[c[(HEAP32[z >> 2] | 0) + 40 >> 2] & 127](z) | 0;
					m = z;
					y = M;
					continue
				} else {
					HEAP32[A >> 2] = F + 1;
					m = z;
					y = M;
					continue
				}
			}
			M = HEAP8[n >> 0] | 0;
			if (!(M & 1))
				P = (M & 255) >>> 1;
			else
				P = HEAP32[n + 4 >> 2] | 0;
			if ((P | 0) != 0 ? (P = HEAP32[r >> 2] | 0, (P - q | 0) < 160) : 0) {
				M = HEAP32[s >> 2] | 0;
				HEAP32[r >> 2] = P + 4;
				HEAP32[P >> 2] = M
			}
			M = Nv(D, HEAP32[p >> 2] | 0, j, t) | 0;
			t = k;
			HEAP32[t >> 2] = M;
			HEAP32[t + 4 >> 2] = H;
			hr(n, q, HEAP32[r >> 2] | 0, j);
			if (z)
				if ((HEAP32[z + 12 >> 2] | 0) == (HEAP32[z + 16 >> 2] | 0) ? (tc[c[(HEAP32[z >> 2] | 0) + 36 >> 2] & 127](z) | 0) == -1 : 0) {
					HEAP32[f >> 2] = 0;
					Q = 0
				} else
					Q = z;
			else
				Q = 0;
			z = (Q | 0) == 0;
			do
				if (C) {
					if ((HEAP32[C + 12 >> 2] | 0) != (HEAP32[C + 16 >> 2] | 0)) {
						if (!z)
							break;
						HEAP32[b >> 2] = Q;
						bm(o);
						bm(n);
						i = e;
						return
					}
					if ((tc[c[(HEAP32[C >> 2] | 0) + 36 >> 2] & 127](C) | 0) == -1) {
						HEAP32[g >> 2] = 0;
						E = 50;
						break
					}
					if (z ^ (C | 0) == 0) {
						HEAP32[b >> 2] = Q;
						bm(o);
						bm(n);
						i = e;
						return
					}
				} else
					E = 50;
			while (0);
			if ((E | 0) == 50 ? !z : 0) {
				HEAP32[b >> 2] = Q;
				bm(o);
				bm(n);
				i = e;
				return
			}
			HEAP32[j >> 2] = HEAP32[j >> 2] | 2;
			HEAP32[b >> 2] = Q;
			bm(o);
			bm(n);
			i = e;
			return
		}
		function qu(e, f, g, h, j, k, l) {
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			k = k | 0;
			l = l | 0;
			var m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0,
			O = 0,
			P = 0,
			Q = 0;
			f = i;
			i = i + 224 | 0;
			m = f + 198 | 0;
			n = f + 196 | 0;
			o = f + 184 | 0;
			p = f + 172 | 0;
			q = f + 168 | 0;
			r = f + 8 | 0;
			s = f + 4 | 0;
			t = f;
			u = wt(j) | 0;
			zo(o, j, m, n);
			HEAP32[p + 0 >> 2] = 0;
			HEAP32[p + 4 >> 2] = 0;
			HEAP32[p + 8 >> 2] = 0;
			em(p, 10, 0);
			if (!(HEAP8[p >> 0] & 1)) {
				j = p + 1 | 0;
				v = j;
				w = p + 8 | 0;
				x = j
			} else {
				j = p + 8 | 0;
				v = p + 1 | 0;
				w = j;
				x = HEAP32[j >> 2] | 0
			}
			HEAP32[q >> 2] = x;
			HEAP32[s >> 2] = r;
			HEAP32[t >> 2] = 0;
			j = p + 4 | 0;
			y = HEAP8[n >> 0] | 0;
			n = HEAP32[g >> 2] | 0;
			z = x;
			a: while (1) {
				if (n)
					if ((HEAP32[n + 12 >> 2] | 0) == (HEAP32[n + 16 >> 2] | 0) ? (tc[c[(HEAP32[n >> 2] | 0) + 36 >> 2] & 127](n) | 0) == -1 : 0) {
						HEAP32[g >> 2] = 0;
						A = 0
					} else
						A = n;
				else
					A = 0;
				x = (A | 0) == 0;
				B = HEAP32[h >> 2] | 0;
				do
					if (B) {
						if ((HEAP32[B + 12 >> 2] | 0) != (HEAP32[B + 16 >> 2] | 0))
							if (x) {
								C = B;
								break
							} else {
								D = B;
								E = z;
								break a
							}
						if ((tc[c[(HEAP32[B >> 2] | 0) + 36 >> 2] & 127](B) | 0) != -1)
							if (x) {
								C = B;
								break
							} else {
								D = B;
								E = z;
								break a
							}
						else {
							HEAP32[h >> 2] = 0;
							F = 14;
							break
						}
					} else
						F = 14;
				while (0);
				if ((F | 0) == 14) {
					F = 0;
					if (x) {
						D = 0;
						E = z;
						break
					} else
						C = 0
				}
				B = HEAP8[p >> 0] | 0;
				G = (B & 1) == 0;
				if (G)
					H = (B & 255) >>> 1;
				else
					H = HEAP32[j >> 2] | 0;
				if ((HEAP32[q >> 2] | 0) == (z + H | 0)) {
					if (G) {
						I = (B & 255) >>> 1;
						J = (B & 255) >>> 1
					} else {
						B = HEAP32[j >> 2] | 0;
						I = B;
						J = B
					}
					em(p, I << 1, 0);
					if (!(HEAP8[p >> 0] & 1))
						K = 10;
					else
						K = (HEAP32[p >> 2] & -2) + -1 | 0;
					em(p, K, 0);
					if (!(HEAP8[p >> 0] & 1))
						L = v;
					else
						L = HEAP32[w >> 2] | 0;
					HEAP32[q >> 2] = L + J;
					M = L
				} else
					M = z;
				B = A + 12 | 0;
				G = HEAP32[B >> 2] | 0;
				N = A + 16 | 0;
				if ((G | 0) == (HEAP32[N >> 2] | 0))
					O = tc[c[(HEAP32[A >> 2] | 0) + 36 >> 2] & 127](A) | 0;
				else
					O = HEAPU8[G >> 0] | 0;
				if (jo(O & 255, u, M, q, t, y, o, r, s, m) | 0) {
					D = C;
					E = M;
					break
				}
				G = HEAP32[B >> 2] | 0;
				if ((G | 0) == (HEAP32[N >> 2] | 0)) {
					tc[c[(HEAP32[A >> 2] | 0) + 40 >> 2] & 127](A) | 0;
					n = A;
					z = M;
					continue
				} else {
					HEAP32[B >> 2] = G + 1;
					n = A;
					z = M;
					continue
				}
			}
			M = HEAP8[o >> 0] | 0;
			if (!(M & 1))
				P = (M & 255) >>> 1;
			else
				P = HEAP32[o + 4 >> 2] | 0;
			if ((P | 0) != 0 ? (P = HEAP32[s >> 2] | 0, (P - r | 0) < 160) : 0) {
				M = HEAP32[t >> 2] | 0;
				HEAP32[s >> 2] = P + 4;
				HEAP32[P >> 2] = M
			}
			HEAP16[l >> 1] = Ov(E, HEAP32[q >> 2] | 0, k, u) | 0;
			hr(o, r, HEAP32[s >> 2] | 0, k);
			if (A)
				if ((HEAP32[A + 12 >> 2] | 0) == (HEAP32[A + 16 >> 2] | 0) ? (tc[c[(HEAP32[A >> 2] | 0) + 36 >> 2] & 127](A) | 0) == -1 : 0) {
					HEAP32[g >> 2] = 0;
					Q = 0
				} else
					Q = A;
			else
				Q = 0;
			A = (Q | 0) == 0;
			do
				if (D) {
					if ((HEAP32[D + 12 >> 2] | 0) != (HEAP32[D + 16 >> 2] | 0)) {
						if (!A)
							break;
						HEAP32[e >> 2] = Q;
						bm(p);
						bm(o);
						i = f;
						return
					}
					if ((tc[c[(HEAP32[D >> 2] | 0) + 36 >> 2] & 127](D) | 0) == -1) {
						HEAP32[h >> 2] = 0;
						F = 50;
						break
					}
					if (A ^ (D | 0) == 0) {
						HEAP32[e >> 2] = Q;
						bm(p);
						bm(o);
						i = f;
						return
					}
				} else
					F = 50;
			while (0);
			if ((F | 0) == 50 ? !A : 0) {
				HEAP32[e >> 2] = Q;
				bm(p);
				bm(o);
				i = f;
				return
			}
			HEAP32[k >> 2] = HEAP32[k >> 2] | 2;
			HEAP32[e >> 2] = Q;
			bm(p);
			bm(o);
			i = f;
			return
		}
		function ru(b, e, f, g, h, j, k) {
			b = b | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			k = k | 0;
			var l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0,
			O = 0,
			P = 0;
			e = i;
			i = i + 224 | 0;
			l = e + 198 | 0;
			m = e + 196 | 0;
			n = e + 184 | 0;
			o = e + 172 | 0;
			p = e + 168 | 0;
			q = e + 8 | 0;
			r = e + 4 | 0;
			s = e;
			t = wt(h) | 0;
			zo(n, h, l, m);
			HEAP32[o + 0 >> 2] = 0;
			HEAP32[o + 4 >> 2] = 0;
			HEAP32[o + 8 >> 2] = 0;
			em(o, 10, 0);
			if (!(HEAP8[o >> 0] & 1)) {
				h = o + 1 | 0;
				u = h;
				v = o + 8 | 0;
				w = h
			} else {
				h = o + 8 | 0;
				u = o + 1 | 0;
				v = h;
				w = HEAP32[h >> 2] | 0
			}
			HEAP32[p >> 2] = w;
			HEAP32[r >> 2] = q;
			HEAP32[s >> 2] = 0;
			h = o + 4 | 0;
			x = HEAP8[m >> 0] | 0;
			m = HEAP32[f >> 2] | 0;
			y = w;
			a: while (1) {
				if (m)
					if ((HEAP32[m + 12 >> 2] | 0) == (HEAP32[m + 16 >> 2] | 0) ? (tc[c[(HEAP32[m >> 2] | 0) + 36 >> 2] & 127](m) | 0) == -1 : 0) {
						HEAP32[f >> 2] = 0;
						z = 0
					} else
						z = m;
				else
					z = 0;
				w = (z | 0) == 0;
				A = HEAP32[g >> 2] | 0;
				do
					if (A) {
						if ((HEAP32[A + 12 >> 2] | 0) != (HEAP32[A + 16 >> 2] | 0))
							if (w) {
								B = A;
								break
							} else {
								C = A;
								D = y;
								break a
							}
						if ((tc[c[(HEAP32[A >> 2] | 0) + 36 >> 2] & 127](A) | 0) != -1)
							if (w) {
								B = A;
								break
							} else {
								C = A;
								D = y;
								break a
							}
						else {
							HEAP32[g >> 2] = 0;
							E = 14;
							break
						}
					} else
						E = 14;
				while (0);
				if ((E | 0) == 14) {
					E = 0;
					if (w) {
						C = 0;
						D = y;
						break
					} else
						B = 0
				}
				A = HEAP8[o >> 0] | 0;
				F = (A & 1) == 0;
				if (F)
					G = (A & 255) >>> 1;
				else
					G = HEAP32[h >> 2] | 0;
				if ((HEAP32[p >> 2] | 0) == (y + G | 0)) {
					if (F) {
						H = (A & 255) >>> 1;
						I = (A & 255) >>> 1
					} else {
						A = HEAP32[h >> 2] | 0;
						H = A;
						I = A
					}
					em(o, H << 1, 0);
					if (!(HEAP8[o >> 0] & 1))
						J = 10;
					else
						J = (HEAP32[o >> 2] & -2) + -1 | 0;
					em(o, J, 0);
					if (!(HEAP8[o >> 0] & 1))
						K = u;
					else
						K = HEAP32[v >> 2] | 0;
					HEAP32[p >> 2] = K + I;
					L = K
				} else
					L = y;
				A = z + 12 | 0;
				F = HEAP32[A >> 2] | 0;
				M = z + 16 | 0;
				if ((F | 0) == (HEAP32[M >> 2] | 0))
					N = tc[c[(HEAP32[z >> 2] | 0) + 36 >> 2] & 127](z) | 0;
				else
					N = HEAPU8[F >> 0] | 0;
				if (jo(N & 255, t, L, p, s, x, n, q, r, l) | 0) {
					C = B;
					D = L;
					break
				}
				F = HEAP32[A >> 2] | 0;
				if ((F | 0) == (HEAP32[M >> 2] | 0)) {
					tc[c[(HEAP32[z >> 2] | 0) + 40 >> 2] & 127](z) | 0;
					m = z;
					y = L;
					continue
				} else {
					HEAP32[A >> 2] = F + 1;
					m = z;
					y = L;
					continue
				}
			}
			L = HEAP8[n >> 0] | 0;
			if (!(L & 1))
				O = (L & 255) >>> 1;
			else
				O = HEAP32[n + 4 >> 2] | 0;
			if ((O | 0) != 0 ? (O = HEAP32[r >> 2] | 0, (O - q | 0) < 160) : 0) {
				L = HEAP32[s >> 2] | 0;
				HEAP32[r >> 2] = O + 4;
				HEAP32[O >> 2] = L
			}
			HEAP32[k >> 2] = Pv(D, HEAP32[p >> 2] | 0, j, t) | 0;
			hr(n, q, HEAP32[r >> 2] | 0, j);
			if (z)
				if ((HEAP32[z + 12 >> 2] | 0) == (HEAP32[z + 16 >> 2] | 0) ? (tc[c[(HEAP32[z >> 2] | 0) + 36 >> 2] & 127](z) | 0) == -1 : 0) {
					HEAP32[f >> 2] = 0;
					P = 0
				} else
					P = z;
			else
				P = 0;
			z = (P | 0) == 0;
			do
				if (C) {
					if ((HEAP32[C + 12 >> 2] | 0) != (HEAP32[C + 16 >> 2] | 0)) {
						if (!z)
							break;
						HEAP32[b >> 2] = P;
						bm(o);
						bm(n);
						i = e;
						return
					}
					if ((tc[c[(HEAP32[C >> 2] | 0) + 36 >> 2] & 127](C) | 0) == -1) {
						HEAP32[g >> 2] = 0;
						E = 50;
						break
					}
					if (z ^ (C | 0) == 0) {
						HEAP32[b >> 2] = P;
						bm(o);
						bm(n);
						i = e;
						return
					}
				} else
					E = 50;
			while (0);
			if ((E | 0) == 50 ? !z : 0) {
				HEAP32[b >> 2] = P;
				bm(o);
				bm(n);
				i = e;
				return
			}
			HEAP32[j >> 2] = HEAP32[j >> 2] | 2;
			HEAP32[b >> 2] = P;
			bm(o);
			bm(n);
			i = e;
			return
		}
		function su(b, e, f, g, h, j, k) {
			b = b | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			k = k | 0;
			var l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0,
			O = 0,
			P = 0;
			e = i;
			i = i + 224 | 0;
			l = e + 198 | 0;
			m = e + 196 | 0;
			n = e + 184 | 0;
			o = e + 172 | 0;
			p = e + 168 | 0;
			q = e + 8 | 0;
			r = e + 4 | 0;
			s = e;
			t = wt(h) | 0;
			zo(n, h, l, m);
			HEAP32[o + 0 >> 2] = 0;
			HEAP32[o + 4 >> 2] = 0;
			HEAP32[o + 8 >> 2] = 0;
			em(o, 10, 0);
			if (!(HEAP8[o >> 0] & 1)) {
				h = o + 1 | 0;
				u = h;
				v = o + 8 | 0;
				w = h
			} else {
				h = o + 8 | 0;
				u = o + 1 | 0;
				v = h;
				w = HEAP32[h >> 2] | 0
			}
			HEAP32[p >> 2] = w;
			HEAP32[r >> 2] = q;
			HEAP32[s >> 2] = 0;
			h = o + 4 | 0;
			x = HEAP8[m >> 0] | 0;
			m = HEAP32[f >> 2] | 0;
			y = w;
			a: while (1) {
				if (m)
					if ((HEAP32[m + 12 >> 2] | 0) == (HEAP32[m + 16 >> 2] | 0) ? (tc[c[(HEAP32[m >> 2] | 0) + 36 >> 2] & 127](m) | 0) == -1 : 0) {
						HEAP32[f >> 2] = 0;
						z = 0
					} else
						z = m;
				else
					z = 0;
				w = (z | 0) == 0;
				A = HEAP32[g >> 2] | 0;
				do
					if (A) {
						if ((HEAP32[A + 12 >> 2] | 0) != (HEAP32[A + 16 >> 2] | 0))
							if (w) {
								B = A;
								break
							} else {
								C = A;
								D = y;
								break a
							}
						if ((tc[c[(HEAP32[A >> 2] | 0) + 36 >> 2] & 127](A) | 0) != -1)
							if (w) {
								B = A;
								break
							} else {
								C = A;
								D = y;
								break a
							}
						else {
							HEAP32[g >> 2] = 0;
							E = 14;
							break
						}
					} else
						E = 14;
				while (0);
				if ((E | 0) == 14) {
					E = 0;
					if (w) {
						C = 0;
						D = y;
						break
					} else
						B = 0
				}
				A = HEAP8[o >> 0] | 0;
				F = (A & 1) == 0;
				if (F)
					G = (A & 255) >>> 1;
				else
					G = HEAP32[h >> 2] | 0;
				if ((HEAP32[p >> 2] | 0) == (y + G | 0)) {
					if (F) {
						H = (A & 255) >>> 1;
						I = (A & 255) >>> 1
					} else {
						A = HEAP32[h >> 2] | 0;
						H = A;
						I = A
					}
					em(o, H << 1, 0);
					if (!(HEAP8[o >> 0] & 1))
						J = 10;
					else
						J = (HEAP32[o >> 2] & -2) + -1 | 0;
					em(o, J, 0);
					if (!(HEAP8[o >> 0] & 1))
						K = u;
					else
						K = HEAP32[v >> 2] | 0;
					HEAP32[p >> 2] = K + I;
					L = K
				} else
					L = y;
				A = z + 12 | 0;
				F = HEAP32[A >> 2] | 0;
				M = z + 16 | 0;
				if ((F | 0) == (HEAP32[M >> 2] | 0))
					N = tc[c[(HEAP32[z >> 2] | 0) + 36 >> 2] & 127](z) | 0;
				else
					N = HEAPU8[F >> 0] | 0;
				if (jo(N & 255, t, L, p, s, x, n, q, r, l) | 0) {
					C = B;
					D = L;
					break
				}
				F = HEAP32[A >> 2] | 0;
				if ((F | 0) == (HEAP32[M >> 2] | 0)) {
					tc[c[(HEAP32[z >> 2] | 0) + 40 >> 2] & 127](z) | 0;
					m = z;
					y = L;
					continue
				} else {
					HEAP32[A >> 2] = F + 1;
					m = z;
					y = L;
					continue
				}
			}
			L = HEAP8[n >> 0] | 0;
			if (!(L & 1))
				O = (L & 255) >>> 1;
			else
				O = HEAP32[n + 4 >> 2] | 0;
			if ((O | 0) != 0 ? (O = HEAP32[r >> 2] | 0, (O - q | 0) < 160) : 0) {
				L = HEAP32[s >> 2] | 0;
				HEAP32[r >> 2] = O + 4;
				HEAP32[O >> 2] = L
			}
			HEAP32[k >> 2] = Qv(D, HEAP32[p >> 2] | 0, j, t) | 0;
			hr(n, q, HEAP32[r >> 2] | 0, j);
			if (z)
				if ((HEAP32[z + 12 >> 2] | 0) == (HEAP32[z + 16 >> 2] | 0) ? (tc[c[(HEAP32[z >> 2] | 0) + 36 >> 2] & 127](z) | 0) == -1 : 0) {
					HEAP32[f >> 2] = 0;
					P = 0
				} else
					P = z;
			else
				P = 0;
			z = (P | 0) == 0;
			do
				if (C) {
					if ((HEAP32[C + 12 >> 2] | 0) != (HEAP32[C + 16 >> 2] | 0)) {
						if (!z)
							break;
						HEAP32[b >> 2] = P;
						bm(o);
						bm(n);
						i = e;
						return
					}
					if ((tc[c[(HEAP32[C >> 2] | 0) + 36 >> 2] & 127](C) | 0) == -1) {
						HEAP32[g >> 2] = 0;
						E = 50;
						break
					}
					if (z ^ (C | 0) == 0) {
						HEAP32[b >> 2] = P;
						bm(o);
						bm(n);
						i = e;
						return
					}
				} else
					E = 50;
			while (0);
			if ((E | 0) == 50 ? !z : 0) {
				HEAP32[b >> 2] = P;
				bm(o);
				bm(n);
				i = e;
				return
			}
			HEAP32[j >> 2] = HEAP32[j >> 2] | 2;
			HEAP32[b >> 2] = P;
			bm(o);
			bm(n);
			i = e;
			return
		}
		function tu(b, e, f, g, h, j, k) {
			b = b | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			k = k | 0;
			var l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0,
			O = 0,
			P = 0,
			Q = 0;
			e = i;
			i = i + 224 | 0;
			l = e + 198 | 0;
			m = e + 196 | 0;
			n = e + 184 | 0;
			o = e + 172 | 0;
			p = e + 168 | 0;
			q = e + 8 | 0;
			r = e + 4 | 0;
			s = e;
			t = wt(h) | 0;
			zo(n, h, l, m);
			HEAP32[o + 0 >> 2] = 0;
			HEAP32[o + 4 >> 2] = 0;
			HEAP32[o + 8 >> 2] = 0;
			em(o, 10, 0);
			if (!(HEAP8[o >> 0] & 1)) {
				h = o + 1 | 0;
				u = h;
				v = o + 8 | 0;
				w = h
			} else {
				h = o + 8 | 0;
				u = o + 1 | 0;
				v = h;
				w = HEAP32[h >> 2] | 0
			}
			HEAP32[p >> 2] = w;
			HEAP32[r >> 2] = q;
			HEAP32[s >> 2] = 0;
			h = o + 4 | 0;
			x = HEAP8[m >> 0] | 0;
			m = HEAP32[f >> 2] | 0;
			y = w;
			a: while (1) {
				if (m)
					if ((HEAP32[m + 12 >> 2] | 0) == (HEAP32[m + 16 >> 2] | 0) ? (tc[c[(HEAP32[m >> 2] | 0) + 36 >> 2] & 127](m) | 0) == -1 : 0) {
						HEAP32[f >> 2] = 0;
						z = 0
					} else
						z = m;
				else
					z = 0;
				w = (z | 0) == 0;
				A = HEAP32[g >> 2] | 0;
				do
					if (A) {
						if ((HEAP32[A + 12 >> 2] | 0) != (HEAP32[A + 16 >> 2] | 0))
							if (w) {
								B = A;
								break
							} else {
								C = A;
								D = y;
								break a
							}
						if ((tc[c[(HEAP32[A >> 2] | 0) + 36 >> 2] & 127](A) | 0) != -1)
							if (w) {
								B = A;
								break
							} else {
								C = A;
								D = y;
								break a
							}
						else {
							HEAP32[g >> 2] = 0;
							E = 14;
							break
						}
					} else
						E = 14;
				while (0);
				if ((E | 0) == 14) {
					E = 0;
					if (w) {
						C = 0;
						D = y;
						break
					} else
						B = 0
				}
				A = HEAP8[o >> 0] | 0;
				F = (A & 1) == 0;
				if (F)
					G = (A & 255) >>> 1;
				else
					G = HEAP32[h >> 2] | 0;
				if ((HEAP32[p >> 2] | 0) == (y + G | 0)) {
					if (F) {
						I = (A & 255) >>> 1;
						J = (A & 255) >>> 1
					} else {
						A = HEAP32[h >> 2] | 0;
						I = A;
						J = A
					}
					em(o, I << 1, 0);
					if (!(HEAP8[o >> 0] & 1))
						K = 10;
					else
						K = (HEAP32[o >> 2] & -2) + -1 | 0;
					em(o, K, 0);
					if (!(HEAP8[o >> 0] & 1))
						L = u;
					else
						L = HEAP32[v >> 2] | 0;
					HEAP32[p >> 2] = L + J;
					M = L
				} else
					M = y;
				A = z + 12 | 0;
				F = HEAP32[A >> 2] | 0;
				N = z + 16 | 0;
				if ((F | 0) == (HEAP32[N >> 2] | 0))
					O = tc[c[(HEAP32[z >> 2] | 0) + 36 >> 2] & 127](z) | 0;
				else
					O = HEAPU8[F >> 0] | 0;
				if (jo(O & 255, t, M, p, s, x, n, q, r, l) | 0) {
					C = B;
					D = M;
					break
				}
				F = HEAP32[A >> 2] | 0;
				if ((F | 0) == (HEAP32[N >> 2] | 0)) {
					tc[c[(HEAP32[z >> 2] | 0) + 40 >> 2] & 127](z) | 0;
					m = z;
					y = M;
					continue
				} else {
					HEAP32[A >> 2] = F + 1;
					m = z;
					y = M;
					continue
				}
			}
			M = HEAP8[n >> 0] | 0;
			if (!(M & 1))
				P = (M & 255) >>> 1;
			else
				P = HEAP32[n + 4 >> 2] | 0;
			if ((P | 0) != 0 ? (P = HEAP32[r >> 2] | 0, (P - q | 0) < 160) : 0) {
				M = HEAP32[s >> 2] | 0;
				HEAP32[r >> 2] = P + 4;
				HEAP32[P >> 2] = M
			}
			M = Rv(D, HEAP32[p >> 2] | 0, j, t) | 0;
			t = k;
			HEAP32[t >> 2] = M;
			HEAP32[t + 4 >> 2] = H;
			hr(n, q, HEAP32[r >> 2] | 0, j);
			if (z)
				if ((HEAP32[z + 12 >> 2] | 0) == (HEAP32[z + 16 >> 2] | 0) ? (tc[c[(HEAP32[z >> 2] | 0) + 36 >> 2] & 127](z) | 0) == -1 : 0) {
					HEAP32[f >> 2] = 0;
					Q = 0
				} else
					Q = z;
			else
				Q = 0;
			z = (Q | 0) == 0;
			do
				if (C) {
					if ((HEAP32[C + 12 >> 2] | 0) != (HEAP32[C + 16 >> 2] | 0)) {
						if (!z)
							break;
						HEAP32[b >> 2] = Q;
						bm(o);
						bm(n);
						i = e;
						return
					}
					if ((tc[c[(HEAP32[C >> 2] | 0) + 36 >> 2] & 127](C) | 0) == -1) {
						HEAP32[g >> 2] = 0;
						E = 50;
						break
					}
					if (z ^ (C | 0) == 0) {
						HEAP32[b >> 2] = Q;
						bm(o);
						bm(n);
						i = e;
						return
					}
				} else
					E = 50;
			while (0);
			if ((E | 0) == 50 ? !z : 0) {
				HEAP32[b >> 2] = Q;
				bm(o);
				bm(n);
				i = e;
				return
			}
			HEAP32[j >> 2] = HEAP32[j >> 2] | 2;
			HEAP32[b >> 2] = Q;
			bm(o);
			bm(n);
			i = e;
			return
		}
		function uu(b, e, f, h, j, k, l) {
			b = b | 0;
			e = e | 0;
			f = f | 0;
			h = h | 0;
			j = j | 0;
			k = k | 0;
			l = l | 0;
			var m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0,
			O = 0,
			P = 0,
			Q = 0,
			R = 0,
			S = 0;
			e = i;
			i = i + 240 | 0;
			m = e + 200 | 0;
			n = e + 199 | 0;
			o = e + 198 | 0;
			p = e + 184 | 0;
			q = e + 172 | 0;
			r = e + 168 | 0;
			s = e + 8 | 0;
			t = e + 4 | 0;
			u = e;
			v = e + 197 | 0;
			w = e + 196 | 0;
			Ao(p, j, m, n, o);
			HEAP32[q + 0 >> 2] = 0;
			HEAP32[q + 4 >> 2] = 0;
			HEAP32[q + 8 >> 2] = 0;
			em(q, 10, 0);
			if (!(HEAP8[q >> 0] & 1)) {
				j = q + 1 | 0;
				x = j;
				y = q + 8 | 0;
				z = j
			} else {
				j = q + 8 | 0;
				x = q + 1 | 0;
				y = j;
				z = HEAP32[j >> 2] | 0
			}
			HEAP32[r >> 2] = z;
			HEAP32[t >> 2] = s;
			HEAP32[u >> 2] = 0;
			HEAP8[v >> 0] = 1;
			HEAP8[w >> 0] = 69;
			j = q + 4 | 0;
			A = HEAP8[n >> 0] | 0;
			n = HEAP8[o >> 0] | 0;
			o = HEAP32[f >> 2] | 0;
			B = z;
			a: while (1) {
				if (o)
					if ((HEAP32[o + 12 >> 2] | 0) == (HEAP32[o + 16 >> 2] | 0) ? (tc[c[(HEAP32[o >> 2] | 0) + 36 >> 2] & 127](o) | 0) == -1 : 0) {
						HEAP32[f >> 2] = 0;
						C = 0
					} else
						C = o;
				else
					C = 0;
				z = (C | 0) == 0;
				D = HEAP32[h >> 2] | 0;
				do
					if (D) {
						if ((HEAP32[D + 12 >> 2] | 0) != (HEAP32[D + 16 >> 2] | 0))
							if (z) {
								E = D;
								break
							} else {
								F = D;
								G = B;
								break a
							}
						if ((tc[c[(HEAP32[D >> 2] | 0) + 36 >> 2] & 127](D) | 0) != -1)
							if (z) {
								E = D;
								break
							} else {
								F = D;
								G = B;
								break a
							}
						else {
							HEAP32[h >> 2] = 0;
							H = 14;
							break
						}
					} else
						H = 14;
				while (0);
				if ((H | 0) == 14) {
					H = 0;
					if (z) {
						F = 0;
						G = B;
						break
					} else
						E = 0
				}
				D = HEAP8[q >> 0] | 0;
				I = (D & 1) == 0;
				if (I)
					J = (D & 255) >>> 1;
				else
					J = HEAP32[j >> 2] | 0;
				if ((HEAP32[r >> 2] | 0) == (B + J | 0)) {
					if (I) {
						K = (D & 255) >>> 1;
						L = (D & 255) >>> 1
					} else {
						D = HEAP32[j >> 2] | 0;
						K = D;
						L = D
					}
					em(q, K << 1, 0);
					if (!(HEAP8[q >> 0] & 1))
						M = 10;
					else
						M = (HEAP32[q >> 2] & -2) + -1 | 0;
					em(q, M, 0);
					if (!(HEAP8[q >> 0] & 1))
						N = x;
					else
						N = HEAP32[y >> 2] | 0;
					HEAP32[r >> 2] = N + L;
					O = N
				} else
					O = B;
				D = C + 12 | 0;
				I = HEAP32[D >> 2] | 0;
				P = C + 16 | 0;
				if ((I | 0) == (HEAP32[P >> 2] | 0))
					Q = tc[c[(HEAP32[C >> 2] | 0) + 36 >> 2] & 127](C) | 0;
				else
					Q = HEAPU8[I >> 0] | 0;
				if (Bo(Q & 255, v, w, O, r, A, n, p, s, t, u, m) | 0) {
					F = E;
					G = O;
					break
				}
				I = HEAP32[D >> 2] | 0;
				if ((I | 0) == (HEAP32[P >> 2] | 0)) {
					tc[c[(HEAP32[C >> 2] | 0) + 40 >> 2] & 127](C) | 0;
					o = C;
					B = O;
					continue
				} else {
					HEAP32[D >> 2] = I + 1;
					o = C;
					B = O;
					continue
				}
			}
			O = HEAP8[p >> 0] | 0;
			if (!(O & 1))
				R = (O & 255) >>> 1;
			else
				R = HEAP32[p + 4 >> 2] | 0;
			if (!((R | 0) == 0 | (HEAP8[v >> 0] | 0) == 0) ? (v = HEAP32[t >> 2] | 0, (v - s | 0) < 160) : 0) {
				R = HEAP32[u >> 2] | 0;
				HEAP32[t >> 2] = v + 4;
				HEAP32[v >> 2] = R
			}
			HEAPF32[l >> 2] = +Sv(G, HEAP32[r >> 2] | 0, k);
			hr(p, s, HEAP32[t >> 2] | 0, k);
			if (C)
				if ((HEAP32[C + 12 >> 2] | 0) == (HEAP32[C + 16 >> 2] | 0) ? (tc[c[(HEAP32[C >> 2] | 0) + 36 >> 2] & 127](C) | 0) == -1 : 0) {
					HEAP32[f >> 2] = 0;
					S = 0
				} else
					S = C;
			else
				S = 0;
			C = (S | 0) == 0;
			do
				if (F) {
					if ((HEAP32[F + 12 >> 2] | 0) != (HEAP32[F + 16 >> 2] | 0)) {
						if (!C)
							break;
						HEAP32[b >> 2] = S;
						bm(q);
						bm(p);
						i = e;
						return
					}
					if ((tc[c[(HEAP32[F >> 2] | 0) + 36 >> 2] & 127](F) | 0) == -1) {
						HEAP32[h >> 2] = 0;
						H = 50;
						break
					}
					if (C ^ (F | 0) == 0) {
						HEAP32[b >> 2] = S;
						bm(q);
						bm(p);
						i = e;
						return
					}
				} else
					H = 50;
			while (0);
			if ((H | 0) == 50 ? !C : 0) {
				HEAP32[b >> 2] = S;
				bm(q);
				bm(p);
				i = e;
				return
			}
			HEAP32[k >> 2] = HEAP32[k >> 2] | 2;
			HEAP32[b >> 2] = S;
			bm(q);
			bm(p);
			i = e;
			return
		}
		function vu(b, e, f, g, j, k, l) {
			b = b | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			j = j | 0;
			k = k | 0;
			l = l | 0;
			var m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0,
			O = 0,
			P = 0,
			Q = 0,
			R = 0,
			S = 0;
			e = i;
			i = i + 240 | 0;
			m = e + 200 | 0;
			n = e + 199 | 0;
			o = e + 198 | 0;
			p = e + 184 | 0;
			q = e + 172 | 0;
			r = e + 168 | 0;
			s = e + 8 | 0;
			t = e + 4 | 0;
			u = e;
			v = e + 197 | 0;
			w = e + 196 | 0;
			Ao(p, j, m, n, o);
			HEAP32[q + 0 >> 2] = 0;
			HEAP32[q + 4 >> 2] = 0;
			HEAP32[q + 8 >> 2] = 0;
			em(q, 10, 0);
			if (!(HEAP8[q >> 0] & 1)) {
				j = q + 1 | 0;
				x = j;
				y = q + 8 | 0;
				z = j
			} else {
				j = q + 8 | 0;
				x = q + 1 | 0;
				y = j;
				z = HEAP32[j >> 2] | 0
			}
			HEAP32[r >> 2] = z;
			HEAP32[t >> 2] = s;
			HEAP32[u >> 2] = 0;
			HEAP8[v >> 0] = 1;
			HEAP8[w >> 0] = 69;
			j = q + 4 | 0;
			A = HEAP8[n >> 0] | 0;
			n = HEAP8[o >> 0] | 0;
			o = HEAP32[f >> 2] | 0;
			B = z;
			a: while (1) {
				if (o)
					if ((HEAP32[o + 12 >> 2] | 0) == (HEAP32[o + 16 >> 2] | 0) ? (tc[c[(HEAP32[o >> 2] | 0) + 36 >> 2] & 127](o) | 0) == -1 : 0) {
						HEAP32[f >> 2] = 0;
						C = 0
					} else
						C = o;
				else
					C = 0;
				z = (C | 0) == 0;
				D = HEAP32[g >> 2] | 0;
				do
					if (D) {
						if ((HEAP32[D + 12 >> 2] | 0) != (HEAP32[D + 16 >> 2] | 0))
							if (z) {
								E = D;
								break
							} else {
								F = D;
								G = B;
								break a
							}
						if ((tc[c[(HEAP32[D >> 2] | 0) + 36 >> 2] & 127](D) | 0) != -1)
							if (z) {
								E = D;
								break
							} else {
								F = D;
								G = B;
								break a
							}
						else {
							HEAP32[g >> 2] = 0;
							H = 14;
							break
						}
					} else
						H = 14;
				while (0);
				if ((H | 0) == 14) {
					H = 0;
					if (z) {
						F = 0;
						G = B;
						break
					} else
						E = 0
				}
				D = HEAP8[q >> 0] | 0;
				I = (D & 1) == 0;
				if (I)
					J = (D & 255) >>> 1;
				else
					J = HEAP32[j >> 2] | 0;
				if ((HEAP32[r >> 2] | 0) == (B + J | 0)) {
					if (I) {
						K = (D & 255) >>> 1;
						L = (D & 255) >>> 1
					} else {
						D = HEAP32[j >> 2] | 0;
						K = D;
						L = D
					}
					em(q, K << 1, 0);
					if (!(HEAP8[q >> 0] & 1))
						M = 10;
					else
						M = (HEAP32[q >> 2] & -2) + -1 | 0;
					em(q, M, 0);
					if (!(HEAP8[q >> 0] & 1))
						N = x;
					else
						N = HEAP32[y >> 2] | 0;
					HEAP32[r >> 2] = N + L;
					O = N
				} else
					O = B;
				D = C + 12 | 0;
				I = HEAP32[D >> 2] | 0;
				P = C + 16 | 0;
				if ((I | 0) == (HEAP32[P >> 2] | 0))
					Q = tc[c[(HEAP32[C >> 2] | 0) + 36 >> 2] & 127](C) | 0;
				else
					Q = HEAPU8[I >> 0] | 0;
				if (Bo(Q & 255, v, w, O, r, A, n, p, s, t, u, m) | 0) {
					F = E;
					G = O;
					break
				}
				I = HEAP32[D >> 2] | 0;
				if ((I | 0) == (HEAP32[P >> 2] | 0)) {
					tc[c[(HEAP32[C >> 2] | 0) + 40 >> 2] & 127](C) | 0;
					o = C;
					B = O;
					continue
				} else {
					HEAP32[D >> 2] = I + 1;
					o = C;
					B = O;
					continue
				}
			}
			O = HEAP8[p >> 0] | 0;
			if (!(O & 1))
				R = (O & 255) >>> 1;
			else
				R = HEAP32[p + 4 >> 2] | 0;
			if (!((R | 0) == 0 | (HEAP8[v >> 0] | 0) == 0) ? (v = HEAP32[t >> 2] | 0, (v - s | 0) < 160) : 0) {
				R = HEAP32[u >> 2] | 0;
				HEAP32[t >> 2] = v + 4;
				HEAP32[v >> 2] = R
			}
			HEAPF64[l >> 3] = +Tv(G, HEAP32[r >> 2] | 0, k);
			hr(p, s, HEAP32[t >> 2] | 0, k);
			if (C)
				if ((HEAP32[C + 12 >> 2] | 0) == (HEAP32[C + 16 >> 2] | 0) ? (tc[c[(HEAP32[C >> 2] | 0) + 36 >> 2] & 127](C) | 0) == -1 : 0) {
					HEAP32[f >> 2] = 0;
					S = 0
				} else
					S = C;
			else
				S = 0;
			C = (S | 0) == 0;
			do
				if (F) {
					if ((HEAP32[F + 12 >> 2] | 0) != (HEAP32[F + 16 >> 2] | 0)) {
						if (!C)
							break;
						HEAP32[b >> 2] = S;
						bm(q);
						bm(p);
						i = e;
						return
					}
					if ((tc[c[(HEAP32[F >> 2] | 0) + 36 >> 2] & 127](F) | 0) == -1) {
						HEAP32[g >> 2] = 0;
						H = 50;
						break
					}
					if (C ^ (F | 0) == 0) {
						HEAP32[b >> 2] = S;
						bm(q);
						bm(p);
						i = e;
						return
					}
				} else
					H = 50;
			while (0);
			if ((H | 0) == 50 ? !C : 0) {
				HEAP32[b >> 2] = S;
				bm(q);
				bm(p);
				i = e;
				return
			}
			HEAP32[k >> 2] = HEAP32[k >> 2] | 2;
			HEAP32[b >> 2] = S;
			bm(q);
			bm(p);
			i = e;
			return
		}
		function wu(b, e, f, g, j, k, l) {
			b = b | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			j = j | 0;
			k = k | 0;
			l = l | 0;
			var m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0,
			O = 0,
			P = 0,
			Q = 0,
			R = 0,
			S = 0;
			e = i;
			i = i + 240 | 0;
			m = e + 200 | 0;
			n = e + 199 | 0;
			o = e + 198 | 0;
			p = e + 184 | 0;
			q = e + 172 | 0;
			r = e + 168 | 0;
			s = e + 8 | 0;
			t = e + 4 | 0;
			u = e;
			v = e + 197 | 0;
			w = e + 196 | 0;
			Ao(p, j, m, n, o);
			HEAP32[q + 0 >> 2] = 0;
			HEAP32[q + 4 >> 2] = 0;
			HEAP32[q + 8 >> 2] = 0;
			em(q, 10, 0);
			if (!(HEAP8[q >> 0] & 1)) {
				j = q + 1 | 0;
				x = j;
				y = q + 8 | 0;
				z = j
			} else {
				j = q + 8 | 0;
				x = q + 1 | 0;
				y = j;
				z = HEAP32[j >> 2] | 0
			}
			HEAP32[r >> 2] = z;
			HEAP32[t >> 2] = s;
			HEAP32[u >> 2] = 0;
			HEAP8[v >> 0] = 1;
			HEAP8[w >> 0] = 69;
			j = q + 4 | 0;
			A = HEAP8[n >> 0] | 0;
			n = HEAP8[o >> 0] | 0;
			o = HEAP32[f >> 2] | 0;
			B = z;
			a: while (1) {
				if (o)
					if ((HEAP32[o + 12 >> 2] | 0) == (HEAP32[o + 16 >> 2] | 0) ? (tc[c[(HEAP32[o >> 2] | 0) + 36 >> 2] & 127](o) | 0) == -1 : 0) {
						HEAP32[f >> 2] = 0;
						C = 0
					} else
						C = o;
				else
					C = 0;
				z = (C | 0) == 0;
				D = HEAP32[g >> 2] | 0;
				do
					if (D) {
						if ((HEAP32[D + 12 >> 2] | 0) != (HEAP32[D + 16 >> 2] | 0))
							if (z) {
								E = D;
								break
							} else {
								F = D;
								G = B;
								break a
							}
						if ((tc[c[(HEAP32[D >> 2] | 0) + 36 >> 2] & 127](D) | 0) != -1)
							if (z) {
								E = D;
								break
							} else {
								F = D;
								G = B;
								break a
							}
						else {
							HEAP32[g >> 2] = 0;
							H = 14;
							break
						}
					} else
						H = 14;
				while (0);
				if ((H | 0) == 14) {
					H = 0;
					if (z) {
						F = 0;
						G = B;
						break
					} else
						E = 0
				}
				D = HEAP8[q >> 0] | 0;
				I = (D & 1) == 0;
				if (I)
					J = (D & 255) >>> 1;
				else
					J = HEAP32[j >> 2] | 0;
				if ((HEAP32[r >> 2] | 0) == (B + J | 0)) {
					if (I) {
						K = (D & 255) >>> 1;
						L = (D & 255) >>> 1
					} else {
						D = HEAP32[j >> 2] | 0;
						K = D;
						L = D
					}
					em(q, K << 1, 0);
					if (!(HEAP8[q >> 0] & 1))
						M = 10;
					else
						M = (HEAP32[q >> 2] & -2) + -1 | 0;
					em(q, M, 0);
					if (!(HEAP8[q >> 0] & 1))
						N = x;
					else
						N = HEAP32[y >> 2] | 0;
					HEAP32[r >> 2] = N + L;
					O = N
				} else
					O = B;
				D = C + 12 | 0;
				I = HEAP32[D >> 2] | 0;
				P = C + 16 | 0;
				if ((I | 0) == (HEAP32[P >> 2] | 0))
					Q = tc[c[(HEAP32[C >> 2] | 0) + 36 >> 2] & 127](C) | 0;
				else
					Q = HEAPU8[I >> 0] | 0;
				if (Bo(Q & 255, v, w, O, r, A, n, p, s, t, u, m) | 0) {
					F = E;
					G = O;
					break
				}
				I = HEAP32[D >> 2] | 0;
				if ((I | 0) == (HEAP32[P >> 2] | 0)) {
					tc[c[(HEAP32[C >> 2] | 0) + 40 >> 2] & 127](C) | 0;
					o = C;
					B = O;
					continue
				} else {
					HEAP32[D >> 2] = I + 1;
					o = C;
					B = O;
					continue
				}
			}
			O = HEAP8[p >> 0] | 0;
			if (!(O & 1))
				R = (O & 255) >>> 1;
			else
				R = HEAP32[p + 4 >> 2] | 0;
			if (!((R | 0) == 0 | (HEAP8[v >> 0] | 0) == 0) ? (v = HEAP32[t >> 2] | 0, (v - s | 0) < 160) : 0) {
				R = HEAP32[u >> 2] | 0;
				HEAP32[t >> 2] = v + 4;
				HEAP32[v >> 2] = R
			}
			HEAPF64[l >> 3] = +Uv(G, HEAP32[r >> 2] | 0, k);
			hr(p, s, HEAP32[t >> 2] | 0, k);
			if (C)
				if ((HEAP32[C + 12 >> 2] | 0) == (HEAP32[C + 16 >> 2] | 0) ? (tc[c[(HEAP32[C >> 2] | 0) + 36 >> 2] & 127](C) | 0) == -1 : 0) {
					HEAP32[f >> 2] = 0;
					S = 0
				} else
					S = C;
			else
				S = 0;
			C = (S | 0) == 0;
			do
				if (F) {
					if ((HEAP32[F + 12 >> 2] | 0) != (HEAP32[F + 16 >> 2] | 0)) {
						if (!C)
							break;
						HEAP32[b >> 2] = S;
						bm(q);
						bm(p);
						i = e;
						return
					}
					if ((tc[c[(HEAP32[F >> 2] | 0) + 36 >> 2] & 127](F) | 0) == -1) {
						HEAP32[g >> 2] = 0;
						H = 50;
						break
					}
					if (C ^ (F | 0) == 0) {
						HEAP32[b >> 2] = S;
						bm(q);
						bm(p);
						i = e;
						return
					}
				} else
					H = 50;
			while (0);
			if ((H | 0) == 50 ? !C : 0) {
				HEAP32[b >> 2] = S;
				bm(q);
				bm(p);
				i = e;
				return
			}
			HEAP32[k >> 2] = HEAP32[k >> 2] | 2;
			HEAP32[b >> 2] = S;
			bm(q);
			bm(p);
			i = e;
			return
		}
		function xu(a, b, d, e) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0;
			f = i;
			i = i + 16 | 0;
			g = f;
			HEAP32[g >> 2] = e;
			e = zb(b | 0) | 0;
			b = qw(a, d, g) | 0;
			if (!e) {
				i = f;
				return b | 0
			}
			zb(e | 0) | 0;
			i = f;
			return b | 0
		}
		function yu(b, d, e, f, g, h, j) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			var k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0,
			O = 0,
			P = 0,
			Q = 0,
			R = 0,
			S = 0,
			T = 0,
			U = 0,
			V = 0,
			W = 0,
			X = 0,
			Y = 0,
			Z = 0,
			_ = 0;
			k = i;
			i = i + 112 | 0;
			l = k;
			m = (f - e | 0) / 12 | 0;
			if (m >>> 0 > 100) {
				n = vx(m) | 0;
				if (!n)
					qx();
				else {
					o = n;
					p = n
				}
			} else {
				o = 0;
				p = l
			}
			l = (e | 0) == (f | 0);
			if (l) {
				q = 0;
				r = m
			} else {
				n = e;
				s = 0;
				t = m;
				m = p;
				while (1) {
					u = HEAP8[n >> 0] | 0;
					if (!(u & 1))
						v = (u & 255) >>> 1;
					else
						v = HEAP32[n + 4 >> 2] | 0;
					if (!v) {
						HEAP8[m >> 0] = 2;
						w = s + 1 | 0;
						x = t + -1 | 0
					} else {
						HEAP8[m >> 0] = 1;
						w = s;
						x = t
					}
					n = n + 12 | 0;
					if ((n | 0) == (f | 0)) {
						q = w;
						r = x;
						break
					} else {
						s = w;
						t = x;
						m = m + 1 | 0
					}
				}
			}
			m = 0;
			x = q;
			q = r;
			a: while (1) {
				r = HEAP32[b >> 2] | 0;
				do
					if (r) {
						t = HEAP32[r + 12 >> 2] | 0;
						if ((t | 0) == (HEAP32[r + 16 >> 2] | 0))
							y = tc[c[(HEAP32[r >> 2] | 0) + 36 >> 2] & 127](r) | 0;
						else
							y = HEAP32[t >> 2] | 0;
						if ((y | 0) == -1) {
							HEAP32[b >> 2] = 0;
							z = 1;
							break
						} else {
							z = (HEAP32[b >> 2] | 0) == 0;
							break
						}
					} else
						z = 1;
				while (0);
				r = HEAP32[d >> 2] | 0;
				if (r) {
					t = HEAP32[r + 12 >> 2] | 0;
					if ((t | 0) == (HEAP32[r + 16 >> 2] | 0))
						A = tc[c[(HEAP32[r >> 2] | 0) + 36 >> 2] & 127](r) | 0;
					else
						A = HEAP32[t >> 2] | 0;
					if ((A | 0) == -1) {
						HEAP32[d >> 2] = 0;
						B = 0;
						C = 1
					} else {
						B = r;
						C = 0
					}
				} else {
					B = 0;
					C = 1
				}
				D = HEAP32[b >> 2] | 0;
				if (!((z ^ C) & (q | 0) != 0))
					break;
				r = HEAP32[D + 12 >> 2] | 0;
				if ((r | 0) == (HEAP32[D + 16 >> 2] | 0))
					E = tc[c[(HEAP32[D >> 2] | 0) + 36 >> 2] & 127](D) | 0;
				else
					E = HEAP32[r >> 2] | 0;
				if (j)
					F = E;
				else
					F = Cc[c[(HEAP32[g >> 2] | 0) + 28 >> 2] & 31](g, E) | 0;
				r = m + 1 | 0;
				if (l) {
					m = r;
					continue
				} else {
					G = 0;
					H = e;
					I = x;
					J = q;
					K = p
				}
				while (1) {
					do
						if ((HEAP8[K >> 0] | 0) == 1) {
							if (!(HEAP8[H >> 0] & 1))
								L = H + 4 | 0;
							else
								L = HEAP32[H + 8 >> 2] | 0;
							t = HEAP32[L + (m << 2) >> 2] | 0;
							if (j)
								M = t;
							else
								M = Cc[c[(HEAP32[g >> 2] | 0) + 28 >> 2] & 31](g, t) | 0;
							if ((F | 0) != (M | 0)) {
								HEAP8[K >> 0] = 0;
								N = G;
								O = I;
								P = J + -1 | 0;
								break
							}
							t = HEAP8[H >> 0] | 0;
							if (!(t & 1))
								Q = (t & 255) >>> 1;
							else
								Q = HEAP32[H + 4 >> 2] | 0;
							if ((Q | 0) == (r | 0)) {
								HEAP8[K >> 0] = 2;
								N = 1;
								O = I + 1 | 0;
								P = J + -1 | 0
							} else {
								N = 1;
								O = I;
								P = J
							}
						} else {
							N = G;
							O = I;
							P = J
						}
					while (0);
					H = H + 12 | 0;
					if ((H | 0) == (f | 0))
						break;
					else {
						G = N;
						I = O;
						J = P;
						K = K + 1 | 0
					}
				}
				if (!N) {
					m = r;
					x = O;
					q = P;
					continue
				}
				t = HEAP32[b >> 2] | 0;
				w = t + 12 | 0;
				s = HEAP32[w >> 2] | 0;
				if ((s | 0) == (HEAP32[t + 16 >> 2] | 0))
					tc[c[(HEAP32[t >> 2] | 0) + 40 >> 2] & 127](t) | 0;
				else
					HEAP32[w >> 2] = s + 4;
				if ((O + P | 0) >>> 0 < 2) {
					m = r;
					x = O;
					q = P;
					continue
				} else {
					R = e;
					S = O;
					T = p
				}
				while (1) {
					if ((HEAP8[T >> 0] | 0) == 2) {
						s = HEAP8[R >> 0] | 0;
						if (!(s & 1))
							U = (s & 255) >>> 1;
						else
							U = HEAP32[R + 4 >> 2] | 0;
						if ((U | 0) != (r | 0)) {
							HEAP8[T >> 0] = 0;
							V = S + -1 | 0
						} else
							V = S
					} else
						V = S;
					s = R + 12 | 0;
					if ((s | 0) == (f | 0)) {
						m = r;
						x = V;
						q = P;
						continue a
					} else {
						R = s;
						S = V;
						T = T + 1 | 0
					}
				}
			}
			do
				if (D) {
					T = HEAP32[D + 12 >> 2] | 0;
					if ((T | 0) == (HEAP32[D + 16 >> 2] | 0))
						W = tc[c[(HEAP32[D >> 2] | 0) + 36 >> 2] & 127](D) | 0;
					else
						W = HEAP32[T >> 2] | 0;
					if ((W | 0) == -1) {
						HEAP32[b >> 2] = 0;
						X = 1;
						break
					} else {
						X = (HEAP32[b >> 2] | 0) == 0;
						break
					}
				} else
					X = 1;
			while (0);
			do
				if (B) {
					b = HEAP32[B + 12 >> 2] | 0;
					if ((b | 0) == (HEAP32[B + 16 >> 2] | 0))
						Y = tc[c[(HEAP32[B >> 2] | 0) + 36 >> 2] & 127](B) | 0;
					else
						Y = HEAP32[b >> 2] | 0;
					if ((Y | 0) != -1)
						if (X)
							break;
						else {
							Z = 74;
							break
						}
					else {
						HEAP32[d >> 2] = 0;
						Z = 72;
						break
					}
				} else
					Z = 72;
			while (0);
			if ((Z | 0) == 72 ? X : 0)
				Z = 74;
			if ((Z | 0) == 74)
				HEAP32[h >> 2] = HEAP32[h >> 2] | 2;
			b: do
				if (l)
					Z = 78;
				else {
					X = e;
					d = p;
					while (1) {
						if ((HEAP8[d >> 0] | 0) == 2) {
							_ = X;
							break b
						}
						X = X + 12 | 0;
						if ((X | 0) == (f | 0)) {
							Z = 78;
							break
						} else
							d = d + 1 | 0
					}
				}
			while (0);
			if ((Z | 0) == 78) {
				HEAP32[h >> 2] = HEAP32[h >> 2] | 4;
				_ = f
			}
			if (!o) {
				i = k;
				return _ | 0
			}
			wx(o);
			i = k;
			return _ | 0
		}
		function zu(b, d, e, f, g, h, j) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			var k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0,
			O = 0,
			P = 0,
			Q = 0,
			R = 0,
			S = 0,
			T = 0;
			d = i;
			i = i + 304 | 0;
			k = d + 200 | 0;
			l = d + 196 | 0;
			m = d + 184 | 0;
			n = d + 172 | 0;
			o = d + 168 | 0;
			p = d + 8 | 0;
			q = d + 4 | 0;
			r = d;
			s = wt(g) | 0;
			Co(m, g, k, l);
			HEAP32[n + 0 >> 2] = 0;
			HEAP32[n + 4 >> 2] = 0;
			HEAP32[n + 8 >> 2] = 0;
			em(n, 10, 0);
			if (!(HEAP8[n >> 0] & 1)) {
				g = n + 1 | 0;
				t = g;
				u = n + 8 | 0;
				v = g
			} else {
				g = n + 8 | 0;
				t = n + 1 | 0;
				u = g;
				v = HEAP32[g >> 2] | 0
			}
			HEAP32[o >> 2] = v;
			HEAP32[q >> 2] = p;
			HEAP32[r >> 2] = 0;
			g = n + 4 | 0;
			w = HEAP32[l >> 2] | 0;
			l = HEAP32[e >> 2] | 0;
			x = v;
			a: while (1) {
				if (l) {
					v = HEAP32[l + 12 >> 2] | 0;
					if ((v | 0) == (HEAP32[l + 16 >> 2] | 0))
						y = tc[c[(HEAP32[l >> 2] | 0) + 36 >> 2] & 127](l) | 0;
					else
						y = HEAP32[v >> 2] | 0;
					if ((y | 0) == -1) {
						HEAP32[e >> 2] = 0;
						z = 1;
						A = 0
					} else {
						z = 0;
						A = l
					}
				} else {
					z = 1;
					A = 0
				}
				v = HEAP32[f >> 2] | 0;
				do
					if (v) {
						B = HEAP32[v + 12 >> 2] | 0;
						if ((B | 0) == (HEAP32[v + 16 >> 2] | 0))
							C = tc[c[(HEAP32[v >> 2] | 0) + 36 >> 2] & 127](v) | 0;
						else
							C = HEAP32[B >> 2] | 0;
						if ((C | 0) != -1)
							if (z) {
								D = v;
								break
							} else {
								E = v;
								F = x;
								break a
							}
						else {
							HEAP32[f >> 2] = 0;
							G = 17;
							break
						}
					} else
						G = 17;
				while (0);
				if ((G | 0) == 17) {
					G = 0;
					if (z) {
						E = 0;
						F = x;
						break
					} else
						D = 0
				}
				v = HEAP8[n >> 0] | 0;
				B = (v & 1) == 0;
				if (B)
					H = (v & 255) >>> 1;
				else
					H = HEAP32[g >> 2] | 0;
				if ((HEAP32[o >> 2] | 0) == (x + H | 0)) {
					if (B) {
						I = (v & 255) >>> 1;
						J = (v & 255) >>> 1
					} else {
						v = HEAP32[g >> 2] | 0;
						I = v;
						J = v
					}
					em(n, I << 1, 0);
					if (!(HEAP8[n >> 0] & 1))
						K = 10;
					else
						K = (HEAP32[n >> 2] & -2) + -1 | 0;
					em(n, K, 0);
					if (!(HEAP8[n >> 0] & 1))
						L = t;
					else
						L = HEAP32[u >> 2] | 0;
					HEAP32[o >> 2] = L + J;
					M = L
				} else
					M = x;
				v = A + 12 | 0;
				B = HEAP32[v >> 2] | 0;
				N = A + 16 | 0;
				if ((B | 0) == (HEAP32[N >> 2] | 0))
					O = tc[c[(HEAP32[A >> 2] | 0) + 36 >> 2] & 127](A) | 0;
				else
					O = HEAP32[B >> 2] | 0;
				if (yo(O, s, M, o, r, w, m, p, q, k) | 0) {
					E = D;
					F = M;
					break
				}
				B = HEAP32[v >> 2] | 0;
				if ((B | 0) == (HEAP32[N >> 2] | 0)) {
					tc[c[(HEAP32[A >> 2] | 0) + 40 >> 2] & 127](A) | 0;
					l = A;
					x = M;
					continue
				} else {
					HEAP32[v >> 2] = B + 4;
					l = A;
					x = M;
					continue
				}
			}
			M = HEAP8[m >> 0] | 0;
			if (!(M & 1))
				P = (M & 255) >>> 1;
			else
				P = HEAP32[m + 4 >> 2] | 0;
			if ((P | 0) != 0 ? (P = HEAP32[q >> 2] | 0, (P - p | 0) < 160) : 0) {
				M = HEAP32[r >> 2] | 0;
				HEAP32[q >> 2] = P + 4;
				HEAP32[P >> 2] = M
			}
			HEAP32[j >> 2] = Mv(F, HEAP32[o >> 2] | 0, h, s) | 0;
			hr(m, p, HEAP32[q >> 2] | 0, h);
			if (A) {
				q = HEAP32[A + 12 >> 2] | 0;
				if ((q | 0) == (HEAP32[A + 16 >> 2] | 0))
					Q = tc[c[(HEAP32[A >> 2] | 0) + 36 >> 2] & 127](A) | 0;
				else
					Q = HEAP32[q >> 2] | 0;
				if ((Q | 0) == -1) {
					HEAP32[e >> 2] = 0;
					R = 0;
					S = 1
				} else {
					R = A;
					S = 0
				}
			} else {
				R = 0;
				S = 1
			}
			do
				if (E) {
					A = HEAP32[E + 12 >> 2] | 0;
					if ((A | 0) == (HEAP32[E + 16 >> 2] | 0))
						T = tc[c[(HEAP32[E >> 2] | 0) + 36 >> 2] & 127](E) | 0;
					else
						T = HEAP32[A >> 2] | 0;
					if ((T | 0) == -1) {
						HEAP32[f >> 2] = 0;
						G = 56;
						break
					}
					if (S) {
						HEAP32[b >> 2] = R;
						bm(n);
						bm(m);
						i = d;
						return
					}
				} else
					G = 56;
			while (0);
			if ((G | 0) == 56 ? !S : 0) {
				HEAP32[b >> 2] = R;
				bm(n);
				bm(m);
				i = d;
				return
			}
			HEAP32[h >> 2] = HEAP32[h >> 2] | 2;
			HEAP32[b >> 2] = R;
			bm(n);
			bm(m);
			i = d;
			return
		}
		function Au(b, d, e, f, g, h, j) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			var k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0,
			O = 0,
			P = 0,
			Q = 0,
			R = 0,
			S = 0,
			T = 0,
			U = 0;
			d = i;
			i = i + 304 | 0;
			k = d + 200 | 0;
			l = d + 196 | 0;
			m = d + 184 | 0;
			n = d + 172 | 0;
			o = d + 168 | 0;
			p = d + 8 | 0;
			q = d + 4 | 0;
			r = d;
			s = wt(g) | 0;
			Co(m, g, k, l);
			HEAP32[n + 0 >> 2] = 0;
			HEAP32[n + 4 >> 2] = 0;
			HEAP32[n + 8 >> 2] = 0;
			em(n, 10, 0);
			if (!(HEAP8[n >> 0] & 1)) {
				g = n + 1 | 0;
				t = g;
				u = n + 8 | 0;
				v = g
			} else {
				g = n + 8 | 0;
				t = n + 1 | 0;
				u = g;
				v = HEAP32[g >> 2] | 0
			}
			HEAP32[o >> 2] = v;
			HEAP32[q >> 2] = p;
			HEAP32[r >> 2] = 0;
			g = n + 4 | 0;
			w = HEAP32[l >> 2] | 0;
			l = HEAP32[e >> 2] | 0;
			x = v;
			a: while (1) {
				if (l) {
					v = HEAP32[l + 12 >> 2] | 0;
					if ((v | 0) == (HEAP32[l + 16 >> 2] | 0))
						y = tc[c[(HEAP32[l >> 2] | 0) + 36 >> 2] & 127](l) | 0;
					else
						y = HEAP32[v >> 2] | 0;
					if ((y | 0) == -1) {
						HEAP32[e >> 2] = 0;
						z = 1;
						A = 0
					} else {
						z = 0;
						A = l
					}
				} else {
					z = 1;
					A = 0
				}
				v = HEAP32[f >> 2] | 0;
				do
					if (v) {
						B = HEAP32[v + 12 >> 2] | 0;
						if ((B | 0) == (HEAP32[v + 16 >> 2] | 0))
							C = tc[c[(HEAP32[v >> 2] | 0) + 36 >> 2] & 127](v) | 0;
						else
							C = HEAP32[B >> 2] | 0;
						if ((C | 0) != -1)
							if (z) {
								D = v;
								break
							} else {
								E = v;
								F = x;
								break a
							}
						else {
							HEAP32[f >> 2] = 0;
							G = 17;
							break
						}
					} else
						G = 17;
				while (0);
				if ((G | 0) == 17) {
					G = 0;
					if (z) {
						E = 0;
						F = x;
						break
					} else
						D = 0
				}
				v = HEAP8[n >> 0] | 0;
				B = (v & 1) == 0;
				if (B)
					I = (v & 255) >>> 1;
				else
					I = HEAP32[g >> 2] | 0;
				if ((HEAP32[o >> 2] | 0) == (x + I | 0)) {
					if (B) {
						J = (v & 255) >>> 1;
						K = (v & 255) >>> 1
					} else {
						v = HEAP32[g >> 2] | 0;
						J = v;
						K = v
					}
					em(n, J << 1, 0);
					if (!(HEAP8[n >> 0] & 1))
						L = 10;
					else
						L = (HEAP32[n >> 2] & -2) + -1 | 0;
					em(n, L, 0);
					if (!(HEAP8[n >> 0] & 1))
						M = t;
					else
						M = HEAP32[u >> 2] | 0;
					HEAP32[o >> 2] = M + K;
					N = M
				} else
					N = x;
				v = A + 12 | 0;
				B = HEAP32[v >> 2] | 0;
				O = A + 16 | 0;
				if ((B | 0) == (HEAP32[O >> 2] | 0))
					P = tc[c[(HEAP32[A >> 2] | 0) + 36 >> 2] & 127](A) | 0;
				else
					P = HEAP32[B >> 2] | 0;
				if (yo(P, s, N, o, r, w, m, p, q, k) | 0) {
					E = D;
					F = N;
					break
				}
				B = HEAP32[v >> 2] | 0;
				if ((B | 0) == (HEAP32[O >> 2] | 0)) {
					tc[c[(HEAP32[A >> 2] | 0) + 40 >> 2] & 127](A) | 0;
					l = A;
					x = N;
					continue
				} else {
					HEAP32[v >> 2] = B + 4;
					l = A;
					x = N;
					continue
				}
			}
			N = HEAP8[m >> 0] | 0;
			if (!(N & 1))
				Q = (N & 255) >>> 1;
			else
				Q = HEAP32[m + 4 >> 2] | 0;
			if ((Q | 0) != 0 ? (Q = HEAP32[q >> 2] | 0, (Q - p | 0) < 160) : 0) {
				N = HEAP32[r >> 2] | 0;
				HEAP32[q >> 2] = Q + 4;
				HEAP32[Q >> 2] = N
			}
			N = Nv(F, HEAP32[o >> 2] | 0, h, s) | 0;
			s = j;
			HEAP32[s >> 2] = N;
			HEAP32[s + 4 >> 2] = H;
			hr(m, p, HEAP32[q >> 2] | 0, h);
			if (A) {
				q = HEAP32[A + 12 >> 2] | 0;
				if ((q | 0) == (HEAP32[A + 16 >> 2] | 0))
					R = tc[c[(HEAP32[A >> 2] | 0) + 36 >> 2] & 127](A) | 0;
				else
					R = HEAP32[q >> 2] | 0;
				if ((R | 0) == -1) {
					HEAP32[e >> 2] = 0;
					S = 0;
					T = 1
				} else {
					S = A;
					T = 0
				}
			} else {
				S = 0;
				T = 1
			}
			do
				if (E) {
					A = HEAP32[E + 12 >> 2] | 0;
					if ((A | 0) == (HEAP32[E + 16 >> 2] | 0))
						U = tc[c[(HEAP32[E >> 2] | 0) + 36 >> 2] & 127](E) | 0;
					else
						U = HEAP32[A >> 2] | 0;
					if ((U | 0) == -1) {
						HEAP32[f >> 2] = 0;
						G = 56;
						break
					}
					if (T) {
						HEAP32[b >> 2] = S;
						bm(n);
						bm(m);
						i = d;
						return
					}
				} else
					G = 56;
			while (0);
			if ((G | 0) == 56 ? !T : 0) {
				HEAP32[b >> 2] = S;
				bm(n);
				bm(m);
				i = d;
				return
			}
			HEAP32[h >> 2] = HEAP32[h >> 2] | 2;
			HEAP32[b >> 2] = S;
			bm(n);
			bm(m);
			i = d;
			return
		}
		function Bu(d, e, f, g, h, j, k) {
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			k = k | 0;
			var l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0,
			O = 0,
			P = 0,
			Q = 0,
			R = 0,
			S = 0,
			T = 0,
			U = 0;
			e = i;
			i = i + 304 | 0;
			l = e + 200 | 0;
			m = e + 196 | 0;
			n = e + 184 | 0;
			o = e + 172 | 0;
			p = e + 168 | 0;
			q = e + 8 | 0;
			r = e + 4 | 0;
			s = e;
			t = wt(h) | 0;
			Co(n, h, l, m);
			HEAP32[o + 0 >> 2] = 0;
			HEAP32[o + 4 >> 2] = 0;
			HEAP32[o + 8 >> 2] = 0;
			em(o, 10, 0);
			if (!(HEAP8[o >> 0] & 1)) {
				h = o + 1 | 0;
				u = h;
				v = o + 8 | 0;
				w = h
			} else {
				h = o + 8 | 0;
				u = o + 1 | 0;
				v = h;
				w = HEAP32[h >> 2] | 0
			}
			HEAP32[p >> 2] = w;
			HEAP32[r >> 2] = q;
			HEAP32[s >> 2] = 0;
			h = o + 4 | 0;
			x = HEAP32[m >> 2] | 0;
			m = HEAP32[f >> 2] | 0;
			y = w;
			a: while (1) {
				if (m) {
					w = HEAP32[m + 12 >> 2] | 0;
					if ((w | 0) == (HEAP32[m + 16 >> 2] | 0))
						z = tc[c[(HEAP32[m >> 2] | 0) + 36 >> 2] & 127](m) | 0;
					else
						z = HEAP32[w >> 2] | 0;
					if ((z | 0) == -1) {
						HEAP32[f >> 2] = 0;
						A = 1;
						B = 0
					} else {
						A = 0;
						B = m
					}
				} else {
					A = 1;
					B = 0
				}
				w = HEAP32[g >> 2] | 0;
				do
					if (w) {
						C = HEAP32[w + 12 >> 2] | 0;
						if ((C | 0) == (HEAP32[w + 16 >> 2] | 0))
							D = tc[c[(HEAP32[w >> 2] | 0) + 36 >> 2] & 127](w) | 0;
						else
							D = HEAP32[C >> 2] | 0;
						if ((D | 0) != -1)
							if (A) {
								E = w;
								break
							} else {
								F = w;
								G = y;
								break a
							}
						else {
							HEAP32[g >> 2] = 0;
							H = 17;
							break
						}
					} else
						H = 17;
				while (0);
				if ((H | 0) == 17) {
					H = 0;
					if (A) {
						F = 0;
						G = y;
						break
					} else
						E = 0
				}
				w = HEAP8[o >> 0] | 0;
				C = (w & 1) == 0;
				if (C)
					I = (w & 255) >>> 1;
				else
					I = HEAP32[h >> 2] | 0;
				if ((HEAP32[p >> 2] | 0) == (y + I | 0)) {
					if (C) {
						J = (w & 255) >>> 1;
						K = (w & 255) >>> 1
					} else {
						w = HEAP32[h >> 2] | 0;
						J = w;
						K = w
					}
					em(o, J << 1, 0);
					if (!(HEAP8[o >> 0] & 1))
						L = 10;
					else
						L = (HEAP32[o >> 2] & -2) + -1 | 0;
					em(o, L, 0);
					if (!(HEAP8[o >> 0] & 1))
						M = u;
					else
						M = HEAP32[v >> 2] | 0;
					HEAP32[p >> 2] = M + K;
					N = M
				} else
					N = y;
				w = B + 12 | 0;
				C = HEAP32[w >> 2] | 0;
				O = B + 16 | 0;
				if ((C | 0) == (HEAP32[O >> 2] | 0))
					P = tc[c[(HEAP32[B >> 2] | 0) + 36 >> 2] & 127](B) | 0;
				else
					P = HEAP32[C >> 2] | 0;
				if (yo(P, t, N, p, s, x, n, q, r, l) | 0) {
					F = E;
					G = N;
					break
				}
				C = HEAP32[w >> 2] | 0;
				if ((C | 0) == (HEAP32[O >> 2] | 0)) {
					tc[c[(HEAP32[B >> 2] | 0) + 40 >> 2] & 127](B) | 0;
					m = B;
					y = N;
					continue
				} else {
					HEAP32[w >> 2] = C + 4;
					m = B;
					y = N;
					continue
				}
			}
			N = HEAP8[n >> 0] | 0;
			if (!(N & 1))
				Q = (N & 255) >>> 1;
			else
				Q = HEAP32[n + 4 >> 2] | 0;
			if ((Q | 0) != 0 ? (Q = HEAP32[r >> 2] | 0, (Q - q | 0) < 160) : 0) {
				N = HEAP32[s >> 2] | 0;
				HEAP32[r >> 2] = Q + 4;
				HEAP32[Q >> 2] = N
			}
			HEAP16[k >> 1] = Ov(G, HEAP32[p >> 2] | 0, j, t) | 0;
			hr(n, q, HEAP32[r >> 2] | 0, j);
			if (B) {
				r = HEAP32[B + 12 >> 2] | 0;
				if ((r | 0) == (HEAP32[B + 16 >> 2] | 0))
					R = tc[c[(HEAP32[B >> 2] | 0) + 36 >> 2] & 127](B) | 0;
				else
					R = HEAP32[r >> 2] | 0;
				if ((R | 0) == -1) {
					HEAP32[f >> 2] = 0;
					S = 0;
					T = 1
				} else {
					S = B;
					T = 0
				}
			} else {
				S = 0;
				T = 1
			}
			do
				if (F) {
					B = HEAP32[F + 12 >> 2] | 0;
					if ((B | 0) == (HEAP32[F + 16 >> 2] | 0))
						U = tc[c[(HEAP32[F >> 2] | 0) + 36 >> 2] & 127](F) | 0;
					else
						U = HEAP32[B >> 2] | 0;
					if ((U | 0) == -1) {
						HEAP32[g >> 2] = 0;
						H = 56;
						break
					}
					if (T) {
						HEAP32[d >> 2] = S;
						bm(o);
						bm(n);
						i = e;
						return
					}
				} else
					H = 56;
			while (0);
			if ((H | 0) == 56 ? !T : 0) {
				HEAP32[d >> 2] = S;
				bm(o);
				bm(n);
				i = e;
				return
			}
			HEAP32[j >> 2] = HEAP32[j >> 2] | 2;
			HEAP32[d >> 2] = S;
			bm(o);
			bm(n);
			i = e;
			return
		}
		function Cu(b, d, e, f, g, h, j) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			var k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0,
			O = 0,
			P = 0,
			Q = 0,
			R = 0,
			S = 0,
			T = 0;
			d = i;
			i = i + 304 | 0;
			k = d + 200 | 0;
			l = d + 196 | 0;
			m = d + 184 | 0;
			n = d + 172 | 0;
			o = d + 168 | 0;
			p = d + 8 | 0;
			q = d + 4 | 0;
			r = d;
			s = wt(g) | 0;
			Co(m, g, k, l);
			HEAP32[n + 0 >> 2] = 0;
			HEAP32[n + 4 >> 2] = 0;
			HEAP32[n + 8 >> 2] = 0;
			em(n, 10, 0);
			if (!(HEAP8[n >> 0] & 1)) {
				g = n + 1 | 0;
				t = g;
				u = n + 8 | 0;
				v = g
			} else {
				g = n + 8 | 0;
				t = n + 1 | 0;
				u = g;
				v = HEAP32[g >> 2] | 0
			}
			HEAP32[o >> 2] = v;
			HEAP32[q >> 2] = p;
			HEAP32[r >> 2] = 0;
			g = n + 4 | 0;
			w = HEAP32[l >> 2] | 0;
			l = HEAP32[e >> 2] | 0;
			x = v;
			a: while (1) {
				if (l) {
					v = HEAP32[l + 12 >> 2] | 0;
					if ((v | 0) == (HEAP32[l + 16 >> 2] | 0))
						y = tc[c[(HEAP32[l >> 2] | 0) + 36 >> 2] & 127](l) | 0;
					else
						y = HEAP32[v >> 2] | 0;
					if ((y | 0) == -1) {
						HEAP32[e >> 2] = 0;
						z = 1;
						A = 0
					} else {
						z = 0;
						A = l
					}
				} else {
					z = 1;
					A = 0
				}
				v = HEAP32[f >> 2] | 0;
				do
					if (v) {
						B = HEAP32[v + 12 >> 2] | 0;
						if ((B | 0) == (HEAP32[v + 16 >> 2] | 0))
							C = tc[c[(HEAP32[v >> 2] | 0) + 36 >> 2] & 127](v) | 0;
						else
							C = HEAP32[B >> 2] | 0;
						if ((C | 0) != -1)
							if (z) {
								D = v;
								break
							} else {
								E = v;
								F = x;
								break a
							}
						else {
							HEAP32[f >> 2] = 0;
							G = 17;
							break
						}
					} else
						G = 17;
				while (0);
				if ((G | 0) == 17) {
					G = 0;
					if (z) {
						E = 0;
						F = x;
						break
					} else
						D = 0
				}
				v = HEAP8[n >> 0] | 0;
				B = (v & 1) == 0;
				if (B)
					H = (v & 255) >>> 1;
				else
					H = HEAP32[g >> 2] | 0;
				if ((HEAP32[o >> 2] | 0) == (x + H | 0)) {
					if (B) {
						I = (v & 255) >>> 1;
						J = (v & 255) >>> 1
					} else {
						v = HEAP32[g >> 2] | 0;
						I = v;
						J = v
					}
					em(n, I << 1, 0);
					if (!(HEAP8[n >> 0] & 1))
						K = 10;
					else
						K = (HEAP32[n >> 2] & -2) + -1 | 0;
					em(n, K, 0);
					if (!(HEAP8[n >> 0] & 1))
						L = t;
					else
						L = HEAP32[u >> 2] | 0;
					HEAP32[o >> 2] = L + J;
					M = L
				} else
					M = x;
				v = A + 12 | 0;
				B = HEAP32[v >> 2] | 0;
				N = A + 16 | 0;
				if ((B | 0) == (HEAP32[N >> 2] | 0))
					O = tc[c[(HEAP32[A >> 2] | 0) + 36 >> 2] & 127](A) | 0;
				else
					O = HEAP32[B >> 2] | 0;
				if (yo(O, s, M, o, r, w, m, p, q, k) | 0) {
					E = D;
					F = M;
					break
				}
				B = HEAP32[v >> 2] | 0;
				if ((B | 0) == (HEAP32[N >> 2] | 0)) {
					tc[c[(HEAP32[A >> 2] | 0) + 40 >> 2] & 127](A) | 0;
					l = A;
					x = M;
					continue
				} else {
					HEAP32[v >> 2] = B + 4;
					l = A;
					x = M;
					continue
				}
			}
			M = HEAP8[m >> 0] | 0;
			if (!(M & 1))
				P = (M & 255) >>> 1;
			else
				P = HEAP32[m + 4 >> 2] | 0;
			if ((P | 0) != 0 ? (P = HEAP32[q >> 2] | 0, (P - p | 0) < 160) : 0) {
				M = HEAP32[r >> 2] | 0;
				HEAP32[q >> 2] = P + 4;
				HEAP32[P >> 2] = M
			}
			HEAP32[j >> 2] = Pv(F, HEAP32[o >> 2] | 0, h, s) | 0;
			hr(m, p, HEAP32[q >> 2] | 0, h);
			if (A) {
				q = HEAP32[A + 12 >> 2] | 0;
				if ((q | 0) == (HEAP32[A + 16 >> 2] | 0))
					Q = tc[c[(HEAP32[A >> 2] | 0) + 36 >> 2] & 127](A) | 0;
				else
					Q = HEAP32[q >> 2] | 0;
				if ((Q | 0) == -1) {
					HEAP32[e >> 2] = 0;
					R = 0;
					S = 1
				} else {
					R = A;
					S = 0
				}
			} else {
				R = 0;
				S = 1
			}
			do
				if (E) {
					A = HEAP32[E + 12 >> 2] | 0;
					if ((A | 0) == (HEAP32[E + 16 >> 2] | 0))
						T = tc[c[(HEAP32[E >> 2] | 0) + 36 >> 2] & 127](E) | 0;
					else
						T = HEAP32[A >> 2] | 0;
					if ((T | 0) == -1) {
						HEAP32[f >> 2] = 0;
						G = 56;
						break
					}
					if (S) {
						HEAP32[b >> 2] = R;
						bm(n);
						bm(m);
						i = d;
						return
					}
				} else
					G = 56;
			while (0);
			if ((G | 0) == 56 ? !S : 0) {
				HEAP32[b >> 2] = R;
				bm(n);
				bm(m);
				i = d;
				return
			}
			HEAP32[h >> 2] = HEAP32[h >> 2] | 2;
			HEAP32[b >> 2] = R;
			bm(n);
			bm(m);
			i = d;
			return
		}
		function Du(b, d, e, f, g, h, j) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			var k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0,
			O = 0,
			P = 0,
			Q = 0,
			R = 0,
			S = 0,
			T = 0;
			d = i;
			i = i + 304 | 0;
			k = d + 200 | 0;
			l = d + 196 | 0;
			m = d + 184 | 0;
			n = d + 172 | 0;
			o = d + 168 | 0;
			p = d + 8 | 0;
			q = d + 4 | 0;
			r = d;
			s = wt(g) | 0;
			Co(m, g, k, l);
			HEAP32[n + 0 >> 2] = 0;
			HEAP32[n + 4 >> 2] = 0;
			HEAP32[n + 8 >> 2] = 0;
			em(n, 10, 0);
			if (!(HEAP8[n >> 0] & 1)) {
				g = n + 1 | 0;
				t = g;
				u = n + 8 | 0;
				v = g
			} else {
				g = n + 8 | 0;
				t = n + 1 | 0;
				u = g;
				v = HEAP32[g >> 2] | 0
			}
			HEAP32[o >> 2] = v;
			HEAP32[q >> 2] = p;
			HEAP32[r >> 2] = 0;
			g = n + 4 | 0;
			w = HEAP32[l >> 2] | 0;
			l = HEAP32[e >> 2] | 0;
			x = v;
			a: while (1) {
				if (l) {
					v = HEAP32[l + 12 >> 2] | 0;
					if ((v | 0) == (HEAP32[l + 16 >> 2] | 0))
						y = tc[c[(HEAP32[l >> 2] | 0) + 36 >> 2] & 127](l) | 0;
					else
						y = HEAP32[v >> 2] | 0;
					if ((y | 0) == -1) {
						HEAP32[e >> 2] = 0;
						z = 1;
						A = 0
					} else {
						z = 0;
						A = l
					}
				} else {
					z = 1;
					A = 0
				}
				v = HEAP32[f >> 2] | 0;
				do
					if (v) {
						B = HEAP32[v + 12 >> 2] | 0;
						if ((B | 0) == (HEAP32[v + 16 >> 2] | 0))
							C = tc[c[(HEAP32[v >> 2] | 0) + 36 >> 2] & 127](v) | 0;
						else
							C = HEAP32[B >> 2] | 0;
						if ((C | 0) != -1)
							if (z) {
								D = v;
								break
							} else {
								E = v;
								F = x;
								break a
							}
						else {
							HEAP32[f >> 2] = 0;
							G = 17;
							break
						}
					} else
						G = 17;
				while (0);
				if ((G | 0) == 17) {
					G = 0;
					if (z) {
						E = 0;
						F = x;
						break
					} else
						D = 0
				}
				v = HEAP8[n >> 0] | 0;
				B = (v & 1) == 0;
				if (B)
					H = (v & 255) >>> 1;
				else
					H = HEAP32[g >> 2] | 0;
				if ((HEAP32[o >> 2] | 0) == (x + H | 0)) {
					if (B) {
						I = (v & 255) >>> 1;
						J = (v & 255) >>> 1
					} else {
						v = HEAP32[g >> 2] | 0;
						I = v;
						J = v
					}
					em(n, I << 1, 0);
					if (!(HEAP8[n >> 0] & 1))
						K = 10;
					else
						K = (HEAP32[n >> 2] & -2) + -1 | 0;
					em(n, K, 0);
					if (!(HEAP8[n >> 0] & 1))
						L = t;
					else
						L = HEAP32[u >> 2] | 0;
					HEAP32[o >> 2] = L + J;
					M = L
				} else
					M = x;
				v = A + 12 | 0;
				B = HEAP32[v >> 2] | 0;
				N = A + 16 | 0;
				if ((B | 0) == (HEAP32[N >> 2] | 0))
					O = tc[c[(HEAP32[A >> 2] | 0) + 36 >> 2] & 127](A) | 0;
				else
					O = HEAP32[B >> 2] | 0;
				if (yo(O, s, M, o, r, w, m, p, q, k) | 0) {
					E = D;
					F = M;
					break
				}
				B = HEAP32[v >> 2] | 0;
				if ((B | 0) == (HEAP32[N >> 2] | 0)) {
					tc[c[(HEAP32[A >> 2] | 0) + 40 >> 2] & 127](A) | 0;
					l = A;
					x = M;
					continue
				} else {
					HEAP32[v >> 2] = B + 4;
					l = A;
					x = M;
					continue
				}
			}
			M = HEAP8[m >> 0] | 0;
			if (!(M & 1))
				P = (M & 255) >>> 1;
			else
				P = HEAP32[m + 4 >> 2] | 0;
			if ((P | 0) != 0 ? (P = HEAP32[q >> 2] | 0, (P - p | 0) < 160) : 0) {
				M = HEAP32[r >> 2] | 0;
				HEAP32[q >> 2] = P + 4;
				HEAP32[P >> 2] = M
			}
			HEAP32[j >> 2] = Qv(F, HEAP32[o >> 2] | 0, h, s) | 0;
			hr(m, p, HEAP32[q >> 2] | 0, h);
			if (A) {
				q = HEAP32[A + 12 >> 2] | 0;
				if ((q | 0) == (HEAP32[A + 16 >> 2] | 0))
					Q = tc[c[(HEAP32[A >> 2] | 0) + 36 >> 2] & 127](A) | 0;
				else
					Q = HEAP32[q >> 2] | 0;
				if ((Q | 0) == -1) {
					HEAP32[e >> 2] = 0;
					R = 0;
					S = 1
				} else {
					R = A;
					S = 0
				}
			} else {
				R = 0;
				S = 1
			}
			do
				if (E) {
					A = HEAP32[E + 12 >> 2] | 0;
					if ((A | 0) == (HEAP32[E + 16 >> 2] | 0))
						T = tc[c[(HEAP32[E >> 2] | 0) + 36 >> 2] & 127](E) | 0;
					else
						T = HEAP32[A >> 2] | 0;
					if ((T | 0) == -1) {
						HEAP32[f >> 2] = 0;
						G = 56;
						break
					}
					if (S) {
						HEAP32[b >> 2] = R;
						bm(n);
						bm(m);
						i = d;
						return
					}
				} else
					G = 56;
			while (0);
			if ((G | 0) == 56 ? !S : 0) {
				HEAP32[b >> 2] = R;
				bm(n);
				bm(m);
				i = d;
				return
			}
			HEAP32[h >> 2] = HEAP32[h >> 2] | 2;
			HEAP32[b >> 2] = R;
			bm(n);
			bm(m);
			i = d;
			return
		}
		function Eu(b, d, e, f, g, h, j) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			var k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0,
			O = 0,
			P = 0,
			Q = 0,
			R = 0,
			S = 0,
			T = 0,
			U = 0;
			d = i;
			i = i + 304 | 0;
			k = d + 200 | 0;
			l = d + 196 | 0;
			m = d + 184 | 0;
			n = d + 172 | 0;
			o = d + 168 | 0;
			p = d + 8 | 0;
			q = d + 4 | 0;
			r = d;
			s = wt(g) | 0;
			Co(m, g, k, l);
			HEAP32[n + 0 >> 2] = 0;
			HEAP32[n + 4 >> 2] = 0;
			HEAP32[n + 8 >> 2] = 0;
			em(n, 10, 0);
			if (!(HEAP8[n >> 0] & 1)) {
				g = n + 1 | 0;
				t = g;
				u = n + 8 | 0;
				v = g
			} else {
				g = n + 8 | 0;
				t = n + 1 | 0;
				u = g;
				v = HEAP32[g >> 2] | 0
			}
			HEAP32[o >> 2] = v;
			HEAP32[q >> 2] = p;
			HEAP32[r >> 2] = 0;
			g = n + 4 | 0;
			w = HEAP32[l >> 2] | 0;
			l = HEAP32[e >> 2] | 0;
			x = v;
			a: while (1) {
				if (l) {
					v = HEAP32[l + 12 >> 2] | 0;
					if ((v | 0) == (HEAP32[l + 16 >> 2] | 0))
						y = tc[c[(HEAP32[l >> 2] | 0) + 36 >> 2] & 127](l) | 0;
					else
						y = HEAP32[v >> 2] | 0;
					if ((y | 0) == -1) {
						HEAP32[e >> 2] = 0;
						z = 1;
						A = 0
					} else {
						z = 0;
						A = l
					}
				} else {
					z = 1;
					A = 0
				}
				v = HEAP32[f >> 2] | 0;
				do
					if (v) {
						B = HEAP32[v + 12 >> 2] | 0;
						if ((B | 0) == (HEAP32[v + 16 >> 2] | 0))
							C = tc[c[(HEAP32[v >> 2] | 0) + 36 >> 2] & 127](v) | 0;
						else
							C = HEAP32[B >> 2] | 0;
						if ((C | 0) != -1)
							if (z) {
								D = v;
								break
							} else {
								E = v;
								F = x;
								break a
							}
						else {
							HEAP32[f >> 2] = 0;
							G = 17;
							break
						}
					} else
						G = 17;
				while (0);
				if ((G | 0) == 17) {
					G = 0;
					if (z) {
						E = 0;
						F = x;
						break
					} else
						D = 0
				}
				v = HEAP8[n >> 0] | 0;
				B = (v & 1) == 0;
				if (B)
					I = (v & 255) >>> 1;
				else
					I = HEAP32[g >> 2] | 0;
				if ((HEAP32[o >> 2] | 0) == (x + I | 0)) {
					if (B) {
						J = (v & 255) >>> 1;
						K = (v & 255) >>> 1
					} else {
						v = HEAP32[g >> 2] | 0;
						J = v;
						K = v
					}
					em(n, J << 1, 0);
					if (!(HEAP8[n >> 0] & 1))
						L = 10;
					else
						L = (HEAP32[n >> 2] & -2) + -1 | 0;
					em(n, L, 0);
					if (!(HEAP8[n >> 0] & 1))
						M = t;
					else
						M = HEAP32[u >> 2] | 0;
					HEAP32[o >> 2] = M + K;
					N = M
				} else
					N = x;
				v = A + 12 | 0;
				B = HEAP32[v >> 2] | 0;
				O = A + 16 | 0;
				if ((B | 0) == (HEAP32[O >> 2] | 0))
					P = tc[c[(HEAP32[A >> 2] | 0) + 36 >> 2] & 127](A) | 0;
				else
					P = HEAP32[B >> 2] | 0;
				if (yo(P, s, N, o, r, w, m, p, q, k) | 0) {
					E = D;
					F = N;
					break
				}
				B = HEAP32[v >> 2] | 0;
				if ((B | 0) == (HEAP32[O >> 2] | 0)) {
					tc[c[(HEAP32[A >> 2] | 0) + 40 >> 2] & 127](A) | 0;
					l = A;
					x = N;
					continue
				} else {
					HEAP32[v >> 2] = B + 4;
					l = A;
					x = N;
					continue
				}
			}
			N = HEAP8[m >> 0] | 0;
			if (!(N & 1))
				Q = (N & 255) >>> 1;
			else
				Q = HEAP32[m + 4 >> 2] | 0;
			if ((Q | 0) != 0 ? (Q = HEAP32[q >> 2] | 0, (Q - p | 0) < 160) : 0) {
				N = HEAP32[r >> 2] | 0;
				HEAP32[q >> 2] = Q + 4;
				HEAP32[Q >> 2] = N
			}
			N = Rv(F, HEAP32[o >> 2] | 0, h, s) | 0;
			s = j;
			HEAP32[s >> 2] = N;
			HEAP32[s + 4 >> 2] = H;
			hr(m, p, HEAP32[q >> 2] | 0, h);
			if (A) {
				q = HEAP32[A + 12 >> 2] | 0;
				if ((q | 0) == (HEAP32[A + 16 >> 2] | 0))
					R = tc[c[(HEAP32[A >> 2] | 0) + 36 >> 2] & 127](A) | 0;
				else
					R = HEAP32[q >> 2] | 0;
				if ((R | 0) == -1) {
					HEAP32[e >> 2] = 0;
					S = 0;
					T = 1
				} else {
					S = A;
					T = 0
				}
			} else {
				S = 0;
				T = 1
			}
			do
				if (E) {
					A = HEAP32[E + 12 >> 2] | 0;
					if ((A | 0) == (HEAP32[E + 16 >> 2] | 0))
						U = tc[c[(HEAP32[E >> 2] | 0) + 36 >> 2] & 127](E) | 0;
					else
						U = HEAP32[A >> 2] | 0;
					if ((U | 0) == -1) {
						HEAP32[f >> 2] = 0;
						G = 56;
						break
					}
					if (T) {
						HEAP32[b >> 2] = S;
						bm(n);
						bm(m);
						i = d;
						return
					}
				} else
					G = 56;
			while (0);
			if ((G | 0) == 56 ? !T : 0) {
				HEAP32[b >> 2] = S;
				bm(n);
				bm(m);
				i = d;
				return
			}
			HEAP32[h >> 2] = HEAP32[h >> 2] | 2;
			HEAP32[b >> 2] = S;
			bm(n);
			bm(m);
			i = d;
			return
		}
		function Fu(b, d, e, f, h, j, k) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			h = h | 0;
			j = j | 0;
			k = k | 0;
			var l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0,
			O = 0,
			P = 0,
			Q = 0,
			R = 0,
			S = 0,
			T = 0,
			U = 0,
			V = 0,
			W = 0;
			d = i;
			i = i + 352 | 0;
			l = d + 208 | 0;
			m = d + 200 | 0;
			n = d + 196 | 0;
			o = d + 184 | 0;
			p = d + 172 | 0;
			q = d + 168 | 0;
			r = d + 8 | 0;
			s = d + 4 | 0;
			t = d;
			u = d + 337 | 0;
			v = d + 336 | 0;
			Do(o, h, l, m, n);
			HEAP32[p + 0 >> 2] = 0;
			HEAP32[p + 4 >> 2] = 0;
			HEAP32[p + 8 >> 2] = 0;
			em(p, 10, 0);
			if (!(HEAP8[p >> 0] & 1)) {
				h = p + 1 | 0;
				w = h;
				x = p + 8 | 0;
				y = h
			} else {
				h = p + 8 | 0;
				w = p + 1 | 0;
				x = h;
				y = HEAP32[h >> 2] | 0
			}
			HEAP32[q >> 2] = y;
			HEAP32[s >> 2] = r;
			HEAP32[t >> 2] = 0;
			HEAP8[u >> 0] = 1;
			HEAP8[v >> 0] = 69;
			h = p + 4 | 0;
			z = HEAP32[m >> 2] | 0;
			m = HEAP32[n >> 2] | 0;
			n = HEAP32[e >> 2] | 0;
			A = y;
			a: while (1) {
				if (n) {
					y = HEAP32[n + 12 >> 2] | 0;
					if ((y | 0) == (HEAP32[n + 16 >> 2] | 0))
						B = tc[c[(HEAP32[n >> 2] | 0) + 36 >> 2] & 127](n) | 0;
					else
						B = HEAP32[y >> 2] | 0;
					if ((B | 0) == -1) {
						HEAP32[e >> 2] = 0;
						C = 1;
						D = 0
					} else {
						C = 0;
						D = n
					}
				} else {
					C = 1;
					D = 0
				}
				y = HEAP32[f >> 2] | 0;
				do
					if (y) {
						E = HEAP32[y + 12 >> 2] | 0;
						if ((E | 0) == (HEAP32[y + 16 >> 2] | 0))
							F = tc[c[(HEAP32[y >> 2] | 0) + 36 >> 2] & 127](y) | 0;
						else
							F = HEAP32[E >> 2] | 0;
						if ((F | 0) != -1)
							if (C) {
								G = y;
								break
							} else {
								H = y;
								I = A;
								break a
							}
						else {
							HEAP32[f >> 2] = 0;
							J = 17;
							break
						}
					} else
						J = 17;
				while (0);
				if ((J | 0) == 17) {
					J = 0;
					if (C) {
						H = 0;
						I = A;
						break
					} else
						G = 0
				}
				y = HEAP8[p >> 0] | 0;
				E = (y & 1) == 0;
				if (E)
					K = (y & 255) >>> 1;
				else
					K = HEAP32[h >> 2] | 0;
				if ((HEAP32[q >> 2] | 0) == (A + K | 0)) {
					if (E) {
						L = (y & 255) >>> 1;
						M = (y & 255) >>> 1
					} else {
						y = HEAP32[h >> 2] | 0;
						L = y;
						M = y
					}
					em(p, L << 1, 0);
					if (!(HEAP8[p >> 0] & 1))
						N = 10;
					else
						N = (HEAP32[p >> 2] & -2) + -1 | 0;
					em(p, N, 0);
					if (!(HEAP8[p >> 0] & 1))
						O = w;
					else
						O = HEAP32[x >> 2] | 0;
					HEAP32[q >> 2] = O + M;
					P = O
				} else
					P = A;
				y = D + 12 | 0;
				E = HEAP32[y >> 2] | 0;
				Q = D + 16 | 0;
				if ((E | 0) == (HEAP32[Q >> 2] | 0))
					R = tc[c[(HEAP32[D >> 2] | 0) + 36 >> 2] & 127](D) | 0;
				else
					R = HEAP32[E >> 2] | 0;
				if (Eo(R, u, v, P, q, z, m, o, r, s, t, l) | 0) {
					H = G;
					I = P;
					break
				}
				E = HEAP32[y >> 2] | 0;
				if ((E | 0) == (HEAP32[Q >> 2] | 0)) {
					tc[c[(HEAP32[D >> 2] | 0) + 40 >> 2] & 127](D) | 0;
					n = D;
					A = P;
					continue
				} else {
					HEAP32[y >> 2] = E + 4;
					n = D;
					A = P;
					continue
				}
			}
			P = HEAP8[o >> 0] | 0;
			if (!(P & 1))
				S = (P & 255) >>> 1;
			else
				S = HEAP32[o + 4 >> 2] | 0;
			if (!((S | 0) == 0 | (HEAP8[u >> 0] | 0) == 0) ? (u = HEAP32[s >> 2] | 0, (u - r | 0) < 160) : 0) {
				S = HEAP32[t >> 2] | 0;
				HEAP32[s >> 2] = u + 4;
				HEAP32[u >> 2] = S
			}
			HEAPF32[k >> 2] = +Sv(I, HEAP32[q >> 2] | 0, j);
			hr(o, r, HEAP32[s >> 2] | 0, j);
			if (D) {
				s = HEAP32[D + 12 >> 2] | 0;
				if ((s | 0) == (HEAP32[D + 16 >> 2] | 0))
					T = tc[c[(HEAP32[D >> 2] | 0) + 36 >> 2] & 127](D) | 0;
				else
					T = HEAP32[s >> 2] | 0;
				if ((T | 0) == -1) {
					HEAP32[e >> 2] = 0;
					U = 0;
					V = 1
				} else {
					U = D;
					V = 0
				}
			} else {
				U = 0;
				V = 1
			}
			do
				if (H) {
					D = HEAP32[H + 12 >> 2] | 0;
					if ((D | 0) == (HEAP32[H + 16 >> 2] | 0))
						W = tc[c[(HEAP32[H >> 2] | 0) + 36 >> 2] & 127](H) | 0;
					else
						W = HEAP32[D >> 2] | 0;
					if ((W | 0) == -1) {
						HEAP32[f >> 2] = 0;
						J = 56;
						break
					}
					if (V) {
						HEAP32[b >> 2] = U;
						bm(p);
						bm(o);
						i = d;
						return
					}
				} else
					J = 56;
			while (0);
			if ((J | 0) == 56 ? !V : 0) {
				HEAP32[b >> 2] = U;
				bm(p);
				bm(o);
				i = d;
				return
			}
			HEAP32[j >> 2] = HEAP32[j >> 2] | 2;
			HEAP32[b >> 2] = U;
			bm(p);
			bm(o);
			i = d;
			return
		}
		function Gu(b, d, e, f, g, j, k) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			j = j | 0;
			k = k | 0;
			var l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0,
			O = 0,
			P = 0,
			Q = 0,
			R = 0,
			S = 0,
			T = 0,
			U = 0,
			V = 0,
			W = 0;
			d = i;
			i = i + 352 | 0;
			l = d + 208 | 0;
			m = d + 200 | 0;
			n = d + 196 | 0;
			o = d + 184 | 0;
			p = d + 172 | 0;
			q = d + 168 | 0;
			r = d + 8 | 0;
			s = d + 4 | 0;
			t = d;
			u = d + 337 | 0;
			v = d + 336 | 0;
			Do(o, g, l, m, n);
			HEAP32[p + 0 >> 2] = 0;
			HEAP32[p + 4 >> 2] = 0;
			HEAP32[p + 8 >> 2] = 0;
			em(p, 10, 0);
			if (!(HEAP8[p >> 0] & 1)) {
				g = p + 1 | 0;
				w = g;
				x = p + 8 | 0;
				y = g
			} else {
				g = p + 8 | 0;
				w = p + 1 | 0;
				x = g;
				y = HEAP32[g >> 2] | 0
			}
			HEAP32[q >> 2] = y;
			HEAP32[s >> 2] = r;
			HEAP32[t >> 2] = 0;
			HEAP8[u >> 0] = 1;
			HEAP8[v >> 0] = 69;
			g = p + 4 | 0;
			z = HEAP32[m >> 2] | 0;
			m = HEAP32[n >> 2] | 0;
			n = HEAP32[e >> 2] | 0;
			A = y;
			a: while (1) {
				if (n) {
					y = HEAP32[n + 12 >> 2] | 0;
					if ((y | 0) == (HEAP32[n + 16 >> 2] | 0))
						B = tc[c[(HEAP32[n >> 2] | 0) + 36 >> 2] & 127](n) | 0;
					else
						B = HEAP32[y >> 2] | 0;
					if ((B | 0) == -1) {
						HEAP32[e >> 2] = 0;
						C = 1;
						D = 0
					} else {
						C = 0;
						D = n
					}
				} else {
					C = 1;
					D = 0
				}
				y = HEAP32[f >> 2] | 0;
				do
					if (y) {
						E = HEAP32[y + 12 >> 2] | 0;
						if ((E | 0) == (HEAP32[y + 16 >> 2] | 0))
							F = tc[c[(HEAP32[y >> 2] | 0) + 36 >> 2] & 127](y) | 0;
						else
							F = HEAP32[E >> 2] | 0;
						if ((F | 0) != -1)
							if (C) {
								G = y;
								break
							} else {
								H = y;
								I = A;
								break a
							}
						else {
							HEAP32[f >> 2] = 0;
							J = 17;
							break
						}
					} else
						J = 17;
				while (0);
				if ((J | 0) == 17) {
					J = 0;
					if (C) {
						H = 0;
						I = A;
						break
					} else
						G = 0
				}
				y = HEAP8[p >> 0] | 0;
				E = (y & 1) == 0;
				if (E)
					K = (y & 255) >>> 1;
				else
					K = HEAP32[g >> 2] | 0;
				if ((HEAP32[q >> 2] | 0) == (A + K | 0)) {
					if (E) {
						L = (y & 255) >>> 1;
						M = (y & 255) >>> 1
					} else {
						y = HEAP32[g >> 2] | 0;
						L = y;
						M = y
					}
					em(p, L << 1, 0);
					if (!(HEAP8[p >> 0] & 1))
						N = 10;
					else
						N = (HEAP32[p >> 2] & -2) + -1 | 0;
					em(p, N, 0);
					if (!(HEAP8[p >> 0] & 1))
						O = w;
					else
						O = HEAP32[x >> 2] | 0;
					HEAP32[q >> 2] = O + M;
					P = O
				} else
					P = A;
				y = D + 12 | 0;
				E = HEAP32[y >> 2] | 0;
				Q = D + 16 | 0;
				if ((E | 0) == (HEAP32[Q >> 2] | 0))
					R = tc[c[(HEAP32[D >> 2] | 0) + 36 >> 2] & 127](D) | 0;
				else
					R = HEAP32[E >> 2] | 0;
				if (Eo(R, u, v, P, q, z, m, o, r, s, t, l) | 0) {
					H = G;
					I = P;
					break
				}
				E = HEAP32[y >> 2] | 0;
				if ((E | 0) == (HEAP32[Q >> 2] | 0)) {
					tc[c[(HEAP32[D >> 2] | 0) + 40 >> 2] & 127](D) | 0;
					n = D;
					A = P;
					continue
				} else {
					HEAP32[y >> 2] = E + 4;
					n = D;
					A = P;
					continue
				}
			}
			P = HEAP8[o >> 0] | 0;
			if (!(P & 1))
				S = (P & 255) >>> 1;
			else
				S = HEAP32[o + 4 >> 2] | 0;
			if (!((S | 0) == 0 | (HEAP8[u >> 0] | 0) == 0) ? (u = HEAP32[s >> 2] | 0, (u - r | 0) < 160) : 0) {
				S = HEAP32[t >> 2] | 0;
				HEAP32[s >> 2] = u + 4;
				HEAP32[u >> 2] = S
			}
			HEAPF64[k >> 3] = +Tv(I, HEAP32[q >> 2] | 0, j);
			hr(o, r, HEAP32[s >> 2] | 0, j);
			if (D) {
				s = HEAP32[D + 12 >> 2] | 0;
				if ((s | 0) == (HEAP32[D + 16 >> 2] | 0))
					T = tc[c[(HEAP32[D >> 2] | 0) + 36 >> 2] & 127](D) | 0;
				else
					T = HEAP32[s >> 2] | 0;
				if ((T | 0) == -1) {
					HEAP32[e >> 2] = 0;
					U = 0;
					V = 1
				} else {
					U = D;
					V = 0
				}
			} else {
				U = 0;
				V = 1
			}
			do
				if (H) {
					D = HEAP32[H + 12 >> 2] | 0;
					if ((D | 0) == (HEAP32[H + 16 >> 2] | 0))
						W = tc[c[(HEAP32[H >> 2] | 0) + 36 >> 2] & 127](H) | 0;
					else
						W = HEAP32[D >> 2] | 0;
					if ((W | 0) == -1) {
						HEAP32[f >> 2] = 0;
						J = 56;
						break
					}
					if (V) {
						HEAP32[b >> 2] = U;
						bm(p);
						bm(o);
						i = d;
						return
					}
				} else
					J = 56;
			while (0);
			if ((J | 0) == 56 ? !V : 0) {
				HEAP32[b >> 2] = U;
				bm(p);
				bm(o);
				i = d;
				return
			}
			HEAP32[j >> 2] = HEAP32[j >> 2] | 2;
			HEAP32[b >> 2] = U;
			bm(p);
			bm(o);
			i = d;
			return
		}
		function Hu(b, d, e, f, g, j, k) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			j = j | 0;
			k = k | 0;
			var l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0,
			O = 0,
			P = 0,
			Q = 0,
			R = 0,
			S = 0,
			T = 0,
			U = 0,
			V = 0,
			W = 0;
			d = i;
			i = i + 352 | 0;
			l = d + 208 | 0;
			m = d + 200 | 0;
			n = d + 196 | 0;
			o = d + 184 | 0;
			p = d + 172 | 0;
			q = d + 168 | 0;
			r = d + 8 | 0;
			s = d + 4 | 0;
			t = d;
			u = d + 337 | 0;
			v = d + 336 | 0;
			Do(o, g, l, m, n);
			HEAP32[p + 0 >> 2] = 0;
			HEAP32[p + 4 >> 2] = 0;
			HEAP32[p + 8 >> 2] = 0;
			em(p, 10, 0);
			if (!(HEAP8[p >> 0] & 1)) {
				g = p + 1 | 0;
				w = g;
				x = p + 8 | 0;
				y = g
			} else {
				g = p + 8 | 0;
				w = p + 1 | 0;
				x = g;
				y = HEAP32[g >> 2] | 0
			}
			HEAP32[q >> 2] = y;
			HEAP32[s >> 2] = r;
			HEAP32[t >> 2] = 0;
			HEAP8[u >> 0] = 1;
			HEAP8[v >> 0] = 69;
			g = p + 4 | 0;
			z = HEAP32[m >> 2] | 0;
			m = HEAP32[n >> 2] | 0;
			n = HEAP32[e >> 2] | 0;
			A = y;
			a: while (1) {
				if (n) {
					y = HEAP32[n + 12 >> 2] | 0;
					if ((y | 0) == (HEAP32[n + 16 >> 2] | 0))
						B = tc[c[(HEAP32[n >> 2] | 0) + 36 >> 2] & 127](n) | 0;
					else
						B = HEAP32[y >> 2] | 0;
					if ((B | 0) == -1) {
						HEAP32[e >> 2] = 0;
						C = 1;
						D = 0
					} else {
						C = 0;
						D = n
					}
				} else {
					C = 1;
					D = 0
				}
				y = HEAP32[f >> 2] | 0;
				do
					if (y) {
						E = HEAP32[y + 12 >> 2] | 0;
						if ((E | 0) == (HEAP32[y + 16 >> 2] | 0))
							F = tc[c[(HEAP32[y >> 2] | 0) + 36 >> 2] & 127](y) | 0;
						else
							F = HEAP32[E >> 2] | 0;
						if ((F | 0) != -1)
							if (C) {
								G = y;
								break
							} else {
								H = y;
								I = A;
								break a
							}
						else {
							HEAP32[f >> 2] = 0;
							J = 17;
							break
						}
					} else
						J = 17;
				while (0);
				if ((J | 0) == 17) {
					J = 0;
					if (C) {
						H = 0;
						I = A;
						break
					} else
						G = 0
				}
				y = HEAP8[p >> 0] | 0;
				E = (y & 1) == 0;
				if (E)
					K = (y & 255) >>> 1;
				else
					K = HEAP32[g >> 2] | 0;
				if ((HEAP32[q >> 2] | 0) == (A + K | 0)) {
					if (E) {
						L = (y & 255) >>> 1;
						M = (y & 255) >>> 1
					} else {
						y = HEAP32[g >> 2] | 0;
						L = y;
						M = y
					}
					em(p, L << 1, 0);
					if (!(HEAP8[p >> 0] & 1))
						N = 10;
					else
						N = (HEAP32[p >> 2] & -2) + -1 | 0;
					em(p, N, 0);
					if (!(HEAP8[p >> 0] & 1))
						O = w;
					else
						O = HEAP32[x >> 2] | 0;
					HEAP32[q >> 2] = O + M;
					P = O
				} else
					P = A;
				y = D + 12 | 0;
				E = HEAP32[y >> 2] | 0;
				Q = D + 16 | 0;
				if ((E | 0) == (HEAP32[Q >> 2] | 0))
					R = tc[c[(HEAP32[D >> 2] | 0) + 36 >> 2] & 127](D) | 0;
				else
					R = HEAP32[E >> 2] | 0;
				if (Eo(R, u, v, P, q, z, m, o, r, s, t, l) | 0) {
					H = G;
					I = P;
					break
				}
				E = HEAP32[y >> 2] | 0;
				if ((E | 0) == (HEAP32[Q >> 2] | 0)) {
					tc[c[(HEAP32[D >> 2] | 0) + 40 >> 2] & 127](D) | 0;
					n = D;
					A = P;
					continue
				} else {
					HEAP32[y >> 2] = E + 4;
					n = D;
					A = P;
					continue
				}
			}
			P = HEAP8[o >> 0] | 0;
			if (!(P & 1))
				S = (P & 255) >>> 1;
			else
				S = HEAP32[o + 4 >> 2] | 0;
			if (!((S | 0) == 0 | (HEAP8[u >> 0] | 0) == 0) ? (u = HEAP32[s >> 2] | 0, (u - r | 0) < 160) : 0) {
				S = HEAP32[t >> 2] | 0;
				HEAP32[s >> 2] = u + 4;
				HEAP32[u >> 2] = S
			}
			HEAPF64[k >> 3] = +Uv(I, HEAP32[q >> 2] | 0, j);
			hr(o, r, HEAP32[s >> 2] | 0, j);
			if (D) {
				s = HEAP32[D + 12 >> 2] | 0;
				if ((s | 0) == (HEAP32[D + 16 >> 2] | 0))
					T = tc[c[(HEAP32[D >> 2] | 0) + 36 >> 2] & 127](D) | 0;
				else
					T = HEAP32[s >> 2] | 0;
				if ((T | 0) == -1) {
					HEAP32[e >> 2] = 0;
					U = 0;
					V = 1
				} else {
					U = D;
					V = 0
				}
			} else {
				U = 0;
				V = 1
			}
			do
				if (H) {
					D = HEAP32[H + 12 >> 2] | 0;
					if ((D | 0) == (HEAP32[H + 16 >> 2] | 0))
						W = tc[c[(HEAP32[H >> 2] | 0) + 36 >> 2] & 127](H) | 0;
					else
						W = HEAP32[D >> 2] | 0;
					if ((W | 0) == -1) {
						HEAP32[f >> 2] = 0;
						J = 56;
						break
					}
					if (V) {
						HEAP32[b >> 2] = U;
						bm(p);
						bm(o);
						i = d;
						return
					}
				} else
					J = 56;
			while (0);
			if ((J | 0) == 56 ? !V : 0) {
				HEAP32[b >> 2] = U;
				bm(p);
				bm(o);
				i = d;
				return
			}
			HEAP32[j >> 2] = HEAP32[j >> 2] | 2;
			HEAP32[b >> 2] = U;
			bm(p);
			bm(o);
			i = d;
			return
		}
		function Iu(a, b, d, e, f) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0;
			g = i;
			i = i + 16 | 0;
			h = g;
			HEAP32[h >> 2] = f;
			f = zb(d | 0) | 0;
			d = Xx(a, b, e, h) | 0;
			if (!f) {
				i = g;
				return d | 0
			}
			zb(f | 0) | 0;
			i = g;
			return d | 0
		}
		function Ju(b, d, e, f, g, h, j) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			var k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0;
			k = i;
			i = i + 16 | 0;
			l = k;
			m = HEAP32[d >> 2] | 0;
			if (!m) {
				HEAP32[b >> 2] = 0;
				i = k;
				return
			}
			n = g;
			g = e;
			o = n - g | 0;
			p = h + 12 | 0;
			h = HEAP32[p >> 2] | 0;
			q = (h | 0) > (o | 0) ? h - o | 0 : 0;
			o = f;
			h = o - g | 0;
			if ((h | 0) > 0 ? (mc[c[(HEAP32[m >> 2] | 0) + 48 >> 2] & 31](m, e, h) | 0) != (h | 0) : 0) {
				HEAP32[d >> 2] = 0;
				HEAP32[b >> 2] = 0;
				i = k;
				return
			}
			do
				if ((q | 0) > 0) {
					$l(l, q, j);
					if (!(HEAP8[l >> 0] & 1))
						r = l + 1 | 0;
					else
						r = HEAP32[l + 8 >> 2] | 0;
					if ((mc[c[(HEAP32[m >> 2] | 0) + 48 >> 2] & 31](m, r, q) | 0) == (q | 0)) {
						bm(l);
						break
					}
					HEAP32[d >> 2] = 0;
					HEAP32[b >> 2] = 0;
					bm(l);
					i = k;
					return
				}
			while (0);
			l = n - o | 0;
			if ((l | 0) > 0 ? (mc[c[(HEAP32[m >> 2] | 0) + 48 >> 2] & 31](m, f, l) | 0) != (l | 0) : 0) {
				HEAP32[d >> 2] = 0;
				HEAP32[b >> 2] = 0;
				i = k;
				return
			}
			HEAP32[p >> 2] = 0;
			HEAP32[b >> 2] = m;
			i = k;
			return
		}
		function Ku(a, b, d, e) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0;
			f = i;
			i = i + 16 | 0;
			g = f;
			HEAP32[g >> 2] = e;
			e = zb(b | 0) | 0;
			b = ow(a, d, g) | 0;
			if (!e) {
				i = f;
				return b | 0
			}
			zb(e | 0) | 0;
			i = f;
			return b | 0
		}
		function Lu(b, d, e, f, g, h, j) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			var k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0;
			k = i;
			i = i + 16 | 0;
			l = k;
			m = HEAP32[d >> 2] | 0;
			if (!m) {
				HEAP32[b >> 2] = 0;
				i = k;
				return
			}
			n = g;
			g = e;
			o = n - g >> 2;
			p = h + 12 | 0;
			h = HEAP32[p >> 2] | 0;
			q = (h | 0) > (o | 0) ? h - o | 0 : 0;
			o = f;
			h = o - g | 0;
			g = h >> 2;
			if ((h | 0) > 0 ? (mc[c[(HEAP32[m >> 2] | 0) + 48 >> 2] & 31](m, e, g) | 0) != (g | 0) : 0) {
				HEAP32[d >> 2] = 0;
				HEAP32[b >> 2] = 0;
				i = k;
				return
			}
			do
				if ((q | 0) > 0) {
					nm(l, q, j);
					if (!(HEAP8[l >> 0] & 1))
						r = l + 4 | 0;
					else
						r = HEAP32[l + 8 >> 2] | 0;
					if ((mc[c[(HEAP32[m >> 2] | 0) + 48 >> 2] & 31](m, r, q) | 0) == (q | 0)) {
						pm(l);
						break
					}
					HEAP32[d >> 2] = 0;
					HEAP32[b >> 2] = 0;
					pm(l);
					i = k;
					return
				}
			while (0);
			l = n - o | 0;
			o = l >> 2;
			if ((l | 0) > 0 ? (mc[c[(HEAP32[m >> 2] | 0) + 48 >> 2] & 31](m, f, o) | 0) != (o | 0) : 0) {
				HEAP32[d >> 2] = 0;
				HEAP32[b >> 2] = 0;
				i = k;
				return
			}
			HEAP32[p >> 2] = 0;
			HEAP32[b >> 2] = m;
			i = k;
			return
		}
		function Mu(a, e, f, g, h) {
			a = a | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			var j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0;
			j = i;
			k = HEAP32[a >> 2] | 0;
			do
				if (k)
					if ((HEAP32[k + 12 >> 2] | 0) == (HEAP32[k + 16 >> 2] | 0))
						if ((tc[c[(HEAP32[k >> 2] | 0) + 36 >> 2] & 127](k) | 0) == -1) {
							HEAP32[a >> 2] = 0;
							l = 0;
							break
						} else {
							l = HEAP32[a >> 2] | 0;
							break
						}
					else
						l = k;
				else
					l = 0;
			while (0);
			k = (l | 0) == 0;
			l = HEAP32[e >> 2] | 0;
			do
				if (l) {
					if ((HEAP32[l + 12 >> 2] | 0) == (HEAP32[l + 16 >> 2] | 0) ? (tc[c[(HEAP32[l >> 2] | 0) + 36 >> 2] & 127](l) | 0) == -1 : 0) {
						HEAP32[e >> 2] = 0;
						m = 11;
						break
					}
					if (k)
						n = l;
					else
						m = 12
				} else
					m = 11;
			while (0);
			if ((m | 0) == 11)
				if (k)
					m = 12;
				else
					n = 0;
			if ((m | 0) == 12) {
				HEAP32[f >> 2] = HEAP32[f >> 2] | 6;
				o = 0;
				i = j;
				return o | 0
			}
			k = HEAP32[a >> 2] | 0;
			l = HEAP32[k + 12 >> 2] | 0;
			if ((l | 0) == (HEAP32[k + 16 >> 2] | 0))
				p = tc[c[(HEAP32[k >> 2] | 0) + 36 >> 2] & 127](k) | 0;
			else
				p = HEAPU8[l >> 0] | 0;
			l = p & 255;
			if (l << 24 >> 24 > -1 ? (k = g + 8 | 0, (b[(HEAP32[k >> 2] | 0) + (p << 24 >> 24 << 1) >> 1] & 2048) != 0) : 0) {
				p = (mc[c[(HEAP32[g >> 2] | 0) + 36 >> 2] & 31](g, l, 0) | 0) << 24 >> 24;
				l = HEAP32[a >> 2] | 0;
				q = l + 12 | 0;
				r = HEAP32[q >> 2] | 0;
				if ((r | 0) == (HEAP32[l + 16 >> 2] | 0)) {
					tc[c[(HEAP32[l >> 2] | 0) + 40 >> 2] & 127](l) | 0;
					s = h;
					t = n;
					u = n;
					v = p
				} else {
					HEAP32[q >> 2] = r + 1;
					s = h;
					t = n;
					u = n;
					v = p
				}
				while (1) {
					w = v + -48 | 0;
					p = s + -1 | 0;
					n = HEAP32[a >> 2] | 0;
					do
						if (n)
							if ((HEAP32[n + 12 >> 2] | 0) == (HEAP32[n + 16 >> 2] | 0))
								if ((tc[c[(HEAP32[n >> 2] | 0) + 36 >> 2] & 127](n) | 0) == -1) {
									HEAP32[a >> 2] = 0;
									x = 0;
									break
								} else {
									x = HEAP32[a >> 2] | 0;
									break
								}
							else
								x = n;
						else
							x = 0;
					while (0);
					n = (x | 0) == 0;
					if (u)
						if ((HEAP32[u + 12 >> 2] | 0) == (HEAP32[u + 16 >> 2] | 0))
							if ((tc[c[(HEAP32[u >> 2] | 0) + 36 >> 2] & 127](u) | 0) == -1) {
								HEAP32[e >> 2] = 0;
								y = 0;
								z = 0
							} else {
								y = t;
								z = t
							}
						else {
							y = t;
							z = u
						}
					else {
						y = t;
						z = 0
					}
					A = HEAP32[a >> 2] | 0;
					if (!((n ^ (z | 0) == 0) & (p | 0) > 0)) {
						m = 40;
						break
					}
					n = HEAP32[A + 12 >> 2] | 0;
					if ((n | 0) == (HEAP32[A + 16 >> 2] | 0))
						B = tc[c[(HEAP32[A >> 2] | 0) + 36 >> 2] & 127](A) | 0;
					else
						B = HEAPU8[n >> 0] | 0;
					n = B & 255;
					if (n << 24 >> 24 <= -1) {
						o = w;
						m = 52;
						break
					}
					if (!(b[(HEAP32[k >> 2] | 0) + (B << 24 >> 24 << 1) >> 1] & 2048)) {
						o = w;
						m = 52;
						break
					}
					h = ((mc[c[(HEAP32[g >> 2] | 0) + 36 >> 2] & 31](g, n, 0) | 0) << 24 >> 24) + (w * 10 | 0) | 0;
					n = HEAP32[a >> 2] | 0;
					r = n + 12 | 0;
					q = HEAP32[r >> 2] | 0;
					if ((q | 0) == (HEAP32[n + 16 >> 2] | 0)) {
						tc[c[(HEAP32[n >> 2] | 0) + 40 >> 2] & 127](n) | 0;
						s = p;
						t = y;
						u = z;
						v = h;
						continue
					} else {
						HEAP32[r >> 2] = q + 1;
						s = p;
						t = y;
						u = z;
						v = h;
						continue
					}
				}
				if ((m | 0) == 40) {
					do
						if (A)
							if ((HEAP32[A + 12 >> 2] | 0) == (HEAP32[A + 16 >> 2] | 0))
								if ((tc[c[(HEAP32[A >> 2] | 0) + 36 >> 2] & 127](A) | 0) == -1) {
									HEAP32[a >> 2] = 0;
									C = 0;
									break
								} else {
									C = HEAP32[a >> 2] | 0;
									break
								}
							else
								C = A;
						else
							C = 0;
					while (0);
					A = (C | 0) == 0;
					do
						if (y) {
							if ((HEAP32[y + 12 >> 2] | 0) == (HEAP32[y + 16 >> 2] | 0) ? (tc[c[(HEAP32[y >> 2] | 0) + 36 >> 2] & 127](y) | 0) == -1 : 0) {
								HEAP32[e >> 2] = 0;
								m = 50;
								break
							}
							if (A) {
								o = w;
								i = j;
								return o | 0
							}
						} else
							m = 50;
					while (0);
					if ((m | 0) == 50 ? !A : 0) {
						o = w;
						i = j;
						return o | 0
					}
					HEAP32[f >> 2] = HEAP32[f >> 2] | 2;
					o = w;
					i = j;
					return o | 0
				} else if ((m | 0) == 52) {
					i = j;
					return o | 0
				}
			}
			HEAP32[f >> 2] = HEAP32[f >> 2] | 4;
			o = 0;
			i = j;
			return o | 0
		}
		function Nu(a, b, d, e, f) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0;
			g = i;
			h = HEAP32[a >> 2] | 0;
			do
				if (h) {
					j = HEAP32[h + 12 >> 2] | 0;
					if ((j | 0) == (HEAP32[h + 16 >> 2] | 0))
						k = tc[c[(HEAP32[h >> 2] | 0) + 36 >> 2] & 127](h) | 0;
					else
						k = HEAP32[j >> 2] | 0;
					if ((k | 0) == -1) {
						HEAP32[a >> 2] = 0;
						l = 1;
						break
					} else {
						l = (HEAP32[a >> 2] | 0) == 0;
						break
					}
				} else
					l = 1;
			while (0);
			k = HEAP32[b >> 2] | 0;
			do
				if (k) {
					h = HEAP32[k + 12 >> 2] | 0;
					if ((h | 0) == (HEAP32[k + 16 >> 2] | 0))
						m = tc[c[(HEAP32[k >> 2] | 0) + 36 >> 2] & 127](k) | 0;
					else
						m = HEAP32[h >> 2] | 0;
					if ((m | 0) != -1)
						if (l) {
							n = k;
							break
						} else {
							o = 16;
							break
						}
					else {
						HEAP32[b >> 2] = 0;
						o = 14;
						break
					}
				} else
					o = 14;
			while (0);
			if ((o | 0) == 14)
				if (l)
					o = 16;
				else
					n = 0;
			if ((o | 0) == 16) {
				HEAP32[d >> 2] = HEAP32[d >> 2] | 6;
				p = 0;
				i = g;
				return p | 0
			}
			l = HEAP32[a >> 2] | 0;
			k = HEAP32[l + 12 >> 2] | 0;
			if ((k | 0) == (HEAP32[l + 16 >> 2] | 0))
				q = tc[c[(HEAP32[l >> 2] | 0) + 36 >> 2] & 127](l) | 0;
			else
				q = HEAP32[k >> 2] | 0;
			if (!(mc[c[(HEAP32[e >> 2] | 0) + 12 >> 2] & 31](e, 2048, q) | 0)) {
				HEAP32[d >> 2] = HEAP32[d >> 2] | 4;
				p = 0;
				i = g;
				return p | 0
			}
			k = (mc[c[(HEAP32[e >> 2] | 0) + 52 >> 2] & 31](e, q, 0) | 0) << 24 >> 24;
			q = HEAP32[a >> 2] | 0;
			l = q + 12 | 0;
			m = HEAP32[l >> 2] | 0;
			if ((m | 0) == (HEAP32[q + 16 >> 2] | 0)) {
				tc[c[(HEAP32[q >> 2] | 0) + 40 >> 2] & 127](q) | 0;
				r = f;
				s = n;
				t = n;
				u = k
			} else {
				HEAP32[l >> 2] = m + 4;
				r = f;
				s = n;
				t = n;
				u = k
			}
			while (1) {
				v = u + -48 | 0;
				k = r + -1 | 0;
				n = HEAP32[a >> 2] | 0;
				do
					if (n) {
						f = HEAP32[n + 12 >> 2] | 0;
						if ((f | 0) == (HEAP32[n + 16 >> 2] | 0))
							w = tc[c[(HEAP32[n >> 2] | 0) + 36 >> 2] & 127](n) | 0;
						else
							w = HEAP32[f >> 2] | 0;
						if ((w | 0) == -1) {
							HEAP32[a >> 2] = 0;
							x = 1;
							break
						} else {
							x = (HEAP32[a >> 2] | 0) == 0;
							break
						}
					} else
						x = 1;
				while (0);
				do
					if (t) {
						n = HEAP32[t + 12 >> 2] | 0;
						if ((n | 0) == (HEAP32[t + 16 >> 2] | 0))
							y = tc[c[(HEAP32[t >> 2] | 0) + 36 >> 2] & 127](t) | 0;
						else
							y = HEAP32[n >> 2] | 0;
						if ((y | 0) == -1) {
							HEAP32[b >> 2] = 0;
							z = 0;
							A = 0;
							B = 1;
							break
						} else {
							z = s;
							A = s;
							B = (s | 0) == 0;
							break
						}
					} else {
						z = s;
						A = 0;
						B = 1
					}
				while (0);
				C = HEAP32[a >> 2] | 0;
				if (!((x ^ B) & (k | 0) > 0))
					break;
				n = HEAP32[C + 12 >> 2] | 0;
				if ((n | 0) == (HEAP32[C + 16 >> 2] | 0))
					D = tc[c[(HEAP32[C >> 2] | 0) + 36 >> 2] & 127](C) | 0;
				else
					D = HEAP32[n >> 2] | 0;
				if (!(mc[c[(HEAP32[e >> 2] | 0) + 12 >> 2] & 31](e, 2048, D) | 0)) {
					p = v;
					o = 63;
					break
				}
				n = ((mc[c[(HEAP32[e >> 2] | 0) + 52 >> 2] & 31](e, D, 0) | 0) << 24 >> 24) + (v * 10 | 0) | 0;
				f = HEAP32[a >> 2] | 0;
				m = f + 12 | 0;
				l = HEAP32[m >> 2] | 0;
				if ((l | 0) == (HEAP32[f + 16 >> 2] | 0)) {
					tc[c[(HEAP32[f >> 2] | 0) + 40 >> 2] & 127](f) | 0;
					r = k;
					s = z;
					t = A;
					u = n;
					continue
				} else {
					HEAP32[m >> 2] = l + 4;
					r = k;
					s = z;
					t = A;
					u = n;
					continue
				}
			}
			if ((o | 0) == 63) {
				i = g;
				return p | 0
			}
			do
				if (C) {
					u = HEAP32[C + 12 >> 2] | 0;
					if ((u | 0) == (HEAP32[C + 16 >> 2] | 0))
						E = tc[c[(HEAP32[C >> 2] | 0) + 36 >> 2] & 127](C) | 0;
					else
						E = HEAP32[u >> 2] | 0;
					if ((E | 0) == -1) {
						HEAP32[a >> 2] = 0;
						F = 1;
						break
					} else {
						F = (HEAP32[a >> 2] | 0) == 0;
						break
					}
				} else
					F = 1;
			while (0);
			do
				if (z) {
					a = HEAP32[z + 12 >> 2] | 0;
					if ((a | 0) == (HEAP32[z + 16 >> 2] | 0))
						G = tc[c[(HEAP32[z >> 2] | 0) + 36 >> 2] & 127](z) | 0;
					else
						G = HEAP32[a >> 2] | 0;
					if ((G | 0) == -1) {
						HEAP32[b >> 2] = 0;
						o = 60;
						break
					}
					if (F) {
						p = v;
						i = g;
						return p | 0
					}
				} else
					o = 60;
			while (0);
			if ((o | 0) == 60 ? !F : 0) {
				p = v;
				i = g;
				return p | 0
			}
			HEAP32[d >> 2] = HEAP32[d >> 2] | 2;
			p = v;
			i = g;
			return p | 0
		}
		function Ou(a, b, d) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0;
			e = i;
			f = a + 4 | 0;
			g = (HEAP32[f >> 2] | 0) != 185;
			h = HEAP32[a >> 2] | 0;
			j = h;
			k = (HEAP32[d >> 2] | 0) - j | 0;
			l = k >>> 0 < 2147483647 ? k << 1 : -1;
			k = (HEAP32[b >> 2] | 0) - j | 0;
			j = yx(g ? h : 0, l) | 0;
			if (!j)
				qx();
			if (!g) {
				g = HEAP32[a >> 2] | 0;
				HEAP32[a >> 2] = j;
				if (!g)
					m = j;
				else {
					lc[HEAP32[f >> 2] & 255](g);
					m = HEAP32[a >> 2] | 0
				}
			} else {
				HEAP32[a >> 2] = j;
				m = j
			}
			HEAP32[f >> 2] = 173;
			HEAP32[b >> 2] = m + k;
			HEAP32[d >> 2] = (HEAP32[a >> 2] | 0) + l;
			i = e;
			return
		}
		function Pu(a, b, d) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0;
			e = i;
			f = a + 4 | 0;
			g = (HEAP32[f >> 2] | 0) != 185;
			h = HEAP32[a >> 2] | 0;
			j = h;
			k = (HEAP32[d >> 2] | 0) - j | 0;
			l = k >>> 0 < 2147483647 ? k << 1 : -1;
			k = (HEAP32[b >> 2] | 0) - j >> 2;
			if (g)
				m = h;
			else
				m = 0;
			h = yx(m, l) | 0;
			if (!h)
				qx();
			if (!g) {
				g = HEAP32[a >> 2] | 0;
				HEAP32[a >> 2] = h;
				if (!g)
					n = h;
				else {
					lc[HEAP32[f >> 2] & 255](g);
					n = HEAP32[a >> 2] | 0
				}
			} else {
				HEAP32[a >> 2] = h;
				n = h
			}
			HEAP32[f >> 2] = 173;
			HEAP32[b >> 2] = n + (k << 2);
			HEAP32[d >> 2] = (HEAP32[a >> 2] | 0) + (l >>> 2 << 2);
			i = e;
			return
		}
		function Qu(b, d, e) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0;
			f = i;
			g = d;
			h = HEAP8[b >> 0] | 0;
			if (!(h & 1)) {
				j = (h & 255) >>> 1;
				k = 10;
				l = h
			} else {
				h = HEAP32[b >> 2] | 0;
				j = HEAP32[b + 4 >> 2] | 0;
				k = (h & -2) + -1 | 0;
				l = h & 255
			}
			h = e - g | 0;
			if ((e | 0) == (d | 0)) {
				i = f;
				return b | 0
			}
			if ((k - j | 0) >>> 0 < h >>> 0) {
				lm(b, k, j + h - k | 0, j, j, 0, 0);
				m = HEAP8[b >> 0] | 0
			} else
				m = l;
			if (!(m & 1))
				n = b + 1 | 0;
			else
				n = HEAP32[b + 8 >> 2] | 0;
			m = e + (j - g) | 0;
			g = d;
			d = n + j | 0;
			while (1) {
				HEAP8[d >> 0] = HEAP8[g >> 0] | 0;
				g = g + 1 | 0;
				if ((g | 0) == (e | 0))
					break;
				else
					d = d + 1 | 0
			}
			HEAP8[n + m >> 0] = 0;
			m = j + h | 0;
			if (!(HEAP8[b >> 0] & 1)) {
				HEAP8[b >> 0] = m << 1;
				i = f;
				return b | 0
			} else {
				HEAP32[b + 4 >> 2] = m;
				i = f;
				return b | 0
			}
			return 0
		}
		function Ru(a, b, d) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0;
			e = i;
			f = a + 4 | 0;
			g = (HEAP32[f >> 2] | 0) != 185;
			h = HEAP32[a >> 2] | 0;
			j = h;
			k = (HEAP32[d >> 2] | 0) - j | 0;
			l = k >>> 0 < 2147483647 ? k << 1 : -1;
			k = (HEAP32[b >> 2] | 0) - j >> 2;
			if (g)
				m = h;
			else
				m = 0;
			h = yx(m, l) | 0;
			if (!h)
				qx();
			if (!g) {
				g = HEAP32[a >> 2] | 0;
				HEAP32[a >> 2] = h;
				if (!g)
					n = h;
				else {
					lc[HEAP32[f >> 2] & 255](g);
					n = HEAP32[a >> 2] | 0
				}
			} else {
				HEAP32[a >> 2] = h;
				n = h
			}
			HEAP32[f >> 2] = 173;
			HEAP32[b >> 2] = n + (k << 2);
			HEAP32[d >> 2] = (HEAP32[a >> 2] | 0) + (l >>> 2 << 2);
			i = e;
			return
		}
		function Su(b, d, e) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0;
			f = i;
			g = d;
			h = HEAP8[b >> 0] | 0;
			if (!(h & 1)) {
				j = (h & 255) >>> 1;
				k = 1;
				l = h
			} else {
				h = HEAP32[b >> 2] | 0;
				j = HEAP32[b + 4 >> 2] | 0;
				k = (h & -2) + -1 | 0;
				l = h & 255
			}
			h = e - g >> 2;
			if (!h) {
				i = f;
				return b | 0
			}
			if ((k - j | 0) >>> 0 < h >>> 0) {
				vm(b, k, j + h - k | 0, j, j, 0, 0);
				m = HEAP8[b >> 0] | 0
			} else
				m = l;
			if (!(m & 1))
				n = b + 4 | 0;
			else
				n = HEAP32[b + 8 >> 2] | 0;
			m = n + (j << 2) | 0;
			if ((d | 0) == (e | 0))
				o = m;
			else {
				l = j + ((e + -4 - g | 0) >>> 2) + 1 | 0;
				g = d;
				d = m;
				while (1) {
					HEAP32[d >> 2] = HEAP32[g >> 2];
					g = g + 4 | 0;
					if ((g | 0) == (e | 0))
						break;
					else
						d = d + 4 | 0
				}
				o = n + (l << 2) | 0
			}
			HEAP32[o >> 2] = 0;
			o = j + h | 0;
			if (!(HEAP8[b >> 0] & 1)) {
				HEAP8[b >> 0] = o << 1;
				i = f;
				return b | 0
			} else {
				HEAP32[b + 4 >> 2] = o;
				i = f;
				return b | 0
			}
			return 0
		}
		function Tu(b, d) {
			b = b | 0;
			d = d | 0;
			var e = 0;
			e = i;
			HEAP32[b >> 2] = 0;
			HEAP32[b + 4 >> 2] = 0;
			HEAP32[b + 8 >> 2] = 0;
			HEAP8[b + 128 >> 0] = 0;
			if (!d) {
				i = e;
				return
			}
			Vv(b, d);
			Wv(b, d);
			i = e;
			return
		}
		function Uu(a, b) {
			a = a | 0;
			b = b | 0;
			var c = 0;
			c = i;
			Nr(a, b, Xr(129168) | 0);
			i = c;
			return
		}
		function Vu(a, b) {
			a = a | 0;
			b = b | 0;
			var c = 0;
			c = i;
			Nr(a, b, Xr(129208) | 0);
			i = c;
			return
		}
		function Wu(a, b) {
			a = a | 0;
			b = b | 0;
			var c = 0;
			c = i;
			Nr(a, b, Xr(130776) | 0);
			i = c;
			return
		}
		function Xu(a, b) {
			a = a | 0;
			b = b | 0;
			var c = 0;
			c = i;
			Nr(a, b, Xr(130768) | 0);
			i = c;
			return
		}
		function Yu(a, b) {
			a = a | 0;
			b = b | 0;
			var c = 0;
			c = i;
			Nr(a, b, Xr(130840) | 0);
			i = c;
			return
		}
		function Zu(a, b) {
			a = a | 0;
			b = b | 0;
			var c = 0;
			c = i;
			Nr(a, b, Xr(130848) | 0);
			i = c;
			return
		}
		function _u(a, b) {
			a = a | 0;
			b = b | 0;
			var c = 0;
			c = i;
			Nr(a, b, Xr(130904) | 0);
			i = c;
			return
		}
		function $u(a, b) {
			a = a | 0;
			b = b | 0;
			var c = 0;
			c = i;
			Nr(a, b, Xr(130912) | 0);
			i = c;
			return
		}
		function av(a, b) {
			a = a | 0;
			b = b | 0;
			var c = 0;
			c = i;
			Nr(a, b, Xr(130920) | 0);
			i = c;
			return
		}
		function bv(a, b) {
			a = a | 0;
			b = b | 0;
			var c = 0;
			c = i;
			Nr(a, b, Xr(130928) | 0);
			i = c;
			return
		}
		function cv(a, b) {
			a = a | 0;
			b = b | 0;
			var c = 0;
			c = i;
			Nr(a, b, Xr(129280) | 0);
			i = c;
			return
		}
		function dv(a, b) {
			a = a | 0;
			b = b | 0;
			var c = 0;
			c = i;
			Nr(a, b, Xr(129400) | 0);
			i = c;
			return
		}
		function ev(a, b) {
			a = a | 0;
			b = b | 0;
			var c = 0;
			c = i;
			Nr(a, b, Xr(129464) | 0);
			i = c;
			return
		}
		function fv(a, b) {
			a = a | 0;
			b = b | 0;
			var c = 0;
			c = i;
			Nr(a, b, Xr(129560) | 0);
			i = c;
			return
		}
		function gv(a, b) {
			a = a | 0;
			b = b | 0;
			var c = 0;
			c = i;
			Nr(a, b, Xr(130152) | 0);
			i = c;
			return
		}
		function hv(a, b) {
			a = a | 0;
			b = b | 0;
			var c = 0;
			c = i;
			Nr(a, b, Xr(130216) | 0);
			i = c;
			return
		}
		function iv(a, b) {
			a = a | 0;
			b = b | 0;
			var c = 0;
			c = i;
			Nr(a, b, Xr(130280) | 0);
			i = c;
			return
		}
		function jv(a, b) {
			a = a | 0;
			b = b | 0;
			var c = 0;
			c = i;
			Nr(a, b, Xr(130344) | 0);
			i = c;
			return
		}
		function kv(a, b) {
			a = a | 0;
			b = b | 0;
			var c = 0;
			c = i;
			Nr(a, b, Xr(130384) | 0);
			i = c;
			return
		}
		function lv(a, b) {
			a = a | 0;
			b = b | 0;
			var c = 0;
			c = i;
			Nr(a, b, Xr(130464) | 0);
			i = c;
			return
		}
		function mv(a, b) {
			a = a | 0;
			b = b | 0;
			var c = 0;
			c = i;
			Nr(a, b, Xr(130520) | 0);
			i = c;
			return
		}
		function nv(a, b) {
			a = a | 0;
			b = b | 0;
			var c = 0;
			c = i;
			Nr(a, b, Xr(130568) | 0);
			i = c;
			return
		}
		function ov(a, b) {
			a = a | 0;
			b = b | 0;
			var c = 0;
			c = i;
			Nr(a, b, Xr(129672) | 0);
			i = c;
			return
		}
		function pv(a, b) {
			a = a | 0;
			b = b | 0;
			var c = 0;
			c = i;
			Nr(a, b, Xr(129824) | 0);
			i = c;
			return
		}
		function qv(a, b) {
			a = a | 0;
			b = b | 0;
			var c = 0;
			c = i;
			Nr(a, b, Xr(130056) | 0);
			i = c;
			return
		}
		function rv(a, b) {
			a = a | 0;
			b = b | 0;
			var c = 0;
			c = i;
			Nr(a, b, Xr(130088) | 0);
			i = c;
			return
		}
		function sv(a, b) {
			a = a | 0;
			b = b | 0;
			var c = 0;
			c = i;
			Nr(a, b, Xr(130608) | 0);
			i = c;
			return
		}
		function tv(a, b) {
			a = a | 0;
			b = b | 0;
			var c = 0;
			c = i;
			Nr(a, b, Xr(130648) | 0);
			i = c;
			return
		}
		function uv(b) {
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0,
			g = 0;
			d = i;
			e = HEAP32[b >> 2] | 0;
			if (!e) {
				i = d;
				return
			}
			f = b + 4 | 0;
			g = HEAP32[f >> 2] | 0;
			if ((g | 0) != (e | 0))
				HEAP32[f >> 2] = g + (~((g + -4 - e | 0) >>> 2) << 2);
			if ((b + 16 | 0) == (e | 0)) {
				HEAP8[b + 128 >> 0] = 0;
				i = d;
				return
			} else {
				kl(e);
				i = d;
				return
			}
		}
		function vv(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0;
			d = i;
			e = a + 4 | 0;
			f = HEAP32[e >> 2] | 0;
			g = HEAP32[a >> 2] | 0;
			h = f - g >> 2;
			if (h >>> 0 < b >>> 0) {
				Xv(a, b - h | 0);
				i = d;
				return
			}
			if (h >>> 0 <= b >>> 0) {
				i = d;
				return
			}
			h = g + (b << 2) | 0;
			if ((f | 0) == (h | 0)) {
				i = d;
				return
			}
			HEAP32[e >> 2] = f + (~((f + -4 - h | 0) >>> 2) << 2);
			i = d;
			return
		}
		function wv(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0;
			d = i;
			e = HEAP32[a + 8 >> 2] | 0;
			if ((HEAP32[a + 12 >> 2] | 0) - e >> 2 >>> 0 <= b >>> 0) {
				f = 0;
				i = d;
				return f | 0
			}
			f = (HEAP32[e + (b << 2) >> 2] | 0) != 0;
			i = d;
			return f | 0
		}
		function xv(a) {
			a = a | 0;
			var b = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0;
			b = i;
			e = a + 4 | 0;
			f = HEAPU8[e >> 0] | HEAPU8[e + 1 >> 0] << 8 | HEAPU8[e + 2 >> 0] << 16 | HEAPU8[e + 3 >> 0] << 24;
			g = e + 4 | 0;
			e = HEAPU8[g >> 0] | HEAPU8[g + 1 >> 0] << 8 | HEAPU8[g + 2 >> 0] << 16 | HEAPU8[g + 3 >> 0] << 24;
			g = (HEAP32[a >> 2] | 0) + (e >> 1) | 0;
			if (!(e & 1)) {
				h = f;
				lc[h & 255](g);
				i = b;
				return
			} else {
				h = HEAP32[(HEAP32[g >> 2] | 0) + f >> 2] | 0;
				lc[h & 255](g);
				i = b;
				return
			}
		}
		function yv(d, f, g, h, j, k, l, m) {
			d = d | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			k = k | 0;
			l = l | 0;
			m = m | 0;
			var n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0;
			n = i;
			HEAP32[g >> 2] = d;
			HEAP32[k >> 2] = h;
			do
				if (m & 2)
					if ((j - h | 0) < 3) {
						o = 1;
						i = n;
						return o | 0
					} else {
						HEAP32[k >> 2] = h + 1;
						HEAP8[h >> 0] = -17;
						d = HEAP32[k >> 2] | 0;
						HEAP32[k >> 2] = d + 1;
						HEAP8[d >> 0] = -69;
						d = HEAP32[k >> 2] | 0;
						HEAP32[k >> 2] = d + 1;
						HEAP8[d >> 0] = -65;
						break
					}
			while (0);
			h = f;
			m = HEAP32[g >> 2] | 0;
			if (m >>> 0 >= f >>> 0) {
				o = 0;
				i = n;
				return o | 0
			}
			d = j;
			j = m;
			a: while (1) {
				m = HEAP16[j >> 1] | 0;
				p = m & 65535;
				if (p >>> 0 > l >>> 0) {
					o = 2;
					q = 26;
					break
				}
				do
					if ((m & 65535) < 128) {
						r = HEAP32[k >> 2] | 0;
						if ((d - r | 0) < 1) {
							o = 1;
							q = 26;
							break a
						}
						HEAP32[k >> 2] = r + 1;
						HEAP8[r >> 0] = m
					} else {
						if ((m & 65535) < 2048) {
							r = HEAP32[k >> 2] | 0;
							if ((d - r | 0) < 2) {
								o = 1;
								q = 26;
								break a
							}
							HEAP32[k >> 2] = r + 1;
							HEAP8[r >> 0] = p >>> 6 | 192;
							r = HEAP32[k >> 2] | 0;
							HEAP32[k >> 2] = r + 1;
							HEAP8[r >> 0] = p & 63 | 128;
							break
						}
						if ((m & 65535) < 55296) {
							r = HEAP32[k >> 2] | 0;
							if ((d - r | 0) < 3) {
								o = 1;
								q = 26;
								break a
							}
							HEAP32[k >> 2] = r + 1;
							HEAP8[r >> 0] = p >>> 12 | 224;
							r = HEAP32[k >> 2] | 0;
							HEAP32[k >> 2] = r + 1;
							HEAP8[r >> 0] = p >>> 6 & 63 | 128;
							r = HEAP32[k >> 2] | 0;
							HEAP32[k >> 2] = r + 1;
							HEAP8[r >> 0] = p & 63 | 128;
							break
						}
						if ((m & 65535) >= 56320) {
							if ((m & 65535) < 57344) {
								o = 2;
								q = 26;
								break a
							}
							r = HEAP32[k >> 2] | 0;
							if ((d - r | 0) < 3) {
								o = 1;
								q = 26;
								break a
							}
							HEAP32[k >> 2] = r + 1;
							HEAP8[r >> 0] = p >>> 12 | 224;
							r = HEAP32[k >> 2] | 0;
							HEAP32[k >> 2] = r + 1;
							HEAP8[r >> 0] = p >>> 6 & 63 | 128;
							r = HEAP32[k >> 2] | 0;
							HEAP32[k >> 2] = r + 1;
							HEAP8[r >> 0] = p & 63 | 128;
							break
						}
						if ((h - j | 0) < 4) {
							o = 1;
							q = 26;
							break a
						}
						r = j + 2 | 0;
						s = HEAPU16[r >> 1] | 0;
						if ((s & 64512 | 0) != 56320) {
							o = 2;
							q = 26;
							break a
						}
						if ((d - (HEAP32[k >> 2] | 0) | 0) < 4) {
							o = 1;
							q = 26;
							break a
						}
						t = p & 960;
						if (((t << 10) + 65536 | p << 10 & 64512 | s & 1023) >>> 0 > l >>> 0) {
							o = 2;
							q = 26;
							break a
						}
						HEAP32[g >> 2] = r;
						r = (t >>> 6) + 1 | 0;
						t = HEAP32[k >> 2] | 0;
						HEAP32[k >> 2] = t + 1;
						HEAP8[t >> 0] = r >>> 2 | 240;
						t = HEAP32[k >> 2] | 0;
						HEAP32[k >> 2] = t + 1;
						HEAP8[t >> 0] = p >>> 2 & 15 | r << 4 & 48 | 128;
						r = HEAP32[k >> 2] | 0;
						HEAP32[k >> 2] = r + 1;
						HEAP8[r >> 0] = p << 4 & 48 | s >>> 6 & 15 | 128;
						r = HEAP32[k >> 2] | 0;
						HEAP32[k >> 2] = r + 1;
						HEAP8[r >> 0] = s & 63 | 128
					}
				while (0);
				j = (HEAP32[g >> 2] | 0) + 2 | 0;
				HEAP32[g >> 2] = j;
				if (j >>> 0 >= f >>> 0) {
					o = 0;
					q = 26;
					break
				}
			}
			if ((q | 0) == 26) {
				i = n;
				return o | 0
			}
			return 0
		}
		function hk(a, b, f) {
			a = a | 0;
			b = b | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0,
			O = 0,
			P = 0,
			Q = 0,
			R = 0,
			S = 0,
			T = 0,
			U = 0,
			V = 0,
			W = 0,
			X = 0,
			Y = 0,
			Z = 0,
			_ = 0,
			$ = 0,
			aa = 0,
			ba = 0,
			ca = 0,
			ea = 0,
			fa = 0,
			ga = 0,
			ha = 0,
			ia = 0,
			ja = 0,
			ka = 0,
			la = 0,
			ma = 0,
			na = 0,
			oa = 0,
			pa = 0,
			qa = 0,
			ra = 0,
			sa = 0,
			ta = 0,
			ua = 0,
			va = 0,
			wa = 0,
			xa = 0,
			ya = 0,
			za = 0,
			Aa = 0,
			Ba = 0,
			Ca = 0,
			Da = 0,
			Ea = 0,
			Fa = 0,
			Ga = 0,
			Ha = 0,
			Ia = 0,
			Ja = 0,
			Ka = 0,
			La = 0,
			Ma = 0,
			Na = 0,
			Oa = 0,
			Pa = 0,
			Qa = 0,
			Ra = 0,
			Sa = 0,
			Ta = 0,
			Ua = 0,
			Va = 0,
			Wa = 0,
			Xa = 0,
			Ya = 0,
			Za = 0,
			_a = 0,
			$a = 0,
			ab = 0,
			bb = 0,
			cb = 0;
			g = i;
			h = HEAP32[a + 28 >> 2] | 0;
			j = HEAP32[a + 32 >> 2] | 0;
			k = b + f | 0;
			l = HEAP32[a + 16 >> 2] | 0;
			m = HEAP32[a + 52 >> 2] | 0;
			n = HEAP32[a + 44 >> 2] | 0;
			o = (1 << HEAP32[a + 8 >> 2]) + -1 & n;
			p = m << 4;
			q = HEAPU16[l + (o + p << 1) >> 1] | 0;
			do
				if (h >>> 0 < 16777216)
					if ((f | 0) < 1) {
						r = 0;
						i = g;
						return r | 0
					} else {
						s = b + 1 | 0;
						t = HEAPU8[b >> 0] | 0 | j << 8;
						u = h << 8;
						break
					}
				else {
					s = b;
					t = j;
					u = h
				}
			while (0);
			h = da(u >>> 11, q) | 0;
			a: do
				if (t >>> 0 >= h >>> 0) {
					q = u - h | 0;
					j = t - h | 0;
					b = HEAPU16[l + (m + 192 << 1) >> 1] | 0;
					do
						if (q >>> 0 < 16777216)
							if (s >>> 0 < k >>> 0) {
								v = s + 1 | 0;
								w = HEAPU8[s >> 0] | 0 | j << 8;
								x = q << 8;
								break
							} else {
								r = 0;
								i = g;
								return r | 0
							}
						else {
							v = s;
							w = j;
							x = q
						}
					while (0);
					q = da(x >>> 11, b) | 0;
					if (w >>> 0 < q >>> 0) {
						y = v;
						z = w;
						A = l + 1636 | 0;
						B = q;
						C = 2;
						D = 0
					} else {
						j = x - q | 0;
						f = w - q | 0;
						q = HEAPU16[l + (m + 204 << 1) >> 1] | 0;
						do
							if (j >>> 0 < 16777216)
								if (v >>> 0 < k >>> 0) {
									E = v + 1 | 0;
									F = HEAPU8[v >> 0] | 0 | f << 8;
									G = j << 8;
									break
								} else {
									r = 0;
									i = g;
									return r | 0
								}
							else {
								E = v;
								F = f;
								G = j
							}
						while (0);
						j = da(G >>> 11, q) | 0;
						do
							if (F >>> 0 < j >>> 0) {
								f = HEAPU16[l + (p + 240 + o << 1) >> 1] | 0;
								do
									if (j >>> 0 < 16777216)
										if (E >>> 0 < k >>> 0) {
											H = E + 1 | 0;
											I = HEAPU8[E >> 0] | 0 | F << 8;
											J = j << 8;
											break
										} else {
											r = 0;
											i = g;
											return r | 0
										}
									else {
										H = E;
										I = F;
										J = j
									}
								while (0);
								b = da(J >>> 11, f) | 0;
								if (I >>> 0 < b >>> 0) {
									i = g;
									return (b >>> 0 > 16777215 | H >>> 0 < k >>> 0 ? 3 : 0) | 0
								} else {
									K = H;
									L = I - b | 0;
									M = J - b | 0;
									break
								}
							} else {
								b = G - j | 0;
								N = F - j | 0;
								O = HEAPU16[l + (m + 216 << 1) >> 1] | 0;
								do
									if (b >>> 0 < 16777216)
										if (E >>> 0 < k >>> 0) {
											P = E + 1 | 0;
											Q = HEAPU8[E >> 0] | 0 | N << 8;
											R = b << 8;
											break
										} else {
											r = 0;
											i = g;
											return r | 0
										}
									else {
										P = E;
										Q = N;
										R = b
									}
								while (0);
								b = da(R >>> 11, O) | 0;
								if (Q >>> 0 >= b >>> 0) {
									N = R - b | 0;
									f = Q - b | 0;
									S = HEAPU16[l + (m + 228 << 1) >> 1] | 0;
									do
										if (N >>> 0 < 16777216)
											if (P >>> 0 < k >>> 0) {
												T = P + 1 | 0;
												U = HEAPU8[P >> 0] | 0 | f << 8;
												V = N << 8;
												break
											} else {
												r = 0;
												i = g;
												return r | 0
											}
										else {
											T = P;
											U = f;
											V = N
										}
									while (0);
									N = da(V >>> 11, S) | 0;
									if (U >>> 0 < N >>> 0) {
										K = T;
										L = U;
										M = N
									} else {
										K = T;
										L = U - N | 0;
										M = V - N | 0
									}
								} else {
									K = P;
									L = Q;
									M = b
								}
							}
						while (0);
						y = K;
						z = L;
						A = l + 2664 | 0;
						B = M;
						C = 3;
						D = 12
					}
					j = HEAPU16[A >> 1] | 0;
					do
						if (B >>> 0 < 16777216)
							if (y >>> 0 < k >>> 0) {
								W = y + 1 | 0;
								X = HEAPU8[y >> 0] | 0 | z << 8;
								Y = B << 8;
								break
							} else {
								r = 0;
								i = g;
								return r | 0
							}
						else {
							W = y;
							X = z;
							Y = B
						}
					while (0);
					q = da(Y >>> 11, j) | 0;
					do
						if (X >>> 0 >= q >>> 0) {
							N = Y - q | 0;
							f = X - q | 0;
							O = HEAPU16[A + 2 >> 1] | 0;
							do
								if (N >>> 0 < 16777216)
									if (W >>> 0 < k >>> 0) {
										Z = W + 1 | 0;
										_ = HEAPU8[W >> 0] | 0 | f << 8;
										$ = N << 8;
										break
									} else {
										r = 0;
										i = g;
										return r | 0
									}
								else {
									Z = W;
									_ = f;
									$ = N
								}
							while (0);
							N = da($ >>> 11, O) | 0;
							if (_ >>> 0 < N >>> 0) {
								aa = Z;
								ba = _;
								ca = 8;
								ea = 8;
								fa = A + ((o << 3) + 130 << 1) | 0;
								ga = N;
								break
							} else {
								aa = Z;
								ba = _ - N | 0;
								ca = 256;
								ea = 16;
								fa = A + 516 | 0;
								ga = $ - N | 0;
								break
							}
						} else {
							aa = W;
							ba = X;
							ca = 8;
							ea = 0;
							fa = A + ((o << 3 | 2) << 1) | 0;
							ga = q
						}
					while (0);
					q = aa;
					j = ba;
					N = 1;
					f = ga;
					while (1) {
						b = HEAPU16[fa + (N << 1) >> 1] | 0;
						if (f >>> 0 < 16777216) {
							if (q >>> 0 >= k >>> 0) {
								r = 0;
								ha = 99;
								break
							}
							ia = q + 1 | 0;
							ja = HEAPU8[q >> 0] | 0 | j << 8;
							ka = f << 8
						} else {
							ia = q;
							ja = j;
							ka = f
						}
						S = da(ka >>> 11, b) | 0;
						if (ja >>> 0 < S >>> 0) {
							la = ja;
							ma = N << 1;
							na = S
						} else {
							la = ja - S | 0;
							ma = N << 1 | 1;
							na = ka - S | 0
						}
						if (ma >>> 0 < ca >>> 0) {
							q = ia;
							j = la;
							N = ma;
							f = na
						} else
							break
					}
					if ((ha | 0) == 99) {
						i = g;
						return r | 0
					}
					f = ma - ca + ea | 0;
					if (D >>> 0 < 4) {
						N = f >>> 0 > 3 ? 624 : (f << 6) + 432 | 0;
						f = ia;
						j = la;
						q = 1;
						S = na;
						while (1) {
							b = HEAPU16[l + (q + N << 1) >> 1] | 0;
							if (S >>> 0 < 16777216) {
								if (f >>> 0 >= k >>> 0) {
									r = 0;
									ha = 99;
									break
								}
								oa = f + 1 | 0;
								pa = HEAPU8[f >> 0] | 0 | j << 8;
								qa = S << 8
							} else {
								oa = f;
								pa = j;
								qa = S
							}
							ra = da(qa >>> 11, b) | 0;
							if (pa >>> 0 < ra >>> 0) {
								sa = pa;
								ta = q << 1;
								ua = ra
							} else {
								sa = pa - ra | 0;
								ta = q << 1 | 1;
								ua = qa - ra | 0
							}
							if (ta >>> 0 < 64) {
								f = oa;
								j = sa;
								q = ta;
								S = ua
							} else
								break
						}
						if ((ha | 0) == 99) {
							i = g;
							return r | 0
						}
						S = ta + -64 | 0;
						if (S >>> 0 > 3) {
							q = S >>> 1;
							j = q + -1 | 0;
							do
								if (S >>> 0 >= 14) {
									f = oa;
									N = sa;
									ra = q + -5 | 0;
									b = ua;
									while (1) {
										if (b >>> 0 < 16777216) {
											if (f >>> 0 >= k >>> 0) {
												r = 0;
												ha = 99;
												break
											}
											va = f + 1 | 0;
											wa = HEAPU8[f >> 0] | 0 | N << 8;
											xa = b << 8
										} else {
											va = f;
											wa = N;
											xa = b
										}
										b = xa >>> 1;
										N = wa - (((wa - b | 0) >>> 31) + 2147483647 & b) | 0;
										ra = ra + -1 | 0;
										if (!ra) {
											ha = 89;
											break
										} else
											f = va
									}
									if ((ha | 0) == 89) {
										ya = va;
										za = N;
										Aa = 4;
										Ba = l + 1604 | 0;
										Ca = b;
										break
									} else if ((ha | 0) == 99) {
										i = g;
										return r | 0
									}
								} else {
									ya = oa;
									za = sa;
									Aa = j;
									Ba = l + (751 - ta + ((S & 1 | 2) << j) << 1) | 0;
									Ca = ua
								}
							while (0);
							j = ya;
							S = za;
							q = 1;
							f = Aa;
							ra = Ca;
							while (1) {
								O = HEAPU16[Ba + (q << 1) >> 1] | 0;
								if (ra >>> 0 < 16777216) {
									if (j >>> 0 >= k >>> 0) {
										r = 0;
										break
									}
									Da = j + 1 | 0;
									Ea = HEAPU8[j >> 0] | 0 | S << 8;
									Fa = ra << 8
								} else {
									Da = j;
									Ea = S;
									Fa = ra
								}
								Ga = da(Fa >>> 11, O) | 0;
								if (Ea >>> 0 < Ga >>> 0) {
									Ha = Ea;
									Ia = q << 1;
									Ja = Ga
								} else {
									Ha = Ea - Ga | 0;
									Ia = q << 1 | 1;
									Ja = Fa - Ga | 0
								}
								f = f + -1 | 0;
								if (!f) {
									Ka = Da;
									La = Ja;
									Ma = C;
									break a
								} else {
									j = Da;
									S = Ha;
									q = Ia;
									ra = Ja
								}
							}
							i = g;
							return r | 0
						} else {
							Ka = oa;
							La = ua;
							Ma = C
						}
					} else {
						Ka = ia;
						La = na;
						Ma = C
					}
				} else {
					if ((HEAP32[a + 48 >> 2] | 0) == 0 ? (n | 0) == 0 : 0)
						Na = l + 3692 | 0;
					else {
						ra = HEAP32[a >> 2] | 0;
						q = HEAP32[a + 36 >> 2] | 0;
						if (!q)
							Oa = HEAP32[a + 40 >> 2] | 0;
						else
							Oa = q;
						Na = l + (((((d[(HEAP32[a + 20 >> 2] | 0) + (Oa + -1) >> 0] | 0) >>> (8 - ra | 0)) + (((1 << HEAP32[a + 4 >> 2]) + -1 & n) << ra) | 0) * 768 | 0) + 1846 << 1) | 0
					}
					if (m >>> 0 < 7) {
						ra = s;
						q = t;
						S = h;
						j = 1;
						while (1) {
							f = HEAPU16[Na + (j << 1) >> 1] | 0;
							if (S >>> 0 < 16777216) {
								if (ra >>> 0 >= k >>> 0) {
									r = 0;
									break
								}
								Pa = ra + 1 | 0;
								Qa = HEAPU8[ra >> 0] | 0 | q << 8;
								Ra = S << 8
							} else {
								Pa = ra;
								Qa = q;
								Ra = S
							}
							Ga = da(Ra >>> 11, f) | 0;
							if (Qa >>> 0 < Ga >>> 0) {
								Sa = Qa;
								Ta = Ga;
								Ua = j << 1
							} else {
								Sa = Qa - Ga | 0;
								Ta = Ra - Ga | 0;
								Ua = j << 1 | 1
							}
							if (Ua >>> 0 < 256) {
								ra = Pa;
								q = Sa;
								S = Ta;
								j = Ua
							} else {
								Ka = Pa;
								La = Ta;
								Ma = 1;
								break a
							}
						}
						i = g;
						return r | 0
					}
					j = HEAP32[a + 36 >> 2] | 0;
					S = HEAP32[a + 56 >> 2] | 0;
					if (j >>> 0 < S >>> 0)
						Va = HEAP32[a + 40 >> 2] | 0;
					else
						Va = 0;
					q = s;
					ra = t;
					Ga = HEAPU8[(HEAP32[a + 20 >> 2] | 0) + (j - S + Va) >> 0] | 0;
					S = 256;
					j = h;
					f = 1;
					while (1) {
						Ga = Ga << 1;
						O = Ga & S;
						Wa = HEAPU16[Na + (O + S + f << 1) >> 1] | 0;
						if (j >>> 0 < 16777216) {
							if (q >>> 0 >= k >>> 0) {
								r = 0;
								break
							}
							Xa = q + 1 | 0;
							Ya = HEAPU8[q >> 0] | 0 | ra << 8;
							Za = j << 8
						} else {
							Xa = q;
							Ya = ra;
							Za = j
						}
						_a = da(Za >>> 11, Wa) | 0;
						if (Ya >>> 0 < _a >>> 0) {
							$a = Ya;
							ab = O ^ S;
							bb = _a;
							cb = f << 1
						} else {
							$a = Ya - _a | 0;
							ab = O;
							bb = Za - _a | 0;
							cb = f << 1 | 1
						}
						if (cb >>> 0 >= 256) {
							Ka = Xa;
							La = bb;
							Ma = 1;
							break a
						} else {
							q = Xa;
							ra = $a;
							S = ab;
							j = bb;
							f = cb
						}
					}
					i = g;
					return r | 0
				}
			while (0);
			r = La >>> 0 > 16777215 | Ka >>> 0 < k >>> 0 ? Ma : 0;
			i = g;
			return r | 0
		}
		function ik(f, g, h) {
			f = f | 0;
			g = g | 0;
			h = h | 0;
			var j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0,
			O = 0,
			P = 0,
			Q = 0,
			R = 0,
			S = 0,
			T = 0,
			U = 0,
			V = 0,
			W = 0,
			X = 0,
			Y = 0,
			Z = 0,
			_ = 0,
			$ = 0,
			aa = 0,
			ba = 0,
			ca = 0,
			ea = 0,
			fa = 0,
			ga = 0,
			ha = 0,
			ia = 0,
			ja = 0,
			ka = 0,
			la = 0,
			ma = 0,
			na = 0,
			oa = 0,
			pa = 0,
			qa = 0,
			ra = 0,
			sa = 0,
			ta = 0,
			ua = 0,
			va = 0,
			wa = 0,
			xa = 0,
			ya = 0,
			za = 0,
			Aa = 0,
			Ba = 0,
			Ca = 0,
			Da = 0,
			Ea = 0,
			Fa = 0,
			Ga = 0,
			Ha = 0,
			Ia = 0,
			Ja = 0,
			Ka = 0,
			La = 0,
			Ma = 0,
			Na = 0,
			Oa = 0,
			Pa = 0,
			Qa = 0,
			Ra = 0,
			Sa = 0,
			Ta = 0,
			Ua = 0,
			Va = 0,
			Wa = 0,
			Xa = 0,
			Ya = 0,
			Za = 0,
			_a = 0,
			$a = 0,
			ab = 0,
			bb = 0,
			cb = 0,
			db = 0,
			eb = 0,
			fb = 0,
			gb = 0,
			hb = 0,
			ib = 0,
			jb = 0,
			kb = 0,
			lb = 0,
			mb = 0,
			nb = 0,
			ob = 0,
			pb = 0,
			qb = 0,
			rb = 0,
			sb = 0,
			tb = 0,
			ub = 0,
			vb = 0,
			wb = 0,
			xb = 0,
			yb = 0,
			zb = 0,
			Ab = 0,
			Bb = 0,
			Cb = 0,
			Db = 0,
			Eb = 0,
			Fb = 0,
			Gb = 0,
			Hb = 0,
			Ib = 0,
			Jb = 0,
			Kb = 0,
			Lb = 0,
			Mb = 0,
			Nb = 0,
			Ob = 0,
			Pb = 0,
			Qb = 0,
			Rb = 0,
			Sb = 0,
			Tb = 0,
			Ub = 0,
			Vb = 0,
			Wb = 0,
			Xb = 0,
			Yb = 0,
			Zb = 0,
			_b = 0,
			$b = 0,
			ac = 0,
			bc = 0,
			cc = 0,
			dc = 0,
			ec = 0,
			fc = 0,
			gc = 0,
			hc = 0,
			ic = 0,
			jc = 0,
			kc = 0,
			lc = 0,
			mc = 0,
			nc = 0,
			oc = 0,
			pc = 0,
			qc = 0,
			rc = 0,
			sc = 0,
			tc = 0,
			uc = 0,
			vc = 0,
			wc = 0,
			xc = 0,
			yc = 0,
			zc = 0,
			Ac = 0,
			Bc = 0,
			Cc = 0,
			Dc = 0,
			Ec = 0,
			Fc = 0,
			Gc = 0,
			Hc = 0,
			Ic = 0,
			Jc = 0,
			Kc = 0,
			Lc = 0,
			Mc = 0,
			Nc = 0,
			Oc = 0,
			Pc = 0,
			Qc = 0,
			Rc = 0,
			Sc = 0,
			Tc = 0,
			Uc = 0,
			Vc = 0,
			Wc = 0,
			Xc = 0,
			Yc = 0,
			Zc = 0,
			_c = 0,
			$c = 0,
			ad = 0,
			bd = 0,
			cd = 0,
			dd = 0,
			ed = 0,
			fd = 0,
			gd = 0,
			hd = 0,
			id = 0,
			jd = 0,
			kd = 0,
			ld = 0,
			md = 0,
			nd = 0,
			od = 0,
			pd = 0,
			qd = 0,
			rd = 0,
			sd = 0,
			td = 0,
			ud = 0,
			vd = 0,
			wd = 0,
			xd = 0,
			yd = 0,
			zd = 0,
			Ad = 0,
			Bd = 0,
			Cd = 0,
			Dd = 0,
			Ed = 0,
			Fd = 0,
			Gd = 0,
			Hd = 0,
			Id = 0,
			Jd = 0,
			Kd = 0,
			Ld = 0,
			Md = 0,
			Nd = 0,
			Od = 0,
			Pd = 0,
			Qd = 0,
			Rd = 0,
			Sd = 0,
			Td = 0,
			Ud = 0,
			Vd = 0,
			Wd = 0,
			Xd = 0,
			Yd = 0,
			Zd = 0,
			_d = 0;
			j = i;
			k = f + 48 | 0;
			l = f + 12 | 0;
			m = f + 44 | 0;
			n = f + 36 | 0;
			o = f + 16 | 0;
			p = f + 52 | 0;
			q = f + 56 | 0;
			r = f + 60 | 0;
			s = f + 64 | 0;
			t = f + 68 | 0;
			u = f + 8 | 0;
			v = f + 4 | 0;
			w = f + 20 | 0;
			x = f + 40 | 0;
			y = f + 24 | 0;
			z = f + 28 | 0;
			A = f + 32 | 0;
			B = f + 72 | 0;
			a: while (1) {
				C = HEAP32[k >> 2] | 0;
				D = (C | 0) == 0;
				if (D) {
					E = HEAP32[m >> 2] | 0;
					F = (HEAP32[l >> 2] | 0) - E | 0;
					G = HEAP32[n >> 2] | 0;
					H = E;
					I = G;
					J = (g - G | 0) >>> 0 > F >>> 0 ? G + F | 0 : g
				} else {
					H = HEAP32[m >> 2] | 0;
					I = HEAP32[n >> 2] | 0;
					J = g
				}
				F = HEAP32[o >> 2] | 0;
				G = (1 << HEAP32[u >> 2]) + -1 | 0;
				E = (1 << HEAP32[v >> 2]) + -1 | 0;
				K = HEAP32[f >> 2] | 0;
				L = HEAP32[w >> 2] | 0;
				M = HEAP32[x >> 2] | 0;
				N = F + 3692 | 0;
				O = 8 - K | 0;
				P = F + 1636 | 0;
				Q = F + 1606 | 0;
				R = F + 2664 | 0;
				S = ~J;
				T = HEAP32[y >> 2] | 0;
				U = HEAP32[A >> 2] | 0;
				V = I;
				W = 0;
				X = H;
				Y = HEAP32[z >> 2] | 0;
				Z = HEAP32[q >> 2] | 0;
				_ = HEAP32[r >> 2] | 0;
				$ = HEAP32[s >> 2] | 0;
				aa = HEAP32[t >> 2] | 0;
				ba = HEAP32[p >> 2] | 0;
				b: while (1) {
					ca = X & G;
					ea = ba << 4;
					fa = F + (ea + ca << 1) | 0;
					ga = HEAPU16[fa >> 1] | 0;
					if (Y >>> 0 < 16777216) {
						ha = T + 1 | 0;
						ia = HEAPU8[T >> 0] | 0 | U << 8;
						ja = Y << 8
					} else {
						ha = T;
						ia = U;
						ja = Y
					}
					ka = da(ja >>> 11, ga) | 0;
					c: do
						if (ia >>> 0 < ka >>> 0) {
							HEAP16[fa >> 1] = ((2048 - ga | 0) >>> 5) + ga;
							if (!(X | C))
								la = N;
							else
								la = F + (((((HEAPU8[L + (((V | 0) == 0 ? M : V) + -1) >> 0] | 0) >>> O) + ((X & E) << K) | 0) * 768 | 0) + 1846 << 1) | 0;
							if (ba >>> 0 < 7) {
								ma = ha;
								na = ia;
								oa = ka;
								pa = 1;
								while (1) {
									qa = la + (pa << 1) | 0;
									ra = HEAPU16[qa >> 1] | 0;
									if (oa >>> 0 < 16777216) {
										sa = ma + 1 | 0;
										ta = HEAPU8[ma >> 0] | 0 | na << 8;
										ua = oa << 8
									} else {
										sa = ma;
										ta = na;
										ua = oa
									}
									va = da(ua >>> 11, ra) | 0;
									if (ta >>> 0 < va >>> 0) {
										HEAP16[qa >> 1] = ((2048 - ra | 0) >>> 5) + ra;
										wa = ta;
										xa = va;
										ya = pa << 1
									} else {
										HEAP16[qa >> 1] = ra - (ra >>> 5);
										wa = ta - va | 0;
										xa = ua - va | 0;
										ya = pa << 1 | 1
									}
									if (ya >>> 0 < 256) {
										ma = sa;
										na = wa;
										oa = xa;
										pa = ya
									} else
										break
								}
								za = ba >>> 0 > 3 ? 3 : ba;
								Aa = sa;
								Ba = wa;
								Ca = xa;
								Da = ya
							} else {
								pa = ha;
								oa = ia;
								na = HEAPU8[(HEAP32[w >> 2] | 0) + (V - Z + (V >>> 0 < Z >>> 0 ? M : 0)) >> 0] | 0;
								ma = 256;
								va = ka;
								ra = 1;
								while (1) {
									na = na << 1;
									qa = na & ma;
									Ea = la + (ma + ra + qa << 1) | 0;
									Fa = HEAPU16[Ea >> 1] | 0;
									if (va >>> 0 < 16777216) {
										Ga = pa + 1 | 0;
										Ha = HEAPU8[pa >> 0] | 0 | oa << 8;
										Ia = va << 8
									} else {
										Ga = pa;
										Ha = oa;
										Ia = va
									}
									Ja = da(Ia >>> 11, Fa) | 0;
									if (Ha >>> 0 < Ja >>> 0) {
										HEAP16[Ea >> 1] = ((2048 - Fa | 0) >>> 5) + Fa;
										Ka = Ha;
										La = qa ^ ma;
										Ma = Ja;
										Na = ra << 1
									} else {
										HEAP16[Ea >> 1] = Fa - (Fa >>> 5);
										Ka = Ha - Ja | 0;
										La = qa;
										Ma = Ia - Ja | 0;
										Na = ra << 1 | 1
									}
									if (Na >>> 0 >= 256)
										break;
									else {
										pa = Ga;
										oa = Ka;
										ma = La;
										va = Ma;
										ra = Na
									}
								}
								za = ba >>> 0 < 10 ? 3 : 6;
								Aa = Ga;
								Ba = Ka;
								Ca = Ma;
								Da = Na
							}
							HEAP8[L + V >> 0] = Da;
							Oa = Aa;
							Pa = Ba;
							Qa = V + 1 | 0;
							Ra = W;
							Sa = X + 1 | 0;
							Ta = Ca;
							Ua = Z;
							Va = _;
							Wa = $;
							Xa = aa;
							Ya = ba - za | 0
						} else {
							ra = ja - ka | 0;
							va = ia - ka | 0;
							HEAP16[fa >> 1] = ga - (ga >>> 5);
							ma = F + (ba + 192 << 1) | 0;
							oa = HEAPU16[ma >> 1] | 0;
							if (ra >>> 0 < 16777216) {
								Za = ha + 1 | 0;
								_a = HEAPU8[ha >> 0] | 0 | va << 8;
								$a = ra << 8
							} else {
								Za = ha;
								_a = va;
								$a = ra
							}
							ra = da($a >>> 11, oa) | 0;
							if (_a >>> 0 < ra >>> 0) {
								HEAP16[ma >> 1] = ((2048 - oa | 0) >>> 5) + oa;
								ab = Za;
								bb = _a;
								cb = P;
								db = ra;
								eb = Z;
								fb = _;
								gb = $;
								hb = aa;
								ib = ba + 12 | 0
							} else {
								va = $a - ra | 0;
								pa = _a - ra | 0;
								HEAP16[ma >> 1] = oa - (oa >>> 5);
								if (!(X | C)) {
									jb = 1;
									kb = 164;
									break a
								}
								oa = F + (ba + 204 << 1) | 0;
								ma = HEAPU16[oa >> 1] | 0;
								if (va >>> 0 < 16777216) {
									lb = Za + 1 | 0;
									mb = HEAPU8[Za >> 0] | 0 | pa << 8;
									nb = va << 8
								} else {
									lb = Za;
									mb = pa;
									nb = va
								}
								va = da(nb >>> 11, ma) | 0;
								do
									if (mb >>> 0 < va >>> 0) {
										HEAP16[oa >> 1] = ((2048 - ma | 0) >>> 5) + ma;
										pa = F + (ca + 240 + ea << 1) | 0;
										ra = HEAPU16[pa >> 1] | 0;
										if (va >>> 0 < 16777216) {
											ob = lb + 1 | 0;
											pb = HEAPU8[lb >> 0] | 0 | mb << 8;
											qb = va << 8
										} else {
											ob = lb;
											pb = mb;
											qb = va
										}
										na = da(qb >>> 11, ra) | 0;
										if (pb >>> 0 < na >>> 0) {
											HEAP16[pa >> 1] = ((2048 - ra | 0) >>> 5) + ra;
											HEAP8[L + V >> 0] = HEAP8[L + (V - Z + (V >>> 0 < Z >>> 0 ? M : 0)) >> 0] | 0;
											Oa = ob;
											Pa = pb;
											Qa = V + 1 | 0;
											Ra = W;
											Sa = X + 1 | 0;
											Ta = na;
											Ua = Z;
											Va = _;
											Wa = $;
											Xa = aa;
											Ya = ba >>> 0 < 7 ? 9 : 11;
											break c
										} else {
											HEAP16[pa >> 1] = ra - (ra >>> 5);
											rb = ob;
											sb = pb - na | 0;
											tb = qb - na | 0;
											ub = Z;
											vb = _;
											wb = $;
											xb = aa;
											break
										}
									} else {
										na = nb - va | 0;
										ra = mb - va | 0;
										HEAP16[oa >> 1] = ma - (ma >>> 5);
										pa = F + (ba + 216 << 1) | 0;
										Ja = HEAPU16[pa >> 1] | 0;
										if (na >>> 0 < 16777216) {
											yb = lb + 1 | 0;
											zb = HEAPU8[lb >> 0] | 0 | ra << 8;
											Ab = na << 8
										} else {
											yb = lb;
											zb = ra;
											Ab = na
										}
										na = da(Ab >>> 11, Ja) | 0;
										if (zb >>> 0 < na >>> 0) {
											HEAP16[pa >> 1] = ((2048 - Ja | 0) >>> 5) + Ja;
											rb = yb;
											sb = zb;
											tb = na;
											ub = _;
											vb = Z;
											wb = $;
											xb = aa;
											break
										}
										ra = Ab - na | 0;
										qa = zb - na | 0;
										HEAP16[pa >> 1] = Ja - (Ja >>> 5);
										Ja = F + (ba + 228 << 1) | 0;
										pa = HEAPU16[Ja >> 1] | 0;
										if (ra >>> 0 < 16777216) {
											Bb = yb + 1 | 0;
											Cb = HEAPU8[yb >> 0] | 0 | qa << 8;
											Db = ra << 8
										} else {
											Bb = yb;
											Cb = qa;
											Db = ra
										}
										ra = da(Db >>> 11, pa) | 0;
										if (Cb >>> 0 < ra >>> 0) {
											Eb = Cb;
											Fb = $;
											Gb = ra;
											Hb = aa;
											Ib = ((2048 - pa | 0) >>> 5) + pa | 0
										} else {
											Eb = Cb - ra | 0;
											Fb = aa;
											Gb = Db - ra | 0;
											Hb = $;
											Ib = pa - (pa >>> 5) | 0
										}
										HEAP16[Ja >> 1] = Ib;
										rb = Bb;
										sb = Eb;
										tb = Gb;
										ub = Fb;
										vb = Z;
										wb = _;
										xb = Hb
									}
								while (0);
								ab = rb;
								bb = sb;
								cb = R;
								db = tb;
								eb = ub;
								fb = vb;
								gb = wb;
								hb = xb;
								ib = ba >>> 0 < 7 ? 8 : 11
							}
							ma = HEAPU16[cb >> 1] | 0;
							if (db >>> 0 < 16777216) {
								Jb = ab + 1 | 0;
								Kb = HEAPU8[ab >> 0] | 0 | bb << 8;
								Lb = db << 8
							} else {
								Jb = ab;
								Kb = bb;
								Lb = db
							}
							oa = da(Lb >>> 11, ma) | 0;
							do
								if (Kb >>> 0 >= oa >>> 0) {
									va = Lb - oa | 0;
									Ja = Kb - oa | 0;
									HEAP16[cb >> 1] = ma - (ma >>> 5);
									pa = cb + 2 | 0;
									ra = HEAPU16[pa >> 1] | 0;
									if (va >>> 0 < 16777216) {
										Mb = Jb + 1 | 0;
										Nb = HEAPU8[Jb >> 0] | 0 | Ja << 8;
										Ob = va << 8
									} else {
										Mb = Jb;
										Nb = Ja;
										Ob = va
									}
									va = da(Ob >>> 11, ra) | 0;
									if (Nb >>> 0 < va >>> 0) {
										HEAP16[pa >> 1] = ((2048 - ra | 0) >>> 5) + ra;
										Pb = Mb;
										Qb = Nb;
										Rb = 8;
										Sb = 8;
										Tb = cb + ((ca << 3) + 130 << 1) | 0;
										Ub = va;
										break
									} else {
										HEAP16[pa >> 1] = ra - (ra >>> 5);
										Pb = Mb;
										Qb = Nb - va | 0;
										Rb = 256;
										Sb = 16;
										Tb = cb + 516 | 0;
										Ub = Ob - va | 0;
										break
									}
								} else {
									HEAP16[cb >> 1] = ((2048 - ma | 0) >>> 5) + ma;
									Pb = Jb;
									Qb = Kb;
									Rb = 8;
									Sb = 0;
									Tb = cb + ((ca << 3 | 2) << 1) | 0;
									Ub = oa
								}
							while (0);
							oa = Pb;
							ma = Qb;
							va = 1;
							ra = Ub;
							while (1) {
								pa = Tb + (va << 1) | 0;
								Ja = HEAPU16[pa >> 1] | 0;
								if (ra >>> 0 < 16777216) {
									Vb = oa + 1 | 0;
									Wb = HEAPU8[oa >> 0] | 0 | ma << 8;
									Xb = ra << 8
								} else {
									Vb = oa;
									Wb = ma;
									Xb = ra
								}
								qa = da(Xb >>> 11, Ja) | 0;
								if (Wb >>> 0 < qa >>> 0) {
									HEAP16[pa >> 1] = ((2048 - Ja | 0) >>> 5) + Ja;
									Yb = Wb;
									Zb = va << 1;
									_b = qa
								} else {
									HEAP16[pa >> 1] = Ja - (Ja >>> 5);
									Yb = Wb - qa | 0;
									Zb = va << 1 | 1;
									_b = Xb - qa | 0
								}
								if (Zb >>> 0 < Rb >>> 0) {
									oa = Vb;
									ma = Yb;
									va = Zb;
									ra = _b
								} else
									break
							}
							$b = Zb - Rb + Sb | 0;
							if (ib >>> 0 > 11) {
								ra = $b >>> 0 > 3 ? 624 : ($b << 6) + 432 | 0;
								va = F + ((ra | 1) << 1) | 0;
								ma = HEAPU16[va >> 1] | 0;
								if (_b >>> 0 < 16777216) {
									ac = Vb + 1 | 0;
									bc = HEAPU8[Vb >> 0] | 0 | Yb << 8;
									cc = _b << 8
								} else {
									ac = Vb;
									bc = Yb;
									cc = _b
								}
								oa = da(cc >>> 11, ma) | 0;
								if (bc >>> 0 < oa >>> 0) {
									dc = bc;
									ec = 2;
									fc = oa;
									gc = ((2048 - ma | 0) >>> 5) + ma | 0
								} else {
									dc = bc - oa | 0;
									ec = 3;
									fc = cc - oa | 0;
									gc = ma - (ma >>> 5) | 0
								}
								HEAP16[va >> 1] = gc;
								va = F + ((ec | ra) << 1) | 0;
								ma = HEAPU16[va >> 1] | 0;
								if (fc >>> 0 < 16777216) {
									hc = ac + 1 | 0;
									ic = HEAPU8[ac >> 0] | 0 | dc << 8;
									jc = fc << 8
								} else {
									hc = ac;
									ic = dc;
									jc = fc
								}
								oa = da(jc >>> 11, ma) | 0;
								if (ic >>> 0 < oa >>> 0) {
									HEAP16[va >> 1] = ((2048 - ma | 0) >>> 5) + ma;
									kc = ic;
									lc = ec << 1;
									mc = oa
								} else {
									HEAP16[va >> 1] = ma - (ma >>> 5);
									kc = ic - oa | 0;
									lc = ec << 1 | 1;
									mc = jc - oa | 0
								}
								oa = F + (lc + ra << 1) | 0;
								ma = HEAPU16[oa >> 1] | 0;
								if (mc >>> 0 < 16777216) {
									nc = hc + 1 | 0;
									oc = HEAPU8[hc >> 0] | 0 | kc << 8;
									pc = mc << 8
								} else {
									nc = hc;
									oc = kc;
									pc = mc
								}
								va = da(pc >>> 11, ma) | 0;
								if (oc >>> 0 < va >>> 0) {
									HEAP16[oa >> 1] = ((2048 - ma | 0) >>> 5) + ma;
									qc = oc;
									rc = lc << 1;
									sc = va
								} else {
									HEAP16[oa >> 1] = ma - (ma >>> 5);
									qc = oc - va | 0;
									rc = lc << 1 | 1;
									sc = pc - va | 0
								}
								va = F + (rc + ra << 1) | 0;
								ma = HEAPU16[va >> 1] | 0;
								if (sc >>> 0 < 16777216) {
									tc = nc + 1 | 0;
									uc = HEAPU8[nc >> 0] | 0 | qc << 8;
									vc = sc << 8
								} else {
									tc = nc;
									uc = qc;
									vc = sc
								}
								oa = da(vc >>> 11, ma) | 0;
								if (uc >>> 0 < oa >>> 0) {
									HEAP16[va >> 1] = ((2048 - ma | 0) >>> 5) + ma;
									wc = uc;
									xc = rc << 1;
									yc = oa
								} else {
									HEAP16[va >> 1] = ma - (ma >>> 5);
									wc = uc - oa | 0;
									xc = rc << 1 | 1;
									yc = vc - oa | 0
								}
								oa = F + (xc + ra << 1) | 0;
								ma = HEAPU16[oa >> 1] | 0;
								if (yc >>> 0 < 16777216) {
									zc = tc + 1 | 0;
									Ac = HEAPU8[tc >> 0] | 0 | wc << 8;
									Bc = yc << 8
								} else {
									zc = tc;
									Ac = wc;
									Bc = yc
								}
								va = da(Bc >>> 11, ma) | 0;
								if (Ac >>> 0 < va >>> 0) {
									HEAP16[oa >> 1] = ((2048 - ma | 0) >>> 5) + ma;
									Cc = Ac;
									Dc = xc << 1;
									Ec = va
								} else {
									HEAP16[oa >> 1] = ma - (ma >>> 5);
									Cc = Ac - va | 0;
									Dc = xc << 1 | 1;
									Ec = Bc - va | 0
								}
								va = F + (Dc + ra << 1) | 0;
								ra = HEAPU16[va >> 1] | 0;
								if (Ec >>> 0 < 16777216) {
									Fc = zc + 1 | 0;
									Gc = HEAPU8[zc >> 0] | 0 | Cc << 8;
									Hc = Ec << 8
								} else {
									Fc = zc;
									Gc = Cc;
									Hc = Ec
								}
								ma = da(Hc >>> 11, ra) | 0;
								if (Gc >>> 0 < ma >>> 0) {
									HEAP16[va >> 1] = ((2048 - ra | 0) >>> 5) + ra;
									Ic = Gc;
									Jc = Dc << 1;
									Kc = ma
								} else {
									HEAP16[va >> 1] = ra - (ra >>> 5);
									Ic = Gc - ma | 0;
									Jc = Dc << 1 | 1;
									Kc = Hc - ma | 0
								}
								ma = Jc + -64 | 0;
								d: do
									if (ma >>> 0 > 3) {
										ra = ma >>> 1;
										va = ra + -1 | 0;
										oa = ma & 1 | 2;
										if (ma >>> 0 < 14) {
											qa = oa << va;
											Ja = 751 - Jc + qa | 0;
											pa = Fc;
											na = Ic;
											Fa = qa;
											qa = 1;
											Ea = 1;
											Lc = va;
											va = Kc;
											while (1) {
												Mc = F + (Ja + qa << 1) | 0;
												Nc = HEAPU16[Mc >> 1] | 0;
												if (va >>> 0 < 16777216) {
													Oc = pa + 1 | 0;
													Pc = HEAPU8[pa >> 0] | 0 | na << 8;
													Qc = va << 8
												} else {
													Oc = pa;
													Pc = na;
													Qc = va
												}
												Rc = da(Qc >>> 11, Nc) | 0;
												if (Pc >>> 0 < Rc >>> 0) {
													HEAP16[Mc >> 1] = ((2048 - Nc | 0) >>> 5) + Nc;
													Sc = Pc;
													Tc = Fa;
													Uc = qa << 1;
													Vc = Rc
												} else {
													HEAP16[Mc >> 1] = Nc - (Nc >>> 5);
													Sc = Pc - Rc | 0;
													Tc = Ea | Fa;
													Uc = qa << 1 | 1;
													Vc = Qc - Rc | 0
												}
												Lc = Lc + -1 | 0;
												if (!Lc) {
													Wc = Oc;
													Xc = Sc;
													Yc = Tc;
													Zc = Vc;
													break d
												} else {
													pa = Oc;
													na = Sc;
													Fa = Tc;
													qa = Uc;
													Ea = Ea << 1;
													va = Vc
												}
											}
										}
										va = Fc;
										Ea = Ic;
										qa = oa;
										Fa = ra + -5 | 0;
										na = Kc;
										while (1) {
											if (na >>> 0 < 16777216) {
												_c = va + 1 | 0;
												$c = HEAPU8[va >> 0] | 0 | Ea << 8;
												ad = na << 8
											} else {
												_c = va;
												$c = Ea;
												ad = na
											}
											na = ad >>> 1;
											pa = $c - na | 0;
											Lc = pa >> 31;
											qa = Lc + (qa << 1 | 1) | 0;
											Ea = (Lc & na) + pa | 0;
											Fa = Fa + -1 | 0;
											if (!Fa)
												break;
											else
												va = _c
										}
										va = qa << 4;
										Fa = HEAPU16[Q >> 1] | 0;
										if (ad >>> 0 < 33554432) {
											bd = _c + 1 | 0;
											cd = HEAPU8[_c >> 0] | 0 | Ea << 8;
											dd = na << 8
										} else {
											bd = _c;
											cd = Ea;
											dd = na
										}
										ra = da(dd >>> 11, Fa) | 0;
										if (cd >>> 0 < ra >>> 0) {
											HEAP16[Q >> 1] = ((2048 - Fa | 0) >>> 5) + Fa;
											ed = cd;
											fd = va;
											gd = 2;
											hd = ra
										} else {
											HEAP16[Q >> 1] = Fa - (Fa >>> 5);
											ed = cd - ra | 0;
											fd = va | 1;
											gd = 3;
											hd = dd - ra | 0
										}
										ra = F + (gd + 802 << 1) | 0;
										va = HEAPU16[ra >> 1] | 0;
										if (hd >>> 0 < 16777216) {
											id = bd + 1 | 0;
											jd = HEAPU8[bd >> 0] | 0 | ed << 8;
											kd = hd << 8
										} else {
											id = bd;
											jd = ed;
											kd = hd
										}
										Fa = da(kd >>> 11, va) | 0;
										if (jd >>> 0 < Fa >>> 0) {
											HEAP16[ra >> 1] = ((2048 - va | 0) >>> 5) + va;
											ld = jd;
											md = fd;
											nd = gd << 1;
											od = Fa
										} else {
											HEAP16[ra >> 1] = va - (va >>> 5);
											ld = jd - Fa | 0;
											md = fd | 2;
											nd = gd << 1 | 1;
											od = kd - Fa | 0
										}
										Fa = F + (nd + 802 << 1) | 0;
										va = HEAPU16[Fa >> 1] | 0;
										if (od >>> 0 < 16777216) {
											pd = id + 1 | 0;
											qd = HEAPU8[id >> 0] | 0 | ld << 8;
											rd = od << 8
										} else {
											pd = id;
											qd = ld;
											rd = od
										}
										ra = da(rd >>> 11, va) | 0;
										if (qd >>> 0 < ra >>> 0) {
											HEAP16[Fa >> 1] = ((2048 - va | 0) >>> 5) + va;
											sd = qd;
											td = md;
											ud = nd << 1;
											vd = ra
										} else {
											HEAP16[Fa >> 1] = va - (va >>> 5);
											sd = qd - ra | 0;
											td = md | 4;
											ud = nd << 1 | 1;
											vd = rd - ra | 0
										}
										ra = F + (ud + 802 << 1) | 0;
										va = HEAPU16[ra >> 1] | 0;
										if (vd >>> 0 < 16777216) {
											wd = pd + 1 | 0;
											xd = HEAPU8[pd >> 0] | 0 | sd << 8;
											yd = vd << 8
										} else {
											wd = pd;
											xd = sd;
											yd = vd
										}
										Fa = da(yd >>> 11, va) | 0;
										if (xd >>> 0 < Fa >>> 0) {
											HEAP16[ra >> 1] = ((2048 - va | 0) >>> 5) + va;
											zd = xd;
											Ad = td;
											Bd = Fa
										} else {
											HEAP16[ra >> 1] = va - (va >>> 5);
											zd = xd - Fa | 0;
											Ad = td | 8;
											Bd = yd - Fa | 0
										}
										if ((Ad | 0) == -1) {
											kb = 133;
											break b
										} else {
											Wc = wd;
											Xc = zd;
											Yc = Ad;
											Zc = Bd
										}
									} else {
										Wc = Fc;
										Xc = Ic;
										Yc = ma;
										Zc = Kc
									}
								while (0);
								ma = Yc + 1 | 0;
								if (D) {
									if (Yc >>> 0 >= X >>> 0) {
										jb = 1;
										kb = 164;
										break a
									}
								} else if (Yc >>> 0 >= C >>> 0) {
									jb = 1;
									kb = 164;
									break a
								}
								Cd = Wc;
								Dd = Xc;
								Ed = Zc;
								Fd = ma;
								Gd = eb;
								Hd = fb;
								Id = gb;
								Jd = ib >>> 0 < 19 ? 7 : 10
							} else {
								Cd = Vb;
								Dd = Yb;
								Ed = _b;
								Fd = eb;
								Gd = fb;
								Hd = gb;
								Id = hb;
								Jd = ib
							}
							ma = $b + 2 | 0;
							if ((J | 0) == (V | 0)) {
								jb = 1;
								kb = 164;
								break a
							}
							Fa = J - V | 0;
							va = Fa >>> 0 < ma >>> 0 ? Fa : ma;
							Fa = (V >>> 0 < Fd >>> 0 ? M : 0) + (V - Fd) | 0;
							ra = va + X | 0;
							oa = ma - va | 0;
							if ((Fa + va | 0) >>> 0 <= M >>> 0) {
								ma = Fa - V | 0;
								pa = va + V | 0;
								Lc = L + pa | 0;
								Ja = L + V | 0;
								while (1) {
									HEAP8[Ja >> 0] = HEAP8[Ja + ma >> 0] | 0;
									Ja = Ja + 1 | 0;
									if ((Ja | 0) == (Lc | 0)) {
										Oa = Cd;
										Pa = Dd;
										Qa = pa;
										Ra = oa;
										Sa = ra;
										Ta = Ed;
										Ua = Fd;
										Va = Gd;
										Wa = Hd;
										Xa = Id;
										Ya = Jd;
										break c
									}
								}
							}
							pa = Rb + -3 - Sb - Zb | 0;
							Lc = V + S | 0;
							Ja = pa >>> 0 > Lc >>> 0;
							ma = va;
							Rc = V;
							Nc = Fa;
							while (1) {
								HEAP8[L + Rc >> 0] = HEAP8[L + Nc >> 0] | 0;
								Mc = Nc + 1 | 0;
								ma = ma + -1 | 0;
								if (!ma)
									break;
								else {
									Rc = Rc + 1 | 0;
									Nc = (Mc | 0) == (M | 0) ? 0 : Mc
								}
							}
							Oa = Cd;
							Pa = Dd;
							Qa = V + -1 - (Ja ? pa : Lc) | 0;
							Ra = oa;
							Sa = ra;
							Ta = Ed;
							Ua = Fd;
							Va = Gd;
							Wa = Hd;
							Xa = Id;
							Ya = Jd
						}
					while (0);
					if (Qa >>> 0 < J >>> 0 & Oa >>> 0 < h >>> 0) {
						T = Oa;
						U = Pa;
						V = Qa;
						W = Ra;
						X = Sa;
						Y = Ta;
						Z = Ua;
						_ = Va;
						$ = Wa;
						aa = Xa;
						ba = Ya
					} else {
						Kd = Sa;
						Ld = Ra;
						Md = Qa;
						Nd = Ua;
						Od = Oa;
						Pd = Pa;
						Qd = Ta;
						Rd = Va;
						Sd = Wa;
						Td = Xa;
						Ud = Ya;
						break
					}
				}
				if ((kb | 0) == 133) {
					kb = 0;
					Kd = X;
					Ld = $b + 274 | 0;
					Md = V;
					Nd = eb;
					Od = wd;
					Pd = zd;
					Qd = Bd;
					Rd = fb;
					Sd = gb;
					Td = hb;
					Ud = ib + -12 | 0
				}
				if (Qd >>> 0 < 16777216) {
					Vd = Od + 1 | 0;
					Wd = HEAPU8[Od >> 0] | 0 | Pd << 8;
					Xd = Qd << 8
				} else {
					Vd = Od;
					Wd = Pd;
					Xd = Qd
				}
				HEAP32[y >> 2] = Vd;
				HEAP32[z >> 2] = Xd;
				HEAP32[A >> 2] = Wd;
				HEAP32[B >> 2] = Ld;
				HEAP32[n >> 2] = Md;
				HEAP32[m >> 2] = Kd;
				HEAP32[q >> 2] = Nd;
				HEAP32[r >> 2] = Rd;
				HEAP32[s >> 2] = Sd;
				HEAP32[t >> 2] = Td;
				HEAP32[p >> 2] = Ud;
				ba = HEAP32[l >> 2] | 0;
				if (ba >>> 0 <= Kd >>> 0)
					HEAP32[k >> 2] = ba;
				if ((Ld | 0) != 0 & Ld >>> 0 < 274) {
					aa = HEAP32[w >> 2] | 0;
					$ = HEAP32[x >> 2] | 0;
					_ = g - Md | 0;
					Z = _ >>> 0 < Ld >>> 0 ? _ : Ld;
					if (!((HEAP32[k >> 2] | 0) != 0 | (ba - Kd | 0) >>> 0 > Z >>> 0))
						HEAP32[k >> 2] = ba;
					HEAP32[m >> 2] = Kd + Z;
					HEAP32[B >> 2] = Ld - Z;
					if (!Z)
						Yd = Md;
					else {
						ba = Md + -1 | 0;
						_ = ba - g | 0;
						Y = ~Ld;
						W = _ >>> 0 > Y >>> 0;
						U = Md;
						T = Z;
						while (1) {
							T = T + -1 | 0;
							HEAP8[aa + U >> 0] = HEAP8[aa + (U - Nd + (U >>> 0 < Nd >>> 0 ? $ : 0)) >> 0] | 0;
							if (!T)
								break;
							else
								U = U + 1 | 0
						}
						Yd = ba - (W ? _ : Y) | 0
					}
					HEAP32[n >> 2] = Yd;
					Zd = Yd
				} else
					Zd = Md;
				if (Zd >>> 0 >= g >>> 0) {
					kb = 161;
					break
				}
				if ((HEAP32[y >> 2] | 0) >>> 0 >= h >>> 0) {
					kb = 161;
					break
				}
				U = HEAP32[B >> 2] | 0;
				if (U >>> 0 >= 274) {
					_d = U;
					break
				}
			}
			if ((kb | 0) == 161)
				_d = HEAP32[B >> 2] | 0;
			else if ((kb | 0) == 164) {
				i = j;
				return jb | 0
			}
			if (_d >>> 0 <= 274) {
				jb = 0;
				i = j;
				return jb | 0
			}
			HEAP32[B >> 2] = 274;
			jb = 0;
			i = j;
			return jb | 0
		}
		function jk(a) {
			a = a | 0;
			var b = 0,
			d = 0;
			b = i;
			i = i + 16 | 0;
			d = b;
			b = HEAP32[p >> 2] | 0;
			HEAP32[d >> 2] = a;
			HEAP32[d + 4 >> 2] = 26992;
			Qb(b | 0, 25400, d | 0) | 0;
			if ((a | 0) != 1007)
				qb(3);
			mb(25848, 1056, 1, b | 0) | 0;
			qb(3)
		}
		function kk(b, d, e) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0;
			f = i;
			if ((b | 0) == 0 | e >>> 0 > 1 | d >>> 0 > 4) {
				g = -2;
				i = f;
				return g | 0
			}
			h = b + 40 | 0;
			j = HEAP32[h >> 2] | 0;
			if (!j) {
				HEAP32[h >> 2] = 27;
				k = 27
			} else
				k = j;
			j = b + 44 | 0;
			if (!(HEAP32[j >> 2] | 0))
				HEAP32[j >> 2] = 65;
			j = mc[k & 31](HEAP32[b + 48 >> 2] | 0, 64116, 1) | 0;
			if (!j) {
				g = -3;
				i = f;
				return g | 0
			}
			HEAP32[j >> 2] = b;
			HEAP32[b + 32 >> 2] = j;
			HEAP32[j + 4 >> 2] = 10;
			HEAP32[j + 32 >> 2] = 0;
			HEAP32[j + 28 >> 2] = 0;
			HEAP32[j + 3172 >> 2] = 0;
			HEAP32[b + 8 >> 2] = 0;
			HEAP32[b + 12 >> 2] = 0;
			HEAP32[b + 24 >> 2] = 0;
			HEAP32[b + 28 >> 2] = 0;
			HEAP8[j + 40 >> 0] = e;
			HEAP32[j + 3156 >> 2] = 0;
			HEAP32[j + 3152 >> 2] = 0;
			HEAP32[j + 3148 >> 2] = 0;
			HEAP32[j + 44 >> 2] = 0;
			HEAP32[j + 48 >> 2] = d;
			HEAP32[b + 36 >> 2] = 0;
			g = 0;
			i = f;
			return g | 0
		}
		function lk(b) {
			b = b | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0,
			O = 0,
			P = 0,
			Q = 0,
			R = 0,
			S = 0,
			T = 0,
			U = 0,
			V = 0,
			W = 0,
			X = 0,
			Y = 0,
			Z = 0,
			_ = 0,
			$ = 0,
			aa = 0,
			ba = 0,
			ca = 0,
			da = 0,
			ea = 0,
			fa = 0,
			ga = 0,
			ha = 0,
			ia = 0,
			ja = 0,
			ka = 0,
			la = 0,
			ma = 0,
			na = 0,
			oa = 0,
			pa = 0,
			qa = 0,
			ra = 0,
			sa = 0,
			ta = 0,
			ua = 0,
			va = 0,
			wa = 0,
			xa = 0,
			ya = 0,
			za = 0,
			Aa = 0,
			Ba = 0,
			Ca = 0,
			Da = 0,
			Ea = 0,
			Fa = 0,
			Ga = 0,
			Ha = 0,
			Ia = 0,
			Ja = 0,
			Ka = 0,
			La = 0,
			Ma = 0,
			Na = 0,
			Oa = 0,
			Pa = 0,
			Qa = 0,
			Ra = 0,
			Sa = 0,
			Ta = 0,
			Ua = 0,
			Va = 0,
			Wa = 0,
			Xa = 0,
			Ya = 0,
			Za = 0,
			_a = 0,
			$a = 0,
			ab = 0,
			bb = 0,
			cb = 0,
			db = 0,
			eb = 0,
			fb = 0;
			f = i;
			i = i + 16 | 0;
			g = f;
			if (!b) {
				h = -2;
				i = f;
				return h | 0
			}
			j = HEAP32[b + 32 >> 2] | 0;
			if (!j) {
				h = -2;
				i = f;
				return h | 0
			}
			if ((HEAP32[j >> 2] | 0) != (b | 0)) {
				h = -2;
				i = f;
				return h | 0
			}
			b = j + 4 | 0;
			k = j + 40 | 0;
			l = j + 16 | 0;
			m = j + 3168 | 0;
			n = j + 8 | 0;
			o = j + 12 | 0;
			q = j + 1088 | 0;
			r = j + 60 | 0;
			s = j + 3148 | 0;
			t = j + 56 | 0;
			u = j + 36 | 0;
			v = j + 64064 | 0;
			w = j + 20 | 0;
			x = j + 24 | 0;
			y = j + 48 | 0;
			z = HEAP32[p >> 2] | 0;
			A = j + 3160 | 0;
			B = j + 3172 | 0;
			C = j + 3152 | 0;
			D = j + 3156 | 0;
			E = HEAP32[b >> 2] | 0;
			a: while (1) {
				if ((E | 0) == 2) {
					F = (HEAP8[l >> 0] | 0) == 0;
					b: do
						if (!(HEAP8[k >> 0] | 0)) {
							if (F) {
								G = HEAP32[s >> 2] | 0;
								H = HEAP32[j >> 2] | 0;
								I = HEAP32[H + 20 >> 2] | 0;
								J = (HEAP32[v >> 2] | 0) + 1 | 0;
								K = (HEAP32[u >> 2] | 0) * 1e5 | 0;
								L = HEAP32[m >> 2] | 0;
								M = HEAP32[r >> 2] | 0;
								N = HEAP32[q >> 2] | 0;
								O = HEAP8[n >> 0] | 0;
								P = HEAP32[o >> 2] | 0;
								Q = HEAP32[t >> 2] | 0;
								R = I;
								S = HEAP32[H + 16 >> 2] | 0;
								c: while (1) {
									d: do
										if ((P | 0) > 0) {
											if (!R) {
												T = L;
												U = M;
												V = N;
												W = O;
												X = P;
												Y = Q;
												Z = 0;
												_ = S;
												break c
											}
											H = O & 255;
											$ = L;
											aa = P;
											ba = R;
											ca = S;
											while (1) {
												if ((aa | 0) == 1) {
													da = $;
													ea = M;
													fa = N;
													ga = O;
													ha = Q;
													ia = ba;
													ja = ca;
													ka = 114;
													break d
												}
												HEAP8[ca >> 0] = O;
												la = HEAP32[27016 + (($ >>> 24 ^ H) << 2) >> 2] ^ $ << 8;
												ma = aa + -1 | 0;
												na = ca + 1 | 0;
												ba = ba + -1 | 0;
												if (!ba) {
													T = la;
													U = M;
													V = N;
													W = O;
													X = ma;
													Y = Q;
													Z = 0;
													_ = na;
													break c
												} else {
													$ = la;
													aa = ma;
													ca = na
												}
											}
										} else {
											oa = L;
											pa = M;
											qa = N;
											ra = O;
											sa = Q;
											ta = R;
											ua = S
										}
									while (0);
									while (1) {
										if ((ka | 0) == 114) {
											ka = 0;
											if (!ia) {
												T = da;
												U = ea;
												V = fa;
												W = ga;
												X = 1;
												Y = ha;
												Z = 0;
												_ = ja;
												break c
											}
											HEAP8[ja >> 0] = ga;
											oa = HEAP32[27016 + ((da >>> 24 ^ ga & 255) << 2) >> 2] ^ da << 8;
											pa = ea;
											qa = fa;
											ra = ga;
											sa = ha;
											ta = ia + -1 | 0;
											ua = ja + 1 | 0
										}
										if ((qa | 0) > (J | 0)) {
											h = -4;
											ka = 147;
											break a
										}
										if ((qa | 0) == (J | 0)) {
											T = oa;
											U = pa;
											V = J;
											W = ra;
											X = 0;
											Y = sa;
											Z = ta;
											_ = ua;
											break c
										}
										va = pa & 255;
										if (sa >>> 0 >= K >>> 0) {
											h = -4;
											ka = 147;
											break a
										}
										ca = HEAP32[G + (sa << 2) >> 2] | 0;
										wa = ca >>> 8;
										aa = qa + 1 | 0;
										$ = ca & 255;
										if (($ | 0) != (pa | 0)) {
											da = oa;
											ea = $;
											fa = aa;
											ga = va;
											ha = wa;
											ia = ta;
											ja = ua;
											ka = 114;
											continue
										}
										if ((aa | 0) == (J | 0)) {
											da = oa;
											ea = pa;
											fa = J;
											ga = va;
											ha = wa;
											ia = ta;
											ja = ua;
											ka = 114
										} else
											break
									}
									if (wa >>> 0 >= K >>> 0) {
										h = -4;
										ka = 147;
										break a
									}
									aa = HEAP32[G + (wa << 2) >> 2] | 0;
									$ = aa >>> 8;
									ca = qa + 2 | 0;
									if ((ca | 0) == (J | 0)) {
										L = oa;
										M = pa;
										N = J;
										O = va;
										P = 2;
										Q = $;
										R = ta;
										S = ua;
										continue
									}
									ba = aa & 255;
									if ((ba | 0) != (pa | 0)) {
										L = oa;
										M = ba;
										N = ca;
										O = va;
										P = 2;
										Q = $;
										R = ta;
										S = ua;
										continue
									}
									if ($ >>> 0 >= K >>> 0) {
										h = -4;
										ka = 147;
										break a
									}
									ca = HEAP32[G + ($ << 2) >> 2] | 0;
									$ = ca >>> 8;
									ba = qa + 3 | 0;
									if ((ba | 0) == (J | 0)) {
										L = oa;
										M = pa;
										N = J;
										O = va;
										P = 3;
										Q = $;
										R = ta;
										S = ua;
										continue
									}
									aa = ca & 255;
									if ((aa | 0) != (pa | 0)) {
										L = oa;
										M = aa;
										N = ba;
										O = va;
										P = 3;
										Q = $;
										R = ta;
										S = ua;
										continue
									}
									if ($ >>> 0 >= K >>> 0) {
										h = -4;
										ka = 147;
										break a
									}
									ba = HEAP32[G + ($ << 2) >> 2] | 0;
									$ = ba >>> 8;
									if ($ >>> 0 >= K >>> 0) {
										h = -4;
										ka = 147;
										break a
									}
									aa = HEAP32[G + ($ << 2) >> 2] | 0;
									L = oa;
									M = aa & 255;
									N = qa + 5 | 0;
									O = va;
									P = (ba & 255) + 4 | 0;
									Q = aa >>> 8;
									R = ta;
									S = ua
								}
								S = HEAP32[j >> 2] | 0;
								R = S + 24 | 0;
								Q = HEAP32[R >> 2] | 0;
								P = Q + (I - Z) | 0;
								HEAP32[R >> 2] = P;
								if (P >>> 0 < Q >>> 0) {
									Q = S + 28 | 0;
									HEAP32[Q >> 2] = (HEAP32[Q >> 2] | 0) + 1
								}
								HEAP32[m >> 2] = T;
								HEAP8[n >> 0] = W;
								HEAP32[o >> 2] = X;
								HEAP32[q >> 2] = V;
								HEAP32[r >> 2] = U;
								HEAP32[s >> 2] = G;
								HEAP32[t >> 2] = Y;
								HEAP32[S + 16 >> 2] = _;
								HEAP32[S + 20 >> 2] = Z;
								break
							}
							S = HEAP32[j >> 2] | 0;
							if (HEAP32[S + 20 >> 2] | 0) {
								Q = HEAP32[o >> 2] | 0;
								P = S;
								while (1) {
									do
										if (!Q) {
											S = HEAP32[q >> 2] | 0;
											R = HEAP32[v >> 2] | 0;
											O = R + 1 | 0;
											if ((S | 0) == (O | 0))
												break b;
											if ((S | 0) > (O | 0)) {
												h = -4;
												ka = 147;
												break a
											}
											HEAP32[o >> 2] = 1;
											O = HEAP32[r >> 2] | 0;
											HEAP8[n >> 0] = O;
											N = HEAP32[t >> 2] | 0;
											M = (HEAP32[u >> 2] | 0) * 1e5 | 0;
											if (N >>> 0 >= M >>> 0) {
												h = -4;
												ka = 147;
												break a
											}
											L = HEAP32[s >> 2] | 0;
											K = HEAP32[L + (N << 2) >> 2] | 0;
											N = K >>> 8;
											HEAP32[t >> 2] = N;
											J = HEAP32[w >> 2] | 0;
											if (!J) {
												aa = HEAP32[x >> 2] | 0;
												ba = HEAP32[28072 + (aa << 2) >> 2] | 0;
												HEAP32[w >> 2] = ba;
												$ = aa + 1 | 0;
												HEAP32[x >> 2] = ($ | 0) == 512 ? 0 : $;
												xa = ba
											} else
												xa = J;
											J = xa + -1 | 0;
											HEAP32[w >> 2] = J;
											ba = S + 1 | 0;
											HEAP32[q >> 2] = ba;
											if ((S | 0) == (R | 0)) {
												ya = P;
												za = 1
											} else {
												$ = (J | 0) == 1 ^ K & 255;
												if (($ | 0) != (O | 0)) {
													HEAP32[r >> 2] = $;
													ya = P;
													za = 1;
													break
												}
												HEAP32[o >> 2] = 2;
												if (N >>> 0 >= M >>> 0) {
													h = -4;
													ka = 147;
													break a
												}
												$ = HEAP32[L + (N << 2) >> 2] | 0;
												N = $ >>> 8;
												HEAP32[t >> 2] = N;
												if (!J) {
													K = HEAP32[x >> 2] | 0;
													aa = HEAP32[28072 + (K << 2) >> 2] | 0;
													HEAP32[w >> 2] = aa;
													ca = K + 1 | 0;
													HEAP32[x >> 2] = (ca | 0) == 512 ? 0 : ca;
													Aa = aa
												} else
													Aa = J;
												J = Aa + -1 | 0;
												HEAP32[w >> 2] = J;
												aa = S + 2 | 0;
												HEAP32[q >> 2] = aa;
												if ((ba | 0) == (R | 0)) {
													ya = P;
													za = 2;
													break
												}
												ba = (J | 0) == 1 ^ $ & 255;
												if ((ba | 0) != (O | 0)) {
													HEAP32[r >> 2] = ba;
													ya = P;
													za = 2;
													break
												}
												HEAP32[o >> 2] = 3;
												if (N >>> 0 >= M >>> 0) {
													h = -4;
													ka = 147;
													break a
												}
												ba = HEAP32[L + (N << 2) >> 2] | 0;
												N = ba >>> 8;
												HEAP32[t >> 2] = N;
												if (!J) {
													$ = HEAP32[x >> 2] | 0;
													ca = HEAP32[28072 + ($ << 2) >> 2] | 0;
													HEAP32[w >> 2] = ca;
													K = $ + 1 | 0;
													HEAP32[x >> 2] = (K | 0) == 512 ? 0 : K;
													Ba = ca
												} else
													Ba = J;
												J = Ba + -1 | 0;
												HEAP32[w >> 2] = J;
												HEAP32[q >> 2] = S + 3;
												if ((aa | 0) == (R | 0)) {
													ya = P;
													za = 3;
													break
												}
												R = (J | 0) == 1 ^ ba & 255;
												if ((R | 0) != (O | 0)) {
													HEAP32[r >> 2] = R;
													ya = P;
													za = 3;
													break
												}
												if (N >>> 0 >= M >>> 0) {
													h = -4;
													ka = 147;
													break a
												}
												R = HEAP32[L + (N << 2) >> 2] | 0;
												N = R >>> 8;
												HEAP32[t >> 2] = N;
												if (!J) {
													O = HEAP32[x >> 2] | 0;
													ba = HEAP32[28072 + (O << 2) >> 2] | 0;
													HEAP32[w >> 2] = ba;
													aa = O + 1 | 0;
													HEAP32[x >> 2] = (aa | 0) == 512 ? 0 : aa;
													Ca = ba
												} else
													Ca = J;
												J = Ca + -1 | 0;
												HEAP32[w >> 2] = J;
												HEAP32[q >> 2] = S + 4;
												ba = ((J | 0) == 1 ^ R & 255) + 4 | 0;
												HEAP32[o >> 2] = ba;
												if (N >>> 0 >= M >>> 0) {
													h = -4;
													ka = 147;
													break a
												}
												M = HEAP32[L + (N << 2) >> 2] | 0;
												N = M & 255;
												HEAP32[r >> 2] = N;
												HEAP32[t >> 2] = M >>> 8;
												if (!J) {
													M = HEAP32[x >> 2] | 0;
													L = HEAP32[28072 + (M << 2) >> 2] | 0;
													HEAP32[w >> 2] = L;
													R = M + 1 | 0;
													HEAP32[x >> 2] = (R | 0) == 512 ? 0 : R;
													Da = L
												} else
													Da = J;
												J = Da + -1 | 0;
												HEAP32[w >> 2] = J;
												HEAP32[r >> 2] = (J | 0) == 1 ^ N;
												HEAP32[q >> 2] = S + 5;
												ya = P;
												za = ba
											}
										} else {
											HEAP8[HEAP32[P + 16 >> 2] >> 0] = HEAP8[n >> 0] | 0;
											ba = HEAP32[m >> 2] | 0;
											HEAP32[m >> 2] = HEAP32[27016 + ((HEAPU8[n >> 0] ^ ba >>> 24) << 2) >> 2] ^ ba << 8;
											ba = (HEAP32[o >> 2] | 0) + -1 | 0;
											HEAP32[o >> 2] = ba;
											S = HEAP32[j >> 2] | 0;
											N = S + 16 | 0;
											HEAP32[N >> 2] = (HEAP32[N >> 2] | 0) + 1;
											N = S + 20 | 0;
											HEAP32[N >> 2] = (HEAP32[N >> 2] | 0) + -1;
											N = S + 24 | 0;
											J = (HEAP32[N >> 2] | 0) + 1 | 0;
											HEAP32[N >> 2] = J;
											if (!J) {
												J = S + 28 | 0;
												HEAP32[J >> 2] = (HEAP32[J >> 2] | 0) + 1;
												ya = S;
												za = ba
											} else {
												ya = S;
												za = ba
											}
										}
									while (0);
									if (!(HEAP32[ya + 20 >> 2] | 0))
										break;
									else {
										Q = za;
										P = ya
									}
								}
							}
						} else {
							P = HEAP32[j >> 2] | 0;
							Q = (HEAP32[P + 20 >> 2] | 0) == 0;
							if (F) {
								if (Q)
									break;
								G = HEAP32[o >> 2] | 0;
								I = P;
								while (1) {
									do
										if (!G) {
											ba = HEAP32[q >> 2] | 0;
											S = HEAP32[v >> 2] | 0;
											J = S + 1 | 0;
											if ((ba | 0) == (J | 0))
												break b;
											if ((ba | 0) > (J | 0)) {
												h = -4;
												ka = 147;
												break a
											}
											HEAP32[o >> 2] = 1;
											J = HEAP32[r >> 2] | 0;
											HEAP8[n >> 0] = J;
											N = HEAP32[t >> 2] | 0;
											L = (HEAP32[u >> 2] | 0) * 1e5 | 0;
											if (N >>> 0 < L >>> 0) {
												Ea = 256;
												Fa = 0
											} else {
												h = -4;
												ka = 147;
												break a
											}
											do {
												R = Fa + Ea >> 1;
												M = (HEAP32[j + (R << 2) + 1092 >> 2] | 0) > (N | 0);
												Ea = M ? R : Ea;
												Fa = M ? Fa : R
											} while ((Ea - Fa | 0) != 1);
											R = HEAP32[C >> 2] | 0;
											M = HEAPU16[R + (N << 1) >> 1] | 0;
											aa = HEAP32[D >> 2] | 0;
											O = (HEAPU8[aa + (N >>> 1) >> 0] | 0) >>> (N << 2 & 4) << 16 & 983040 | M;
											HEAP32[t >> 2] = O;
											ca = ba + 1 | 0;
											HEAP32[q >> 2] = ca;
											if ((ba | 0) != (S | 0)) {
												K = Fa & 255;
												if ((K | 0) != (J | 0)) {
													HEAP32[r >> 2] = K;
													Ga = I;
													Ha = 1;
													break
												}
												HEAP32[o >> 2] = 2;
												if (O >>> 0 < L >>> 0) {
													Ia = 256;
													Ja = 0
												} else {
													h = -4;
													ka = 147;
													break a
												}
												do {
													K = Ja + Ia >> 1;
													$ = (HEAP32[j + (K << 2) + 1092 >> 2] | 0) > (O | 0);
													Ia = $ ? K : Ia;
													Ja = $ ? Ja : K
												} while ((Ia - Ja | 0) != 1);
												N = HEAPU16[R + (O << 1) >> 1] | 0;
												K = (HEAPU8[aa + (O >>> 1) >> 0] | 0) >>> (M << 2 & 4) << 16 & 983040 | N;
												HEAP32[t >> 2] = K;
												$ = ba + 2 | 0;
												HEAP32[q >> 2] = $;
												if ((ca | 0) == (S | 0)) {
													Ga = I;
													Ha = 2
												} else {
													H = Ja & 255;
													if ((H | 0) != (J | 0)) {
														HEAP32[r >> 2] = H;
														Ga = I;
														Ha = 2;
														break
													}
													HEAP32[o >> 2] = 3;
													if (K >>> 0 < L >>> 0) {
														Ka = 256;
														La = 0
													} else {
														h = -4;
														ka = 147;
														break a
													}
													do {
														H = La + Ka >> 1;
														na = (HEAP32[j + (H << 2) + 1092 >> 2] | 0) > (K | 0);
														Ka = na ? H : Ka;
														La = na ? La : H
													} while ((Ka - La | 0) != 1);
													ca = HEAPU16[R + (K << 1) >> 1] | 0;
													M = (HEAPU8[aa + (K >>> 1) >> 0] | 0) >>> (N << 2 & 4) << 16 & 983040 | ca;
													HEAP32[t >> 2] = M;
													HEAP32[q >> 2] = ba + 3;
													if (($ | 0) == (S | 0)) {
														Ga = I;
														Ha = 3;
														break
													}
													O = La & 255;
													if ((O | 0) != (J | 0)) {
														HEAP32[r >> 2] = O;
														Ga = I;
														Ha = 3;
														break
													}
													if (M >>> 0 < L >>> 0) {
														Ma = 256;
														Na = 0
													} else {
														h = -4;
														ka = 147;
														break a
													}
													do {
														O = Na + Ma >> 1;
														H = (HEAP32[j + (O << 2) + 1092 >> 2] | 0) > (M | 0);
														Ma = H ? O : Ma;
														Na = H ? Na : O
													} while ((Ma - Na | 0) != 1);
													J = HEAPU16[R + (M << 1) >> 1] | 0;
													S = (HEAPU8[aa + (M >>> 1) >> 0] | 0) >>> (ca << 2 & 4) << 16 & 983040 | J;
													HEAP32[t >> 2] = S;
													HEAP32[q >> 2] = ba + 4;
													$ = (Na & 255) + 4 | 0;
													HEAP32[o >> 2] = $;
													if (S >>> 0 < L >>> 0) {
														Oa = 256;
														Pa = 0
													} else {
														h = -4;
														ka = 147;
														break a
													}
													do {
														N = Pa + Oa >> 1;
														K = (HEAP32[j + (N << 2) + 1092 >> 2] | 0) > (S | 0);
														Oa = K ? N : Oa;
														Pa = K ? Pa : N
													} while ((Oa - Pa | 0) != 1);
													HEAP32[r >> 2] = Pa;
													HEAP32[t >> 2] = (HEAPU8[aa + (S >>> 1) >> 0] | 0) >>> (J << 2 & 4) << 16 & 983040 | HEAPU16[R + (S << 1) >> 1];
													HEAP32[q >> 2] = ba + 5;
													Ga = I;
													Ha = $
												}
											} else {
												Ga = I;
												Ha = 1
											}
										} else {
											HEAP8[HEAP32[I + 16 >> 2] >> 0] = HEAP8[n >> 0] | 0;
											L = HEAP32[m >> 2] | 0;
											HEAP32[m >> 2] = HEAP32[27016 + ((HEAPU8[n >> 0] ^ L >>> 24) << 2) >> 2] ^ L << 8;
											L = (HEAP32[o >> 2] | 0) + -1 | 0;
											HEAP32[o >> 2] = L;
											ca = HEAP32[j >> 2] | 0;
											M = ca + 16 | 0;
											HEAP32[M >> 2] = (HEAP32[M >> 2] | 0) + 1;
											M = ca + 20 | 0;
											HEAP32[M >> 2] = (HEAP32[M >> 2] | 0) + -1;
											M = ca + 24 | 0;
											N = (HEAP32[M >> 2] | 0) + 1 | 0;
											HEAP32[M >> 2] = N;
											if (!N) {
												N = ca + 28 | 0;
												HEAP32[N >> 2] = (HEAP32[N >> 2] | 0) + 1;
												Ga = ca;
												Ha = L
											} else {
												Ga = ca;
												Ha = L
											}
										}
									while (0);
									if (!(HEAP32[Ga + 20 >> 2] | 0))
										break b;
									else {
										G = Ha;
										I = Ga
									}
								}
							}
							if (!Q) {
								I = HEAP32[o >> 2] | 0;
								G = P;
								while (1) {
									do
										if (!I) {
											L = HEAP32[q >> 2] | 0;
											ca = HEAP32[v >> 2] | 0;
											N = ca + 1 | 0;
											if ((L | 0) == (N | 0))
												break b;
											if ((L | 0) > (N | 0)) {
												h = -4;
												ka = 147;
												break a
											}
											HEAP32[o >> 2] = 1;
											N = HEAP32[r >> 2] | 0;
											HEAP8[n >> 0] = N;
											M = HEAP32[t >> 2] | 0;
											K = (HEAP32[u >> 2] | 0) * 1e5 | 0;
											if (M >>> 0 < K >>> 0) {
												Qa = 256;
												Ra = 0
											} else {
												h = -4;
												ka = 147;
												break a
											}
											do {
												O = Ra + Qa >> 1;
												H = (HEAP32[j + (O << 2) + 1092 >> 2] | 0) > (M | 0);
												Qa = H ? O : Qa;
												Ra = H ? Ra : O
											} while ((Qa - Ra | 0) != 1);
											$ = HEAP32[C >> 2] | 0;
											ba = HEAPU16[$ + (M << 1) >> 1] | 0;
											S = HEAP32[D >> 2] | 0;
											R = (HEAPU8[S + (M >>> 1) >> 0] | 0) >>> (M << 2 & 4) << 16 & 983040 | ba;
											HEAP32[t >> 2] = R;
											J = HEAP32[w >> 2] | 0;
											if (!J) {
												aa = HEAP32[x >> 2] | 0;
												O = HEAP32[28072 + (aa << 2) >> 2] | 0;
												HEAP32[w >> 2] = O;
												H = aa + 1 | 0;
												HEAP32[x >> 2] = (H | 0) == 512 ? 0 : H;
												Sa = O
											} else
												Sa = J;
											J = Sa + -1 | 0;
											HEAP32[w >> 2] = J;
											O = L + 1 | 0;
											HEAP32[q >> 2] = O;
											if ((L | 0) == (ca | 0)) {
												Ta = G;
												Ua = 1
											} else {
												H = (J | 0) == 1 ^ Ra & 255;
												if ((H | 0) != (N | 0)) {
													HEAP32[r >> 2] = H;
													Ta = G;
													Ua = 1;
													break
												}
												HEAP32[o >> 2] = 2;
												if (R >>> 0 < K >>> 0) {
													Va = 256;
													Wa = 0
												} else {
													h = -4;
													ka = 147;
													break a
												}
												do {
													H = Wa + Va >> 1;
													aa = (HEAP32[j + (H << 2) + 1092 >> 2] | 0) > (R | 0);
													Va = aa ? H : Va;
													Wa = aa ? Wa : H
												} while ((Va - Wa | 0) != 1);
												M = HEAPU16[$ + (R << 1) >> 1] | 0;
												H = (HEAPU8[S + (R >>> 1) >> 0] | 0) >>> (ba << 2 & 4) << 16 & 983040 | M;
												HEAP32[t >> 2] = H;
												if (!J) {
													aa = HEAP32[x >> 2] | 0;
													na = HEAP32[28072 + (aa << 2) >> 2] | 0;
													HEAP32[w >> 2] = na;
													ma = aa + 1 | 0;
													HEAP32[x >> 2] = (ma | 0) == 512 ? 0 : ma;
													Xa = na
												} else
													Xa = J;
												na = Xa + -1 | 0;
												HEAP32[w >> 2] = na;
												ma = L + 2 | 0;
												HEAP32[q >> 2] = ma;
												if ((O | 0) == (ca | 0)) {
													Ta = G;
													Ua = 2;
													break
												}
												aa = (na | 0) == 1 ^ Wa & 255;
												if ((aa | 0) != (N | 0)) {
													HEAP32[r >> 2] = aa;
													Ta = G;
													Ua = 2;
													break
												}
												HEAP32[o >> 2] = 3;
												if (H >>> 0 < K >>> 0) {
													Ya = 256;
													Za = 0
												} else {
													h = -4;
													ka = 147;
													break a
												}
												do {
													aa = Za + Ya >> 1;
													la = (HEAP32[j + (aa << 2) + 1092 >> 2] | 0) > (H | 0);
													Ya = la ? aa : Ya;
													Za = la ? Za : aa
												} while ((Ya - Za | 0) != 1);
												O = HEAPU16[$ + (H << 1) >> 1] | 0;
												J = (HEAPU8[S + (H >>> 1) >> 0] | 0) >>> (M << 2 & 4) << 16 & 983040 | O;
												HEAP32[t >> 2] = J;
												if (!na) {
													ba = HEAP32[x >> 2] | 0;
													R = HEAP32[28072 + (ba << 2) >> 2] | 0;
													HEAP32[w >> 2] = R;
													aa = ba + 1 | 0;
													HEAP32[x >> 2] = (aa | 0) == 512 ? 0 : aa;
													_a = R
												} else
													_a = na;
												R = _a + -1 | 0;
												HEAP32[w >> 2] = R;
												HEAP32[q >> 2] = L + 3;
												if ((ma | 0) == (ca | 0)) {
													Ta = G;
													Ua = 3;
													break
												}
												aa = (R | 0) == 1 ^ Za & 255;
												if ((aa | 0) != (N | 0)) {
													HEAP32[r >> 2] = aa;
													Ta = G;
													Ua = 3;
													break
												}
												if (J >>> 0 < K >>> 0) {
													$a = 256;
													ab = 0
												} else {
													h = -4;
													ka = 147;
													break a
												}
												do {
													aa = ab + $a >> 1;
													ba = (HEAP32[j + (aa << 2) + 1092 >> 2] | 0) > (J | 0);
													$a = ba ? aa : $a;
													ab = ba ? ab : aa
												} while (($a - ab | 0) != 1);
												N = HEAPU16[$ + (J << 1) >> 1] | 0;
												ca = (HEAPU8[S + (J >>> 1) >> 0] | 0) >>> (O << 2 & 4) << 16 & 983040 | N;
												HEAP32[t >> 2] = ca;
												if (!R) {
													ma = HEAP32[x >> 2] | 0;
													na = HEAP32[28072 + (ma << 2) >> 2] | 0;
													HEAP32[w >> 2] = na;
													M = ma + 1 | 0;
													HEAP32[x >> 2] = (M | 0) == 512 ? 0 : M;
													bb = na
												} else
													bb = R;
												na = bb + -1 | 0;
												HEAP32[w >> 2] = na;
												HEAP32[q >> 2] = L + 4;
												M = ((na | 0) == 1 ^ ab & 255) + 4 | 0;
												HEAP32[o >> 2] = M;
												if (ca >>> 0 < K >>> 0) {
													cb = 256;
													db = 0
												} else {
													h = -4;
													ka = 147;
													break a
												}
												do {
													ma = db + cb >> 1;
													H = (HEAP32[j + (ma << 2) + 1092 >> 2] | 0) > (ca | 0);
													cb = H ? ma : cb;
													db = H ? db : ma
												} while ((cb - db | 0) != 1);
												HEAP32[r >> 2] = db;
												HEAP32[t >> 2] = (HEAPU8[S + (ca >>> 1) >> 0] | 0) >>> (N << 2 & 4) << 16 & 983040 | HEAPU16[$ + (ca << 1) >> 1];
												if (!na) {
													K = HEAP32[x >> 2] | 0;
													R = HEAP32[28072 + (K << 2) >> 2] | 0;
													HEAP32[w >> 2] = R;
													O = K + 1 | 0;
													HEAP32[x >> 2] = (O | 0) == 512 ? 0 : O;
													eb = R
												} else
													eb = na;
												R = eb + -1 | 0;
												HEAP32[w >> 2] = R;
												HEAP32[r >> 2] = (R | 0) == 1 ^ db;
												HEAP32[q >> 2] = L + 5;
												Ta = G;
												Ua = M
											}
										} else {
											HEAP8[HEAP32[G + 16 >> 2] >> 0] = HEAP8[n >> 0] | 0;
											R = HEAP32[m >> 2] | 0;
											HEAP32[m >> 2] = HEAP32[27016 + ((HEAPU8[n >> 0] ^ R >>> 24) << 2) >> 2] ^ R << 8;
											R = (HEAP32[o >> 2] | 0) + -1 | 0;
											HEAP32[o >> 2] = R;
											O = HEAP32[j >> 2] | 0;
											K = O + 16 | 0;
											HEAP32[K >> 2] = (HEAP32[K >> 2] | 0) + 1;
											K = O + 20 | 0;
											HEAP32[K >> 2] = (HEAP32[K >> 2] | 0) + -1;
											K = O + 24 | 0;
											J = (HEAP32[K >> 2] | 0) + 1 | 0;
											HEAP32[K >> 2] = J;
											if (!J) {
												J = O + 28 | 0;
												HEAP32[J >> 2] = (HEAP32[J >> 2] | 0) + 1;
												Ta = O;
												Ua = R
											} else {
												Ta = O;
												Ua = R
											}
										}
									while (0);
									if (!(HEAP32[Ta + 20 >> 2] | 0))
										break;
									else {
										I = Ua;
										G = Ta
									}
								}
							}
						}
					while (0);
					if ((HEAP32[q >> 2] | 0) != ((HEAP32[v >> 2] | 0) + 1 | 0)) {
						h = 0;
						ka = 147;
						break
					}
					if (HEAP32[o >> 2] | 0) {
						h = 0;
						ka = 147;
						break
					}
					F = ~HEAP32[m >> 2];
					HEAP32[m >> 2] = F;
					G = HEAP32[y >> 2] | 0;
					if ((G | 0) > 2) {
						HEAP32[g >> 2] = HEAP32[A >> 2];
						HEAP32[g + 4 >> 2] = F;
						Qb(z | 0, 26912, g | 0) | 0;
						fb = HEAP32[y >> 2] | 0
					} else
						fb = G;
					if ((fb | 0) > 1)
						ec(93, z | 0) | 0;
					G = HEAP32[m >> 2] | 0;
					if ((G | 0) != (HEAP32[A >> 2] | 0)) {
						h = -4;
						ka = 147;
						break
					}
					F = HEAP32[B >> 2] | 0;
					HEAP32[B >> 2] = (F << 1 | F >>> 31) ^ G;
					HEAP32[b >> 2] = 14
				} else if ((E | 0) != 1) {
					if ((E | 0) <= 9)
						continue
				} else {
					h = -1;
					ka = 147;
					break
				}
				G = mk(j) | 0;
				if ((G | 0) == 4) {
					ka = 143;
					break
				}
				if ((HEAP32[b >> 2] | 0) == 2)
					E = 2;
				else {
					h = G;
					ka = 147;
					break
				}
			}
			if ((ka | 0) == 143) {
				E = j + 3164 | 0;
				if ((HEAP32[y >> 2] | 0) > 2) {
					y = HEAP32[B >> 2] | 0;
					HEAP32[g >> 2] = HEAP32[E >> 2];
					HEAP32[g + 4 >> 2] = y;
					Qb(z | 0, 26936, g | 0) | 0
				}
				h = (HEAP32[B >> 2] | 0) == (HEAP32[E >> 2] | 0) ? 4 : -4;
				i = f;
				return h | 0
			} else if ((ka | 0) == 147) {
				i = f;
				return h | 0
			}
			return 0
		}
		function mk(f) {
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0,
			O = 0,
			P = 0,
			Q = 0,
			R = 0,
			S = 0,
			T = 0,
			U = 0,
			V = 0,
			W = 0,
			X = 0,
			Y = 0,
			Z = 0,
			_ = 0,
			$ = 0,
			aa = 0,
			ba = 0,
			ca = 0,
			da = 0,
			ea = 0,
			fa = 0,
			ga = 0,
			ha = 0,
			ia = 0,
			ja = 0,
			ka = 0,
			la = 0,
			ma = 0,
			na = 0,
			oa = 0,
			pa = 0,
			qa = 0,
			ra = 0,
			sa = 0,
			ta = 0,
			ua = 0,
			va = 0,
			wa = 0,
			xa = 0,
			ya = 0,
			za = 0,
			Aa = 0,
			Ba = 0,
			Ca = 0,
			Da = 0,
			Ea = 0,
			Fa = 0,
			Ga = 0,
			Ha = 0,
			Ia = 0,
			Ja = 0,
			Ka = 0,
			La = 0,
			Ma = 0,
			Na = 0,
			Oa = 0,
			Pa = 0,
			Qa = 0,
			Ra = 0,
			Sa = 0,
			Ta = 0,
			Ua = 0,
			Va = 0,
			Wa = 0,
			Xa = 0,
			Ya = 0,
			Za = 0,
			_a = 0,
			$a = 0,
			ab = 0,
			bb = 0,
			cb = 0,
			db = 0,
			eb = 0,
			fb = 0,
			gb = 0,
			hb = 0,
			ib = 0,
			jb = 0,
			kb = 0,
			lb = 0,
			nb = 0,
			ob = 0,
			pb = 0,
			qb = 0,
			rb = 0,
			sb = 0,
			tb = 0,
			ub = 0,
			vb = 0,
			wb = 0,
			xb = 0,
			yb = 0,
			zb = 0,
			Ab = 0,
			Bb = 0,
			Cb = 0,
			Db = 0,
			Eb = 0,
			Fb = 0,
			Gb = 0,
			Hb = 0,
			Ib = 0,
			Jb = 0,
			Kb = 0,
			Lb = 0,
			Mb = 0,
			Nb = 0,
			Ob = 0,
			Pb = 0,
			Rb = 0,
			Sb = 0,
			Tb = 0,
			Ub = 0,
			Vb = 0,
			Wb = 0,
			Xb = 0,
			Yb = 0,
			Zb = 0,
			_b = 0,
			$b = 0,
			ac = 0,
			bc = 0,
			cc = 0,
			dc = 0,
			ec = 0,
			fc = 0,
			gc = 0,
			hc = 0,
			ic = 0,
			jc = 0,
			kc = 0,
			lc = 0,
			nc = 0,
			oc = 0,
			pc = 0,
			qc = 0,
			rc = 0,
			sc = 0,
			tc = 0,
			uc = 0,
			vc = 0,
			wc = 0,
			xc = 0,
			yc = 0,
			zc = 0,
			Ac = 0,
			Bc = 0,
			Cc = 0,
			Dc = 0,
			Ec = 0,
			Fc = 0,
			Gc = 0,
			Hc = 0,
			Ic = 0,
			Jc = 0,
			Kc = 0,
			Lc = 0,
			Mc = 0,
			Nc = 0,
			Oc = 0,
			Pc = 0,
			Qc = 0,
			Rc = 0,
			Sc = 0,
			Tc = 0,
			Uc = 0,
			Vc = 0,
			Wc = 0,
			Xc = 0,
			Yc = 0,
			Zc = 0,
			_c = 0,
			$c = 0,
			ad = 0,
			bd = 0,
			cd = 0,
			dd = 0,
			ed = 0,
			fd = 0,
			gd = 0,
			hd = 0,
			id = 0,
			jd = 0,
			kd = 0,
			ld = 0,
			md = 0,
			nd = 0,
			od = 0,
			pd = 0,
			qd = 0,
			rd = 0,
			sd = 0,
			td = 0,
			ud = 0,
			vd = 0,
			wd = 0,
			xd = 0,
			yd = 0,
			zd = 0,
			Ad = 0,
			Bd = 0,
			Cd = 0,
			Dd = 0,
			Ed = 0,
			Fd = 0,
			Gd = 0,
			Hd = 0,
			Id = 0,
			Jd = 0,
			Kd = 0,
			Ld = 0,
			Md = 0,
			Nd = 0,
			Od = 0,
			Pd = 0,
			Qd = 0,
			Rd = 0,
			Sd = 0,
			Td = 0,
			Ud = 0,
			Vd = 0,
			Wd = 0,
			Xd = 0,
			Yd = 0,
			Zd = 0,
			_d = 0,
			$d = 0,
			ae = 0,
			be = 0,
			ce = 0,
			de = 0,
			ee = 0,
			fe = 0,
			ge = 0,
			he = 0,
			ie = 0,
			je = 0,
			ke = 0,
			le = 0,
			me = 0,
			ne = 0,
			oe = 0,
			pe = 0,
			qe = 0,
			re = 0,
			se = 0,
			te = 0,
			ue = 0,
			ve = 0,
			we = 0,
			xe = 0,
			ye = 0,
			ze = 0,
			Ae = 0,
			Be = 0,
			Ce = 0,
			De = 0,
			Ee = 0,
			Fe = 0,
			Ge = 0,
			He = 0,
			Ie = 0,
			Je = 0,
			Ke = 0,
			Le = 0,
			Me = 0,
			Ne = 0,
			Oe = 0,
			Pe = 0,
			Qe = 0,
			Re = 0,
			Se = 0,
			Te = 0,
			Ue = 0,
			Ve = 0,
			We = 0,
			Xe = 0,
			Ye = 0,
			Ze = 0,
			_e = 0,
			$e = 0,
			af = 0,
			bf = 0,
			cf = 0,
			df = 0,
			ef = 0,
			ff = 0,
			gf = 0,
			hf = 0,
			jf = 0,
			kf = 0,
			lf = 0,
			mf = 0,
			nf = 0,
			of = 0,
			pf = 0,
			qf = 0,
			rf = 0,
			sf = 0,
			tf = 0,
			uf = 0,
			vf = 0,
			wf = 0,
			xf = 0,
			yf = 0,
			zf = 0,
			Af = 0,
			Bf = 0,
			Cf = 0,
			Df = 0,
			Ef = 0,
			Ff = 0,
			Gf = 0,
			Hf = 0,
			If = 0,
			Jf = 0,
			Kf = 0,
			Lf = 0,
			Mf = 0,
			Nf = 0,
			Of = 0,
			Pf = 0,
			Qf = 0,
			Rf = 0,
			Sf = 0,
			Tf = 0,
			Uf = 0,
			Vf = 0,
			Wf = 0,
			Xf = 0,
			Yf = 0,
			Zf = 0,
			_f = 0,
			$f = 0,
			ag = 0,
			bg = 0,
			cg = 0,
			dg = 0,
			eg = 0,
			fg = 0,
			gg = 0,
			hg = 0,
			ig = 0,
			jg = 0,
			kg = 0,
			lg = 0,
			mg = 0,
			ng = 0,
			og = 0,
			pg = 0,
			qg = 0,
			rg = 0,
			sg = 0,
			tg = 0,
			ug = 0,
			vg = 0,
			wg = 0,
			xg = 0,
			yg = 0,
			zg = 0,
			Ag = 0,
			Bg = 0,
			Cg = 0,
			Dg = 0,
			Eg = 0,
			Fg = 0,
			Gg = 0,
			Hg = 0,
			Ig = 0,
			Jg = 0,
			Kg = 0,
			Lg = 0,
			Mg = 0,
			Ng = 0,
			Og = 0,
			Pg = 0,
			Qg = 0,
			Rg = 0,
			Sg = 0,
			Tg = 0,
			Ug = 0,
			Vg = 0,
			Wg = 0,
			Xg = 0,
			Yg = 0,
			Zg = 0,
			_g = 0,
			$g = 0,
			ah = 0,
			bh = 0,
			ch = 0,
			dh = 0,
			eh = 0,
			fh = 0,
			gh = 0,
			hh = 0,
			ih = 0,
			jh = 0,
			kh = 0,
			lh = 0,
			mh = 0,
			nh = 0,
			oh = 0,
			ph = 0,
			qh = 0,
			rh = 0,
			sh = 0,
			th = 0,
			uh = 0,
			vh = 0,
			wh = 0,
			xh = 0,
			yh = 0,
			zh = 0,
			Ah = 0,
			Bh = 0,
			Ch = 0,
			Dh = 0,
			Eh = 0,
			Fh = 0,
			Gh = 0,
			Hh = 0,
			Ih = 0,
			Jh = 0,
			Kh = 0,
			Lh = 0,
			Mh = 0,
			Nh = 0,
			Oh = 0,
			Ph = 0,
			Qh = 0,
			Rh = 0,
			Sh = 0,
			Th = 0,
			Uh = 0,
			Vh = 0,
			Wh = 0,
			Xh = 0,
			Yh = 0,
			Zh = 0,
			_h = 0,
			$h = 0,
			ai = 0,
			bi = 0,
			ci = 0,
			di = 0,
			ei = 0,
			fi = 0,
			gi = 0,
			hi = 0,
			ii = 0,
			ji = 0,
			ki = 0,
			li = 0,
			mi = 0,
			ni = 0,
			oi = 0,
			pi = 0,
			qi = 0,
			ri = 0,
			si = 0,
			ti = 0,
			ui = 0,
			vi = 0,
			wi = 0,
			xi = 0,
			yi = 0,
			zi = 0,
			Ai = 0,
			Bi = 0,
			Ci = 0,
			Di = 0,
			Ei = 0,
			Fi = 0,
			Gi = 0,
			Hi = 0,
			Ii = 0,
			Ji = 0,
			Ki = 0,
			Li = 0,
			Mi = 0,
			Ni = 0,
			Oi = 0,
			Pi = 0,
			Qi = 0,
			Ri = 0,
			Si = 0,
			Ti = 0,
			Ui = 0,
			Vi = 0,
			Wi = 0,
			Xi = 0,
			Yi = 0,
			Zi = 0,
			_i = 0,
			$i = 0,
			aj = 0,
			bj = 0,
			cj = 0,
			dj = 0,
			ej = 0,
			fj = 0,
			gj = 0,
			hj = 0,
			ij = 0,
			jj = 0,
			kj = 0,
			lj = 0,
			mj = 0,
			nj = 0,
			oj = 0,
			pj = 0,
			qj = 0,
			rj = 0,
			sj = 0,
			tj = 0,
			uj = 0,
			vj = 0,
			wj = 0,
			xj = 0,
			yj = 0,
			zj = 0,
			Aj = 0,
			Bj = 0,
			Cj = 0;
			g = i;
			i = i + 16 | 0;
			h = g;
			j = g + 4 | 0;
			k = HEAP32[f >> 2] | 0;
			l = f + 4 | 0;
			m = HEAP32[l >> 2] | 0;
			n = (m | 0) == 10;
			o = f + 64020 | 0;
			if (n) {
				q = o + 0 | 0;
				r = q + 96 | 0;
				do {
					HEAP32[q >> 2] = 0;
					q = q + 4 | 0
				} while ((q | 0) < (r | 0));
				s = 0;
				t = 0;
				u = 0;
				v = 0;
				w = 0;
				x = 0;
				y = 0;
				z = 0;
				A = 0;
				B = 0;
				C = 0;
				D = 0;
				E = 0;
				F = 0;
				G = 0;
				H = 0;
				I = 0;
				J = 0;
				K = 0;
				L = 0;
				M = 0;
				N = 0;
				O = 0;
				P = 0
			} else {
				s = HEAP32[f + 64080 >> 2] | 0;
				t = HEAP32[f + 64112 >> 2] | 0;
				u = HEAP32[f + 64108 >> 2] | 0;
				v = HEAP32[f + 64104 >> 2] | 0;
				w = HEAP32[f + 64100 >> 2] | 0;
				x = HEAP32[f + 64096 >> 2] | 0;
				y = HEAP32[f + 64092 >> 2] | 0;
				z = HEAP32[f + 64088 >> 2] | 0;
				A = HEAP32[f + 64084 >> 2] | 0;
				B = HEAP32[f + 64076 >> 2] | 0;
				C = HEAP32[f + 64072 >> 2] | 0;
				D = HEAP32[f + 64068 >> 2] | 0;
				E = HEAP32[f + 64064 >> 2] | 0;
				F = HEAP32[f + 64060 >> 2] | 0;
				G = HEAP32[f + 64056 >> 2] | 0;
				H = HEAP32[f + 64052 >> 2] | 0;
				I = HEAP32[f + 64048 >> 2] | 0;
				J = HEAP32[f + 64044 >> 2] | 0;
				K = HEAP32[f + 64040 >> 2] | 0;
				L = HEAP32[f + 64036 >> 2] | 0;
				M = HEAP32[f + 64032 >> 2] | 0;
				N = HEAP32[f + 64028 >> 2] | 0;
				O = HEAP32[f + 64024 >> 2] | 0;
				P = HEAP32[o >> 2] | 0
			}
			o = f + 64020 | 0;
			q = f + 64024 | 0;
			r = f + 64028 | 0;
			Q = f + 64032 | 0;
			R = f + 64036 | 0;
			S = f + 64040 | 0;
			T = f + 64044 | 0;
			U = f + 64048 | 0;
			V = f + 64052 | 0;
			W = f + 64056 | 0;
			X = f + 64060 | 0;
			Y = f + 64064 | 0;
			Z = f + 64068 | 0;
			_ = f + 64072 | 0;
			$ = f + 64076 | 0;
			aa = f + 64080 | 0;
			ba = f + 64084 | 0;
			ca = f + 64088 | 0;
			da = f + 64092 | 0;
			ea = f + 64096 | 0;
			fa = f + 64100 | 0;
			ga = f + 64104 | 0;
			ha = f + 64108 | 0;
			ia = f + 64112 | 0;
			do
				if (HEAP32[k + 36 >> 2] | 0)
					if (n) {
						ja = f + 36 | 0;
						HEAP32[ja >> 2] = 1;
						HEAP32[l >> 2] = 14;
						ka = k + 40 | 0;
						la = HEAP32[ka >> 2] | 0;
						ma = k + 48 | 0;
						na = HEAP32[ma >> 2] | 0;
						if (!(HEAP8[f + 40 >> 0] | 0)) {
							oa = mc[la & 31](na, 4e5, 1) | 0;
							HEAP32[f + 3148 >> 2] = oa;
							if (!oa) {
								pa = J;
								qa = C;
								ra = M;
								sa = B;
								ta = D;
								ua = u;
								va = v;
								wa = w;
								xa = t;
								ya = x;
								za = I;
								Aa = H;
								Ba = P;
								Ca = O;
								Da = L;
								Ea = K;
								Fa = E;
								Ga = F;
								Ha = G;
								Ia = -3;
								Ja = N;
								Ka = y;
								La = A;
								Ma = z;
								break
							} else {
								Na = 9;
								break
							}
						} else {
							oa = f + 3152 | 0;
							HEAP32[oa >> 2] = mc[la & 31](na, 2e5, 1) | 0;
							na = mc[HEAP32[ka >> 2] & 31](HEAP32[ma >> 2] | 0, (HEAP32[ja >> 2] | 0) * 1e5 >> 1, 1) | 0;
							HEAP32[f + 3156 >> 2] = na;
							if ((HEAP32[oa >> 2] | 0) == 0 | (na | 0) == 0) {
								pa = J;
								qa = C;
								ra = M;
								sa = B;
								ta = D;
								ua = u;
								va = v;
								wa = w;
								xa = t;
								ya = x;
								za = I;
								Aa = H;
								Ba = P;
								Ca = O;
								Da = L;
								Ea = K;
								Fa = E;
								Ga = F;
								Ha = G;
								Ia = -3;
								Ja = N;
								Ka = y;
								La = A;
								Ma = z;
								break
							} else {
								Na = 9;
								break
							}
						}
					} else {
						Oa = m;
						Na = 10
					}
				else
					Na = 9;
			while (0);
			if ((Na | 0) == 9) {
				Oa = HEAP32[l >> 2] | 0;
				Na = 10
			}
			a: do
				if ((Na | 0) == 10) {
					do
						switch (Oa | 0) {
						case 47: {
								Pa = HEAP32[f + 32 >> 2] | 0;
								Na = 487;
								break
							}
						case 24: {
								Qa = HEAP32[f + 32 >> 2] | 0;
								Na = 160;
								break
							}
						case 22: {
								Ra = HEAP32[f + 32 >> 2] | 0;
								Na = 144;
								break
							}
						case 45: {
								Sa = HEAP32[f + 32 >> 2] | 0;
								Na = 470;
								break
							}
						case 25: {
								Ta = HEAP32[f + 32 >> 2] | 0;
								Na = 168;
								break
							}
						case 44: {
								Ua = HEAP32[f + 32 >> 2] | 0;
								Na = 462;
								break
							}
						case 21: {
								Va = HEAP32[f + 32 >> 2] | 0;
								Na = 136;
								break
							}
						case 43: {
								Wa = HEAP32[f + 32 >> 2] | 0;
								Na = 454;
								break
							}
						case 23: {
								Xa = HEAP32[f + 32 >> 2] | 0;
								Na = 152;
								break
							}
						case 20: {
								Ya = f + 32 | 0;
								Na = 128;
								break
							}
						case 28: {
								Za = P;
								Na = 195;
								break
							}
						case 41: {
								m = f + 32 | 0;
								_a = m;
								$a = HEAP32[m >> 2] | 0;
								ab = J;
								bb = C;
								cb = M;
								db = B;
								eb = D;
								fb = u;
								gb = v;
								hb = w;
								ib = t;
								jb = x;
								kb = I;
								lb = H;
								nb = P;
								ob = O;
								pb = L;
								qb = K;
								rb = E;
								sb = F;
								tb = G;
								ub = N;
								vb = y;
								wb = A;
								xb = z;
								Na = 395;
								break
							}
						case 26: {
								yb = HEAP32[f + 32 >> 2] | 0;
								Na = 176;
								break
							}
						case 11: {
								zb = HEAP32[f + 32 >> 2] | 0;
								Na = 50;
								break
							}
						case 49: {
								Ab = HEAP32[f + 32 >> 2] | 0;
								Na = 503;
								break
							}
						case 37: {
								m = f + 32 | 0;
								Bb = m;
								Cb = HEAP32[m >> 2] | 0;
								Db = J;
								Eb = M;
								Fb = B;
								Gb = u;
								Hb = v;
								Ib = w;
								Jb = t;
								Kb = x;
								Lb = I;
								Mb = H;
								Nb = P;
								Ob = O;
								Pb = L;
								Rb = K;
								Sb = E;
								Tb = F;
								Ub = N;
								Vb = y;
								Wb = A;
								Xb = z;
								Na = 309;
								break
							}
						case 48: {
								Yb = HEAP32[f + 32 >> 2] | 0;
								Na = 495;
								break
							}
						case 14: {
								Zb = f + 32 | 0;
								Na = 77;
								break
							}
						case 10: {
								HEAP32[l >> 2] = 10;
								m = f + 32 | 0;
								n = HEAP32[m >> 2] | 0;
								na = f + 28 | 0;
								if ((n | 0) > 7) {
									_b = n;
									$b = HEAP32[na >> 2] | 0
								} else {
									oa = HEAP32[f >> 2] | 0;
									ja = oa + 4 | 0;
									ma = HEAP32[ja >> 2] | 0;
									ka = n;
									while (1) {
										if (!ma) {
											pa = J;
											qa = C;
											ra = M;
											sa = B;
											ta = D;
											ua = u;
											va = v;
											wa = w;
											xa = t;
											ya = x;
											za = I;
											Aa = H;
											Ba = P;
											Ca = O;
											Da = L;
											Ea = K;
											Fa = E;
											Ga = F;
											Ha = G;
											Ia = 0;
											Ja = N;
											Ka = y;
											La = A;
											Ma = z;
											break a
										}
										n = HEAP32[oa >> 2] | 0;
										la = HEAPU8[n >> 0] | HEAP32[na >> 2] << 8;
										HEAP32[na >> 2] = la;
										ac = ka + 8 | 0;
										HEAP32[m >> 2] = ac;
										HEAP32[oa >> 2] = n + 1;
										ma = ma + -1 | 0;
										HEAP32[ja >> 2] = ma;
										n = oa + 8 | 0;
										bc = (HEAP32[n >> 2] | 0) + 1 | 0;
										HEAP32[n >> 2] = bc;
										if (!bc) {
											bc = oa + 12 | 0;
											HEAP32[bc >> 2] = (HEAP32[bc >> 2] | 0) + 1
										}
										if ((ac | 0) > 7) {
											_b = ac;
											$b = la;
											break
										} else
											ka = ac
									}
								}
								ka = _b + -8 | 0;
								HEAP32[m >> 2] = ka;
								if (($b >>> ka & 255 | 0) == 66) {
									zb = ka;
									Na = 50
								} else {
									pa = J;
									qa = C;
									ra = M;
									sa = B;
									ta = D;
									ua = u;
									va = v;
									wa = w;
									xa = t;
									ya = x;
									za = I;
									Aa = H;
									Ba = P;
									Ca = O;
									Da = L;
									Ea = K;
									Fa = E;
									Ga = F;
									Ha = G;
									Ia = -5;
									Ja = N;
									Ka = y;
									La = A;
									Ma = z;
									break a
								}
								break
							}
						case 16: {
								cc = HEAP32[f + 32 >> 2] | 0;
								Na = 93;
								break
							}
						case 17: {
								dc = HEAP32[f + 32 >> 2] | 0;
								Na = 101;
								break
							}
						case 29: {
								ec = P;
								fc = O;
								Na = 206;
								break
							}
						case 50: {
								gc = HEAP32[f + 32 >> 2] | 0;
								Na = 511;
								break
							}
						case 27: {
								hc = HEAP32[f + 32 >> 2] | 0;
								Na = 184;
								break
							}
						case 31: {
								ic = HEAP32[f + 32 >> 2] | 0;
								jc = M;
								kc = P;
								lc = O;
								nc = L;
								Na = 231;
								break
							}
						case 30: {
								oc = M;
								pc = P;
								qc = O;
								Na = 223;
								break
							}
						case 32: {
								rc = M;
								sc = P;
								tc = O;
								uc = L;
								vc = K;
								Na = 241;
								break
							}
						case 18: {
								wc = HEAP32[f + 32 >> 2] | 0;
								Na = 109;
								break
							}
						case 39: {
								ka = f + 32 | 0;
								xc = ka;
								yc = HEAP32[ka >> 2] | 0;
								zc = J;
								Ac = C;
								Bc = M;
								Cc = B;
								Dc = D;
								Ec = u;
								Fc = v;
								Gc = w;
								Hc = t;
								Ic = x;
								Jc = I;
								Kc = H;
								Lc = P;
								Mc = O;
								Nc = L;
								Oc = K;
								Pc = E;
								Qc = F;
								Rc = G;
								Sc = N;
								Tc = y;
								Uc = A;
								Vc = z;
								Na = 340;
								break
							}
						case 42: {
								Wc = HEAP32[f + 32 >> 2] | 0;
								Na = 446;
								break
							}
						case 46: {
								Xc = HEAP32[f + 32 >> 2] | 0;
								Na = 478;
								break
							}
						case 13: {
								Yc = HEAP32[f + 32 >> 2] | 0;
								Na = 66;
								break
							}
						case 35: {
								Zc = HEAP32[f + 32 >> 2] | 0;
								_c = M;
								$c = B;
								ad = P;
								bd = O;
								cd = L;
								dd = K;
								ed = N;
								Na = 279;
								break
							}
						case 12: {
								fd = HEAP32[f + 32 >> 2] | 0;
								Na = 58;
								break
							}
						case 15: {
								gd = HEAP32[f + 32 >> 2] | 0;
								Na = 85;
								break
							}
						case 19: {
								hd = HEAP32[f + 32 >> 2] | 0;
								Na = 117;
								break
							}
						case 33: {
								id = M;
								jd = B;
								kd = P;
								ld = O;
								md = L;
								nd = K;
								od = N;
								Na = 261;
								break
							}
						case 34: {
								pd = M;
								qd = B;
								rd = P;
								sd = O;
								td = L;
								ud = K;
								vd = N;
								Na = 271;
								break
							}
						case 36: {
								wd = J;
								xd = M;
								yd = B;
								zd = u;
								Ad = v;
								Bd = w;
								Cd = t;
								Dd = x;
								Ed = I;
								Fd = H;
								Gd = P;
								Hd = O;
								Id = L;
								Jd = K;
								Kd = E;
								Ld = F;
								Md = N;
								Nd = A;
								Na = 298;
								break
							}
						case 38: {
								Od = J;
								Pd = C;
								Qd = M;
								Rd = B;
								Sd = D;
								Td = u;
								Ud = v;
								Vd = w;
								Wd = t;
								Xd = x;
								Yd = I;
								Zd = H;
								_d = P;
								$d = O;
								ae = L;
								be = K;
								ce = E;
								de = F;
								ee = G;
								fe = N;
								ge = y;
								he = A;
								ie = z;
								Na = 329;
								break
							}
						case 40: {
								je = J;
								ke = C;
								le = M;
								me = B;
								ne = D;
								oe = u;
								pe = v;
								qe = w;
								re = t;
								se = x;
								te = I;
								ue = H;
								ve = P;
								we = O;
								xe = L;
								ye = K;
								ze = E;
								Ae = F;
								Be = G;
								Ce = N;
								De = y;
								Ee = A;
								Fe = z;
								Na = 384;
								break
							}
						default:
							jk(4001)
						}
					while (0);
					if ((Na | 0) == 50) {
						HEAP32[l >> 2] = 11;
						ka = f + 32 | 0;
						oa = f + 28 | 0;
						if ((zb | 0) > 7) {
							Ge = zb;
							He = HEAP32[oa >> 2] | 0
						} else {
							ma = HEAP32[f >> 2] | 0;
							ja = ma + 4 | 0;
							na = zb;
							ac = HEAP32[ja >> 2] | 0;
							while (1) {
								if (!ac) {
									pa = J;
									qa = C;
									ra = M;
									sa = B;
									ta = D;
									ua = u;
									va = v;
									wa = w;
									xa = t;
									ya = x;
									za = I;
									Aa = H;
									Ba = P;
									Ca = O;
									Da = L;
									Ea = K;
									Fa = E;
									Ga = F;
									Ha = G;
									Ia = 0;
									Ja = N;
									Ka = y;
									La = A;
									Ma = z;
									break a
								}
								la = HEAP32[ma >> 2] | 0;
								bc = HEAPU8[la >> 0] | HEAP32[oa >> 2] << 8;
								HEAP32[oa >> 2] = bc;
								n = na + 8 | 0;
								HEAP32[ka >> 2] = n;
								HEAP32[ma >> 2] = la + 1;
								ac = ac + -1 | 0;
								HEAP32[ja >> 2] = ac;
								la = ma + 8 | 0;
								Ie = (HEAP32[la >> 2] | 0) + 1 | 0;
								HEAP32[la >> 2] = Ie;
								if (!Ie) {
									Ie = ma + 12 | 0;
									HEAP32[Ie >> 2] = (HEAP32[Ie >> 2] | 0) + 1
								}
								if ((n | 0) > 7) {
									Ge = n;
									He = bc;
									break
								} else
									na = n
							}
						}
						na = Ge + -8 | 0;
						HEAP32[ka >> 2] = na;
						if ((He >>> na & 255 | 0) == 90) {
							fd = na;
							Na = 58
						} else {
							pa = J;
							qa = C;
							ra = M;
							sa = B;
							ta = D;
							ua = u;
							va = v;
							wa = w;
							xa = t;
							ya = x;
							za = I;
							Aa = H;
							Ba = P;
							Ca = O;
							Da = L;
							Ea = K;
							Fa = E;
							Ga = F;
							Ha = G;
							Ia = -5;
							Ja = N;
							Ka = y;
							La = A;
							Ma = z;
							break
						}
					}
					if ((Na | 0) == 58) {
						HEAP32[l >> 2] = 12;
						na = f + 32 | 0;
						ma = f + 28 | 0;
						if ((fd | 0) > 7) {
							Je = fd;
							Ke = HEAP32[ma >> 2] | 0
						} else {
							ac = HEAP32[f >> 2] | 0;
							ja = ac + 4 | 0;
							oa = HEAP32[ja >> 2] | 0;
							n = fd;
							while (1) {
								if (!oa) {
									pa = J;
									qa = C;
									ra = M;
									sa = B;
									ta = D;
									ua = u;
									va = v;
									wa = w;
									xa = t;
									ya = x;
									za = I;
									Aa = H;
									Ba = P;
									Ca = O;
									Da = L;
									Ea = K;
									Fa = E;
									Ga = F;
									Ha = G;
									Ia = 0;
									Ja = N;
									Ka = y;
									La = A;
									Ma = z;
									break a
								}
								bc = HEAP32[ac >> 2] | 0;
								Ie = HEAPU8[bc >> 0] | HEAP32[ma >> 2] << 8;
								HEAP32[ma >> 2] = Ie;
								la = n + 8 | 0;
								HEAP32[na >> 2] = la;
								HEAP32[ac >> 2] = bc + 1;
								oa = oa + -1 | 0;
								HEAP32[ja >> 2] = oa;
								bc = ac + 8 | 0;
								Le = (HEAP32[bc >> 2] | 0) + 1 | 0;
								HEAP32[bc >> 2] = Le;
								if (!Le) {
									Le = ac + 12 | 0;
									HEAP32[Le >> 2] = (HEAP32[Le >> 2] | 0) + 1
								}
								if ((la | 0) > 7) {
									Je = la;
									Ke = Ie;
									break
								} else
									n = la
							}
						}
						n = Je + -8 | 0;
						HEAP32[na >> 2] = n;
						if ((Ke >>> n & 255 | 0) == 104) {
							Yc = n;
							Na = 66
						} else {
							pa = J;
							qa = C;
							ra = M;
							sa = B;
							ta = D;
							ua = u;
							va = v;
							wa = w;
							xa = t;
							ya = x;
							za = I;
							Aa = H;
							Ba = P;
							Ca = O;
							Da = L;
							Ea = K;
							Fa = E;
							Ga = F;
							Ha = G;
							Ia = -5;
							Ja = N;
							Ka = y;
							La = A;
							Ma = z;
							break
						}
					}
					do
						if ((Na | 0) == 66) {
							HEAP32[l >> 2] = 13;
							n = f + 32 | 0;
							ac = f + 28 | 0;
							if ((Yc | 0) > 7) {
								Me = Yc;
								Ne = HEAP32[ac >> 2] | 0
							} else {
								oa = HEAP32[f >> 2] | 0;
								ja = oa + 4 | 0;
								ma = HEAP32[ja >> 2] | 0;
								ka = Yc;
								while (1) {
									if (!ma) {
										pa = J;
										qa = C;
										ra = M;
										sa = B;
										ta = D;
										ua = u;
										va = v;
										wa = w;
										xa = t;
										ya = x;
										za = I;
										Aa = H;
										Ba = P;
										Ca = O;
										Da = L;
										Ea = K;
										Fa = E;
										Ga = F;
										Ha = G;
										Ia = 0;
										Ja = N;
										Ka = y;
										La = A;
										Ma = z;
										break a
									}
									la = HEAP32[oa >> 2] | 0;
									Ie = HEAPU8[la >> 0] | HEAP32[ac >> 2] << 8;
									HEAP32[ac >> 2] = Ie;
									Le = ka + 8 | 0;
									HEAP32[n >> 2] = Le;
									HEAP32[oa >> 2] = la + 1;
									ma = ma + -1 | 0;
									HEAP32[ja >> 2] = ma;
									la = oa + 8 | 0;
									bc = (HEAP32[la >> 2] | 0) + 1 | 0;
									HEAP32[la >> 2] = bc;
									if (!bc) {
										bc = oa + 12 | 0;
										HEAP32[bc >> 2] = (HEAP32[bc >> 2] | 0) + 1
									}
									if ((Le | 0) > 7) {
										Me = Le;
										Ne = Ie;
										break
									} else
										ka = Le
								}
							}
							ka = Me + -8 | 0;
							oa = Ne >>> ka & 255;
							HEAP32[n >> 2] = ka;
							ka = f + 36 | 0;
							HEAP32[ka >> 2] = oa;
							if ((oa + -49 | 0) >>> 0 > 8) {
								pa = J;
								qa = C;
								ra = M;
								sa = B;
								ta = D;
								ua = u;
								va = v;
								wa = w;
								xa = t;
								ya = x;
								za = I;
								Aa = H;
								Ba = P;
								Ca = O;
								Da = L;
								Ea = K;
								Fa = E;
								Ga = F;
								Ha = G;
								Ia = -5;
								Ja = N;
								Ka = y;
								La = A;
								Ma = z;
								break a
							}
							ma = oa + -48 | 0;
							HEAP32[ka >> 2] = ma;
							oa = k + 40 | 0;
							ja = HEAP32[oa >> 2] | 0;
							ac = k + 48 | 0;
							m = HEAP32[ac >> 2] | 0;
							if (!(HEAP8[f + 40 >> 0] | 0)) {
								Le = mc[ja & 31](m, ma * 4e5 | 0, 1) | 0;
								HEAP32[f + 3148 >> 2] = Le;
								if (!Le) {
									pa = J;
									qa = C;
									ra = M;
									sa = B;
									ta = D;
									ua = u;
									va = v;
									wa = w;
									xa = t;
									ya = x;
									za = I;
									Aa = H;
									Ba = P;
									Ca = O;
									Da = L;
									Ea = K;
									Fa = E;
									Ga = F;
									Ha = G;
									Ia = -3;
									Ja = N;
									Ka = y;
									La = A;
									Ma = z;
									break a
								} else {
									Zb = n;
									Na = 77;
									break
								}
							} else {
								Le = f + 3152 | 0;
								HEAP32[Le >> 2] = mc[ja & 31](m, ma * 2e5 | 0, 1) | 0;
								ma = mc[HEAP32[oa >> 2] & 31](HEAP32[ac >> 2] | 0, (HEAP32[ka >> 2] | 0) * 1e5 >> 1, 1) | 0;
								HEAP32[f + 3156 >> 2] = ma;
								if ((HEAP32[Le >> 2] | 0) == 0 | (ma | 0) == 0) {
									pa = J;
									qa = C;
									ra = M;
									sa = B;
									ta = D;
									ua = u;
									va = v;
									wa = w;
									xa = t;
									ya = x;
									za = I;
									Aa = H;
									Ba = P;
									Ca = O;
									Da = L;
									Ea = K;
									Fa = E;
									Ga = F;
									Ha = G;
									Ia = -3;
									Ja = N;
									Ka = y;
									La = A;
									Ma = z;
									break a
								} else {
									Zb = n;
									Na = 77;
									break
								}
							}
						}
					while (0);
					if ((Na | 0) == 77) {
						HEAP32[l >> 2] = 14;
						na = HEAP32[Zb >> 2] | 0;
						ma = f + 28 | 0;
						if ((na | 0) > 7) {
							Oe = na;
							Pe = HEAP32[ma >> 2] | 0
						} else {
							Le = HEAP32[f >> 2] | 0;
							ka = Le + 4 | 0;
							ac = HEAP32[ka >> 2] | 0;
							oa = na;
							while (1) {
								if (!ac) {
									pa = J;
									qa = C;
									ra = M;
									sa = B;
									ta = D;
									ua = u;
									va = v;
									wa = w;
									xa = t;
									ya = x;
									za = I;
									Aa = H;
									Ba = P;
									Ca = O;
									Da = L;
									Ea = K;
									Fa = E;
									Ga = F;
									Ha = G;
									Ia = 0;
									Ja = N;
									Ka = y;
									La = A;
									Ma = z;
									break a
								}
								na = HEAP32[Le >> 2] | 0;
								m = HEAPU8[na >> 0] | HEAP32[ma >> 2] << 8;
								HEAP32[ma >> 2] = m;
								ja = oa + 8 | 0;
								HEAP32[Zb >> 2] = ja;
								HEAP32[Le >> 2] = na + 1;
								ac = ac + -1 | 0;
								HEAP32[ka >> 2] = ac;
								na = Le + 8 | 0;
								Ie = (HEAP32[na >> 2] | 0) + 1 | 0;
								HEAP32[na >> 2] = Ie;
								if (!Ie) {
									Ie = Le + 12 | 0;
									HEAP32[Ie >> 2] = (HEAP32[Ie >> 2] | 0) + 1
								}
								if ((ja | 0) > 7) {
									Oe = ja;
									Pe = m;
									break
								} else
									oa = ja
							}
						}
						oa = Oe + -8 | 0;
						HEAP32[Zb >> 2] = oa;
						Le = Pe >>> oa & 255;
						if ((Le | 0) == 49) {
							gd = oa;
							Na = 85
						} else if ((Le | 0) == 23) {
							Wc = oa;
							Na = 446
						} else {
							pa = J;
							qa = C;
							ra = M;
							sa = B;
							ta = D;
							ua = u;
							va = v;
							wa = w;
							xa = t;
							ya = x;
							za = I;
							Aa = H;
							Ba = P;
							Ca = O;
							Da = L;
							Ea = K;
							Fa = E;
							Ga = F;
							Ha = G;
							Ia = -4;
							Ja = N;
							Ka = y;
							La = A;
							Ma = z;
							break
						}
					}
					if ((Na | 0) == 85) {
						HEAP32[l >> 2] = 15;
						oa = f + 32 | 0;
						Le = f + 28 | 0;
						if ((gd | 0) > 7) {
							Qe = gd;
							Re = HEAP32[Le >> 2] | 0
						} else {
							ac = HEAP32[f >> 2] | 0;
							ka = ac + 4 | 0;
							ma = HEAP32[ka >> 2] | 0;
							ja = gd;
							while (1) {
								if (!ma) {
									pa = J;
									qa = C;
									ra = M;
									sa = B;
									ta = D;
									ua = u;
									va = v;
									wa = w;
									xa = t;
									ya = x;
									za = I;
									Aa = H;
									Ba = P;
									Ca = O;
									Da = L;
									Ea = K;
									Fa = E;
									Ga = F;
									Ha = G;
									Ia = 0;
									Ja = N;
									Ka = y;
									La = A;
									Ma = z;
									break a
								}
								m = HEAP32[ac >> 2] | 0;
								Ie = HEAPU8[m >> 0] | HEAP32[Le >> 2] << 8;
								HEAP32[Le >> 2] = Ie;
								na = ja + 8 | 0;
								HEAP32[oa >> 2] = na;
								HEAP32[ac >> 2] = m + 1;
								ma = ma + -1 | 0;
								HEAP32[ka >> 2] = ma;
								m = ac + 8 | 0;
								bc = (HEAP32[m >> 2] | 0) + 1 | 0;
								HEAP32[m >> 2] = bc;
								if (!bc) {
									bc = ac + 12 | 0;
									HEAP32[bc >> 2] = (HEAP32[bc >> 2] | 0) + 1
								}
								if ((na | 0) > 7) {
									Qe = na;
									Re = Ie;
									break
								} else
									ja = na
							}
						}
						ja = Qe + -8 | 0;
						HEAP32[oa >> 2] = ja;
						if ((Re >>> ja & 255 | 0) == 65) {
							cc = ja;
							Na = 93
						} else {
							pa = J;
							qa = C;
							ra = M;
							sa = B;
							ta = D;
							ua = u;
							va = v;
							wa = w;
							xa = t;
							ya = x;
							za = I;
							Aa = H;
							Ba = P;
							Ca = O;
							Da = L;
							Ea = K;
							Fa = E;
							Ga = F;
							Ha = G;
							Ia = -4;
							Ja = N;
							Ka = y;
							La = A;
							Ma = z;
							break
						}
					} else if ((Na | 0) == 446) {
						HEAP32[l >> 2] = 42;
						ja = f + 32 | 0;
						ac = f + 28 | 0;
						if ((Wc | 0) > 7) {
							Se = Wc;
							Te = HEAP32[ac >> 2] | 0
						} else {
							ma = HEAP32[f >> 2] | 0;
							ka = ma + 4 | 0;
							Le = HEAP32[ka >> 2] | 0;
							na = Wc;
							while (1) {
								if (!Le) {
									pa = J;
									qa = C;
									ra = M;
									sa = B;
									ta = D;
									ua = u;
									va = v;
									wa = w;
									xa = t;
									ya = x;
									za = I;
									Aa = H;
									Ba = P;
									Ca = O;
									Da = L;
									Ea = K;
									Fa = E;
									Ga = F;
									Ha = G;
									Ia = 0;
									Ja = N;
									Ka = y;
									La = A;
									Ma = z;
									break a
								}
								Ie = HEAP32[ma >> 2] | 0;
								bc = HEAPU8[Ie >> 0] | HEAP32[ac >> 2] << 8;
								HEAP32[ac >> 2] = bc;
								m = na + 8 | 0;
								HEAP32[ja >> 2] = m;
								HEAP32[ma >> 2] = Ie + 1;
								Le = Le + -1 | 0;
								HEAP32[ka >> 2] = Le;
								Ie = ma + 8 | 0;
								la = (HEAP32[Ie >> 2] | 0) + 1 | 0;
								HEAP32[Ie >> 2] = la;
								if (!la) {
									la = ma + 12 | 0;
									HEAP32[la >> 2] = (HEAP32[la >> 2] | 0) + 1
								}
								if ((m | 0) > 7) {
									Se = m;
									Te = bc;
									break
								} else
									na = m
							}
						}
						na = Se + -8 | 0;
						HEAP32[ja >> 2] = na;
						if ((Te >>> na & 255 | 0) == 114) {
							Wa = na;
							Na = 454
						} else {
							pa = J;
							qa = C;
							ra = M;
							sa = B;
							ta = D;
							ua = u;
							va = v;
							wa = w;
							xa = t;
							ya = x;
							za = I;
							Aa = H;
							Ba = P;
							Ca = O;
							Da = L;
							Ea = K;
							Fa = E;
							Ga = F;
							Ha = G;
							Ia = -4;
							Ja = N;
							Ka = y;
							La = A;
							Ma = z;
							break
						}
					}
					if ((Na | 0) == 93) {
						HEAP32[l >> 2] = 16;
						na = f + 32 | 0;
						ma = f + 28 | 0;
						if ((cc | 0) > 7) {
							Ue = cc;
							Ve = HEAP32[ma >> 2] | 0
						} else {
							Le = HEAP32[f >> 2] | 0;
							ka = Le + 4 | 0;
							ac = HEAP32[ka >> 2] | 0;
							oa = cc;
							while (1) {
								if (!ac) {
									pa = J;
									qa = C;
									ra = M;
									sa = B;
									ta = D;
									ua = u;
									va = v;
									wa = w;
									xa = t;
									ya = x;
									za = I;
									Aa = H;
									Ba = P;
									Ca = O;
									Da = L;
									Ea = K;
									Fa = E;
									Ga = F;
									Ha = G;
									Ia = 0;
									Ja = N;
									Ka = y;
									La = A;
									Ma = z;
									break a
								}
								m = HEAP32[Le >> 2] | 0;
								bc = HEAPU8[m >> 0] | HEAP32[ma >> 2] << 8;
								HEAP32[ma >> 2] = bc;
								la = oa + 8 | 0;
								HEAP32[na >> 2] = la;
								HEAP32[Le >> 2] = m + 1;
								ac = ac + -1 | 0;
								HEAP32[ka >> 2] = ac;
								m = Le + 8 | 0;
								Ie = (HEAP32[m >> 2] | 0) + 1 | 0;
								HEAP32[m >> 2] = Ie;
								if (!Ie) {
									Ie = Le + 12 | 0;
									HEAP32[Ie >> 2] = (HEAP32[Ie >> 2] | 0) + 1
								}
								if ((la | 0) > 7) {
									Ue = la;
									Ve = bc;
									break
								} else
									oa = la
							}
						}
						oa = Ue + -8 | 0;
						HEAP32[na >> 2] = oa;
						if ((Ve >>> oa & 255 | 0) == 89) {
							dc = oa;
							Na = 101
						} else {
							pa = J;
							qa = C;
							ra = M;
							sa = B;
							ta = D;
							ua = u;
							va = v;
							wa = w;
							xa = t;
							ya = x;
							za = I;
							Aa = H;
							Ba = P;
							Ca = O;
							Da = L;
							Ea = K;
							Fa = E;
							Ga = F;
							Ha = G;
							Ia = -4;
							Ja = N;
							Ka = y;
							La = A;
							Ma = z;
							break
						}
					} else if ((Na | 0) == 454) {
						HEAP32[l >> 2] = 43;
						oa = f + 32 | 0;
						Le = f + 28 | 0;
						if ((Wa | 0) > 7) {
							We = Wa;
							Xe = HEAP32[Le >> 2] | 0
						} else {
							ac = HEAP32[f >> 2] | 0;
							ka = ac + 4 | 0;
							ma = HEAP32[ka >> 2] | 0;
							ja = Wa;
							while (1) {
								if (!ma) {
									pa = J;
									qa = C;
									ra = M;
									sa = B;
									ta = D;
									ua = u;
									va = v;
									wa = w;
									xa = t;
									ya = x;
									za = I;
									Aa = H;
									Ba = P;
									Ca = O;
									Da = L;
									Ea = K;
									Fa = E;
									Ga = F;
									Ha = G;
									Ia = 0;
									Ja = N;
									Ka = y;
									La = A;
									Ma = z;
									break a
								}
								la = HEAP32[ac >> 2] | 0;
								bc = HEAPU8[la >> 0] | HEAP32[Le >> 2] << 8;
								HEAP32[Le >> 2] = bc;
								Ie = ja + 8 | 0;
								HEAP32[oa >> 2] = Ie;
								HEAP32[ac >> 2] = la + 1;
								ma = ma + -1 | 0;
								HEAP32[ka >> 2] = ma;
								la = ac + 8 | 0;
								m = (HEAP32[la >> 2] | 0) + 1 | 0;
								HEAP32[la >> 2] = m;
								if (!m) {
									m = ac + 12 | 0;
									HEAP32[m >> 2] = (HEAP32[m >> 2] | 0) + 1
								}
								if ((Ie | 0) > 7) {
									We = Ie;
									Xe = bc;
									break
								} else
									ja = Ie
							}
						}
						ja = We + -8 | 0;
						HEAP32[oa >> 2] = ja;
						if ((Xe >>> ja & 255 | 0) == 69) {
							Ua = ja;
							Na = 462
						} else {
							pa = J;
							qa = C;
							ra = M;
							sa = B;
							ta = D;
							ua = u;
							va = v;
							wa = w;
							xa = t;
							ya = x;
							za = I;
							Aa = H;
							Ba = P;
							Ca = O;
							Da = L;
							Ea = K;
							Fa = E;
							Ga = F;
							Ha = G;
							Ia = -4;
							Ja = N;
							Ka = y;
							La = A;
							Ma = z;
							break
						}
					}
					if ((Na | 0) == 101) {
						HEAP32[l >> 2] = 17;
						ja = f + 32 | 0;
						ac = f + 28 | 0;
						if ((dc | 0) > 7) {
							Ye = dc;
							Ze = HEAP32[ac >> 2] | 0
						} else {
							ma = HEAP32[f >> 2] | 0;
							ka = ma + 4 | 0;
							Le = HEAP32[ka >> 2] | 0;
							na = dc;
							while (1) {
								if (!Le) {
									pa = J;
									qa = C;
									ra = M;
									sa = B;
									ta = D;
									ua = u;
									va = v;
									wa = w;
									xa = t;
									ya = x;
									za = I;
									Aa = H;
									Ba = P;
									Ca = O;
									Da = L;
									Ea = K;
									Fa = E;
									Ga = F;
									Ha = G;
									Ia = 0;
									Ja = N;
									Ka = y;
									La = A;
									Ma = z;
									break a
								}
								Ie = HEAP32[ma >> 2] | 0;
								bc = HEAPU8[Ie >> 0] | HEAP32[ac >> 2] << 8;
								HEAP32[ac >> 2] = bc;
								m = na + 8 | 0;
								HEAP32[ja >> 2] = m;
								HEAP32[ma >> 2] = Ie + 1;
								Le = Le + -1 | 0;
								HEAP32[ka >> 2] = Le;
								Ie = ma + 8 | 0;
								la = (HEAP32[Ie >> 2] | 0) + 1 | 0;
								HEAP32[Ie >> 2] = la;
								if (!la) {
									la = ma + 12 | 0;
									HEAP32[la >> 2] = (HEAP32[la >> 2] | 0) + 1
								}
								if ((m | 0) > 7) {
									Ye = m;
									Ze = bc;
									break
								} else
									na = m
							}
						}
						na = Ye + -8 | 0;
						HEAP32[ja >> 2] = na;
						if ((Ze >>> na & 255 | 0) == 38) {
							wc = na;
							Na = 109
						} else {
							pa = J;
							qa = C;
							ra = M;
							sa = B;
							ta = D;
							ua = u;
							va = v;
							wa = w;
							xa = t;
							ya = x;
							za = I;
							Aa = H;
							Ba = P;
							Ca = O;
							Da = L;
							Ea = K;
							Fa = E;
							Ga = F;
							Ha = G;
							Ia = -4;
							Ja = N;
							Ka = y;
							La = A;
							Ma = z;
							break
						}
					} else if ((Na | 0) == 462) {
						HEAP32[l >> 2] = 44;
						na = f + 32 | 0;
						ma = f + 28 | 0;
						if ((Ua | 0) > 7) {
							_e = Ua;
							$e = HEAP32[ma >> 2] | 0
						} else {
							Le = HEAP32[f >> 2] | 0;
							ka = Le + 4 | 0;
							ac = HEAP32[ka >> 2] | 0;
							oa = Ua;
							while (1) {
								if (!ac) {
									pa = J;
									qa = C;
									ra = M;
									sa = B;
									ta = D;
									ua = u;
									va = v;
									wa = w;
									xa = t;
									ya = x;
									za = I;
									Aa = H;
									Ba = P;
									Ca = O;
									Da = L;
									Ea = K;
									Fa = E;
									Ga = F;
									Ha = G;
									Ia = 0;
									Ja = N;
									Ka = y;
									La = A;
									Ma = z;
									break a
								}
								m = HEAP32[Le >> 2] | 0;
								bc = HEAPU8[m >> 0] | HEAP32[ma >> 2] << 8;
								HEAP32[ma >> 2] = bc;
								la = oa + 8 | 0;
								HEAP32[na >> 2] = la;
								HEAP32[Le >> 2] = m + 1;
								ac = ac + -1 | 0;
								HEAP32[ka >> 2] = ac;
								m = Le + 8 | 0;
								Ie = (HEAP32[m >> 2] | 0) + 1 | 0;
								HEAP32[m >> 2] = Ie;
								if (!Ie) {
									Ie = Le + 12 | 0;
									HEAP32[Ie >> 2] = (HEAP32[Ie >> 2] | 0) + 1
								}
								if ((la | 0) > 7) {
									_e = la;
									$e = bc;
									break
								} else
									oa = la
							}
						}
						oa = _e + -8 | 0;
						HEAP32[na >> 2] = oa;
						if (($e >>> oa & 255 | 0) == 56) {
							Sa = oa;
							Na = 470
						} else {
							pa = J;
							qa = C;
							ra = M;
							sa = B;
							ta = D;
							ua = u;
							va = v;
							wa = w;
							xa = t;
							ya = x;
							za = I;
							Aa = H;
							Ba = P;
							Ca = O;
							Da = L;
							Ea = K;
							Fa = E;
							Ga = F;
							Ha = G;
							Ia = -4;
							Ja = N;
							Ka = y;
							La = A;
							Ma = z;
							break
						}
					}
					if ((Na | 0) == 109) {
						HEAP32[l >> 2] = 18;
						oa = f + 32 | 0;
						Le = f + 28 | 0;
						if ((wc | 0) > 7) {
							af = wc;
							bf = HEAP32[Le >> 2] | 0
						} else {
							ac = HEAP32[f >> 2] | 0;
							ka = ac + 4 | 0;
							ma = HEAP32[ka >> 2] | 0;
							ja = wc;
							while (1) {
								if (!ma) {
									pa = J;
									qa = C;
									ra = M;
									sa = B;
									ta = D;
									ua = u;
									va = v;
									wa = w;
									xa = t;
									ya = x;
									za = I;
									Aa = H;
									Ba = P;
									Ca = O;
									Da = L;
									Ea = K;
									Fa = E;
									Ga = F;
									Ha = G;
									Ia = 0;
									Ja = N;
									Ka = y;
									La = A;
									Ma = z;
									break a
								}
								la = HEAP32[ac >> 2] | 0;
								bc = HEAPU8[la >> 0] | HEAP32[Le >> 2] << 8;
								HEAP32[Le >> 2] = bc;
								Ie = ja + 8 | 0;
								HEAP32[oa >> 2] = Ie;
								HEAP32[ac >> 2] = la + 1;
								ma = ma + -1 | 0;
								HEAP32[ka >> 2] = ma;
								la = ac + 8 | 0;
								m = (HEAP32[la >> 2] | 0) + 1 | 0;
								HEAP32[la >> 2] = m;
								if (!m) {
									m = ac + 12 | 0;
									HEAP32[m >> 2] = (HEAP32[m >> 2] | 0) + 1
								}
								if ((Ie | 0) > 7) {
									af = Ie;
									bf = bc;
									break
								} else
									ja = Ie
							}
						}
						ja = af + -8 | 0;
						HEAP32[oa >> 2] = ja;
						if ((bf >>> ja & 255 | 0) == 83) {
							hd = ja;
							Na = 117
						} else {
							pa = J;
							qa = C;
							ra = M;
							sa = B;
							ta = D;
							ua = u;
							va = v;
							wa = w;
							xa = t;
							ya = x;
							za = I;
							Aa = H;
							Ba = P;
							Ca = O;
							Da = L;
							Ea = K;
							Fa = E;
							Ga = F;
							Ha = G;
							Ia = -4;
							Ja = N;
							Ka = y;
							La = A;
							Ma = z;
							break
						}
					} else if ((Na | 0) == 470) {
						HEAP32[l >> 2] = 45;
						ja = f + 32 | 0;
						ac = f + 28 | 0;
						if ((Sa | 0) > 7) {
							cf = Sa;
							df = HEAP32[ac >> 2] | 0
						} else {
							ma = HEAP32[f >> 2] | 0;
							ka = ma + 4 | 0;
							Le = HEAP32[ka >> 2] | 0;
							na = Sa;
							while (1) {
								if (!Le) {
									pa = J;
									qa = C;
									ra = M;
									sa = B;
									ta = D;
									ua = u;
									va = v;
									wa = w;
									xa = t;
									ya = x;
									za = I;
									Aa = H;
									Ba = P;
									Ca = O;
									Da = L;
									Ea = K;
									Fa = E;
									Ga = F;
									Ha = G;
									Ia = 0;
									Ja = N;
									Ka = y;
									La = A;
									Ma = z;
									break a
								}
								Ie = HEAP32[ma >> 2] | 0;
								bc = HEAPU8[Ie >> 0] | HEAP32[ac >> 2] << 8;
								HEAP32[ac >> 2] = bc;
								m = na + 8 | 0;
								HEAP32[ja >> 2] = m;
								HEAP32[ma >> 2] = Ie + 1;
								Le = Le + -1 | 0;
								HEAP32[ka >> 2] = Le;
								Ie = ma + 8 | 0;
								la = (HEAP32[Ie >> 2] | 0) + 1 | 0;
								HEAP32[Ie >> 2] = la;
								if (!la) {
									la = ma + 12 | 0;
									HEAP32[la >> 2] = (HEAP32[la >> 2] | 0) + 1
								}
								if ((m | 0) > 7) {
									cf = m;
									df = bc;
									break
								} else
									na = m
							}
						}
						na = cf + -8 | 0;
						HEAP32[ja >> 2] = na;
						if ((df >>> na & 255 | 0) == 80) {
							Xc = na;
							Na = 478
						} else {
							pa = J;
							qa = C;
							ra = M;
							sa = B;
							ta = D;
							ua = u;
							va = v;
							wa = w;
							xa = t;
							ya = x;
							za = I;
							Aa = H;
							Ba = P;
							Ca = O;
							Da = L;
							Ea = K;
							Fa = E;
							Ga = F;
							Ha = G;
							Ia = -4;
							Ja = N;
							Ka = y;
							La = A;
							Ma = z;
							break
						}
					}
					if ((Na | 0) == 117) {
						HEAP32[l >> 2] = 19;
						na = f + 32 | 0;
						ma = f + 28 | 0;
						if ((hd | 0) > 7) {
							ef = hd;
							ff = HEAP32[ma >> 2] | 0
						} else {
							Le = HEAP32[f >> 2] | 0;
							ka = Le + 4 | 0;
							ac = HEAP32[ka >> 2] | 0;
							oa = hd;
							while (1) {
								if (!ac) {
									pa = J;
									qa = C;
									ra = M;
									sa = B;
									ta = D;
									ua = u;
									va = v;
									wa = w;
									xa = t;
									ya = x;
									za = I;
									Aa = H;
									Ba = P;
									Ca = O;
									Da = L;
									Ea = K;
									Fa = E;
									Ga = F;
									Ha = G;
									Ia = 0;
									Ja = N;
									Ka = y;
									La = A;
									Ma = z;
									break a
								}
								m = HEAP32[Le >> 2] | 0;
								bc = HEAPU8[m >> 0] | HEAP32[ma >> 2] << 8;
								HEAP32[ma >> 2] = bc;
								la = oa + 8 | 0;
								HEAP32[na >> 2] = la;
								HEAP32[Le >> 2] = m + 1;
								ac = ac + -1 | 0;
								HEAP32[ka >> 2] = ac;
								m = Le + 8 | 0;
								Ie = (HEAP32[m >> 2] | 0) + 1 | 0;
								HEAP32[m >> 2] = Ie;
								if (!Ie) {
									Ie = Le + 12 | 0;
									HEAP32[Ie >> 2] = (HEAP32[Ie >> 2] | 0) + 1
								}
								if ((la | 0) > 7) {
									ef = la;
									ff = bc;
									break
								} else
									oa = la
							}
						}
						oa = ef + -8 | 0;
						HEAP32[na >> 2] = oa;
						if ((ff >>> oa & 255 | 0) != 89) {
							pa = J;
							qa = C;
							ra = M;
							sa = B;
							ta = D;
							ua = u;
							va = v;
							wa = w;
							xa = t;
							ya = x;
							za = I;
							Aa = H;
							Ba = P;
							Ca = O;
							Da = L;
							Ea = K;
							Fa = E;
							Ga = F;
							Ha = G;
							Ia = -4;
							Ja = N;
							Ka = y;
							La = A;
							Ma = z;
							break
						}
						oa = f + 44 | 0;
						Le = (HEAP32[oa >> 2] | 0) + 1 | 0;
						HEAP32[oa >> 2] = Le;
						if ((HEAP32[f + 48 >> 2] | 0) > 1) {
							oa = HEAP32[p >> 2] | 0;
							HEAP32[h >> 2] = Le;
							Qb(oa | 0, 28040, h | 0) | 0
						}
						HEAP32[f + 3160 >> 2] = 0;
						Ya = na;
						Na = 128
					} else if ((Na | 0) == 478) {
						HEAP32[l >> 2] = 46;
						oa = f + 32 | 0;
						Le = f + 28 | 0;
						if ((Xc | 0) > 7) {
							gf = Xc;
							hf = HEAP32[Le >> 2] | 0
						} else {
							ac = HEAP32[f >> 2] | 0;
							ka = ac + 4 | 0;
							ma = HEAP32[ka >> 2] | 0;
							ja = Xc;
							while (1) {
								if (!ma) {
									pa = J;
									qa = C;
									ra = M;
									sa = B;
									ta = D;
									ua = u;
									va = v;
									wa = w;
									xa = t;
									ya = x;
									za = I;
									Aa = H;
									Ba = P;
									Ca = O;
									Da = L;
									Ea = K;
									Fa = E;
									Ga = F;
									Ha = G;
									Ia = 0;
									Ja = N;
									Ka = y;
									La = A;
									Ma = z;
									break a
								}
								la = HEAP32[ac >> 2] | 0;
								bc = HEAPU8[la >> 0] | HEAP32[Le >> 2] << 8;
								HEAP32[Le >> 2] = bc;
								Ie = ja + 8 | 0;
								HEAP32[oa >> 2] = Ie;
								HEAP32[ac >> 2] = la + 1;
								ma = ma + -1 | 0;
								HEAP32[ka >> 2] = ma;
								la = ac + 8 | 0;
								m = (HEAP32[la >> 2] | 0) + 1 | 0;
								HEAP32[la >> 2] = m;
								if (!m) {
									m = ac + 12 | 0;
									HEAP32[m >> 2] = (HEAP32[m >> 2] | 0) + 1
								}
								if ((Ie | 0) > 7) {
									gf = Ie;
									hf = bc;
									break
								} else
									ja = Ie
							}
						}
						ja = gf + -8 | 0;
						HEAP32[oa >> 2] = ja;
						if ((hf >>> ja & 255 | 0) != 144) {
							pa = J;
							qa = C;
							ra = M;
							sa = B;
							ta = D;
							ua = u;
							va = v;
							wa = w;
							xa = t;
							ya = x;
							za = I;
							Aa = H;
							Ba = P;
							Ca = O;
							Da = L;
							Ea = K;
							Fa = E;
							Ga = F;
							Ha = G;
							Ia = -4;
							Ja = N;
							Ka = y;
							La = A;
							Ma = z;
							break
						}
						HEAP32[f + 3164 >> 2] = 0;
						Pa = ja;
						Na = 487
					}
					if ((Na | 0) == 128) {
						HEAP32[l >> 2] = 20;
						ja = HEAP32[Ya >> 2] | 0;
						ac = f + 28 | 0;
						if ((ja | 0) > 7) {
							jf = ja;
							kf = HEAP32[ac >> 2] | 0
						} else {
							ma = HEAP32[f >> 2] | 0;
							ka = ma + 4 | 0;
							Le = HEAP32[ka >> 2] | 0;
							na = ja;
							while (1) {
								if (!Le) {
									pa = J;
									qa = C;
									ra = M;
									sa = B;
									ta = D;
									ua = u;
									va = v;
									wa = w;
									xa = t;
									ya = x;
									za = I;
									Aa = H;
									Ba = P;
									Ca = O;
									Da = L;
									Ea = K;
									Fa = E;
									Ga = F;
									Ha = G;
									Ia = 0;
									Ja = N;
									Ka = y;
									La = A;
									Ma = z;
									break a
								}
								ja = HEAP32[ma >> 2] | 0;
								Ie = HEAPU8[ja >> 0] | HEAP32[ac >> 2] << 8;
								HEAP32[ac >> 2] = Ie;
								bc = na + 8 | 0;
								HEAP32[Ya >> 2] = bc;
								HEAP32[ma >> 2] = ja + 1;
								Le = Le + -1 | 0;
								HEAP32[ka >> 2] = Le;
								ja = ma + 8 | 0;
								m = (HEAP32[ja >> 2] | 0) + 1 | 0;
								HEAP32[ja >> 2] = m;
								if (!m) {
									m = ma + 12 | 0;
									HEAP32[m >> 2] = (HEAP32[m >> 2] | 0) + 1
								}
								if ((bc | 0) > 7) {
									jf = bc;
									kf = Ie;
									break
								} else
									na = bc
							}
						}
						na = jf + -8 | 0;
						HEAP32[Ya >> 2] = na;
						ma = f + 3160 | 0;
						HEAP32[ma >> 2] = HEAP32[ma >> 2] << 8 | kf >>> na & 255;
						Va = na;
						Na = 136
					} else if ((Na | 0) == 487) {
						HEAP32[l >> 2] = 47;
						na = f + 32 | 0;
						ma = f + 28 | 0;
						if ((Pa | 0) > 7) {
							lf = Pa;
							mf = HEAP32[ma >> 2] | 0
						} else {
							Le = HEAP32[f >> 2] | 0;
							ka = Le + 4 | 0;
							ac = HEAP32[ka >> 2] | 0;
							oa = Pa;
							while (1) {
								if (!ac) {
									pa = J;
									qa = C;
									ra = M;
									sa = B;
									ta = D;
									ua = u;
									va = v;
									wa = w;
									xa = t;
									ya = x;
									za = I;
									Aa = H;
									Ba = P;
									Ca = O;
									Da = L;
									Ea = K;
									Fa = E;
									Ga = F;
									Ha = G;
									Ia = 0;
									Ja = N;
									Ka = y;
									La = A;
									Ma = z;
									break a
								}
								bc = HEAP32[Le >> 2] | 0;
								Ie = HEAPU8[bc >> 0] | HEAP32[ma >> 2] << 8;
								HEAP32[ma >> 2] = Ie;
								m = oa + 8 | 0;
								HEAP32[na >> 2] = m;
								HEAP32[Le >> 2] = bc + 1;
								ac = ac + -1 | 0;
								HEAP32[ka >> 2] = ac;
								bc = Le + 8 | 0;
								ja = (HEAP32[bc >> 2] | 0) + 1 | 0;
								HEAP32[bc >> 2] = ja;
								if (!ja) {
									ja = Le + 12 | 0;
									HEAP32[ja >> 2] = (HEAP32[ja >> 2] | 0) + 1
								}
								if ((m | 0) > 7) {
									lf = m;
									mf = Ie;
									break
								} else
									oa = m
							}
						}
						oa = lf + -8 | 0;
						HEAP32[na >> 2] = oa;
						Le = f + 3164 | 0;
						HEAP32[Le >> 2] = HEAP32[Le >> 2] << 8 | mf >>> oa & 255;
						Yb = oa;
						Na = 495
					}
					if ((Na | 0) == 136) {
						HEAP32[l >> 2] = 21;
						oa = f + 32 | 0;
						Le = f + 28 | 0;
						if ((Va | 0) > 7) {
							nf = Va;
							of = HEAP32[Le >> 2] | 0
						} else {
							ac = HEAP32[f >> 2] | 0;
							ka = ac + 4 | 0;
							ma = HEAP32[ka >> 2] | 0;
							m = Va;
							while (1) {
								if (!ma) {
									pa = J;
									qa = C;
									ra = M;
									sa = B;
									ta = D;
									ua = u;
									va = v;
									wa = w;
									xa = t;
									ya = x;
									za = I;
									Aa = H;
									Ba = P;
									Ca = O;
									Da = L;
									Ea = K;
									Fa = E;
									Ga = F;
									Ha = G;
									Ia = 0;
									Ja = N;
									Ka = y;
									La = A;
									Ma = z;
									break a
								}
								Ie = HEAP32[ac >> 2] | 0;
								ja = HEAPU8[Ie >> 0] | HEAP32[Le >> 2] << 8;
								HEAP32[Le >> 2] = ja;
								bc = m + 8 | 0;
								HEAP32[oa >> 2] = bc;
								HEAP32[ac >> 2] = Ie + 1;
								ma = ma + -1 | 0;
								HEAP32[ka >> 2] = ma;
								Ie = ac + 8 | 0;
								la = (HEAP32[Ie >> 2] | 0) + 1 | 0;
								HEAP32[Ie >> 2] = la;
								if (!la) {
									la = ac + 12 | 0;
									HEAP32[la >> 2] = (HEAP32[la >> 2] | 0) + 1
								}
								if ((bc | 0) > 7) {
									nf = bc;
									of = ja;
									break
								} else
									m = bc
							}
						}
						m = nf + -8 | 0;
						HEAP32[oa >> 2] = m;
						ac = f + 3160 | 0;
						HEAP32[ac >> 2] = HEAP32[ac >> 2] << 8 | of >>> m & 255;
						Ra = m;
						Na = 144
					} else if ((Na | 0) == 495) {
						HEAP32[l >> 2] = 48;
						m = f + 32 | 0;
						ac = f + 28 | 0;
						if ((Yb | 0) > 7) {
							pf = Yb;
							qf = HEAP32[ac >> 2] | 0
						} else {
							ma = HEAP32[f >> 2] | 0;
							ka = ma + 4 | 0;
							Le = HEAP32[ka >> 2] | 0;
							na = Yb;
							while (1) {
								if (!Le) {
									pa = J;
									qa = C;
									ra = M;
									sa = B;
									ta = D;
									ua = u;
									va = v;
									wa = w;
									xa = t;
									ya = x;
									za = I;
									Aa = H;
									Ba = P;
									Ca = O;
									Da = L;
									Ea = K;
									Fa = E;
									Ga = F;
									Ha = G;
									Ia = 0;
									Ja = N;
									Ka = y;
									La = A;
									Ma = z;
									break a
								}
								bc = HEAP32[ma >> 2] | 0;
								ja = HEAPU8[bc >> 0] | HEAP32[ac >> 2] << 8;
								HEAP32[ac >> 2] = ja;
								la = na + 8 | 0;
								HEAP32[m >> 2] = la;
								HEAP32[ma >> 2] = bc + 1;
								Le = Le + -1 | 0;
								HEAP32[ka >> 2] = Le;
								bc = ma + 8 | 0;
								Ie = (HEAP32[bc >> 2] | 0) + 1 | 0;
								HEAP32[bc >> 2] = Ie;
								if (!Ie) {
									Ie = ma + 12 | 0;
									HEAP32[Ie >> 2] = (HEAP32[Ie >> 2] | 0) + 1
								}
								if ((la | 0) > 7) {
									pf = la;
									qf = ja;
									break
								} else
									na = la
							}
						}
						na = pf + -8 | 0;
						HEAP32[m >> 2] = na;
						ma = f + 3164 | 0;
						HEAP32[ma >> 2] = HEAP32[ma >> 2] << 8 | qf >>> na & 255;
						Ab = na;
						Na = 503
					}
					if ((Na | 0) == 144) {
						HEAP32[l >> 2] = 22;
						na = f + 32 | 0;
						ma = f + 28 | 0;
						if ((Ra | 0) > 7) {
							rf = Ra;
							sf = HEAP32[ma >> 2] | 0
						} else {
							Le = HEAP32[f >> 2] | 0;
							ka = Le + 4 | 0;
							ac = HEAP32[ka >> 2] | 0;
							oa = Ra;
							while (1) {
								if (!ac) {
									pa = J;
									qa = C;
									ra = M;
									sa = B;
									ta = D;
									ua = u;
									va = v;
									wa = w;
									xa = t;
									ya = x;
									za = I;
									Aa = H;
									Ba = P;
									Ca = O;
									Da = L;
									Ea = K;
									Fa = E;
									Ga = F;
									Ha = G;
									Ia = 0;
									Ja = N;
									Ka = y;
									La = A;
									Ma = z;
									break a
								}
								la = HEAP32[Le >> 2] | 0;
								ja = HEAPU8[la >> 0] | HEAP32[ma >> 2] << 8;
								HEAP32[ma >> 2] = ja;
								Ie = oa + 8 | 0;
								HEAP32[na >> 2] = Ie;
								HEAP32[Le >> 2] = la + 1;
								ac = ac + -1 | 0;
								HEAP32[ka >> 2] = ac;
								la = Le + 8 | 0;
								bc = (HEAP32[la >> 2] | 0) + 1 | 0;
								HEAP32[la >> 2] = bc;
								if (!bc) {
									bc = Le + 12 | 0;
									HEAP32[bc >> 2] = (HEAP32[bc >> 2] | 0) + 1
								}
								if ((Ie | 0) > 7) {
									rf = Ie;
									sf = ja;
									break
								} else
									oa = Ie
							}
						}
						oa = rf + -8 | 0;
						HEAP32[na >> 2] = oa;
						Le = f + 3160 | 0;
						HEAP32[Le >> 2] = HEAP32[Le >> 2] << 8 | sf >>> oa & 255;
						Xa = oa;
						Na = 152
					} else if ((Na | 0) == 503) {
						HEAP32[l >> 2] = 49;
						oa = f + 32 | 0;
						Le = f + 28 | 0;
						if ((Ab | 0) > 7) {
							tf = Ab;
							uf = HEAP32[Le >> 2] | 0
						} else {
							ac = HEAP32[f >> 2] | 0;
							ka = ac + 4 | 0;
							ma = HEAP32[ka >> 2] | 0;
							m = Ab;
							while (1) {
								if (!ma) {
									pa = J;
									qa = C;
									ra = M;
									sa = B;
									ta = D;
									ua = u;
									va = v;
									wa = w;
									xa = t;
									ya = x;
									za = I;
									Aa = H;
									Ba = P;
									Ca = O;
									Da = L;
									Ea = K;
									Fa = E;
									Ga = F;
									Ha = G;
									Ia = 0;
									Ja = N;
									Ka = y;
									La = A;
									Ma = z;
									break a
								}
								Ie = HEAP32[ac >> 2] | 0;
								ja = HEAPU8[Ie >> 0] | HEAP32[Le >> 2] << 8;
								HEAP32[Le >> 2] = ja;
								bc = m + 8 | 0;
								HEAP32[oa >> 2] = bc;
								HEAP32[ac >> 2] = Ie + 1;
								ma = ma + -1 | 0;
								HEAP32[ka >> 2] = ma;
								Ie = ac + 8 | 0;
								la = (HEAP32[Ie >> 2] | 0) + 1 | 0;
								HEAP32[Ie >> 2] = la;
								if (!la) {
									la = ac + 12 | 0;
									HEAP32[la >> 2] = (HEAP32[la >> 2] | 0) + 1
								}
								if ((bc | 0) > 7) {
									tf = bc;
									uf = ja;
									break
								} else
									m = bc
							}
						}
						m = tf + -8 | 0;
						HEAP32[oa >> 2] = m;
						ac = f + 3164 | 0;
						HEAP32[ac >> 2] = HEAP32[ac >> 2] << 8 | uf >>> m & 255;
						gc = m;
						Na = 511
					}
					if ((Na | 0) == 152) {
						HEAP32[l >> 2] = 23;
						m = f + 32 | 0;
						ac = f + 28 | 0;
						if ((Xa | 0) > 7) {
							vf = Xa;
							wf = HEAP32[ac >> 2] | 0
						} else {
							ma = HEAP32[f >> 2] | 0;
							ka = ma + 4 | 0;
							Le = HEAP32[ka >> 2] | 0;
							na = Xa;
							while (1) {
								if (!Le) {
									pa = J;
									qa = C;
									ra = M;
									sa = B;
									ta = D;
									ua = u;
									va = v;
									wa = w;
									xa = t;
									ya = x;
									za = I;
									Aa = H;
									Ba = P;
									Ca = O;
									Da = L;
									Ea = K;
									Fa = E;
									Ga = F;
									Ha = G;
									Ia = 0;
									Ja = N;
									Ka = y;
									La = A;
									Ma = z;
									break a
								}
								bc = HEAP32[ma >> 2] | 0;
								ja = HEAPU8[bc >> 0] | HEAP32[ac >> 2] << 8;
								HEAP32[ac >> 2] = ja;
								la = na + 8 | 0;
								HEAP32[m >> 2] = la;
								HEAP32[ma >> 2] = bc + 1;
								Le = Le + -1 | 0;
								HEAP32[ka >> 2] = Le;
								bc = ma + 8 | 0;
								Ie = (HEAP32[bc >> 2] | 0) + 1 | 0;
								HEAP32[bc >> 2] = Ie;
								if (!Ie) {
									Ie = ma + 12 | 0;
									HEAP32[Ie >> 2] = (HEAP32[Ie >> 2] | 0) + 1
								}
								if ((la | 0) > 7) {
									vf = la;
									wf = ja;
									break
								} else
									na = la
							}
						}
						na = vf + -8 | 0;
						HEAP32[m >> 2] = na;
						ma = f + 3160 | 0;
						HEAP32[ma >> 2] = HEAP32[ma >> 2] << 8 | wf >>> na & 255;
						Qa = na;
						Na = 160
					} else if ((Na | 0) == 511) {
						HEAP32[l >> 2] = 50;
						na = f + 32 | 0;
						ma = f + 28 | 0;
						if ((gc | 0) > 7) {
							xf = gc;
							yf = HEAP32[ma >> 2] | 0
						} else {
							Le = HEAP32[f >> 2] | 0;
							ka = Le + 4 | 0;
							ac = HEAP32[ka >> 2] | 0;
							oa = gc;
							while (1) {
								if (!ac) {
									pa = J;
									qa = C;
									ra = M;
									sa = B;
									ta = D;
									ua = u;
									va = v;
									wa = w;
									xa = t;
									ya = x;
									za = I;
									Aa = H;
									Ba = P;
									Ca = O;
									Da = L;
									Ea = K;
									Fa = E;
									Ga = F;
									Ha = G;
									Ia = 0;
									Ja = N;
									Ka = y;
									La = A;
									Ma = z;
									break a
								}
								la = HEAP32[Le >> 2] | 0;
								ja = HEAPU8[la >> 0] | HEAP32[ma >> 2] << 8;
								HEAP32[ma >> 2] = ja;
								Ie = oa + 8 | 0;
								HEAP32[na >> 2] = Ie;
								HEAP32[Le >> 2] = la + 1;
								ac = ac + -1 | 0;
								HEAP32[ka >> 2] = ac;
								la = Le + 8 | 0;
								bc = (HEAP32[la >> 2] | 0) + 1 | 0;
								HEAP32[la >> 2] = bc;
								if (!bc) {
									bc = Le + 12 | 0;
									HEAP32[bc >> 2] = (HEAP32[bc >> 2] | 0) + 1
								}
								if ((Ie | 0) > 7) {
									xf = Ie;
									yf = ja;
									break
								} else
									oa = Ie
							}
						}
						oa = xf + -8 | 0;
						HEAP32[na >> 2] = oa;
						Le = f + 3164 | 0;
						HEAP32[Le >> 2] = HEAP32[Le >> 2] << 8 | yf >>> oa & 255;
						HEAP32[l >> 2] = 1;
						pa = J;
						qa = C;
						ra = M;
						sa = B;
						ta = D;
						ua = u;
						va = v;
						wa = w;
						xa = t;
						ya = x;
						za = I;
						Aa = H;
						Ba = P;
						Ca = O;
						Da = L;
						Ea = K;
						Fa = E;
						Ga = F;
						Ha = G;
						Ia = 4;
						Ja = N;
						Ka = y;
						La = A;
						Ma = z;
						break
					}
					if ((Na | 0) == 160) {
						HEAP32[l >> 2] = 24;
						oa = f + 32 | 0;
						Le = f + 28 | 0;
						if ((Qa | 0) > 0) {
							zf = Qa;
							Af = HEAP32[Le >> 2] | 0
						} else {
							ac = HEAP32[f >> 2] | 0;
							ka = ac + 4 | 0;
							ma = HEAP32[ka >> 2] | 0;
							m = Qa;
							while (1) {
								if (!ma) {
									pa = J;
									qa = C;
									ra = M;
									sa = B;
									ta = D;
									ua = u;
									va = v;
									wa = w;
									xa = t;
									ya = x;
									za = I;
									Aa = H;
									Ba = P;
									Ca = O;
									Da = L;
									Ea = K;
									Fa = E;
									Ga = F;
									Ha = G;
									Ia = 0;
									Ja = N;
									Ka = y;
									La = A;
									Ma = z;
									break a
								}
								Ie = HEAP32[ac >> 2] | 0;
								ja = HEAPU8[Ie >> 0] | HEAP32[Le >> 2] << 8;
								HEAP32[Le >> 2] = ja;
								bc = m + 8 | 0;
								HEAP32[oa >> 2] = bc;
								HEAP32[ac >> 2] = Ie + 1;
								ma = ma + -1 | 0;
								HEAP32[ka >> 2] = ma;
								Ie = ac + 8 | 0;
								la = (HEAP32[Ie >> 2] | 0) + 1 | 0;
								HEAP32[Ie >> 2] = la;
								if (!la) {
									la = ac + 12 | 0;
									HEAP32[la >> 2] = (HEAP32[la >> 2] | 0) + 1
								}
								if ((bc | 0) > 0) {
									zf = bc;
									Af = ja;
									break
								} else
									m = bc
							}
						}
						m = zf + -1 | 0;
						HEAP32[oa >> 2] = m;
						HEAP8[f + 16 >> 0] = Af >>> m & 1;
						HEAP32[f + 52 >> 2] = 0;
						Ta = m;
						Na = 168
					}
					if ((Na | 0) == 168) {
						HEAP32[l >> 2] = 25;
						m = f + 32 | 0;
						ac = f + 28 | 0;
						if ((Ta | 0) > 7) {
							Bf = Ta;
							Cf = HEAP32[ac >> 2] | 0
						} else {
							ma = HEAP32[f >> 2] | 0;
							ka = ma + 4 | 0;
							Le = HEAP32[ka >> 2] | 0;
							na = Ta;
							while (1) {
								if (!Le) {
									pa = J;
									qa = C;
									ra = M;
									sa = B;
									ta = D;
									ua = u;
									va = v;
									wa = w;
									xa = t;
									ya = x;
									za = I;
									Aa = H;
									Ba = P;
									Ca = O;
									Da = L;
									Ea = K;
									Fa = E;
									Ga = F;
									Ha = G;
									Ia = 0;
									Ja = N;
									Ka = y;
									La = A;
									Ma = z;
									break a
								}
								bc = HEAP32[ma >> 2] | 0;
								ja = HEAPU8[bc >> 0] | HEAP32[ac >> 2] << 8;
								HEAP32[ac >> 2] = ja;
								la = na + 8 | 0;
								HEAP32[m >> 2] = la;
								HEAP32[ma >> 2] = bc + 1;
								Le = Le + -1 | 0;
								HEAP32[ka >> 2] = Le;
								bc = ma + 8 | 0;
								Ie = (HEAP32[bc >> 2] | 0) + 1 | 0;
								HEAP32[bc >> 2] = Ie;
								if (!Ie) {
									Ie = ma + 12 | 0;
									HEAP32[Ie >> 2] = (HEAP32[Ie >> 2] | 0) + 1
								}
								if ((la | 0) > 7) {
									Bf = la;
									Cf = ja;
									break
								} else
									na = la
							}
						}
						na = Bf + -8 | 0;
						HEAP32[m >> 2] = na;
						ma = f + 52 | 0;
						HEAP32[ma >> 2] = HEAP32[ma >> 2] << 8 | Cf >>> na & 255;
						yb = na;
						Na = 176
					}
					if ((Na | 0) == 176) {
						HEAP32[l >> 2] = 26;
						na = f + 32 | 0;
						ma = f + 28 | 0;
						if ((yb | 0) > 7) {
							Df = yb;
							Ef = HEAP32[ma >> 2] | 0
						} else {
							Le = HEAP32[f >> 2] | 0;
							ka = Le + 4 | 0;
							ac = HEAP32[ka >> 2] | 0;
							oa = yb;
							while (1) {
								if (!ac) {
									pa = J;
									qa = C;
									ra = M;
									sa = B;
									ta = D;
									ua = u;
									va = v;
									wa = w;
									xa = t;
									ya = x;
									za = I;
									Aa = H;
									Ba = P;
									Ca = O;
									Da = L;
									Ea = K;
									Fa = E;
									Ga = F;
									Ha = G;
									Ia = 0;
									Ja = N;
									Ka = y;
									La = A;
									Ma = z;
									break a
								}
								la = HEAP32[Le >> 2] | 0;
								ja = HEAPU8[la >> 0] | HEAP32[ma >> 2] << 8;
								HEAP32[ma >> 2] = ja;
								Ie = oa + 8 | 0;
								HEAP32[na >> 2] = Ie;
								HEAP32[Le >> 2] = la + 1;
								ac = ac + -1 | 0;
								HEAP32[ka >> 2] = ac;
								la = Le + 8 | 0;
								bc = (HEAP32[la >> 2] | 0) + 1 | 0;
								HEAP32[la >> 2] = bc;
								if (!bc) {
									bc = Le + 12 | 0;
									HEAP32[bc >> 2] = (HEAP32[bc >> 2] | 0) + 1
								}
								if ((Ie | 0) > 7) {
									Df = Ie;
									Ef = ja;
									break
								} else
									oa = Ie
							}
						}
						oa = Df + -8 | 0;
						HEAP32[na >> 2] = oa;
						Le = f + 52 | 0;
						HEAP32[Le >> 2] = HEAP32[Le >> 2] << 8 | Ef >>> oa & 255;
						hc = oa;
						Na = 184
					}
					if ((Na | 0) == 184) {
						HEAP32[l >> 2] = 27;
						oa = f + 32 | 0;
						Le = f + 28 | 0;
						if ((hc | 0) > 7) {
							Ff = hc;
							Gf = HEAP32[Le >> 2] | 0
						} else {
							ac = HEAP32[f >> 2] | 0;
							ka = ac + 4 | 0;
							ma = HEAP32[ka >> 2] | 0;
							m = hc;
							while (1) {
								if (!ma) {
									pa = J;
									qa = C;
									ra = M;
									sa = B;
									ta = D;
									ua = u;
									va = v;
									wa = w;
									xa = t;
									ya = x;
									za = I;
									Aa = H;
									Ba = P;
									Ca = O;
									Da = L;
									Ea = K;
									Fa = E;
									Ga = F;
									Ha = G;
									Ia = 0;
									Ja = N;
									Ka = y;
									La = A;
									Ma = z;
									break a
								}
								Ie = HEAP32[ac >> 2] | 0;
								ja = HEAPU8[Ie >> 0] | HEAP32[Le >> 2] << 8;
								HEAP32[Le >> 2] = ja;
								bc = m + 8 | 0;
								HEAP32[oa >> 2] = bc;
								HEAP32[ac >> 2] = Ie + 1;
								ma = ma + -1 | 0;
								HEAP32[ka >> 2] = ma;
								Ie = ac + 8 | 0;
								la = (HEAP32[Ie >> 2] | 0) + 1 | 0;
								HEAP32[Ie >> 2] = la;
								if (!la) {
									la = ac + 12 | 0;
									HEAP32[la >> 2] = (HEAP32[la >> 2] | 0) + 1
								}
								if ((bc | 0) > 7) {
									Ff = bc;
									Gf = ja;
									break
								} else
									m = bc
							}
						}
						m = Ff + -8 | 0;
						HEAP32[oa >> 2] = m;
						ac = f + 52 | 0;
						ma = HEAP32[ac >> 2] << 8 | Gf >>> m & 255;
						HEAP32[ac >> 2] = ma;
						if ((ma | 0) < 0) {
							pa = J;
							qa = C;
							ra = M;
							sa = B;
							ta = D;
							ua = u;
							va = v;
							wa = w;
							xa = t;
							ya = x;
							za = I;
							Aa = H;
							Ba = P;
							Ca = O;
							Da = L;
							Ea = K;
							Fa = E;
							Ga = F;
							Ha = G;
							Ia = -4;
							Ja = N;
							Ka = y;
							La = A;
							Ma = z;
							break
						}
						if ((ma | 0) > ((HEAP32[f + 36 >> 2] | 0) * 1e5 | 10 | 0)) {
							pa = J;
							qa = C;
							ra = M;
							sa = B;
							ta = D;
							ua = u;
							va = v;
							wa = w;
							xa = t;
							ya = x;
							za = I;
							Aa = H;
							Ba = P;
							Ca = O;
							Da = L;
							Ea = K;
							Fa = E;
							Ga = F;
							Ha = G;
							Ia = -4;
							Ja = N;
							Ka = y;
							La = A;
							Ma = z;
							break
						} else {
							Hf = 0;
							Na = 193
						}
					}
					b: while (1) {
						switch (Na | 0) {
						case 193: {
								Na = 0;
								if ((Hf | 0) < 16) {
									Za = Hf;
									Na = 195;
									continue b
								}
								sy(f + 3180 | 0, 0, 256) | 0;
								If = 0;
								Jf = O;
								Na = 203;
								break
							}
						case 195: {
								Na = 0;
								HEAP32[l >> 2] = 28;
								ma = f + 32 | 0;
								ac = HEAP32[ma >> 2] | 0;
								m = f + 28 | 0;
								if ((ac | 0) > 0) {
									Kf = ac;
									Lf = HEAP32[m >> 2] | 0
								} else {
									ka = HEAP32[f >> 2] | 0;
									Le = ka + 4 | 0;
									na = HEAP32[Le >> 2] | 0;
									bc = ac;
									while (1) {
										if (!na) {
											pa = J;
											qa = C;
											ra = M;
											sa = B;
											ta = D;
											ua = u;
											va = v;
											wa = w;
											xa = t;
											ya = x;
											za = I;
											Aa = H;
											Ba = Za;
											Ca = O;
											Da = L;
											Ea = K;
											Fa = E;
											Ga = F;
											Ha = G;
											Ia = 0;
											Ja = N;
											Ka = y;
											La = A;
											Ma = z;
											break a
										}
										ac = HEAP32[ka >> 2] | 0;
										ja = HEAPU8[ac >> 0] | HEAP32[m >> 2] << 8;
										HEAP32[m >> 2] = ja;
										la = bc + 8 | 0;
										HEAP32[ma >> 2] = la;
										HEAP32[ka >> 2] = ac + 1;
										na = na + -1 | 0;
										HEAP32[Le >> 2] = na;
										ac = ka + 8 | 0;
										Ie = (HEAP32[ac >> 2] | 0) + 1 | 0;
										HEAP32[ac >> 2] = Ie;
										if (!Ie) {
											Ie = ka + 12 | 0;
											HEAP32[Ie >> 2] = (HEAP32[Ie >> 2] | 0) + 1
										}
										if ((la | 0) > 0) {
											Kf = la;
											Lf = ja;
											break
										} else
											bc = la
									}
								}
								bc = Kf + -1 | 0;
								HEAP32[ma >> 2] = bc;
								HEAP8[f + Za + 3436 >> 0] = (Lf & 1 << bc | 0) != 0 & 1;
								Hf = Za + 1 | 0;
								Na = 193;
								continue b;
								break
							}
						case 206: {
								Na = 0;
								HEAP32[l >> 2] = 29;
								bc = f + 32 | 0;
								ka = HEAP32[bc >> 2] | 0;
								na = f + 28 | 0;
								if ((ka | 0) > 0) {
									Mf = ka;
									Nf = HEAP32[na >> 2] | 0
								} else {
									Le = HEAP32[f >> 2] | 0;
									m = Le + 4 | 0;
									n = HEAP32[m >> 2] | 0;
									la = ka;
									while (1) {
										if (!n) {
											pa = J;
											qa = C;
											ra = M;
											sa = B;
											ta = D;
											ua = u;
											va = v;
											wa = w;
											xa = t;
											ya = x;
											za = I;
											Aa = H;
											Ba = ec;
											Ca = fc;
											Da = L;
											Ea = K;
											Fa = E;
											Ga = F;
											Ha = G;
											Ia = 0;
											Ja = N;
											Ka = y;
											La = A;
											Ma = z;
											break a
										}
										ka = HEAP32[Le >> 2] | 0;
										ja = HEAPU8[ka >> 0] | HEAP32[na >> 2] << 8;
										HEAP32[na >> 2] = ja;
										Ie = la + 8 | 0;
										HEAP32[bc >> 2] = Ie;
										HEAP32[Le >> 2] = ka + 1;
										n = n + -1 | 0;
										HEAP32[m >> 2] = n;
										ka = Le + 8 | 0;
										ac = (HEAP32[ka >> 2] | 0) + 1 | 0;
										HEAP32[ka >> 2] = ac;
										if (!ac) {
											ac = Le + 12 | 0;
											HEAP32[ac >> 2] = (HEAP32[ac >> 2] | 0) + 1
										}
										if ((Ie | 0) > 0) {
											Mf = Ie;
											Nf = ja;
											break
										} else
											la = Ie
									}
								}
								la = Mf + -1 | 0;
								HEAP32[bc >> 2] = la;
								if (Nf & 1 << la)
									HEAP8[f + ((ec << 4) + fc) + 3180 >> 0] = 1;
								Of = ec;
								Pf = fc + 1 | 0;
								Na = 205;
								break
							}
						case 223: {
								Na = 0;
								HEAP32[l >> 2] = 30;
								la = f + 32 | 0;
								Le = HEAP32[la >> 2] | 0;
								n = f + 28 | 0;
								if ((Le | 0) > 2) {
									Qf = Le;
									Rf = HEAP32[n >> 2] | 0
								} else {
									m = HEAP32[f >> 2] | 0;
									na = m + 4 | 0;
									ma = HEAP32[na >> 2] | 0;
									Ie = Le;
									while (1) {
										if (!ma) {
											pa = J;
											qa = C;
											ra = oc;
											sa = B;
											ta = D;
											ua = u;
											va = v;
											wa = w;
											xa = t;
											ya = x;
											za = I;
											Aa = H;
											Ba = pc;
											Ca = qc;
											Da = L;
											Ea = K;
											Fa = E;
											Ga = F;
											Ha = G;
											Ia = 0;
											Ja = N;
											Ka = y;
											La = A;
											Ma = z;
											break a
										}
										Le = HEAP32[m >> 2] | 0;
										ja = HEAPU8[Le >> 0] | HEAP32[n >> 2] << 8;
										HEAP32[n >> 2] = ja;
										ac = Ie + 8 | 0;
										HEAP32[la >> 2] = ac;
										HEAP32[m >> 2] = Le + 1;
										ma = ma + -1 | 0;
										HEAP32[na >> 2] = ma;
										Le = m + 8 | 0;
										ka = (HEAP32[Le >> 2] | 0) + 1 | 0;
										HEAP32[Le >> 2] = ka;
										if (!ka) {
											ka = m + 12 | 0;
											HEAP32[ka >> 2] = (HEAP32[ka >> 2] | 0) + 1
										}
										if ((ac | 0) > 2) {
											Qf = ac;
											Rf = ja;
											break
										} else
											Ie = ac
									}
								}
								Ie = Qf + -3 | 0;
								m = Rf >>> Ie & 7;
								HEAP32[la >> 2] = Ie;
								if ((m | 0) == 0 | (m | 0) == 1 | (m | 0) == 7) {
									pa = J;
									qa = C;
									ra = oc;
									sa = B;
									ta = D;
									ua = u;
									va = v;
									wa = w;
									xa = t;
									ya = x;
									za = I;
									Aa = H;
									Ba = pc;
									Ca = qc;
									Da = m;
									Ea = K;
									Fa = E;
									Ga = F;
									Ha = G;
									Ia = -4;
									Ja = N;
									Ka = y;
									La = A;
									Ma = z;
									break a
								} else {
									ic = Ie;
									jc = oc;
									kc = pc;
									lc = qc;
									nc = m;
									Na = 231;
									continue b
								}
								break
							}
						case 231: {
								Na = 0;
								HEAP32[l >> 2] = 31;
								m = f + 32 | 0;
								Ie = f + 28 | 0;
								if ((ic | 0) > 14) {
									Sf = ic;
									Tf = HEAP32[Ie >> 2] | 0
								} else {
									ma = HEAP32[f >> 2] | 0;
									na = ma + 4 | 0;
									n = HEAP32[na >> 2] | 0;
									bc = ic;
									while (1) {
										if (!n) {
											pa = J;
											qa = C;
											ra = jc;
											sa = B;
											ta = D;
											ua = u;
											va = v;
											wa = w;
											xa = t;
											ya = x;
											za = I;
											Aa = H;
											Ba = kc;
											Ca = lc;
											Da = nc;
											Ea = K;
											Fa = E;
											Ga = F;
											Ha = G;
											Ia = 0;
											Ja = N;
											Ka = y;
											La = A;
											Ma = z;
											break a
										}
										ac = HEAP32[ma >> 2] | 0;
										ja = HEAPU8[ac >> 0] | HEAP32[Ie >> 2] << 8;
										HEAP32[Ie >> 2] = ja;
										ka = bc + 8 | 0;
										HEAP32[m >> 2] = ka;
										HEAP32[ma >> 2] = ac + 1;
										n = n + -1 | 0;
										HEAP32[na >> 2] = n;
										ac = ma + 8 | 0;
										Le = (HEAP32[ac >> 2] | 0) + 1 | 0;
										HEAP32[ac >> 2] = Le;
										if (!Le) {
											Le = ma + 12 | 0;
											HEAP32[Le >> 2] = (HEAP32[Le >> 2] | 0) + 1
										}
										if ((ka | 0) > 14) {
											Sf = ka;
											Tf = ja;
											break
										} else
											bc = ka
									}
								}
								bc = Sf + -15 | 0;
								ma = Tf >>> bc & 32767;
								HEAP32[m >> 2] = bc;
								if (!ma) {
									pa = J;
									qa = C;
									ra = jc;
									sa = B;
									ta = D;
									ua = u;
									va = v;
									wa = w;
									xa = t;
									ya = x;
									za = I;
									Aa = H;
									Ba = kc;
									Ca = lc;
									Da = nc;
									Ea = 0;
									Fa = E;
									Ga = F;
									Ha = G;
									Ia = -4;
									Ja = N;
									Ka = y;
									La = A;
									Ma = z;
									break a
								} else {
									Uf = jc;
									Vf = 0;
									Wf = lc;
									Xf = nc;
									Yf = ma;
									Na = 239
								}
								break
							}
						case 241: {
								Na = 0;
								ma = f + 32 | 0;
								bc = f + 28 | 0;
								n = HEAP32[ma >> 2] | 0;
								na = tc;
								while (1) {
									HEAP32[l >> 2] = 32;
									if ((n | 0) > 0) {
										Zf = n;
										_f = HEAP32[bc >> 2] | 0
									} else {
										Ie = HEAP32[f >> 2] | 0;
										la = Ie + 4 | 0;
										ka = HEAP32[la >> 2] | 0;
										ja = n;
										while (1) {
											if (!ka) {
												pa = J;
												qa = C;
												ra = rc;
												sa = B;
												ta = D;
												ua = u;
												va = v;
												wa = w;
												xa = t;
												ya = x;
												za = I;
												Aa = H;
												Ba = sc;
												Ca = na;
												Da = uc;
												Ea = vc;
												Fa = E;
												Ga = F;
												Ha = G;
												Ia = 0;
												Ja = N;
												Ka = y;
												La = A;
												Ma = z;
												break a
											}
											Le = HEAP32[Ie >> 2] | 0;
											ac = HEAPU8[Le >> 0] | HEAP32[bc >> 2] << 8;
											HEAP32[bc >> 2] = ac;
											$f = ja + 8 | 0;
											HEAP32[ma >> 2] = $f;
											HEAP32[Ie >> 2] = Le + 1;
											ka = ka + -1 | 0;
											HEAP32[la >> 2] = ka;
											Le = Ie + 8 | 0;
											ag = (HEAP32[Le >> 2] | 0) + 1 | 0;
											HEAP32[Le >> 2] = ag;
											if (!ag) {
												ag = Ie + 12 | 0;
												HEAP32[ag >> 2] = (HEAP32[ag >> 2] | 0) + 1
											}
											if (($f | 0) > 0) {
												Zf = $f;
												_f = ac;
												break
											} else
												ja = $f
										}
									}
									n = Zf + -1 | 0;
									HEAP32[ma >> 2] = n;
									if (!(_f & 1 << n))
										break;
									ja = na + 1 | 0;
									if ((ja | 0) >= (uc | 0)) {
										pa = J;
										qa = C;
										ra = rc;
										sa = B;
										ta = D;
										ua = u;
										va = v;
										wa = w;
										xa = t;
										ya = x;
										za = I;
										Aa = H;
										Ba = sc;
										Ca = ja;
										Da = uc;
										Ea = vc;
										Fa = E;
										Ga = F;
										Ha = G;
										Ia = -4;
										Ja = N;
										Ka = y;
										La = A;
										Ma = z;
										break a
									} else
										na = ja
								}
								HEAP8[f + sc + 25870 >> 0] = na;
								Uf = rc;
								Vf = sc + 1 | 0;
								Wf = na;
								Xf = uc;
								Yf = vc;
								Na = 239;
								break
							}
						case 261: {
								Na = 0;
								HEAP32[l >> 2] = 33;
								n = f + 32 | 0;
								ma = HEAP32[n >> 2] | 0;
								bc = f + 28 | 0;
								if ((ma | 0) > 4) {
									bg = ma;
									cg = HEAP32[bc >> 2] | 0
								} else {
									m = HEAP32[f >> 2] | 0;
									ja = m + 4 | 0;
									Ie = HEAP32[ja >> 2] | 0;
									ka = ma;
									while (1) {
										if (!Ie) {
											pa = J;
											qa = C;
											ra = id;
											sa = jd;
											ta = D;
											ua = u;
											va = v;
											wa = w;
											xa = t;
											ya = x;
											za = I;
											Aa = H;
											Ba = kd;
											Ca = ld;
											Da = md;
											Ea = nd;
											Fa = E;
											Ga = F;
											Ha = G;
											Ia = 0;
											Ja = od;
											Ka = y;
											La = A;
											Ma = z;
											break a
										}
										ma = HEAP32[m >> 2] | 0;
										la = HEAPU8[ma >> 0] | HEAP32[bc >> 2] << 8;
										HEAP32[bc >> 2] = la;
										$f = ka + 8 | 0;
										HEAP32[n >> 2] = $f;
										HEAP32[m >> 2] = ma + 1;
										Ie = Ie + -1 | 0;
										HEAP32[ja >> 2] = Ie;
										ma = m + 8 | 0;
										ac = (HEAP32[ma >> 2] | 0) + 1 | 0;
										HEAP32[ma >> 2] = ac;
										if (!ac) {
											ac = m + 12 | 0;
											HEAP32[ac >> 2] = (HEAP32[ac >> 2] | 0) + 1
										}
										if (($f | 0) > 4) {
											bg = $f;
											cg = la;
											break
										} else
											ka = $f
									}
								}
								ka = bg + -5 | 0;
								HEAP32[n >> 2] = ka;
								dg = id;
								eg = cg >>> ka & 31;
								fg = 0;
								gg = ld;
								hg = md;
								ig = nd;
								jg = od;
								Na = 269;
								break
							}
						case 271: {
								Na = 0;
								HEAP32[l >> 2] = 34;
								ka = f + 32 | 0;
								m = HEAP32[ka >> 2] | 0;
								Ie = f + 28 | 0;
								if ((m | 0) > 0) {
									kg = m;
									lg = HEAP32[Ie >> 2] | 0
								} else {
									ja = HEAP32[f >> 2] | 0;
									bc = ja + 4 | 0;
									na = HEAP32[bc >> 2] | 0;
									$f = m;
									while (1) {
										if (!na) {
											pa = J;
											qa = C;
											ra = pd;
											sa = qd;
											ta = D;
											ua = u;
											va = v;
											wa = w;
											xa = t;
											ya = x;
											za = I;
											Aa = H;
											Ba = rd;
											Ca = sd;
											Da = td;
											Ea = ud;
											Fa = E;
											Ga = F;
											Ha = G;
											Ia = 0;
											Ja = vd;
											Ka = y;
											La = A;
											Ma = z;
											break a
										}
										m = HEAP32[ja >> 2] | 0;
										la = HEAPU8[m >> 0] | HEAP32[Ie >> 2] << 8;
										HEAP32[Ie >> 2] = la;
										ac = $f + 8 | 0;
										HEAP32[ka >> 2] = ac;
										HEAP32[ja >> 2] = m + 1;
										na = na + -1 | 0;
										HEAP32[bc >> 2] = na;
										m = ja + 8 | 0;
										ma = (HEAP32[m >> 2] | 0) + 1 | 0;
										HEAP32[m >> 2] = ma;
										if (!ma) {
											ma = ja + 12 | 0;
											HEAP32[ma >> 2] = (HEAP32[ma >> 2] | 0) + 1
										}
										if ((ac | 0) > 0) {
											kg = ac;
											lg = la;
											break
										} else
											$f = ac
									}
								}
								$f = kg + -1 | 0;
								HEAP32[ka >> 2] = $f;
								if (lg & 1 << $f) {
									Zc = $f;
									_c = pd;
									$c = qd;
									ad = rd;
									bd = sd;
									cd = td;
									dd = ud;
									ed = vd;
									Na = 279;
									continue b
								}
								HEAP8[f + (vd * 258 | 0) + rd + 43872 >> 0] = qd;
								dg = pd;
								eg = qd;
								fg = rd + 1 | 0;
								gg = sd;
								hg = td;
								ig = ud;
								jg = vd;
								Na = 269;
								break
							}
						case 279: {
								Na = 0;
								HEAP32[l >> 2] = 35;
								$f = f + 32 | 0;
								ja = f + 28 | 0;
								if ((Zc | 0) > 0) {
									mg = Zc;
									ng = HEAP32[ja >> 2] | 0
								} else {
									na = HEAP32[f >> 2] | 0;
									bc = na + 4 | 0;
									Ie = HEAP32[bc >> 2] | 0;
									n = Zc;
									while (1) {
										if (!Ie) {
											pa = J;
											qa = C;
											ra = _c;
											sa = $c;
											ta = D;
											ua = u;
											va = v;
											wa = w;
											xa = t;
											ya = x;
											za = I;
											Aa = H;
											Ba = ad;
											Ca = bd;
											Da = cd;
											Ea = dd;
											Fa = E;
											Ga = F;
											Ha = G;
											Ia = 0;
											Ja = ed;
											Ka = y;
											La = A;
											Ma = z;
											break a
										}
										ac = HEAP32[na >> 2] | 0;
										la = HEAPU8[ac >> 0] | HEAP32[ja >> 2] << 8;
										HEAP32[ja >> 2] = la;
										ma = n + 8 | 0;
										c[$f >> 2] = ma;
										HEAP32[na >> 2] = ac + 1;
										Ie = Ie + -1 | 0;
										HEAP32[bc >> 2] = Ie;
										ac = na + 8 | 0;
										m = (HEAP32[ac >> 2] | 0) + 1 | 0;
										HEAP32[ac >> 2] = m;
										if (!m) {
											m = na + 12 | 0;
											HEAP32[m >> 2] = (HEAP32[m >> 2] | 0) + 1
										}
										if ((ma | 0) > 0) {
											mg = ma;
											ng = la;
											break
										} else
											n = ma
									}
								}
								n = mg + -1 | 0;
								c[$f >> 2] = n;
								if (!(ng & 1 << n)) {
									og = _c;
									pg = $c + 1 | 0;
									qg = ad;
									rg = bd;
									sg = cd;
									tg = dd;
									ug = ed;
									Na = 270;
									break
								} else {
									og = _c;
									pg = $c + -1 | 0;
									qg = ad;
									rg = bd;
									sg = cd;
									tg = dd;
									ug = ed;
									Na = 270;
									break
								}
								break
							}
						case 298: {
								Na = 0;
								HEAP32[l >> 2] = 36;
								n = f + 32 | 0;
								na = HEAP32[n >> 2] | 0;
								Ie = f + 28 | 0;
								if ((na | 0) < (Nd | 0)) {
									bc = HEAP32[f >> 2] | 0;
									ja = bc + 4 | 0;
									ka = HEAP32[ja >> 2] | 0;
									ma = na;
									while (1) {
										if (!ka) {
											pa = wd;
											qa = C;
											ra = xd;
											sa = yd;
											ta = D;
											ua = zd;
											va = Ad;
											wa = Bd;
											xa = Cd;
											ya = Dd;
											za = Ed;
											Aa = Fd;
											Ba = Gd;
											Ca = Hd;
											Da = Id;
											Ea = Jd;
											Fa = Kd;
											Ga = Ld;
											Ha = G;
											Ia = 0;
											Ja = Md;
											Ka = y;
											La = Nd;
											Ma = z;
											break a
										}
										la = HEAP32[bc >> 2] | 0;
										m = HEAPU8[la >> 0] | HEAP32[Ie >> 2] << 8;
										HEAP32[Ie >> 2] = m;
										ac = ma + 8 | 0;
										HEAP32[n >> 2] = ac;
										HEAP32[bc >> 2] = la + 1;
										ka = ka + -1 | 0;
										HEAP32[ja >> 2] = ka;
										la = bc + 8 | 0;
										ag = (HEAP32[la >> 2] | 0) + 1 | 0;
										HEAP32[la >> 2] = ag;
										if (!ag) {
											ag = bc + 12 | 0;
											HEAP32[ag >> 2] = (HEAP32[ag >> 2] | 0) + 1
										}
										if ((ac | 0) >= (Nd | 0)) {
											vg = ac;
											wg = m;
											break
										} else
											ma = ac
									}
								} else {
									vg = na;
									wg = HEAP32[Ie >> 2] | 0
								}
								ma = vg - Nd | 0;
								HEAP32[n >> 2] = ma;
								xg = ma;
								yg = wd;
								zg = xd;
								Ag = yd;
								Bg = zd;
								Cg = Ad;
								Dg = Bd;
								Eg = Cd;
								Fg = Dd;
								Gg = Ed;
								Hg = Fd;
								Ig = Gd;
								Jg = Hd;
								Kg = Id;
								Lg = Jd;
								Mg = Kd;
								Ng = Ld;
								Og = Md;
								Pg = y;
								Qg = Nd;
								Rg = wg >>> ma & (1 << Nd) + -1;
								Na = 306;
								break
							}
						case 309: {
								Na = 0;
								HEAP32[l >> 2] = 37;
								ma = f + 28 | 0;
								if ((Cb | 0) > 0) {
									Sg = Cb;
									Tg = HEAP32[ma >> 2] | 0
								} else {
									bc = HEAP32[f >> 2] | 0;
									ka = bc + 4 | 0;
									ja = HEAP32[ka >> 2] | 0;
									$f = Cb;
									while (1) {
										if (!ja) {
											pa = Db;
											qa = C;
											ra = Eb;
											sa = Fb;
											ta = D;
											ua = Gb;
											va = Hb;
											wa = Ib;
											xa = Jb;
											ya = Kb;
											za = Lb;
											Aa = Mb;
											Ba = Nb;
											Ca = Ob;
											Da = Pb;
											Ea = Rb;
											Fa = Sb;
											Ga = Tb;
											Ha = G;
											Ia = 0;
											Ja = Ub;
											Ka = Vb;
											La = Wb;
											Ma = Xb;
											break a
										}
										ac = HEAP32[bc >> 2] | 0;
										m = HEAPU8[ac >> 0] | HEAP32[ma >> 2] << 8;
										HEAP32[ma >> 2] = m;
										ag = $f + 8 | 0;
										HEAP32[Bb >> 2] = ag;
										HEAP32[bc >> 2] = ac + 1;
										ja = ja + -1 | 0;
										HEAP32[ka >> 2] = ja;
										ac = bc + 8 | 0;
										la = (HEAP32[ac >> 2] | 0) + 1 | 0;
										HEAP32[ac >> 2] = la;
										if (!la) {
											la = bc + 12 | 0;
											HEAP32[la >> 2] = (HEAP32[la >> 2] | 0) + 1
										}
										if ((ag | 0) > 0) {
											Sg = ag;
											Tg = m;
											break
										} else
											$f = ag
									}
								}
								$f = Sg + -1 | 0;
								bc = Tg >>> $f & 1;
								HEAP32[Bb >> 2] = $f;
								xg = $f;
								yg = Db;
								zg = Eb;
								Ag = Fb;
								Bg = Gb;
								Cg = Hb;
								Dg = Ib;
								Eg = Jb;
								Fg = Kb;
								Gg = Lb;
								Hg = Mb;
								Ig = Nb;
								Jg = Ob;
								Kg = Pb;
								Lg = Rb;
								Mg = Sb;
								Ng = Tb;
								Og = Ub;
								Pg = bc;
								Qg = Wb;
								Rg = bc | Xb << 1;
								Na = 306;
								break
							}
						case 329: {
								Na = 0;
								HEAP32[l >> 2] = 38;
								bc = f + 32 | 0;
								$f = HEAP32[bc >> 2] | 0;
								ja = f + 28 | 0;
								if (($f | 0) < (he | 0)) {
									ka = HEAP32[f >> 2] | 0;
									ma = ka + 4 | 0;
									n = HEAP32[ma >> 2] | 0;
									Ie = $f;
									while (1) {
										if (!n) {
											pa = Od;
											qa = Pd;
											ra = Qd;
											sa = Rd;
											ta = Sd;
											ua = Td;
											va = Ud;
											wa = Vd;
											xa = Wd;
											ya = Xd;
											za = Yd;
											Aa = Zd;
											Ba = _d;
											Ca = $d;
											Da = ae;
											Ea = be;
											Fa = ce;
											Ga = de;
											Ha = ee;
											Ia = 0;
											Ja = fe;
											Ka = ge;
											La = he;
											Ma = ie;
											break a
										}
										na = HEAP32[ka >> 2] | 0;
										ag = HEAPU8[na >> 0] | HEAP32[ja >> 2] << 8;
										HEAP32[ja >> 2] = ag;
										m = Ie + 8 | 0;
										HEAP32[bc >> 2] = m;
										HEAP32[ka >> 2] = na + 1;
										n = n + -1 | 0;
										HEAP32[ma >> 2] = n;
										na = ka + 8 | 0;
										la = (HEAP32[na >> 2] | 0) + 1 | 0;
										HEAP32[na >> 2] = la;
										if (!la) {
											la = ka + 12 | 0;
											HEAP32[la >> 2] = (HEAP32[la >> 2] | 0) + 1
										}
										if ((m | 0) >= (he | 0)) {
											Ug = m;
											Vg = ag;
											break
										} else
											Ie = m
									}
								} else {
									Ug = $f;
									Vg = HEAP32[ja >> 2] | 0
								}
								Ie = Ug - he | 0;
								HEAP32[bc >> 2] = Ie;
								Wg = Ie;
								Xg = Od;
								Yg = Pd;
								Zg = Qd;
								_g = Rd;
								$g = Sd;
								ah = Td;
								bh = Ud;
								ch = Vd;
								dh = Wd;
								eh = Xd;
								fh = Yd;
								gh = Zd;
								hh = _d;
								ih = $d;
								jh = ae;
								kh = be;
								lh = ce;
								mh = de;
								nh = ee;
								oh = fe;
								ph = ge;
								qh = he;
								rh = Vg >>> Ie & (1 << he) + -1;
								Na = 337;
								break
							}
						case 340: {
								Na = 0;
								HEAP32[l >> 2] = 39;
								Ie = f + 28 | 0;
								if ((yc | 0) > 0) {
									sh = yc;
									th = HEAP32[Ie >> 2] | 0
								} else {
									ka = HEAP32[f >> 2] | 0;
									n = ka + 4 | 0;
									ma = HEAP32[n >> 2] | 0;
									m = yc;
									while (1) {
										if (!ma) {
											pa = zc;
											qa = Ac;
											ra = Bc;
											sa = Cc;
											ta = Dc;
											ua = Ec;
											va = Fc;
											wa = Gc;
											xa = Hc;
											ya = Ic;
											za = Jc;
											Aa = Kc;
											Ba = Lc;
											Ca = Mc;
											Da = Nc;
											Ea = Oc;
											Fa = Pc;
											Ga = Qc;
											Ha = Rc;
											Ia = 0;
											Ja = Sc;
											Ka = Tc;
											La = Uc;
											Ma = Vc;
											break a
										}
										ag = HEAP32[ka >> 2] | 0;
										la = HEAPU8[ag >> 0] | HEAP32[Ie >> 2] << 8;
										HEAP32[Ie >> 2] = la;
										na = m + 8 | 0;
										HEAP32[xc >> 2] = na;
										HEAP32[ka >> 2] = ag + 1;
										ma = ma + -1 | 0;
										HEAP32[n >> 2] = ma;
										ag = ka + 8 | 0;
										ac = (HEAP32[ag >> 2] | 0) + 1 | 0;
										HEAP32[ag >> 2] = ac;
										if (!ac) {
											ac = ka + 12 | 0;
											HEAP32[ac >> 2] = (HEAP32[ac >> 2] | 0) + 1
										}
										if ((na | 0) > 0) {
											sh = na;
											th = la;
											break
										} else
											m = na
									}
								}
								m = sh + -1 | 0;
								ka = th >>> m & 1;
								HEAP32[xc >> 2] = m;
								Wg = m;
								Xg = zc;
								Yg = Ac;
								Zg = Bc;
								_g = Cc;
								$g = Dc;
								ah = Ec;
								bh = Fc;
								ch = Gc;
								dh = Hc;
								eh = Ic;
								fh = Jc;
								gh = Kc;
								hh = Lc;
								ih = Mc;
								jh = Nc;
								kh = Oc;
								lh = Pc;
								mh = Qc;
								nh = Rc;
								oh = Sc;
								ph = ka;
								qh = Uc;
								rh = ka | Vc << 1;
								Na = 337;
								break
							}
						case 384: {
								Na = 0;
								HEAP32[l >> 2] = 40;
								ka = f + 32 | 0;
								m = HEAP32[ka >> 2] | 0;
								ma = f + 28 | 0;
								if ((m | 0) < (Ee | 0)) {
									n = HEAP32[f >> 2] | 0;
									Ie = n + 4 | 0;
									bc = HEAP32[Ie >> 2] | 0;
									ja = m;
									while (1) {
										if (!bc) {
											pa = je;
											qa = ke;
											ra = le;
											sa = me;
											ta = ne;
											ua = oe;
											va = pe;
											wa = qe;
											xa = re;
											ya = se;
											za = te;
											Aa = ue;
											Ba = ve;
											Ca = we;
											Da = xe;
											Ea = ye;
											Fa = ze;
											Ga = Ae;
											Ha = Be;
											Ia = 0;
											Ja = Ce;
											Ka = De;
											La = Ee;
											Ma = Fe;
											break a
										}
										$f = HEAP32[n >> 2] | 0;
										na = HEAPU8[$f >> 0] | HEAP32[ma >> 2] << 8;
										HEAP32[ma >> 2] = na;
										la = ja + 8 | 0;
										HEAP32[ka >> 2] = la;
										HEAP32[n >> 2] = $f + 1;
										bc = bc + -1 | 0;
										HEAP32[Ie >> 2] = bc;
										$f = n + 8 | 0;
										ac = (c[$f >> 2] | 0) + 1 | 0;
										c[$f >> 2] = ac;
										if (!ac) {
											ac = n + 12 | 0;
											HEAP32[ac >> 2] = (HEAP32[ac >> 2] | 0) + 1
										}
										if ((la | 0) >= (Ee | 0)) {
											uh = la;
											vh = na;
											break
										} else
											ja = la
									}
								} else {
									uh = m;
									vh = HEAP32[ma >> 2] | 0
								}
								ja = uh - Ee | 0;
								HEAP32[ka >> 2] = ja;
								wh = ja;
								xh = je;
								yh = ke;
								zh = le;
								Ah = me;
								Bh = ne;
								Ch = oe;
								Dh = pe;
								Eh = qe;
								Fh = re;
								Gh = se;
								Hh = te;
								Ih = ue;
								Jh = ve;
								Kh = we;
								Lh = xe;
								Mh = ye;
								Nh = ze;
								Oh = Ae;
								Ph = Be;
								Qh = Ce;
								Rh = De;
								Sh = Ee;
								Th = vh >>> ja & (1 << Ee) + -1;
								Na = 392;
								break
							}
						case 395: {
								Na = 0;
								HEAP32[l >> 2] = 41;
								ja = f + 28 | 0;
								if (($a | 0) > 0) {
									Uh = $a;
									Vh = HEAP32[ja >> 2] | 0
								} else {
									n = HEAP32[f >> 2] | 0;
									bc = n + 4 | 0;
									Ie = HEAP32[bc >> 2] | 0;
									la = $a;
									while (1) {
										if (!Ie) {
											pa = ab;
											qa = bb;
											ra = cb;
											sa = db;
											ta = eb;
											ua = fb;
											va = gb;
											wa = hb;
											xa = ib;
											ya = jb;
											za = kb;
											Aa = lb;
											Ba = nb;
											Ca = ob;
											Da = pb;
											Ea = qb;
											Fa = rb;
											Ga = sb;
											Ha = tb;
											Ia = 0;
											Ja = ub;
											Ka = vb;
											La = wb;
											Ma = xb;
											break a
										}
										na = HEAP32[n >> 2] | 0;
										ac = HEAPU8[na >> 0] | HEAP32[ja >> 2] << 8;
										HEAP32[ja >> 2] = ac;
										$f = la + 8 | 0;
										HEAP32[_a >> 2] = $f;
										HEAP32[n >> 2] = na + 1;
										Ie = Ie + -1 | 0;
										HEAP32[bc >> 2] = Ie;
										na = n + 8 | 0;
										ag = (HEAP32[na >> 2] | 0) + 1 | 0;
										HEAP32[na >> 2] = ag;
										if (!ag) {
											ag = n + 12 | 0;
											HEAP32[ag >> 2] = (HEAP32[ag >> 2] | 0) + 1
										}
										if (($f | 0) > 0) {
											Uh = $f;
											Vh = ac;
											break
										} else
											la = $f
									}
								}
								la = Uh + -1 | 0;
								n = Vh >>> la & 1;
								HEAP32[_a >> 2] = la;
								wh = la;
								xh = ab;
								yh = bb;
								zh = cb;
								Ah = db;
								Bh = eb;
								Ch = fb;
								Dh = gb;
								Eh = hb;
								Fh = ib;
								Gh = jb;
								Hh = kb;
								Ih = lb;
								Jh = nb;
								Kh = ob;
								Lh = pb;
								Mh = qb;
								Nh = rb;
								Oh = sb;
								Ph = tb;
								Qh = ub;
								Rh = n;
								Sh = wb;
								Th = n | xb << 1;
								Na = 392;
								break
							}
						}
						do
							if ((Na | 0) == 239) {
								Na = 0;
								if ((Vf | 0) < (Yf | 0)) {
									rc = Uf;
									sc = Vf;
									tc = 0;
									uc = Xf;
									vc = Yf;
									Na = 241;
									continue b
								}
								if ((Xf | 0) > 0) {
									n = 0;
									la = 0;
									do {
										HEAP8[j + n >> 0] = la;
										la = la + 1 << 24 >> 24;
										n = la & 255
									} while ((n | 0) < (Xf | 0))
								}
								if ((Yf | 0) > 0) {
									n = 0;
									do {
										la = HEAP8[f + n + 25870 >> 0] | 0;
										Ie = la & 255;
										bc = HEAP8[j + Ie >> 0] | 0;
										if (la << 24 >> 24) {
											ja = Ie;
											Ie = la;
											while (1) {
												HEAP8[j + ja >> 0] = HEAP8[j + (ja + -1) >> 0] | 0;
												la = Ie + -1 << 24 >> 24;
												if (!(la << 24 >> 24))
													break;
												else {
													ja = la & 255;
													Ie = la
												}
											}
										}
										HEAP8[j >> 0] = bc;
										HEAP8[f + n + 7868 >> 0] = bc;
										n = n + 1 | 0
									} while ((n | 0) != (Yf | 0));
									Wh = Uf;
									Xh = B;
									Yh = Yf;
									Zh = Wf;
									_h = Xf;
									$h = Yf;
									ai = 0;
									Na = 258
								} else {
									Wh = Uf;
									Xh = B;
									Yh = 0;
									Zh = Wf;
									_h = Xf;
									$h = Yf;
									ai = 0;
									Na = 258
								}
							} else if ((Na | 0) == 269) {
								Na = 0;
								if ((fg | 0) < (dg | 0)) {
									og = dg;
									pg = eg;
									qg = fg;
									rg = gg;
									sg = hg;
									tg = ig;
									ug = jg;
									Na = 270
								} else {
									Wh = dg;
									Xh = eg;
									Yh = fg;
									Zh = gg;
									_h = hg;
									$h = ig;
									ai = jg + 1 | 0;
									Na = 258
								}
							} else if ((Na | 0) == 306) {
								Na = 0;
								if ((Qg | 0) > 20) {
									pa = yg;
									qa = C;
									ra = zg;
									sa = Ag;
									ta = D;
									ua = Bg;
									va = Cg;
									wa = Dg;
									xa = Eg;
									ya = Fg;
									za = Gg;
									Aa = Hg;
									Ba = Ig;
									Ca = Jg;
									Da = Kg;
									Ea = Lg;
									Fa = Mg;
									Ga = Ng;
									Ha = G;
									Ia = -4;
									Ja = Og;
									Ka = Pg;
									La = Qg;
									Ma = Rg;
									break a
								}
								if ((Rg | 0) > (HEAP32[Cg + (Qg << 2) >> 2] | 0)) {
									Bb = f + 32 | 0;
									Cb = xg;
									Db = yg;
									Eb = zg;
									Fb = Ag;
									Gb = Bg;
									Hb = Cg;
									Ib = Dg;
									Jb = Eg;
									Kb = Fg;
									Lb = Gg;
									Mb = Hg;
									Nb = Ig;
									Ob = Jg;
									Pb = Kg;
									Rb = Lg;
									Sb = Mg;
									Tb = Ng;
									Ub = Og;
									Vb = Pg;
									Wb = Qg + 1 | 0;
									Xb = Rg;
									Na = 309;
									continue b
								}
								n = Rg - (HEAP32[Bg + (Qg << 2) >> 2] | 0) | 0;
								if (n >>> 0 > 257) {
									pa = yg;
									qa = C;
									ra = zg;
									sa = Ag;
									ta = D;
									ua = Bg;
									va = Cg;
									wa = Dg;
									xa = Eg;
									ya = Fg;
									za = Gg;
									Aa = Hg;
									Ba = Ig;
									Ca = Jg;
									Da = Kg;
									Ea = Lg;
									Fa = Mg;
									Ga = Ng;
									Ha = G;
									Ia = -4;
									Ja = Og;
									Ka = Pg;
									La = Qg;
									Ma = Rg;
									break a
								}
								bi = yg;
								ci = C;
								di = zg;
								ei = Ag;
								fi = D;
								gi = Bg;
								hi = Cg;
								ii = Dg;
								ji = Eg;
								ki = Fg;
								li = Gg;
								mi = Hg;
								ni = Ig;
								oi = Jg;
								pi = Kg;
								qi = Lg;
								ri = Mg;
								si = Ng;
								ti = HEAP32[Eg + (n << 2) >> 2] | 0;
								ui = Og;
								vi = Pg;
								wi = Qg;
								xi = Rg;
								Na = 319
							} else if ((Na | 0) == 337) {
								Na = 0;
								if ((qh | 0) > 20) {
									pa = Xg;
									qa = Yg;
									ra = Zg;
									sa = _g;
									ta = $g;
									ua = ah;
									va = bh;
									wa = ch;
									xa = dh;
									ya = eh;
									za = fh;
									Aa = gh;
									Ba = hh;
									Ca = ih;
									Da = jh;
									Ea = kh;
									Fa = lh;
									Ga = mh;
									Ha = nh;
									Ia = -4;
									Ja = oh;
									Ka = ph;
									La = qh;
									Ma = rh;
									break a
								}
								if ((rh | 0) > (HEAP32[bh + (qh << 2) >> 2] | 0)) {
									xc = f + 32 | 0;
									yc = Wg;
									zc = Xg;
									Ac = Yg;
									Bc = Zg;
									Cc = _g;
									Dc = $g;
									Ec = ah;
									Fc = bh;
									Gc = ch;
									Hc = dh;
									Ic = eh;
									Jc = fh;
									Kc = gh;
									Lc = hh;
									Mc = ih;
									Nc = jh;
									Oc = kh;
									Pc = lh;
									Qc = mh;
									Rc = nh;
									Sc = oh;
									Tc = ph;
									Uc = qh + 1 | 0;
									Vc = rh;
									Na = 340;
									continue b
								}
								n = rh - (HEAP32[ah + (qh << 2) >> 2] | 0) | 0;
								if (n >>> 0 > 257) {
									pa = Xg;
									qa = Yg;
									ra = Zg;
									sa = _g;
									ta = $g;
									ua = ah;
									va = bh;
									wa = ch;
									xa = dh;
									ya = eh;
									za = fh;
									Aa = gh;
									Ba = hh;
									Ca = ih;
									Da = jh;
									Ea = kh;
									Fa = lh;
									Ga = mh;
									Ha = nh;
									Ia = -4;
									Ja = oh;
									Ka = ph;
									La = qh;
									Ma = rh;
									break a
								}
								Ie = HEAP32[dh + (n << 2) >> 2] | 0;
								if (Ie >>> 0 >= 2) {
									n = $g + 1 | 0;
									ja = HEAP8[f + (HEAPU8[f + (HEAP32[f + 7804 >> 2] | 0) + 3708 >> 0] | 0) + 3452 >> 0] | 0;
									la = ja & 255;
									ka = f + (la << 2) + 64 | 0;
									HEAP32[ka >> 2] = (HEAP32[ka >> 2] | 0) + n;
									ka = ($g | 0) > -1;
									if (!(HEAP8[f + 40 >> 0] | 0)) {
										if (!ka) {
											bi = Xg;
											ci = Yg;
											di = Zg;
											ei = _g;
											fi = n;
											gi = ah;
											hi = bh;
											ii = ch;
											ji = dh;
											ki = eh;
											li = fh;
											mi = gh;
											ni = hh;
											oi = ih;
											pi = jh;
											qi = kh;
											ri = lh;
											si = mh;
											ti = Ie;
											ui = oh;
											vi = ph;
											wi = qh;
											xi = rh;
											Na = 319;
											break
										}
										ma = f + 3148 | 0;
										m = n;
										$f = lh;
										while (1) {
											if (($f | 0) >= (mh | 0)) {
												pa = Xg;
												qa = Yg;
												ra = Zg;
												sa = _g;
												ta = m;
												ua = ah;
												va = bh;
												wa = ch;
												xa = dh;
												ya = eh;
												za = fh;
												Aa = gh;
												Ba = hh;
												Ca = ih;
												Da = jh;
												Ea = kh;
												Fa = $f;
												Ga = mh;
												Ha = Ie;
												Ia = -4;
												Ja = oh;
												Ka = ph;
												La = qh;
												Ma = rh;
												break a
											}
											c[(HEAP32[ma >> 2] | 0) + ($f << 2) >> 2] = la;
											ac = $f + 1 | 0;
											ag = m + -1 | 0;
											if ((ag | 0) > 0) {
												m = ag;
												$f = ac
											} else {
												bi = Xg;
												ci = Yg;
												di = Zg;
												ei = _g;
												fi = ag;
												gi = ah;
												hi = bh;
												ii = ch;
												ji = dh;
												ki = eh;
												li = fh;
												mi = gh;
												ni = hh;
												oi = ih;
												pi = jh;
												qi = kh;
												ri = ac;
												si = mh;
												ti = Ie;
												ui = oh;
												vi = ph;
												wi = qh;
												xi = rh;
												Na = 319;
												break
											}
										}
									} else {
										if (!ka) {
											bi = Xg;
											ci = Yg;
											di = Zg;
											ei = _g;
											fi = n;
											gi = ah;
											hi = bh;
											ii = ch;
											ji = dh;
											ki = eh;
											li = fh;
											mi = gh;
											ni = hh;
											oi = ih;
											pi = jh;
											qi = kh;
											ri = lh;
											si = mh;
											ti = Ie;
											ui = oh;
											vi = ph;
											wi = qh;
											xi = rh;
											Na = 319;
											break
										}
										$f = ja & 255;
										m = f + 3152 | 0;
										la = n;
										ma = lh;
										while (1) {
											if ((ma | 0) >= (mh | 0)) {
												pa = Xg;
												qa = Yg;
												ra = Zg;
												sa = _g;
												ta = la;
												ua = ah;
												va = bh;
												wa = ch;
												xa = dh;
												ya = eh;
												za = fh;
												Aa = gh;
												Ba = hh;
												Ca = ih;
												Da = jh;
												Ea = kh;
												Fa = ma;
												Ga = mh;
												Ha = Ie;
												Ia = -4;
												Ja = oh;
												Ka = ph;
												La = qh;
												Ma = rh;
												break a
											}
											b[(HEAP32[m >> 2] | 0) + (ma << 1) >> 1] = $f;
											ac = ma + 1 | 0;
											ag = la + -1 | 0;
											if ((ag | 0) > 0) {
												la = ag;
												ma = ac
											} else {
												bi = Xg;
												ci = Yg;
												di = Zg;
												ei = _g;
												fi = ag;
												gi = ah;
												hi = bh;
												ii = ch;
												ji = dh;
												ki = eh;
												li = fh;
												mi = gh;
												ni = hh;
												oi = ih;
												pi = jh;
												qi = kh;
												ri = ac;
												si = mh;
												ti = Ie;
												ui = oh;
												vi = ph;
												wi = qh;
												xi = rh;
												Na = 319;
												break
											}
										}
									}
								} else {
									yi = Xg;
									zi = Yg;
									Ai = Zg;
									Bi = _g;
									Ci = $g;
									Di = ah;
									Ei = bh;
									Fi = ch;
									Gi = dh;
									Hi = eh;
									Ii = fh;
									Ji = gh;
									Ki = hh;
									Li = ih;
									Mi = jh;
									Ni = kh;
									Oi = lh;
									Pi = mh;
									Qi = Ie;
									Ri = oh;
									Si = ph;
									Ti = qh;
									Ui = rh;
									Na = 321
								}
							} else if ((Na | 0) == 392) {
								Na = 0;
								if ((Sh | 0) > 20) {
									pa = xh;
									qa = yh;
									ra = zh;
									sa = Ah;
									ta = Bh;
									ua = Ch;
									va = Dh;
									wa = Eh;
									xa = Fh;
									ya = Gh;
									za = Hh;
									Aa = Ih;
									Ba = Jh;
									Ca = Kh;
									Da = Lh;
									Ea = Mh;
									Fa = Nh;
									Ga = Oh;
									Ha = Ph;
									Ia = -4;
									Ja = Qh;
									Ka = Rh;
									La = Sh;
									Ma = Th;
									break a
								}
								if ((Th | 0) > (HEAP32[Dh + (Sh << 2) >> 2] | 0)) {
									_a = f + 32 | 0;
									$a = wh;
									ab = xh;
									bb = yh;
									cb = zh;
									db = Ah;
									eb = Bh;
									fb = Ch;
									gb = Dh;
									hb = Eh;
									ib = Fh;
									jb = Gh;
									kb = Hh;
									lb = Ih;
									nb = Jh;
									ob = Kh;
									pb = Lh;
									qb = Mh;
									rb = Nh;
									sb = Oh;
									tb = Ph;
									ub = Qh;
									vb = Rh;
									wb = Sh + 1 | 0;
									xb = Th;
									Na = 395;
									continue b
								}
								ma = Th - (HEAP32[Ch + (Sh << 2) >> 2] | 0) | 0;
								if (ma >>> 0 > 257) {
									pa = xh;
									qa = yh;
									ra = zh;
									sa = Ah;
									ta = Bh;
									ua = Ch;
									va = Dh;
									wa = Eh;
									xa = Fh;
									ya = Gh;
									za = Hh;
									Aa = Ih;
									Ba = Jh;
									Ca = Kh;
									Da = Lh;
									Ea = Mh;
									Fa = Nh;
									Ga = Oh;
									Ha = Ph;
									Ia = -4;
									Ja = Qh;
									Ka = Rh;
									La = Sh;
									Ma = Th;
									break a
								}
								bi = xh;
								ci = yh;
								di = zh;
								ei = Ah;
								fi = Bh;
								gi = Ch;
								hi = Dh;
								ii = Eh;
								ji = Fh;
								ki = Gh;
								li = Hh;
								mi = Ih;
								ni = Jh;
								oi = Kh;
								pi = Lh;
								qi = Mh;
								ri = Nh;
								si = Oh;
								ti = HEAP32[Fh + (ma << 2) >> 2] | 0;
								ui = Qh;
								vi = Rh;
								wi = Sh;
								xi = Th;
								Na = 319
							}
						while (0);
						if ((Na | 0) == 258) {
							Na = 0;
							if ((ai | 0) < (_h | 0)) {
								id = Wh;
								jd = Xh;
								kd = Yh;
								ld = Zh;
								md = _h;
								nd = $h;
								od = ai;
								Na = 261;
								continue
							}
							if ((_h | 0) > 0) {
								ma = (Wh | 0) > 0;
								la = 0;
								do {
									if (ma) {
										$f = 0;
										m = 0;
										n = 32;
										while (1) {
											ja = HEAPU8[f + (la * 258 | 0) + $f + 43872 >> 0] | 0;
											ka = (ja | 0) > (m | 0) ? ja : m;
											ac = (ja | 0) < (n | 0) ? ja : n;
											$f = $f + 1 | 0;
											if (($f | 0) == (Wh | 0)) {
												Vi = ka;
												Wi = ac;
												break
											} else {
												m = ka;
												n = ac
											}
										}
									} else {
										Vi = 0;
										Wi = 32
									}
									ok(f + (la * 1032 | 0) + 45420 | 0, f + (la * 1032 | 0) + 51612 | 0, f + (la * 1032 | 0) + 57804 | 0, f + (la * 258 | 0) + 43872 | 0, Wi, Vi, Wh);
									HEAP32[f + (la << 2) + 63996 >> 2] = Wi;
									la = la + 1 | 0
								} while ((la | 0) != (_h | 0));
								Xi = _h
							} else
								Xi = 0;
							la = HEAP32[f + 3176 >> 2] | 0;
							ma = HEAP32[f + 36 >> 2] | 0;
							sy(f + 64 | 0, 0, 1024) | 0;
							n = la + 1 | 0;
							la = ma * 1e5 | 0;
							ma = 15;
							m = 4080;
							$f = 4095;
							while (1) {
								Ie = ma << 4;
								HEAP8[f + $f + 3708 >> 0] = Ie | 15;
								HEAP8[f + ($f + -1) + 3708 >> 0] = Ie | 14;
								HEAP8[f + ($f + -2) + 3708 >> 0] = Ie | 13;
								HEAP8[f + ($f + -3) + 3708 >> 0] = Ie | 12;
								HEAP8[f + ($f + -4) + 3708 >> 0] = Ie | 11;
								HEAP8[f + ($f + -5) + 3708 >> 0] = Ie | 10;
								HEAP8[f + ($f + -6) + 3708 >> 0] = Ie | 9;
								HEAP8[f + ($f + -7) + 3708 >> 0] = Ie | 8;
								HEAP8[f + ($f + -8) + 3708 >> 0] = Ie | 7;
								HEAP8[f + ($f + -9) + 3708 >> 0] = Ie | 6;
								HEAP8[f + ($f + -10) + 3708 >> 0] = Ie | 5;
								HEAP8[f + ($f + -11) + 3708 >> 0] = Ie | 4;
								HEAP8[f + ($f + -12) + 3708 >> 0] = Ie | 3;
								HEAP8[f + ($f + -13) + 3708 >> 0] = Ie | 2;
								HEAP8[f + ($f + -14) + 3708 >> 0] = Ie | 1;
								HEAP8[f + ($f + -15) + 3708 >> 0] = Ie;
								HEAP32[f + (ma << 2) + 7804 >> 2] = m;
								if ((ma | 0) > 0) {
									ma = ma + -1 | 0;
									m = m + -16 | 0;
									$f = $f + -16 | 0
								} else
									break
							}
							if (($h | 0) < 1) {
								pa = n;
								qa = C;
								ra = Wh;
								sa = Xh;
								ta = D;
								ua = u;
								va = v;
								wa = w;
								xa = t;
								ya = x;
								za = 0;
								Aa = 0;
								Ba = 256;
								Ca = Zh;
								Da = _h;
								Ea = $h;
								Fa = 0;
								Ga = la;
								Ha = G;
								Ia = -4;
								Ja = Xi;
								Ka = y;
								La = A;
								Ma = z;
								break a
							}
							$f = HEAPU8[f + 7868 >> 0] | 0;
							m = HEAP32[f + ($f << 2) + 63996 >> 2] | 0;
							wd = n;
							xd = Wh;
							yd = Xh;
							zd = f + ($f * 1032 | 0) + 51612 | 0;
							Ad = f + ($f * 1032 | 0) + 45420 | 0;
							Bd = m;
							Cd = f + ($f * 1032 | 0) + 57804 | 0;
							Dd = $f;
							Ed = 0;
							Fd = 49;
							Gd = 256;
							Hd = Zh;
							Id = _h;
							Jd = $h;
							Kd = 0;
							Ld = la;
							Md = Xi;
							Nd = m;
							Na = 298;
							continue
						} else if ((Na | 0) == 270) {
							Na = 0;
							if ((pg + -1 | 0) >>> 0 > 19) {
								pa = J;
								qa = C;
								ra = og;
								sa = pg;
								ta = D;
								ua = u;
								va = v;
								wa = w;
								xa = t;
								ya = x;
								za = I;
								Aa = H;
								Ba = qg;
								Ca = rg;
								Da = sg;
								Ea = tg;
								Fa = E;
								Ga = F;
								Ha = G;
								Ia = -4;
								Ja = ug;
								Ka = y;
								La = A;
								Ma = z;
								break a
							} else {
								pd = og;
								qd = pg;
								rd = qg;
								sd = rg;
								td = sg;
								ud = tg;
								vd = ug;
								Na = 271;
								continue
							}
						} else if ((Na | 0) == 319) {
							Na = 0;
							if ((ti | 0) == (bi | 0))
								break;
							if (ti >>> 0 < 2) {
								yi = bi;
								zi = 1;
								Ai = di;
								Bi = ei;
								Ci = -1;
								Di = gi;
								Ei = hi;
								Fi = ii;
								Gi = ji;
								Hi = ki;
								Ii = li;
								Ji = mi;
								Ki = ni;
								Li = oi;
								Mi = pi;
								Ni = qi;
								Oi = ri;
								Pi = si;
								Qi = ti;
								Ri = ui;
								Si = vi;
								Ti = wi;
								Ui = xi;
								Na = 321
							} else {
								if ((ri | 0) >= (si | 0)) {
									pa = bi;
									qa = ci;
									ra = di;
									sa = ei;
									ta = fi;
									ua = gi;
									va = hi;
									wa = ii;
									xa = ji;
									ya = ki;
									za = li;
									Aa = mi;
									Ba = ni;
									Ca = oi;
									Da = pi;
									Ea = qi;
									Fa = ri;
									Ga = si;
									Ha = ti;
									Ia = -4;
									Ja = ui;
									Ka = vi;
									La = wi;
									Ma = xi;
									break a
								}
								m = ti + -1 | 0;
								if (m >>> 0 >= 16) {
									$f = m >>> 4;
									ma = m & 15;
									Ie = f + ($f << 2) + 7804 | 0;
									ac = HEAP32[Ie >> 2] | 0;
									ka = ac + ma | 0;
									ja = HEAP8[f + ka + 3708 >> 0] | 0;
									if (!ma)
										Yi = ac;
									else {
										ac = ka;
										do {
											ka = ac;
											ac = ac + -1 | 0;
											HEAP8[f + ka + 3708 >> 0] = HEAP8[f + ac + 3708 >> 0] | 0;
											ka = HEAP32[Ie >> 2] | 0
										} while ((ac | 0) > (ka | 0));
										Yi = ka
									}
									ac = Yi + 1 | 0;
									HEAP32[Ie >> 2] = ac;
									c: do
										if ($f) {
											la = ac;
											n = $f;
											while (1) {
												ka = la + -1 | 0;
												HEAP32[f + (n << 2) + 7804 >> 2] = ka;
												ma = n + -1 | 0;
												ag = f + (ma << 2) + 7804 | 0;
												HEAP8[f + ka + 3708 >> 0] = HEAP8[f + ((HEAP32[ag >> 2] | 0) + 15) + 3708 >> 0] | 0;
												if ((ma | 0) <= 0)
													break c;
												la = HEAP32[ag >> 2] | 0;
												n = ma
											}
										}
									while (0);
									$f = f + 7804 | 0;
									ac = (c[$f >> 2] | 0) + -1 | 0;
									c[$f >> 2] = ac;
									HEAP8[f + ac + 3708 >> 0] = ja;
									if (!(c[$f >> 2] | 0)) {
										$f = 15;
										ac = 4080;
										Ie = 4095;
										while (1) {
											n = f + ($f << 2) + 7804 | 0;
											la = 15;
											ma = Ie;
											while (1) {
												HEAP8[f + ma + 3708 >> 0] = HEAP8[f + ((HEAP32[n >> 2] | 0) + la) + 3708 >> 0] | 0;
												if ((la | 0) > 0) {
													la = la + -1 | 0;
													ma = ma + -1 | 0
												} else
													break
											}
											HEAP32[n >> 2] = ac;
											if (($f | 0) > 0) {
												$f = $f + -1 | 0;
												ac = ac + -16 | 0;
												Ie = Ie + -16 | 0
											} else {
												Zi = ja;
												break
											}
										}
									} else
										Zi = ja
								} else {
									Ie = HEAP32[f + 7804 >> 2] | 0;
									ac = HEAP8[f + (Ie + m) + 3708 >> 0] | 0;
									if (m >>> 0 > 3) {
										$f = ti + 3 | 0;
										ma = m;
										do {
											la = ma + Ie | 0;
											ag = f + (la + -1) + 3708 | 0;
											HEAP8[f + la + 3708 >> 0] = HEAP8[ag >> 0] | 0;
											ka = f + (la + -2) + 3708 | 0;
											HEAP8[ag >> 0] = HEAP8[ka >> 0] | 0;
											ag = f + (la + -3) + 3708 | 0;
											HEAP8[ka >> 0] = HEAP8[ag >> 0] | 0;
											HEAP8[ag >> 0] = HEAP8[f + (la + -4) + 3708 >> 0] | 0;
											ma = ma + -4 | 0
										} while (ma >>> 0 > 3);
										_i = $f & 3
									} else
										_i = m;
									if (_i) {
										ma = _i;
										do {
											ja = ma + Ie | 0;
											HEAP8[f + ja + 3708 >> 0] = HEAP8[f + (ja + -1) + 3708 >> 0] | 0;
											ma = ma + -1 | 0
										} while ((ma | 0) != 0)
									}
									HEAP8[f + Ie + 3708 >> 0] = ac;
									Zi = ac
								}
								ma = f + (Zi & 255) + 3452 | 0;
								m = f + (HEAPU8[ma >> 0] << 2) + 64 | 0;
								HEAP32[m >> 2] = (HEAP32[m >> 2] | 0) + 1;
								m = HEAP8[ma >> 0] | 0;
								if (!(HEAP8[f + 40 >> 0] | 0))
									c[(HEAP32[f + 3148 >> 2] | 0) + (ri << 2) >> 2] = m & 255;
								else
									b[(HEAP32[f + 3152 >> 2] | 0) + (ri << 1) >> 1] = m & 255;
								m = ri + 1 | 0;
								if (!mi) {
									ma = li + 1 | 0;
									if ((ma | 0) >= (qi | 0)) {
										pa = bi;
										qa = ci;
										ra = di;
										sa = ei;
										ta = fi;
										ua = gi;
										va = hi;
										wa = ii;
										xa = ji;
										ya = ki;
										za = ma;
										Aa = 0;
										Ba = ni;
										Ca = oi;
										Da = pi;
										Ea = qi;
										Fa = m;
										Ga = si;
										Ha = ti;
										Ia = -4;
										Ja = ui;
										Ka = vi;
										La = wi;
										Ma = xi;
										break a
									}
									$f = HEAPU8[f + ma + 7868 >> 0] | 0;
									$i = f + ($f * 1032 | 0) + 51612 | 0;
									aj = f + ($f * 1032 | 0) + 45420 | 0;
									bj = HEAP32[f + ($f << 2) + 63996 >> 2] | 0;
									cj = f + ($f * 1032 | 0) + 57804 | 0;
									dj = $f;
									ej = ma;
									fj = 50
								} else {
									$i = gi;
									aj = hi;
									bj = ii;
									cj = ji;
									dj = ki;
									ej = li;
									fj = mi
								}
								je = bi;
								ke = ci;
								le = di;
								me = ei;
								ne = fi;
								oe = $i;
								pe = aj;
								qe = bj;
								re = cj;
								se = dj;
								te = ej;
								ue = fj + -1 | 0;
								ve = ni;
								we = oi;
								xe = pi;
								ye = qi;
								ze = m;
								Ae = si;
								Be = ti;
								Ce = ui;
								De = vi;
								Ee = bj;
								Fe = xi;
								Na = 384;
								continue
							}
						}
						if ((Na | 0) == 321) {
							Na = 0;
							if ((zi | 0) > 2097151) {
								pa = yi;
								qa = zi;
								ra = Ai;
								sa = Bi;
								ta = Ci;
								ua = Di;
								va = Ei;
								wa = Fi;
								xa = Gi;
								ya = Hi;
								za = Ii;
								Aa = Ji;
								Ba = Ki;
								Ca = Li;
								Da = Mi;
								Ea = Ni;
								Fa = Oi;
								Ga = Pi;
								Ha = Qi;
								Ia = -4;
								Ja = Ri;
								Ka = Si;
								La = Ti;
								Ma = Ui;
								break a
							}
							if (!Qi)
								gj = Ci + zi | 0;
							else if ((Qi | 0) == 1)
								gj = Ci + (zi << 1) | 0;
							else
								gj = Ci;
							m = zi << 1;
							if (!Ji) {
								ma = Ii + 1 | 0;
								if ((ma | 0) >= (Ni | 0)) {
									pa = yi;
									qa = m;
									ra = Ai;
									sa = Bi;
									ta = gj;
									ua = Di;
									va = Ei;
									wa = Fi;
									xa = Gi;
									ya = Hi;
									za = ma;
									Aa = 0;
									Ba = Ki;
									Ca = Li;
									Da = Mi;
									Ea = Ni;
									Fa = Oi;
									Ga = Pi;
									Ha = Qi;
									Ia = -4;
									Ja = Ri;
									Ka = Si;
									La = Ti;
									Ma = Ui;
									break a
								}
								$f = HEAPU8[f + ma + 7868 >> 0] | 0;
								hj = f + ($f * 1032 | 0) + 51612 | 0;
								ij = f + ($f * 1032 | 0) + 45420 | 0;
								jj = HEAP32[f + ($f << 2) + 63996 >> 2] | 0;
								kj = f + ($f * 1032 | 0) + 57804 | 0;
								lj = $f;
								mj = ma;
								nj = 50
							} else {
								hj = Di;
								ij = Ei;
								jj = Fi;
								kj = Gi;
								lj = Hi;
								mj = Ii;
								nj = Ji
							}
							Od = yi;
							Pd = m;
							Qd = Ai;
							Rd = Bi;
							Sd = gj;
							Td = hj;
							Ud = ij;
							Vd = jj;
							Wd = kj;
							Xd = lj;
							Yd = mj;
							Zd = nj + -1 | 0;
							_d = Ki;
							$d = Li;
							ae = Mi;
							be = Ni;
							ce = Oi;
							de = Pi;
							ee = Qi;
							fe = Ri;
							ge = Si;
							he = jj;
							ie = Ui;
							Na = 329;
							continue
						}
						while (1) {
							if ((Na | 0) == 203) {
								Na = 0;
								if ((If | 0) >= 16)
									break;
								if (!(HEAP8[f + If + 3436 >> 0] | 0)) {
									oj = If;
									pj = Jf
								} else {
									Of = If;
									Pf = 0;
									Na = 205;
									continue
								}
							} else if ((Na | 0) == 205) {
								Na = 0;
								if ((Pf | 0) < 16) {
									ec = Of;
									fc = Pf;
									Na = 206;
									continue b
								} else {
									oj = Of;
									pj = Pf
								}
							}
							If = oj + 1 | 0;
							Jf = pj;
							Na = 203
						}
						ac = f + 3176 | 0;
						HEAP32[ac >> 2] = 0;
						Ie = 0;
						m = 0;
						while (1) {
							if (!(HEAP8[f + m + 3180 >> 0] | 0))
								qj = Ie;
							else {
								HEAP8[f + Ie + 3452 >> 0] = m;
								ma = (HEAP32[ac >> 2] | 0) + 1 | 0;
								HEAP32[ac >> 2] = ma;
								qj = ma
							}
							m = m + 1 | 0;
							if ((m | 0) == 256)
								break;
							else
								Ie = qj
						}
						if (!qj) {
							pa = J;
							qa = C;
							ra = M;
							sa = B;
							ta = D;
							ua = u;
							va = v;
							wa = w;
							xa = t;
							ya = x;
							za = I;
							Aa = H;
							Ba = If;
							Ca = Jf;
							Da = L;
							Ea = K;
							Fa = E;
							Ga = F;
							Ha = G;
							Ia = -4;
							Ja = N;
							Ka = y;
							La = A;
							Ma = z;
							break a
						}
						oc = qj + 2 | 0;
						pc = If;
						qc = Jf;
						Na = 223
					}
					oa = f + 52 | 0;
					Ie = HEAP32[oa >> 2] | 0;
					if ((Ie | 0) > -1 & (Ie | 0) < (ri | 0)) {
						Ie = 0;
						do {
							m = HEAP32[f + (Ie << 2) + 64 >> 2] | 0;
							if ((m | 0) < 0 | (m | 0) > (ri | 0)) {
								pa = ti;
								qa = ci;
								ra = di;
								sa = ei;
								ta = fi;
								ua = gi;
								va = hi;
								wa = ii;
								xa = ji;
								ya = ki;
								za = li;
								Aa = mi;
								Ba = Ie;
								Ca = oi;
								Da = pi;
								Ea = qi;
								Fa = ri;
								Ga = si;
								Ha = ti;
								Ia = -4;
								Ja = ui;
								Ka = vi;
								La = wi;
								Ma = xi;
								break a
							}
							Ie = Ie + 1 | 0
						} while ((Ie | 0) < 256);
						Ie = f + 1092 | 0;
						HEAP32[Ie >> 2] = 0;
						m = 1;
						do {
							HEAP32[f + (m << 2) + 1092 >> 2] = HEAP32[f + (m + -1 << 2) + 64 >> 2];
							m = m + 1 | 0
						} while ((m | 0) != 257);
						m = HEAP32[Ie >> 2] | 0;
						ac = 1;
						do {
							ma = f + (ac << 2) + 1092 | 0;
							m = (HEAP32[ma >> 2] | 0) + m | 0;
							HEAP32[ma >> 2] = m;
							ac = ac + 1 | 0
						} while ((ac | 0) != 257);
						rj = 0;
						do {
							ac = HEAP32[f + (rj << 2) + 1092 >> 2] | 0;
							if ((ac | 0) < 0 | (ac | 0) > (ri | 0)) {
								pa = ti;
								qa = ci;
								ra = di;
								sa = ei;
								ta = fi;
								ua = gi;
								va = hi;
								wa = ii;
								xa = ji;
								ya = ki;
								za = li;
								Aa = mi;
								Ba = rj;
								Ca = oi;
								Da = pi;
								Ea = qi;
								Fa = ri;
								Ga = si;
								Ha = ti;
								Ia = -4;
								Ja = ui;
								Ka = vi;
								La = wi;
								Ma = xi;
								break a
							}
							rj = rj + 1 | 0
						} while ((rj | 0) < 257);
						ac = HEAP32[Ie >> 2] | 0;
						m = 1;
						do {
							ma = ac;
							ac = HEAP32[f + (m << 2) + 1092 >> 2] | 0;
							$f = m;
							m = m + 1 | 0;
							if ((ma | 0) > (ac | 0)) {
								pa = ti;
								qa = ci;
								ra = di;
								sa = ei;
								ta = fi;
								ua = gi;
								va = hi;
								wa = ii;
								xa = ji;
								ya = ki;
								za = li;
								Aa = mi;
								Ba = $f;
								Ca = oi;
								Da = pi;
								Ea = qi;
								Fa = ri;
								Ga = si;
								Ha = ti;
								Ia = -4;
								Ja = ui;
								Ka = vi;
								La = wi;
								Ma = xi;
								break a
							}
						} while ((m | 0) < 257);
						HEAP32[f + 12 >> 2] = 0;
						HEAP8[f + 8 >> 0] = 0;
						HEAP32[f + 3168 >> 2] = -1;
						HEAP32[l >> 2] = 2;
						if ((HEAP32[f + 48 >> 2] | 0) > 1)
							mb(28064, 6, 1, HEAP32[p >> 2] | 0) | 0;
						if (!(HEAP8[f + 40 >> 0] | 0)) {
							m = f + 3148 | 0;
							if ((ri | 0) > 0) {
								ac = 0;
								do {
									Ie = HEAP32[m >> 2] | 0;
									$f = f + ((HEAP32[Ie + (ac << 2) >> 2] & 255) << 2) + 1092 | 0;
									ma = Ie + (c[$f >> 2] << 2) | 0;
									HEAP32[ma >> 2] = HEAP32[ma >> 2] | ac << 8;
									c[$f >> 2] = (c[$f >> 2] | 0) + 1;
									ac = ac + 1 | 0
								} while ((ac | 0) != (ri | 0));
								sj = ri
							} else
								sj = 0;
							ac = HEAP32[m >> 2] | 0;
							$f = (HEAP32[ac + (HEAP32[oa >> 2] << 2) >> 2] | 0) >>> 8;
							ma = f + 56 | 0;
							HEAP32[ma >> 2] = $f;
							Ie = f + 1088 | 0;
							HEAP32[Ie >> 2] = 0;
							if (!(HEAP8[f + 16 >> 0] | 0))
								if ($f >>> 0 < ((HEAP32[f + 36 >> 2] | 0) * 1e5 | 0) >>> 0) {
									ja = HEAP32[ac + ($f << 2) >> 2] | 0;
									HEAP32[f + 60 >> 2] = ja & 255;
									HEAP32[ma >> 2] = ja >>> 8;
									HEAP32[Ie >> 2] = 1;
									pa = ti;
									qa = ci;
									ra = di;
									sa = ei;
									ta = fi;
									ua = gi;
									va = hi;
									wa = ii;
									xa = ji;
									ya = ki;
									za = li;
									Aa = mi;
									Ba = sj;
									Ca = oi;
									Da = pi;
									Ea = qi;
									Fa = ri;
									Ga = si;
									Ha = ti;
									Ia = 0;
									Ja = ui;
									Ka = vi;
									La = wi;
									Ma = xi;
									break
								} else {
									tj = 1;
									i = g;
									return tj | 0
								}
							else {
								ja = f + 20 | 0;
								HEAP32[ja >> 2] = 0;
								la = f + 24 | 0;
								HEAP32[la >> 2] = 0;
								if ($f >>> 0 < ((HEAP32[f + 36 >> 2] | 0) * 1e5 | 0) >>> 0) {
									ag = HEAP32[ac + ($f << 2) >> 2] | 0;
									$f = ag & 255;
									ac = f + 60 | 0;
									HEAP32[ac >> 2] = $f;
									HEAP32[ma >> 2] = ag >>> 8;
									HEAP32[Ie >> 2] = 1;
									Ie = HEAP32[7018] | 0;
									HEAP32[la >> 2] = 1;
									la = Ie + -1 | 0;
									HEAP32[ja >> 2] = la;
									HEAP32[ac >> 2] = (la | 0) == 1 ^ $f;
									pa = ti;
									qa = ci;
									ra = di;
									sa = ei;
									ta = fi;
									ua = gi;
									va = hi;
									wa = ii;
									xa = ji;
									ya = ki;
									za = li;
									Aa = mi;
									Ba = sj;
									Ca = oi;
									Da = pi;
									Ea = qi;
									Fa = ri;
									Ga = si;
									Ha = ti;
									Ia = 0;
									Ja = ui;
									Ka = vi;
									La = wi;
									Ma = xi;
									break
								} else {
									tj = 1;
									i = g;
									return tj | 0
								}
							}
						} else
							uj = 0;
						do {
							HEAP32[f + (uj << 2) + 2120 >> 2] = HEAP32[f + (uj << 2) + 1092 >> 2];
							uj = uj + 1 | 0
						} while ((uj | 0) != 257);
						m = f + 3152 | 0;
						$f = f + 3156 | 0;
						if ((ri | 0) > 0) {
							la = 0;
							do {
								ac = (HEAP32[m >> 2] | 0) + (la << 1) | 0;
								ja = f + ((HEAPU16[ac >> 1] & 255) << 2) + 2120 | 0;
								Ie = HEAP32[ja >> 2] | 0;
								HEAP16[ac >> 1] = Ie;
								ac = (c[$f >> 2] | 0) + (la >> 1) | 0;
								ag = HEAPU8[ac >> 0] | 0;
								if (!(la & 1))
									vj = Ie >> 16 | ag & 240;
								else
									vj = Ie >> 16 << 4 | ag & 15;
								HEAP8[ac >> 0] = vj;
								HEAP32[ja >> 2] = (HEAP32[ja >> 2] | 0) + 1;
								la = la + 1 | 0
							} while ((la | 0) != (ri | 0))
						}
						la = HEAP32[oa >> 2] | 0;
						ja = HEAP32[m >> 2] | 0;
						ac = HEAP32[$f >> 2] | 0;
						ag = ja;
						Ie = (HEAPU8[ac + (la >> 1) >> 0] | 0) >>> (la << 2 & 4) << 16 & 983040 | HEAPU16[ja + (la << 1) >> 1];
						ja = ac;
						ac = la;
						while (1) {
							la = ag + (Ie << 1) | 0;
							ma = ja + (Ie >> 1) | 0;
							wj = Ie << 2 & 4;
							xj = (HEAPU8[ma >> 0] | 0) >>> wj << 16 & 983040 | HEAPU16[la >> 1];
							HEAP16[la >> 1] = ac;
							la = HEAPU8[ma >> 0] | 0;
							if (!(Ie & 1))
								yj = la & 240 | ac >> 16;
							else
								yj = la & 15 | ac >> 16 << 4;
							HEAP8[ma >> 0] = yj;
							if ((Ie | 0) == (HEAP32[oa >> 2] | 0))
								break;
							ma = Ie;
							ag = HEAP32[m >> 2] | 0;
							Ie = xj;
							ja = HEAP32[$f >> 2] | 0;
							ac = ma
						}
						ac = f + 56 | 0;
						HEAP32[ac >> 2] = Ie;
						ja = f + 1088 | 0;
						HEAP32[ja >> 2] = 0;
						if (!(HEAP8[f + 16 >> 0] | 0)) {
							if (Ie >>> 0 < ((HEAP32[f + 36 >> 2] | 0) * 1e5 | 0) >>> 0) {
								zj = 256;
								Aj = 0
							} else {
								tj = 1;
								i = g;
								return tj | 0
							}
							do {
								ag = Aj + zj >> 1;
								oa = (HEAP32[f + (ag << 2) + 1092 >> 2] | 0) > (Ie | 0);
								zj = oa ? ag : zj;
								Aj = oa ? Aj : ag
							} while ((zj - Aj | 0) != 1);
							HEAP32[f + 60 >> 2] = Aj;
							HEAP32[ac >> 2] = (d[(c[$f >> 2] | 0) + (Ie >>> 1) >> 0] | 0) >>> wj << 16 & 983040 | HEAPU16[(HEAP32[m >> 2] | 0) + (Ie << 1) >> 1];
							HEAP32[ja >> 2] = 1;
							pa = ti;
							qa = ci;
							ra = di;
							sa = ei;
							ta = fi;
							ua = gi;
							va = hi;
							wa = ii;
							xa = ji;
							ya = ki;
							za = li;
							Aa = mi;
							Ba = Ie;
							Ca = xj;
							Da = pi;
							Ea = qi;
							Fa = ri;
							Ga = si;
							Ha = ti;
							Ia = 0;
							Ja = ui;
							Ka = vi;
							La = wi;
							Ma = xi;
							break
						} else {
							ag = f + 20 | 0;
							HEAP32[ag >> 2] = 0;
							oa = f + 24 | 0;
							HEAP32[oa >> 2] = 0;
							if (Ie >>> 0 < ((HEAP32[f + 36 >> 2] | 0) * 1e5 | 0) >>> 0) {
								Bj = 256;
								Cj = 0
							} else {
								tj = 1;
								i = g;
								return tj | 0
							}
							do {
								ma = Cj + Bj >> 1;
								la = (HEAP32[f + (ma << 2) + 1092 >> 2] | 0) > (Ie | 0);
								Bj = la ? ma : Bj;
								Cj = la ? Cj : ma
							} while ((Bj - Cj | 0) != 1);
							ma = f + 60 | 0;
							HEAP32[ma >> 2] = Cj;
							HEAP32[ac >> 2] = (d[(c[$f >> 2] | 0) + (Ie >>> 1) >> 0] | 0) >>> wj << 16 & 983040 | HEAPU16[(HEAP32[m >> 2] | 0) + (Ie << 1) >> 1];
							HEAP32[ja >> 2] = 1;
							la = HEAP32[7018] | 0;
							HEAP32[oa >> 2] = 1;
							ka = la + -1 | 0;
							HEAP32[ag >> 2] = ka;
							HEAP32[ma >> 2] = (ka | 0) == 1 ^ Cj;
							pa = ti;
							qa = ci;
							ra = di;
							sa = ei;
							ta = fi;
							ua = gi;
							va = hi;
							wa = ii;
							xa = ji;
							ya = ki;
							za = li;
							Aa = mi;
							Ba = Ie;
							Ca = xj;
							Da = pi;
							Ea = qi;
							Fa = ri;
							Ga = si;
							Ha = ti;
							Ia = 0;
							Ja = ui;
							Ka = vi;
							La = wi;
							Ma = xi;
							break
						}
					} else {
						pa = ti;
						qa = ci;
						ra = di;
						sa = ei;
						ta = fi;
						ua = gi;
						va = hi;
						wa = ii;
						xa = ji;
						ya = ki;
						za = li;
						Aa = mi;
						Ba = ni;
						Ca = oi;
						Da = pi;
						Ea = qi;
						Fa = ri;
						Ga = si;
						Ha = ti;
						Ia = -4;
						Ja = ui;
						Ka = vi;
						La = wi;
						Ma = xi
					}
				}
			while (0);
			HEAP32[o >> 2] = Ba;
			HEAP32[q >> 2] = Ca;
			HEAP32[r >> 2] = Ja;
			HEAP32[Q >> 2] = ra;
			HEAP32[R >> 2] = Da;
			HEAP32[S >> 2] = Ea;
			HEAP32[T >> 2] = pa;
			HEAP32[U >> 2] = za;
			HEAP32[V >> 2] = Aa;
			HEAP32[W >> 2] = Ha;
			HEAP32[X >> 2] = Ga;
			HEAP32[Y >> 2] = Fa;
			HEAP32[Z >> 2] = ta;
			HEAP32[_ >> 2] = qa;
			c[$ >> 2] = sa;
			HEAP32[aa >> 2] = s;
			HEAP32[ba >> 2] = La;
			HEAP32[ca >> 2] = Ma;
			HEAP32[da >> 2] = Ka;
			HEAP32[ea >> 2] = ya;
			HEAP32[fa >> 2] = wa;
			HEAP32[ga >> 2] = va;
			HEAP32[ha >> 2] = ua;
			HEAP32[ia >> 2] = xa;
			tj = Ia;
			i = g;
			return tj | 0
		}
		function nk(a) {
			a = a | 0;
			var b = 0,
			d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0;
			b = i;
			if (!a) {
				d = -2;
				i = b;
				return d | 0
			}
			e = a + 32 | 0;
			f = HEAP32[e >> 2] | 0;
			if (!f) {
				d = -2;
				i = b;
				return d | 0
			}
			if ((HEAP32[f >> 2] | 0) != (a | 0)) {
				d = -2;
				i = b;
				return d | 0
			}
			g = HEAP32[f + 3148 >> 2] | 0;
			if (g)
				rc[HEAP32[a + 44 >> 2] & 127](HEAP32[a + 48 >> 2] | 0, g);
			g = HEAP32[f + 3152 >> 2] | 0;
			if (g)
				rc[HEAP32[a + 44 >> 2] & 127](HEAP32[a + 48 >> 2] | 0, g);
			g = HEAP32[f + 3156 >> 2] | 0;
			f = a + 44 | 0;
			if (!g)
				h = a + 48 | 0;
			else {
				j = a + 48 | 0;
				rc[HEAP32[f >> 2] & 127](HEAP32[j >> 2] | 0, g);
				h = j
			}
			rc[HEAP32[f >> 2] & 127](HEAP32[h >> 2] | 0, HEAP32[e >> 2] | 0);
			HEAP32[e >> 2] = 0;
			d = 0;
			i = b;
			return d | 0
		}
		function ok(a, b, e, f, g, h, j) {
			a = a | 0;
			b = b | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			var k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0;
			k = i;
			l = (g | 0) > (h | 0);
			if (!l) {
				m = (j | 0) > 0;
				n = g;
				o = 0;
				while (1) {
					if (m) {
						p = 0;
						q = o;
						while (1) {
							if ((HEAPU8[f + p >> 0] | 0 | 0) == (n | 0)) {
								HEAP32[e + (q << 2) >> 2] = p;
								r = q + 1 | 0
							} else
								r = q;
							p = p + 1 | 0;
							if ((p | 0) == (j | 0)) {
								s = r;
								break
							} else
								q = r
						}
					} else
						s = o;
					if ((n | 0) < (h | 0)) {
						n = n + 1 | 0;
						o = s
					} else
						break
				}
			}
			s = b + 0 | 0;
			o = s + 92 | 0;
			do {
				HEAP32[s >> 2] = 0;
				s = s + 4 | 0
			} while ((s | 0) < (o | 0));
			if ((j | 0) > 0) {
				n = 0;
				do {
					r = b + ((HEAPU8[f + n >> 0] | 0) + 1 << 2) | 0;
					HEAP32[r >> 2] = (HEAP32[r >> 2] | 0) + 1;
					n = n + 1 | 0
				} while ((n | 0) != (j | 0));
				t = HEAP32[b >> 2] | 0;
				u = 1
			} else {
				t = 0;
				u = 1
			}
			do {
				j = b + (u << 2) | 0;
				t = (HEAP32[j >> 2] | 0) + t | 0;
				HEAP32[j >> 2] = t;
				u = u + 1 | 0
			} while ((u | 0) != 23);
			s = a + 0 | 0;
			o = s + 92 | 0;
			do {
				HEAP32[s >> 2] = 0;
				s = s + 4 | 0
			} while ((s | 0) < (o | 0));
			if (!l) {
				l = g;
				s = 0;
				while (1) {
					o = l;
					l = l + 1 | 0;
					u = (HEAP32[b + (l << 2) >> 2] | 0) - (HEAP32[b + (o << 2) >> 2] | 0) + s | 0;
					HEAP32[a + (o << 2) >> 2] = u + -1;
					if ((o | 0) >= (h | 0))
						break;
					else
						s = u << 1
				}
			}
			if ((g | 0) < (h | 0))
				v = g;
			else {
				i = k;
				return
			}
			do {
				g = v;
				v = v + 1 | 0;
				s = b + (v << 2) | 0;
				HEAP32[s >> 2] = (HEAP32[a + (g << 2) >> 2] << 1) + 2 - (HEAP32[s >> 2] | 0)
			} while ((v | 0) != (h | 0));
			i = k;
			return
		}
		function pk(a, b, c) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			var d = 0;
			a = i;
			d = vx(da(c, b) | 0) | 0;
			i = a;
			return d | 0
		}
		function qk(a, b) {
			a = a | 0;
			b = b | 0;
			a = i;
			if (b)
				wx(b);
			i = a;
			return
		}
		function rk(a, b, c) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0,
			O = 0,
			P = 0,
			Q = 0,
			R = 0,
			S = 0,
			T = 0;
			e = i;
			f = a >>> 16;
			g = a & 65535;
			if ((c | 0) == 1) {
				a = (HEAPU8[b >> 0] | 0) + g | 0;
				h = a >>> 0 > 65520 ? a + -65521 | 0 : a;
				a = h + f | 0;
				j = (a >>> 0 > 65520 ? a + 15 | 0 : a) << 16 | h;
				i = e;
				return j | 0
			}
			if (!b) {
				j = 1;
				i = e;
				return j | 0
			}
			if (c >>> 0 < 16) {
				if (!c) {
					k = g;
					l = f
				} else {
					h = b;
					a = c;
					m = g;
					n = f;
					while (1) {
						a = a + -1 | 0;
						o = (HEAPU8[h >> 0] | 0) + m | 0;
						p = o + n | 0;
						if (!a) {
							k = o;
							l = p;
							break
						} else {
							h = h + 1 | 0;
							m = o;
							n = p
						}
					}
				}
				j = ((l >>> 0) % 65521 | 0) << 16 | (k >>> 0 > 65520 ? k + -65521 | 0 : k);
				i = e;
				return j | 0
			}
			if (c >>> 0 > 5551) {
				k = c + -5552 | 0;
				l = (k >>> 0) % 5552 | 0;
				n = b + (k - l + 5552) | 0;
				k = b;
				m = c;
				h = g;
				a = f;
				while (1) {
					m = m + -5552 | 0;
					p = k;
					o = h;
					q = 347;
					r = a;
					while (1) {
						s = (HEAPU8[p >> 0] | 0) + o | 0;
						t = s + (HEAPU8[p + 1 >> 0] | 0) | 0;
						u = t + (HEAPU8[p + 2 >> 0] | 0) | 0;
						v = u + (HEAPU8[p + 3 >> 0] | 0) | 0;
						w = v + (HEAPU8[p + 4 >> 0] | 0) | 0;
						x = w + (HEAPU8[p + 5 >> 0] | 0) | 0;
						y = x + (HEAPU8[p + 6 >> 0] | 0) | 0;
						z = y + (HEAPU8[p + 7 >> 0] | 0) | 0;
						A = z + (HEAPU8[p + 8 >> 0] | 0) | 0;
						B = A + (HEAPU8[p + 9 >> 0] | 0) | 0;
						C = B + (HEAPU8[p + 10 >> 0] | 0) | 0;
						D = C + (HEAPU8[p + 11 >> 0] | 0) | 0;
						E = D + (HEAPU8[p + 12 >> 0] | 0) | 0;
						F = E + (HEAPU8[p + 13 >> 0] | 0) | 0;
						G = F + (HEAPU8[p + 14 >> 0] | 0) | 0;
						o = G + (HEAPU8[p + 15 >> 0] | 0) | 0;
						r = s + r + t + u + v + w + x + y + z + A + B + C + D + E + F + G + o | 0;
						q = q + -1 | 0;
						if (!q)
							break;
						else
							p = p + 16 | 0
					}
					h = (o >>> 0) % 65521 | 0;
					a = (r >>> 0) % 65521 | 0;
					if (m >>> 0 <= 5551)
						break;
					else
						k = k + 5552 | 0
				}
				if (l)
					if (l >>> 0 > 15) {
						H = l;
						I = n;
						J = h;
						K = a;
						L = 15
					} else {
						M = l;
						N = n;
						O = h;
						P = a;
						L = 18
					}
				else {
					Q = h;
					R = a
				}
			} else {
				H = c;
				I = b;
				J = g;
				K = f;
				L = 15
			}
			if ((L | 0) == 15) {
				f = H + -16 | 0;
				g = f & -16;
				b = I + (g + 16) | 0;
				c = H;
				H = I;
				I = J;
				J = K;
				while (1) {
					c = c + -16 | 0;
					K = (HEAPU8[H >> 0] | 0) + I | 0;
					a = K + (HEAPU8[H + 1 >> 0] | 0) | 0;
					h = a + (HEAPU8[H + 2 >> 0] | 0) | 0;
					n = h + (HEAPU8[H + 3 >> 0] | 0) | 0;
					l = n + (HEAPU8[H + 4 >> 0] | 0) | 0;
					k = l + (HEAPU8[H + 5 >> 0] | 0) | 0;
					m = k + (HEAPU8[H + 6 >> 0] | 0) | 0;
					p = m + (HEAPU8[H + 7 >> 0] | 0) | 0;
					q = p + (HEAPU8[H + 8 >> 0] | 0) | 0;
					G = q + (HEAPU8[H + 9 >> 0] | 0) | 0;
					F = G + (HEAPU8[H + 10 >> 0] | 0) | 0;
					E = F + (HEAPU8[H + 11 >> 0] | 0) | 0;
					D = E + (HEAPU8[H + 12 >> 0] | 0) | 0;
					C = D + (HEAPU8[H + 13 >> 0] | 0) | 0;
					B = C + (HEAPU8[H + 14 >> 0] | 0) | 0;
					I = B + (HEAPU8[H + 15 >> 0] | 0) | 0;
					J = K + J + a + h + n + l + k + m + p + q + G + F + E + D + C + B + I | 0;
					if (c >>> 0 <= 15)
						break;
					else
						H = H + 16 | 0
				}
				if ((f | 0) == (g | 0)) {
					S = I;
					T = J;
					L = 19
				} else {
					M = f - g | 0;
					N = b;
					O = I;
					P = J;
					L = 18
				}
			}
			if ((L | 0) == 18)
				while (1) {
					L = 0;
					M = M + -1 | 0;
					J = (HEAPU8[N >> 0] | 0) + O | 0;
					I = J + P | 0;
					if (!M) {
						S = J;
						T = I;
						L = 19;
						break
					} else {
						N = N + 1 | 0;
						O = J;
						P = I;
						L = 18
					}
				}
			if ((L | 0) == 19) {
				Q = (S >>> 0) % 65521 | 0;
				R = (T >>> 0) % 65521 | 0
			}
			j = R << 16 | Q;
			i = e;
			return j | 0
		}
		function sk(a, b, e) {
			a = a | 0;
			b = b | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0;
			f = i;
			if (!b) {
				g = 0;
				i = f;
				return g | 0
			}
			h = ~a;
			a: do
				if (e) {
					a = b;
					j = e;
					k = h;
					while (1) {
						if (!(a & 3))
							break;
						l = HEAP32[30120 + (((HEAPU8[a >> 0] | 0) ^ k & 255) << 2) >> 2] ^ k >>> 8;
						m = j + -1 | 0;
						if (!m) {
							n = l;
							break a
						} else {
							a = a + 1 | 0;
							j = m;
							k = l
						}
					}
					if (j >>> 0 > 31) {
						l = j + -32 | 0;
						m = l & -32;
						o = m + 32 | 0;
						p = j;
						q = a;
						r = k;
						while (1) {
							s = HEAP32[q >> 2] ^ r;
							t = HEAP32[32168 + ((s >>> 8 & 255) << 2) >> 2] ^ HEAP32[33192 + ((s & 255) << 2) >> 2] ^ HEAP32[31144 + ((s >>> 16 & 255) << 2) >> 2] ^ HEAP32[30120 + (s >>> 24 << 2) >> 2] ^ HEAP32[q + 4 >> 2];
							s = HEAP32[32168 + ((t >>> 8 & 255) << 2) >> 2] ^ HEAP32[33192 + ((t & 255) << 2) >> 2] ^ HEAP32[31144 + ((t >>> 16 & 255) << 2) >> 2] ^ HEAP32[30120 + (t >>> 24 << 2) >> 2] ^ HEAP32[q + 8 >> 2];
							t = HEAP32[32168 + ((s >>> 8 & 255) << 2) >> 2] ^ HEAP32[33192 + ((s & 255) << 2) >> 2] ^ HEAP32[31144 + ((s >>> 16 & 255) << 2) >> 2] ^ HEAP32[30120 + (s >>> 24 << 2) >> 2] ^ HEAP32[q + 12 >> 2];
							s = HEAP32[32168 + ((t >>> 8 & 255) << 2) >> 2] ^ HEAP32[33192 + ((t & 255) << 2) >> 2] ^ HEAP32[31144 + ((t >>> 16 & 255) << 2) >> 2] ^ HEAP32[30120 + (t >>> 24 << 2) >> 2] ^ HEAP32[q + 16 >> 2];
							t = HEAP32[32168 + ((s >>> 8 & 255) << 2) >> 2] ^ HEAP32[33192 + ((s & 255) << 2) >> 2] ^ HEAP32[31144 + ((s >>> 16 & 255) << 2) >> 2] ^ HEAP32[30120 + (s >>> 24 << 2) >> 2] ^ HEAP32[q + 20 >> 2];
							s = HEAP32[32168 + ((t >>> 8 & 255) << 2) >> 2] ^ HEAP32[33192 + ((t & 255) << 2) >> 2] ^ HEAP32[31144 + ((t >>> 16 & 255) << 2) >> 2] ^ HEAP32[30120 + (t >>> 24 << 2) >> 2] ^ HEAP32[q + 24 >> 2];
							t = HEAP32[32168 + ((s >>> 8 & 255) << 2) >> 2] ^ HEAP32[33192 + ((s & 255) << 2) >> 2] ^ HEAP32[31144 + ((s >>> 16 & 255) << 2) >> 2] ^ HEAP32[30120 + (s >>> 24 << 2) >> 2] ^ HEAP32[q + 28 >> 2];
							r = HEAP32[32168 + ((t >>> 8 & 255) << 2) >> 2] ^ HEAP32[33192 + ((t & 255) << 2) >> 2] ^ HEAP32[31144 + ((t >>> 16 & 255) << 2) >> 2] ^ HEAP32[30120 + (t >>> 24 << 2) >> 2];
							p = p + -32 | 0;
							if (p >>> 0 <= 31)
								break;
							else
								q = q + 32 | 0
						}
						u = l - m | 0;
						v = a + o | 0;
						w = r
					} else {
						u = j;
						v = a;
						w = k
					}
					if (u >>> 0 > 3) {
						q = u + -4 | 0;
						p = q >>> 2;
						t = p << 2;
						s = u;
						x = v;
						y = w;
						while (1) {
							z = HEAP32[x >> 2] ^ y;
							y = HEAP32[32168 + ((z >>> 8 & 255) << 2) >> 2] ^ HEAP32[33192 + ((z & 255) << 2) >> 2] ^ HEAP32[31144 + ((z >>> 16 & 255) << 2) >> 2] ^ HEAP32[30120 + (z >>> 24 << 2) >> 2];
							s = s + -4 | 0;
							if (s >>> 0 <= 3)
								break;
							else
								x = x + 4 | 0
						}
						A = q - t | 0;
						B = v + (p + 1 << 2) | 0;
						C = y
					} else {
						A = u;
						B = v;
						C = w
					}
					if (!A)
						n = C;
					else {
						x = B;
						s = A;
						k = C;
						while (1) {
							a = HEAP32[30120 + (((HEAPU8[x >> 0] | 0) ^ k & 255) << 2) >> 2] ^ k >>> 8;
							s = s + -1 | 0;
							if (!s) {
								n = a;
								break
							} else {
								x = x + 1 | 0;
								k = a
							}
						}
					}
				} else
					n = h;
			while (0);
			g = ~n;
			i = f;
			return g | 0
		}
		function tk(a) {
			a = a | 0;
			var b = 0,
			d = 0,
			e = 0,
			f = 0;
			b = i;
			if (!a) {
				d = -2;
				i = b;
				return d | 0
			}
			e = HEAP32[a + 28 >> 2] | 0;
			if (!e) {
				d = -2;
				i = b;
				return d | 0
			}
			HEAP32[e + 40 >> 2] = 0;
			HEAP32[e + 44 >> 2] = 0;
			HEAP32[e + 48 >> 2] = 0;
			HEAP32[e + 28 >> 2] = 0;
			HEAP32[a + 20 >> 2] = 0;
			HEAP32[a + 8 >> 2] = 0;
			HEAP32[a + 24 >> 2] = 0;
			f = HEAP32[e + 8 >> 2] | 0;
			if (f)
				HEAP32[a + 48 >> 2] = f & 1;
			HEAP32[e >> 2] = 0;
			HEAP32[e + 4 >> 2] = 0;
			HEAP32[e + 12 >> 2] = 0;
			HEAP32[e + 20 >> 2] = 32768;
			HEAP32[e + 32 >> 2] = 0;
			HEAP32[e + 56 >> 2] = 0;
			HEAP32[e + 60 >> 2] = 0;
			f = e + 1328 | 0;
			HEAP32[e + 108 >> 2] = f;
			HEAP32[e + 80 >> 2] = f;
			HEAP32[e + 76 >> 2] = f;
			HEAP32[e + 7104 >> 2] = 1;
			HEAP32[e + 7108 >> 2] = -1;
			d = 0;
			i = b;
			return d | 0
		}
		function uk(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0;
			d = i;
			if (!a) {
				e = -2;
				i = d;
				return e | 0
			}
			f = a + 28 | 0;
			g = HEAP32[f >> 2] | 0;
			if (!g) {
				e = -2;
				i = d;
				return e | 0
			}
			if ((b | 0) < 0) {
				h = 0 - b | 0;
				j = 0
			} else {
				h = (b | 0) < 48 ? b & 15 : b;
				j = (b >> 4) + 1 | 0
			}
			if (!((h | 0) == 0 | (h & -8 | 0) == 8)) {
				e = -2;
				i = d;
				return e | 0
			}
			b = g + 52 | 0;
			k = HEAP32[b >> 2] | 0;
			l = g + 36 | 0;
			if ((k | 0) != 0 ? (HEAP32[l >> 2] | 0) != (h | 0) : 0) {
				rc[HEAP32[a + 36 >> 2] & 127](HEAP32[a + 40 >> 2] | 0, k);
				HEAP32[b >> 2] = 0
			}
			HEAP32[g + 8 >> 2] = j;
			HEAP32[l >> 2] = h;
			h = HEAP32[f >> 2] | 0;
			if (!h) {
				e = -2;
				i = d;
				return e | 0
			}
			HEAP32[h + 40 >> 2] = 0;
			HEAP32[h + 44 >> 2] = 0;
			HEAP32[h + 48 >> 2] = 0;
			HEAP32[h + 28 >> 2] = 0;
			HEAP32[a + 20 >> 2] = 0;
			HEAP32[a + 8 >> 2] = 0;
			HEAP32[a + 24 >> 2] = 0;
			f = HEAP32[h + 8 >> 2] | 0;
			if (f)
				HEAP32[a + 48 >> 2] = f & 1;
			HEAP32[h >> 2] = 0;
			HEAP32[h + 4 >> 2] = 0;
			HEAP32[h + 12 >> 2] = 0;
			HEAP32[h + 20 >> 2] = 32768;
			HEAP32[h + 32 >> 2] = 0;
			HEAP32[h + 56 >> 2] = 0;
			HEAP32[h + 60 >> 2] = 0;
			f = h + 1328 | 0;
			HEAP32[h + 108 >> 2] = f;
			HEAP32[h + 80 >> 2] = f;
			HEAP32[h + 76 >> 2] = f;
			HEAP32[h + 7104 >> 2] = 1;
			HEAP32[h + 7108 >> 2] = -1;
			e = 0;
			i = d;
			return e | 0
		}
		function vk(b, d, e, f) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0;
			g = i;
			if (!e) {
				h = -6;
				i = g;
				return h | 0
			}
			if ((HEAP8[e >> 0] | 0) != 49 | (f | 0) != 56) {
				h = -6;
				i = g;
				return h | 0
			}
			if (!b) {
				h = -2;
				i = g;
				return h | 0
			}
			HEAP32[b + 24 >> 2] = 0;
			f = b + 32 | 0;
			e = HEAP32[f >> 2] | 0;
			if (!e) {
				HEAP32[f >> 2] = 28;
				HEAP32[b + 40 >> 2] = 0;
				j = 28
			} else
				j = e;
			e = b + 36 | 0;
			if (!(HEAP32[e >> 2] | 0))
				HEAP32[e >> 2] = 66;
			f = b + 40 | 0;
			k = mc[j & 31](HEAP32[f >> 2] | 0, 1, 7116) | 0;
			if (!k) {
				h = -4;
				i = g;
				return h | 0
			}
			j = b + 28 | 0;
			HEAP32[j >> 2] = k;
			HEAP32[k + 52 >> 2] = 0;
			l = uk(b, d) | 0;
			if (!l) {
				h = 0;
				i = g;
				return h | 0
			}
			rc[HEAP32[e >> 2] & 127](HEAP32[f >> 2] | 0, k);
			HEAP32[j >> 2] = 0;
			h = l;
			i = g;
			return h | 0
		}
		function wk(b, d, e) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0;
			f = i;
			if (!d) {
				g = -6;
				i = f;
				return g | 0
			}
			if ((HEAP8[d >> 0] | 0) != 49 | (e | 0) != 56) {
				g = -6;
				i = f;
				return g | 0
			}
			if (!b) {
				g = -2;
				i = f;
				return g | 0
			}
			HEAP32[b + 24 >> 2] = 0;
			e = b + 32 | 0;
			d = HEAP32[e >> 2] | 0;
			if (!d) {
				HEAP32[e >> 2] = 28;
				HEAP32[b + 40 >> 2] = 0;
				h = 28
			} else
				h = d;
			d = b + 36 | 0;
			if (!(HEAP32[d >> 2] | 0))
				HEAP32[d >> 2] = 66;
			e = b + 40 | 0;
			j = mc[h & 31](HEAP32[e >> 2] | 0, 1, 7116) | 0;
			if (!j) {
				g = -4;
				i = f;
				return g | 0
			}
			h = b + 28 | 0;
			HEAP32[h >> 2] = j;
			HEAP32[j + 52 >> 2] = 0;
			k = uk(b, 15) | 0;
			if (!k) {
				g = 0;
				i = f;
				return g | 0
			}
			rc[HEAP32[d >> 2] & 127](HEAP32[e >> 2] | 0, j);
			HEAP32[h >> 2] = 0;
			g = k;
			i = f;
			return g | 0
		}
		function xk(f, g) {
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0,
			O = 0,
			P = 0,
			Q = 0,
			R = 0,
			S = 0,
			T = 0,
			U = 0,
			V = 0,
			W = 0,
			X = 0,
			Y = 0,
			Z = 0,
			_ = 0,
			$ = 0,
			aa = 0,
			ba = 0,
			ca = 0,
			da = 0,
			ea = 0,
			fa = 0,
			ga = 0,
			ha = 0,
			ia = 0,
			ja = 0,
			ka = 0,
			la = 0,
			ma = 0,
			na = 0,
			oa = 0,
			pa = 0,
			qa = 0,
			ra = 0,
			sa = 0,
			ta = 0,
			ua = 0,
			va = 0,
			wa = 0,
			xa = 0,
			ya = 0,
			za = 0,
			Aa = 0,
			Ba = 0,
			Ca = 0,
			Da = 0,
			Ea = 0,
			Fa = 0,
			Ga = 0,
			Ha = 0,
			Ia = 0,
			Ja = 0,
			Ka = 0,
			La = 0,
			Ma = 0,
			Na = 0,
			Oa = 0,
			Pa = 0,
			Qa = 0,
			Ra = 0,
			Sa = 0,
			Ta = 0,
			Ua = 0,
			Va = 0,
			Wa = 0,
			Xa = 0,
			Ya = 0,
			Za = 0,
			_a = 0,
			$a = 0,
			ab = 0,
			bb = 0,
			cb = 0,
			db = 0,
			eb = 0,
			fb = 0,
			gb = 0,
			hb = 0,
			ib = 0,
			jb = 0,
			kb = 0,
			lb = 0,
			mb = 0,
			nb = 0,
			ob = 0,
			pb = 0,
			qb = 0,
			rb = 0,
			sb = 0,
			tb = 0,
			ub = 0,
			vb = 0,
			wb = 0,
			xb = 0,
			yb = 0,
			zb = 0,
			Ab = 0,
			Bb = 0,
			Cb = 0,
			Db = 0,
			Eb = 0,
			Fb = 0,
			Gb = 0,
			Hb = 0,
			Ib = 0,
			Jb = 0,
			Kb = 0,
			Lb = 0,
			Mb = 0,
			Nb = 0,
			Ob = 0,
			Pb = 0,
			Qb = 0,
			Rb = 0,
			Sb = 0,
			Tb = 0,
			Ub = 0,
			Vb = 0,
			Wb = 0,
			Xb = 0,
			Yb = 0,
			Zb = 0,
			_b = 0,
			$b = 0,
			ac = 0,
			bc = 0,
			cc = 0,
			dc = 0,
			ec = 0,
			fc = 0,
			gc = 0,
			hc = 0,
			ic = 0,
			jc = 0,
			kc = 0,
			lc = 0,
			mc = 0,
			nc = 0,
			oc = 0,
			pc = 0,
			qc = 0,
			rc = 0,
			sc = 0,
			tc = 0,
			uc = 0,
			vc = 0,
			wc = 0,
			xc = 0,
			yc = 0,
			zc = 0,
			Ac = 0,
			Bc = 0,
			Cc = 0,
			Dc = 0,
			Ec = 0,
			Fc = 0,
			Gc = 0,
			Hc = 0,
			Ic = 0,
			Jc = 0,
			Kc = 0,
			Lc = 0,
			Mc = 0,
			Nc = 0,
			Oc = 0,
			Pc = 0,
			Qc = 0,
			Rc = 0,
			Sc = 0,
			Tc = 0,
			Uc = 0,
			Vc = 0,
			Wc = 0,
			Xc = 0,
			Yc = 0,
			Zc = 0,
			_c = 0,
			$c = 0,
			ad = 0,
			bd = 0,
			cd = 0,
			dd = 0,
			ed = 0,
			fd = 0,
			gd = 0,
			hd = 0,
			id = 0,
			jd = 0,
			kd = 0,
			ld = 0,
			md = 0,
			nd = 0,
			od = 0,
			pd = 0,
			qd = 0,
			rd = 0,
			sd = 0,
			td = 0,
			ud = 0,
			vd = 0,
			wd = 0,
			xd = 0,
			yd = 0,
			zd = 0,
			Ad = 0,
			Bd = 0,
			Cd = 0,
			Dd = 0,
			Ed = 0,
			Fd = 0,
			Gd = 0,
			Hd = 0,
			Id = 0,
			Jd = 0,
			Kd = 0,
			Ld = 0,
			Md = 0,
			Nd = 0,
			Od = 0,
			Pd = 0,
			Qd = 0,
			Rd = 0,
			Sd = 0,
			Td = 0,
			Ud = 0,
			Vd = 0,
			Wd = 0,
			Xd = 0,
			Yd = 0,
			Zd = 0,
			_d = 0,
			$d = 0,
			ae = 0,
			be = 0,
			ce = 0,
			de = 0,
			ee = 0,
			fe = 0,
			ge = 0,
			he = 0,
			ie = 0,
			je = 0,
			ke = 0,
			le = 0,
			me = 0,
			ne = 0,
			oe = 0,
			pe = 0,
			qe = 0,
			re = 0,
			se = 0,
			te = 0,
			ue = 0,
			ve = 0,
			we = 0,
			xe = 0,
			ye = 0,
			ze = 0,
			Ae = 0,
			Be = 0,
			Ce = 0,
			De = 0,
			Ee = 0,
			Fe = 0,
			Ge = 0,
			He = 0,
			Ie = 0,
			Je = 0,
			Ke = 0,
			Le = 0,
			Me = 0,
			Ne = 0,
			Oe = 0,
			Pe = 0,
			Qe = 0,
			Re = 0,
			Se = 0,
			Te = 0,
			Ue = 0,
			Ve = 0,
			We = 0,
			Xe = 0,
			Ye = 0,
			Ze = 0,
			_e = 0,
			$e = 0,
			af = 0,
			bf = 0,
			cf = 0,
			df = 0,
			ef = 0,
			ff = 0,
			gf = 0,
			hf = 0,
			jf = 0,
			kf = 0,
			lf = 0,
			mf = 0,
			nf = 0,
			of = 0,
			pf = 0,
			qf = 0,
			rf = 0,
			sf = 0,
			tf = 0,
			uf = 0,
			vf = 0,
			wf = 0,
			xf = 0,
			yf = 0,
			zf = 0,
			Af = 0,
			Bf = 0,
			Cf = 0,
			Df = 0,
			Ef = 0,
			Ff = 0,
			Gf = 0,
			Hf = 0,
			If = 0,
			Jf = 0,
			Kf = 0,
			Lf = 0,
			Mf = 0,
			Nf = 0,
			Of = 0,
			Pf = 0,
			Qf = 0,
			Rf = 0,
			Sf = 0,
			Tf = 0,
			Uf = 0,
			Vf = 0,
			Wf = 0,
			Xf = 0,
			Yf = 0,
			Zf = 0,
			_f = 0,
			$f = 0,
			ag = 0,
			bg = 0,
			cg = 0,
			dg = 0,
			eg = 0,
			fg = 0,
			gg = 0,
			hg = 0,
			ig = 0,
			jg = 0,
			kg = 0,
			lg = 0,
			mg = 0,
			ng = 0,
			og = 0,
			pg = 0,
			qg = 0,
			rg = 0,
			sg = 0,
			tg = 0,
			ug = 0,
			vg = 0;
			h = i;
			i = i + 16 | 0;
			j = h;
			if (!f) {
				k = -2;
				i = h;
				return k | 0
			}
			l = HEAP32[f + 28 >> 2] | 0;
			if (!l) {
				k = -2;
				i = h;
				return k | 0
			}
			m = f + 12 | 0;
			n = HEAP32[m >> 2] | 0;
			if (!n) {
				k = -2;
				i = h;
				return k | 0
			}
			o = HEAP32[f >> 2] | 0;
			if ((o | 0) == 0 ? (HEAP32[f + 4 >> 2] | 0) != 0 : 0) {
				k = -2;
				i = h;
				return k | 0
			}
			p = HEAP32[l >> 2] | 0;
			if ((p | 0) == 11) {
				HEAP32[l >> 2] = 12;
				q = 12
			} else
				q = p;
			p = f + 16 | 0;
			r = HEAP32[p >> 2] | 0;
			s = f + 4 | 0;
			t = HEAP32[s >> 2] | 0;
			u = l + 56 | 0;
			v = l + 60 | 0;
			w = l + 8 | 0;
			x = l + 24 | 0;
			y = j + 1 | 0;
			z = l + 16 | 0;
			A = l + 32 | 0;
			B = f + 24 | 0;
			C = l + 36 | 0;
			D = l + 20 | 0;
			E = f + 48 | 0;
			F = l + 64 | 0;
			G = l + 12 | 0;
			H = (g + -5 | 0) >>> 0 < 2;
			I = l + 4 | 0;
			J = l + 76 | 0;
			K = l + 84 | 0;
			L = l + 80 | 0;
			M = l + 88 | 0;
			N = (g | 0) == 6;
			O = l + 7108 | 0;
			P = l + 72 | 0;
			Q = l + 7112 | 0;
			R = l + 68 | 0;
			S = l + 44 | 0;
			T = l + 7104 | 0;
			U = l + 48 | 0;
			V = l + 52 | 0;
			W = l + 40 | 0;
			X = f + 20 | 0;
			Y = l + 28 | 0;
			Z = l + 96 | 0;
			_ = l + 100 | 0;
			$ = l + 92 | 0;
			aa = l + 104 | 0;
			ba = l + 1328 | 0;
			ca = l + 108 | 0;
			da = l + 112 | 0;
			ea = l + 752 | 0;
			fa = l + 624 | 0;
			ga = j + 2 | 0;
			ha = j + 3 | 0;
			ia = q;
			q = HEAP32[v >> 2] | 0;
			ja = t;
			ka = HEAP32[u >> 2] | 0;
			la = r;
			ma = o;
			o = r;
			r = n;
			n = 0;
			a: while (1) {
				b: do
					switch (ia | 0) {
					case 23: {
							na = HEAP32[P >> 2] | 0;
							oa = q;
							pa = ja;
							qa = ka;
							ra = ma;
							sa = n;
							ta = 236;
							break
						}
					case 21: {
							ua = HEAP32[P >> 2] | 0;
							va = q;
							wa = ja;
							xa = ka;
							ya = ma;
							za = n;
							ta = 217;
							break
						}
					case 4: {
							Aa = q;
							Ba = ja;
							Ca = ka;
							Da = ma;
							ta = 62;
							break
						}
					case 1: {
							if (q >>> 0 < 16) {
								Ea = q;
								Fa = ja;
								Ga = ka;
								Ha = ma;
								while (1) {
									if (!Fa) {
										Ia = la;
										Ja = Ea;
										Ka = 0;
										La = Ga;
										Ma = Ha;
										Na = o;
										Oa = n;
										break a
									}
									Pa = Fa + -1 | 0;
									Qa = Ha + 1 | 0;
									Ra = (HEAPU8[Ha >> 0] << Ea) + Ga | 0;
									Sa = Ea + 8 | 0;
									if (Sa >>> 0 < 16) {
										Ea = Sa;
										Fa = Pa;
										Ga = Ra;
										Ha = Qa
									} else {
										Ta = Ra;
										Ua = Sa;
										Va = Pa;
										Wa = Qa;
										break
									}
								}
							} else {
								Ta = ka;
								Ua = q;
								Va = ja;
								Wa = ma
							}
							HEAP32[z >> 2] = Ta;
							if ((Ta & 255 | 0) != 8) {
								HEAP32[B >> 2] = 38376;
								HEAP32[l >> 2] = 29;
								Xa = Ua;
								Ya = Va;
								Za = Ta;
								_a = la;
								$a = Wa;
								ab = o;
								bb = r;
								cb = n;
								break b
							}
							if (Ta & 57344) {
								HEAP32[B >> 2] = 38432;
								HEAP32[l >> 2] = 29;
								Xa = Ua;
								Ya = Va;
								Za = Ta;
								_a = la;
								$a = Wa;
								ab = o;
								bb = r;
								cb = n;
								break b
							}
							Ha = HEAP32[A >> 2] | 0;
							if (Ha)
								HEAP32[Ha >> 2] = Ta >>> 8 & 1;
							if (Ta & 512) {
								HEAP8[j >> 0] = Ta;
								HEAP8[y >> 0] = Ta >>> 8;
								HEAP32[x >> 2] = sk(HEAP32[x >> 2] | 0, j, 2) | 0
							}
							HEAP32[l >> 2] = 2;
							db = 0;
							eb = Va;
							fb = 0;
							gb = Wa;
							ta = 47;
							break
						}
					case 6: {
							hb = q;
							ib = ja;
							jb = ka;
							kb = ma;
							ta = 83;
							break
						}
					case 19: {
							lb = q;
							mb = ja;
							nb = ka;
							ob = ma;
							pb = n;
							ta = 198;
							break
						}
					case 20: {
							qb = q;
							rb = ja;
							sb = ka;
							tb = ma;
							ub = n;
							ta = 199;
							break
						}
					case 15: {
							vb = q;
							wb = ja;
							xb = ka;
							yb = ma;
							ta = 144;
							break
						}
					case 18: {
							zb = HEAP32[aa >> 2] | 0;
							Ab = q;
							Bb = ja;
							Cb = ka;
							Db = ma;
							Eb = n;
							ta = 164;
							break
						}
					case 5: {
							Fb = q;
							Gb = ja;
							Hb = ka;
							Ib = ma;
							ta = 73;
							break
						}
					case 9: {
							if (q >>> 0 < 32) {
								Ha = q;
								Ga = ja;
								Fa = ka;
								Ea = ma;
								while (1) {
									if (!Ga) {
										Ia = la;
										Ja = Ha;
										Ka = 0;
										La = Fa;
										Ma = Ea;
										Na = o;
										Oa = n;
										break a
									}
									Qa = Ga + -1 | 0;
									Pa = Ea + 1 | 0;
									Sa = (HEAPU8[Ea >> 0] << Ha) + Fa | 0;
									Ha = Ha + 8 | 0;
									if (Ha >>> 0 >= 32) {
										Jb = Qa;
										Kb = Sa;
										Lb = Pa;
										break
									} else {
										Ga = Qa;
										Fa = Sa;
										Ea = Pa
									}
								}
							} else {
								Jb = ja;
								Kb = ka;
								Lb = ma
							}
							Ea = jy(Kb | 0) | 0;
							HEAP32[x >> 2] = Ea;
							HEAP32[E >> 2] = Ea;
							HEAP32[l >> 2] = 10;
							Mb = 0;
							Nb = Jb;
							Ob = 0;
							Pb = Lb;
							ta = 121;
							break
						}
					case 16: {
							if (q >>> 0 < 14) {
								Ea = q;
								Fa = ja;
								Ga = ka;
								Ha = ma;
								while (1) {
									if (!Fa) {
										Ia = la;
										Ja = Ea;
										Ka = 0;
										La = Ga;
										Ma = Ha;
										Na = o;
										Oa = n;
										break a
									}
									Pa = Fa + -1 | 0;
									Sa = Ha + 1 | 0;
									Qa = (HEAPU8[Ha >> 0] << Ea) + Ga | 0;
									Ra = Ea + 8 | 0;
									if (Ra >>> 0 < 14) {
										Ea = Ra;
										Fa = Pa;
										Ga = Qa;
										Ha = Sa
									} else {
										Qb = Ra;
										Rb = Pa;
										Sb = Qa;
										Tb = Sa;
										break
									}
								}
							} else {
								Qb = q;
								Rb = ja;
								Sb = ka;
								Tb = ma
							}
							Ha = (Sb & 31) + 257 | 0;
							HEAP32[Z >> 2] = Ha;
							Ga = (Sb >>> 5 & 31) + 1 | 0;
							HEAP32[_ >> 2] = Ga;
							c[$ >> 2] = (Sb >>> 10 & 15) + 4;
							Fa = Sb >>> 14;
							Ea = Qb + -14 | 0;
							if (Ha >>> 0 > 286 | Ga >>> 0 > 30) {
								HEAP32[B >> 2] = 38544;
								HEAP32[l >> 2] = 29;
								Xa = Ea;
								Ya = Rb;
								Za = Fa;
								_a = la;
								$a = Tb;
								ab = o;
								bb = r;
								cb = n;
								break b
							} else {
								HEAP32[aa >> 2] = 0;
								HEAP32[l >> 2] = 17;
								Ub = 0;
								Vb = Ea;
								Wb = Rb;
								Xb = Fa;
								Yb = Tb;
								ta = 154;
								break b
							}
							break
						}
					case 0: {
							Fa = HEAP32[w >> 2] | 0;
							if (!Fa) {
								HEAP32[l >> 2] = 12;
								Xa = q;
								Ya = ja;
								Za = ka;
								_a = la;
								$a = ma;
								ab = o;
								bb = r;
								cb = n;
								break b
							}
							if (q >>> 0 < 16) {
								Ea = q;
								Ga = ja;
								Ha = ka;
								Sa = ma;
								while (1) {
									if (!Ga) {
										Ia = la;
										Ja = Ea;
										Ka = 0;
										La = Ha;
										Ma = Sa;
										Na = o;
										Oa = n;
										break a
									}
									Qa = Ga + -1 | 0;
									Pa = Sa + 1 | 0;
									Ra = (HEAPU8[Sa >> 0] << Ea) + Ha | 0;
									Zb = Ea + 8 | 0;
									if (Zb >>> 0 < 16) {
										Ea = Zb;
										Ga = Qa;
										Ha = Ra;
										Sa = Pa
									} else {
										_b = Zb;
										$b = Qa;
										ac = Ra;
										bc = Pa;
										break
									}
								}
							} else {
								_b = q;
								$b = ja;
								ac = ka;
								bc = ma
							}
							if ((Fa & 2 | 0) != 0 & (ac | 0) == 35615) {
								HEAP32[x >> 2] = sk(0, 0, 0) | 0;
								HEAP8[j >> 0] = 31;
								HEAP8[y >> 0] = -117;
								HEAP32[x >> 2] = sk(HEAP32[x >> 2] | 0, j, 2) | 0;
								HEAP32[l >> 2] = 1;
								Xa = 0;
								Ya = $b;
								Za = 0;
								_a = la;
								$a = bc;
								ab = o;
								bb = r;
								cb = n;
								break b
							}
							HEAP32[z >> 2] = 0;
							Sa = HEAP32[A >> 2] | 0;
							if (Sa)
								HEAP32[Sa + 48 >> 2] = -1;
							if ((Fa & 1 | 0) != 0 ? ((((ac << 8 & 65280) + (ac >>> 8) | 0) >>> 0) % 31 | 0 | 0) == 0 : 0) {
								if ((ac & 15 | 0) != 8) {
									HEAP32[B >> 2] = 38376;
									HEAP32[l >> 2] = 29;
									Xa = _b;
									Ya = $b;
									Za = ac;
									_a = la;
									$a = bc;
									ab = o;
									bb = r;
									cb = n;
									break b
								}
								Sa = ac >>> 4;
								Ha = _b + -4 | 0;
								Ga = (Sa & 15) + 8 | 0;
								Ea = HEAP32[C >> 2] | 0;
								if (Ea) {
									if (Ga >>> 0 > Ea >>> 0) {
										HEAP32[B >> 2] = 38408;
										HEAP32[l >> 2] = 29;
										Xa = Ha;
										Ya = $b;
										Za = Sa;
										_a = la;
										$a = bc;
										ab = o;
										bb = r;
										cb = n;
										break b
									}
								} else
									HEAP32[C >> 2] = Ga;
								HEAP32[D >> 2] = 1 << Ga;
								Ga = rk(0, 0, 0) | 0;
								HEAP32[x >> 2] = Ga;
								HEAP32[E >> 2] = Ga;
								HEAP32[l >> 2] = ac >>> 12 & 2 ^ 11;
								Xa = 0;
								Ya = $b;
								Za = 0;
								_a = la;
								$a = bc;
								ab = o;
								bb = r;
								cb = n;
								break b
							}
							HEAP32[B >> 2] = 38352;
							HEAP32[l >> 2] = 29;
							Xa = _b;
							Ya = $b;
							Za = ac;
							_a = la;
							$a = bc;
							ab = o;
							bb = r;
							cb = n;
							break
						}
					case 22: {
							cc = q;
							dc = ja;
							ec = ka;
							fc = ma;
							gc = n;
							ta = 224;
							break
						}
					case 2: {
							if (q >>> 0 < 32) {
								db = q;
								eb = ja;
								fb = ka;
								gb = ma;
								ta = 47
							} else {
								hc = ja;
								ic = ka;
								jc = ma;
								ta = 49
							}
							break
						}
					case 8: {
							kc = q;
							lc = ja;
							mc = ka;
							nc = ma;
							ta = 109;
							break
						}
					case 12: {
							oc = q;
							pc = ja;
							qc = ka;
							rc = ma;
							ta = 125;
							break
						}
					case 27: {
							sc = q;
							tc = ja;
							uc = ka;
							vc = ma;
							wc = o;
							ta = 273;
							break
						}
					case 25: {
							if (!la) {
								xc = q;
								yc = ja;
								zc = ka;
								Ac = 0;
								Bc = ma;
								Cc = n;
								ta = 281;
								break a
							}
							HEAP8[r >> 0] = HEAP32[F >> 2];
							HEAP32[l >> 2] = 20;
							Xa = q;
							Ya = ja;
							Za = ka;
							_a = la + -1 | 0;
							$a = ma;
							ab = o;
							bb = r + 1 | 0;
							cb = n;
							break
						}
					case 26: {
							if (HEAP32[w >> 2] | 0) {
								if (q >>> 0 < 32) {
									Ga = q;
									Sa = ja;
									Ha = ka;
									Ea = ma;
									while (1) {
										if (!Sa) {
											Ia = la;
											Ja = Ga;
											Ka = 0;
											La = Ha;
											Ma = Ea;
											Na = o;
											Oa = n;
											break a
										}
										Pa = Sa + -1 | 0;
										Ra = Ea + 1 | 0;
										Qa = (HEAPU8[Ea >> 0] << Ga) + Ha | 0;
										Zb = Ga + 8 | 0;
										if (Zb >>> 0 < 32) {
											Ga = Zb;
											Sa = Pa;
											Ha = Qa;
											Ea = Ra
										} else {
											Dc = Zb;
											Ec = Pa;
											Fc = Qa;
											Gc = Ra;
											break
										}
									}
								} else {
									Dc = q;
									Ec = ja;
									Fc = ka;
									Gc = ma
								}
								Ea = o - la | 0;
								HEAP32[X >> 2] = (HEAP32[X >> 2] | 0) + Ea;
								HEAP32[Y >> 2] = (HEAP32[Y >> 2] | 0) + Ea;
								if ((o | 0) != (la | 0)) {
									Ha = HEAP32[x >> 2] | 0;
									Sa = r + (0 - Ea) | 0;
									if (!(HEAP32[z >> 2] | 0))
										Hc = rk(Ha, Sa, Ea) | 0;
									else
										Hc = sk(Ha, Sa, Ea) | 0;
									HEAP32[x >> 2] = Hc;
									HEAP32[E >> 2] = Hc
								}
								if (!(HEAP32[z >> 2] | 0))
									Ic = jy(Fc | 0) | 0;
								else
									Ic = Fc;
								if ((Ic | 0) == (HEAP32[x >> 2] | 0)) {
									Jc = 0;
									Kc = Ec;
									Lc = 0;
									Mc = Gc;
									Nc = la
								} else {
									HEAP32[B >> 2] = 38832;
									HEAP32[l >> 2] = 29;
									Xa = Dc;
									Ya = Ec;
									Za = Fc;
									_a = la;
									$a = Gc;
									ab = la;
									bb = r;
									cb = n;
									break b
								}
							} else {
								Jc = q;
								Kc = ja;
								Lc = ka;
								Mc = ma;
								Nc = o
							}
							HEAP32[l >> 2] = 27;
							sc = Jc;
							tc = Kc;
							uc = Lc;
							vc = Mc;
							wc = Nc;
							ta = 273;
							break
						}
					case 28: {
							xc = q;
							yc = ja;
							zc = ka;
							Ac = la;
							Bc = ma;
							Cc = 1;
							ta = 281;
							break a;
							break
						}
					case 29: {
							Ia = la;
							Ja = q;
							Ka = ja;
							La = ka;
							Ma = ma;
							Na = o;
							Oa = -3;
							break a;
							break
						}
					case 30: {
							ta = 297;
							break a;
							break
						}
					case 7: {
							Oc = q;
							Pc = ja;
							Qc = ka;
							Rc = ma;
							ta = 96;
							break
						}
					case 14: {
							Sc = q;
							Tc = ja;
							Uc = ka;
							Vc = ma;
							ta = 143;
							break
						}
					case 13: {
							Ea = q & 7;
							Sa = ka >>> Ea;
							Ha = q - Ea | 0;
							if (Ha >>> 0 < 32) {
								Ea = Ha;
								Ga = ja;
								Fa = Sa;
								Ra = ma;
								while (1) {
									if (!Ga) {
										Ia = la;
										Ja = Ea;
										Ka = 0;
										La = Fa;
										Ma = Ra;
										Na = o;
										Oa = n;
										break a
									}
									Qa = Ga + -1 | 0;
									Pa = Ra + 1 | 0;
									Zb = (HEAPU8[Ra >> 0] << Ea) + Fa | 0;
									Wc = Ea + 8 | 0;
									if (Wc >>> 0 < 32) {
										Ea = Wc;
										Ga = Qa;
										Fa = Zb;
										Ra = Pa
									} else {
										Xc = Wc;
										Yc = Qa;
										Zc = Zb;
										_c = Pa;
										break
									}
								}
							} else {
								Xc = Ha;
								Yc = ja;
								Zc = Sa;
								_c = ma
							}
							Ra = Zc & 65535;
							if ((Ra | 0) == (Zc >>> 16 ^ 65535 | 0)) {
								HEAP32[F >> 2] = Ra;
								HEAP32[l >> 2] = 14;
								if (N) {
									xc = 0;
									yc = Yc;
									zc = 0;
									Ac = la;
									Bc = _c;
									Cc = n;
									ta = 281;
									break a
								} else {
									Sc = 0;
									Tc = Yc;
									Uc = 0;
									Vc = _c;
									ta = 143;
									break b
								}
							} else {
								HEAP32[B >> 2] = 38512;
								HEAP32[l >> 2] = 29;
								Xa = Xc;
								Ya = Yc;
								Za = Zc;
								_a = la;
								$a = _c;
								ab = o;
								bb = r;
								cb = n;
								break b
							}
							break
						}
					case 11: {
							$c = q;
							ad = ja;
							bd = ka;
							cd = ma;
							ta = 124;
							break
						}
					case 3: {
							if (q >>> 0 < 16) {
								dd = q;
								ed = ja;
								fd = ka;
								gd = ma;
								ta = 55
							} else {
								hd = ja;
								id = ka;
								jd = ma;
								ta = 57
							}
							break
						}
					case 17: {
							Ra = HEAP32[aa >> 2] | 0;
							if (Ra >>> 0 < (c[$ >> 2] | 0) >>> 0) {
								Ub = Ra;
								Vb = q;
								Wb = ja;
								Xb = ka;
								Yb = ma;
								ta = 154
							} else {
								kd = Ra;
								ld = q;
								md = ja;
								nd = ka;
								od = ma;
								ta = 158
							}
							break
						}
					case 24: {
							pd = q;
							qd = ja;
							rd = ka;
							sd = ma;
							td = n;
							ta = 242;
							break
						}
					case 10: {
							Mb = q;
							Nb = ja;
							Ob = ka;
							Pb = ma;
							ta = 121;
							break
						}
					default: {
							k = -2;
							ta = 298;
							break a
						}
					}
				while (0);
				if ((ta | 0) == 47)
					while (1) {
						ta = 0;
						if (!eb) {
							Ia = la;
							Ja = db;
							Ka = 0;
							La = fb;
							Ma = gb;
							Na = o;
							Oa = n;
							break a
						}
						Ra = eb + -1 | 0;
						Fa = gb + 1 | 0;
						Ga = (HEAPU8[gb >> 0] << db) + fb | 0;
						db = db + 8 | 0;
						if (db >>> 0 >= 32) {
							hc = Ra;
							ic = Ga;
							jc = Fa;
							ta = 49;
							break
						} else {
							eb = Ra;
							fb = Ga;
							gb = Fa;
							ta = 47
						}
					}
				else if ((ta | 0) == 121) {
					ta = 0;
					if (!(HEAP32[G >> 2] | 0)) {
						ta = 122;
						break
					}
					Fa = rk(0, 0, 0) | 0;
					HEAP32[x >> 2] = Fa;
					HEAP32[E >> 2] = Fa;
					HEAP32[l >> 2] = 11;
					$c = Mb;
					ad = Nb;
					bd = Ob;
					cd = Pb;
					ta = 124
				} else if ((ta | 0) == 143) {
					ta = 0;
					HEAP32[l >> 2] = 15;
					vb = Sc;
					wb = Tc;
					xb = Uc;
					yb = Vc;
					ta = 144
				} else if ((ta | 0) == 154)
					while (1) {
						ta = 0;
						if (Vb >>> 0 < 3) {
							Fa = Vb;
							Ga = Wb;
							Ra = Xb;
							Ea = Yb;
							while (1) {
								if (!Ga) {
									Ia = la;
									Ja = Fa;
									Ka = 0;
									La = Ra;
									Ma = Ea;
									Na = o;
									Oa = n;
									break a
								}
								Pa = Ga + -1 | 0;
								Zb = Ea + 1 | 0;
								Qa = (HEAPU8[Ea >> 0] << Fa) + Ra | 0;
								Wc = Fa + 8 | 0;
								if (Wc >>> 0 < 3) {
									Fa = Wc;
									Ga = Pa;
									Ra = Qa;
									Ea = Zb
								} else {
									ud = Wc;
									vd = Pa;
									wd = Qa;
									xd = Zb;
									break
								}
							}
						} else {
							ud = Vb;
							vd = Wb;
							wd = Xb;
							xd = Yb
						}
						HEAP32[aa >> 2] = Ub + 1;
						HEAP16[l + (HEAPU16[38312 + (Ub << 1) >> 1] << 1) + 112 >> 1] = wd & 7;
						Ea = wd >>> 3;
						Ra = ud + -3 | 0;
						Ga = HEAP32[aa >> 2] | 0;
						if (Ga >>> 0 < (c[$ >> 2] | 0) >>> 0) {
							Ub = Ga;
							Vb = Ra;
							Wb = vd;
							Xb = Ea;
							Yb = xd;
							ta = 154
						} else {
							kd = Ga;
							ld = Ra;
							md = vd;
							nd = Ea;
							od = xd;
							ta = 158;
							break
						}
					}
				else if ((ta | 0) == 273) {
					ta = 0;
					if (!(HEAP32[w >> 2] | 0)) {
						yd = sc;
						zd = tc;
						Ad = uc;
						Bd = vc;
						ta = 280;
						break
					}
					if (!(HEAP32[z >> 2] | 0)) {
						yd = sc;
						zd = tc;
						Ad = uc;
						Bd = vc;
						ta = 280;
						break
					}
					if (sc >>> 0 < 32) {
						Ea = sc;
						Ra = tc;
						Ga = uc;
						Fa = vc;
						while (1) {
							if (!Ra) {
								Ia = la;
								Ja = Ea;
								Ka = 0;
								La = Ga;
								Ma = Fa;
								Na = wc;
								Oa = n;
								break a
							}
							Sa = Ra + -1 | 0;
							Ha = Fa + 1 | 0;
							Zb = (HEAPU8[Fa >> 0] << Ea) + Ga | 0;
							Qa = Ea + 8 | 0;
							if (Qa >>> 0 < 32) {
								Ea = Qa;
								Ra = Sa;
								Ga = Zb;
								Fa = Ha
							} else {
								Cd = Qa;
								Dd = Sa;
								Ed = Zb;
								Fd = Ha;
								break
							}
						}
					} else {
						Cd = sc;
						Dd = tc;
						Ed = uc;
						Fd = vc
					}
					if ((Ed | 0) == (HEAP32[Y >> 2] | 0)) {
						yd = 0;
						zd = Dd;
						Ad = 0;
						Bd = Fd;
						ta = 280;
						break
					}
					HEAP32[B >> 2] = 38856;
					HEAP32[l >> 2] = 29;
					Xa = Cd;
					Ya = Dd;
					Za = Ed;
					_a = la;
					$a = Fd;
					ab = wc;
					bb = r;
					cb = n
				}
				do
					if ((ta | 0) == 49) {
						ta = 0;
						Fa = HEAP32[A >> 2] | 0;
						if (Fa)
							HEAP32[Fa + 4 >> 2] = ic;
						if (HEAP32[z >> 2] & 512) {
							HEAP8[j >> 0] = ic;
							HEAP8[y >> 0] = ic >>> 8;
							HEAP8[ga >> 0] = ic >>> 16;
							HEAP8[ha >> 0] = ic >>> 24;
							HEAP32[x >> 2] = sk(HEAP32[x >> 2] | 0, j, 4) | 0
						}
						HEAP32[l >> 2] = 3;
						dd = 0;
						ed = hc;
						fd = 0;
						gd = jc;
						ta = 55
					} else if ((ta | 0) == 124) {
						ta = 0;
						if (H) {
							xc = $c;
							yc = ad;
							zc = bd;
							Ac = la;
							Bc = cd;
							Cc = n;
							ta = 281;
							break a
						} else {
							oc = $c;
							pc = ad;
							qc = bd;
							rc = cd;
							ta = 125
						}
					} else if ((ta | 0) == 144) {
						ta = 0;
						Fa = HEAP32[F >> 2] | 0;
						if (!Fa) {
							HEAP32[l >> 2] = 11;
							Xa = vb;
							Ya = wb;
							Za = xb;
							_a = la;
							$a = yb;
							ab = o;
							bb = r;
							cb = n;
							break
						}
						Ga = Fa >>> 0 > wb >>> 0 ? wb : Fa;
						Fa = Ga >>> 0 > la >>> 0 ? la : Ga;
						if (!Fa) {
							xc = vb;
							yc = wb;
							zc = xb;
							Ac = la;
							Bc = yb;
							Cc = n;
							ta = 281;
							break a
						}
						qy(r | 0, yb | 0, Fa | 0) | 0;
						HEAP32[F >> 2] = (HEAP32[F >> 2] | 0) - Fa;
						Xa = vb;
						Ya = wb - Fa | 0;
						Za = xb;
						_a = la - Fa | 0;
						$a = yb + Fa | 0;
						ab = o;
						bb = r + Fa | 0;
						cb = n
					} else if ((ta | 0) == 158) {
						ta = 0;
						if (kd >>> 0 < 19) {
							Fa = kd;
							do {
								HEAP16[l + (HEAPU16[38312 + (Fa << 1) >> 1] << 1) + 112 >> 1] = 0;
								Fa = Fa + 1 | 0
							} while ((Fa | 0) != 19);
							HEAP32[aa >> 2] = 19
						}
						HEAP32[ca >> 2] = ba;
						HEAP32[J >> 2] = ba;
						HEAP32[K >> 2] = 7;
						Fa = Ak(0, da, 19, ca, K, ea) | 0;
						if (!Fa) {
							HEAP32[aa >> 2] = 0;
							HEAP32[l >> 2] = 18;
							zb = 0;
							Ab = ld;
							Bb = md;
							Cb = nd;
							Db = od;
							Eb = 0;
							ta = 164;
							break
						} else {
							HEAP32[B >> 2] = 38584;
							HEAP32[l >> 2] = 29;
							Xa = ld;
							Ya = md;
							Za = nd;
							_a = la;
							$a = od;
							ab = o;
							bb = r;
							cb = Fa;
							break
						}
					}
				while (0);
				c: do
					if ((ta | 0) == 55)
						while (1) {
							ta = 0;
							if (!ed) {
								Ia = la;
								Ja = dd;
								Ka = 0;
								La = fd;
								Ma = gd;
								Na = o;
								Oa = n;
								break a
							}
							Fa = ed + -1 | 0;
							Ga = gd + 1 | 0;
							Ra = (HEAPU8[gd >> 0] << dd) + fd | 0;
							dd = dd + 8 | 0;
							if (dd >>> 0 >= 16) {
								hd = Fa;
								id = Ra;
								jd = Ga;
								ta = 57;
								break
							} else {
								ed = Fa;
								fd = Ra;
								gd = Ga;
								ta = 55
							}
						}
					else if ((ta | 0) == 125) {
						ta = 0;
						if (HEAP32[I >> 2] | 0) {
							Ga = oc & 7;
							HEAP32[l >> 2] = 26;
							Xa = oc - Ga | 0;
							Ya = pc;
							Za = qc >>> Ga;
							_a = la;
							$a = rc;
							ab = o;
							bb = r;
							cb = n;
							break
						}
						if (oc >>> 0 < 3) {
							Ga = oc;
							Ra = pc;
							Fa = qc;
							Ea = rc;
							while (1) {
								if (!Ra) {
									Ia = la;
									Ja = Ga;
									Ka = 0;
									La = Fa;
									Ma = Ea;
									Na = o;
									Oa = n;
									break a
								}
								Ha = Ra + -1 | 0;
								Zb = Ea + 1 | 0;
								Sa = (HEAPU8[Ea >> 0] << Ga) + Fa | 0;
								Qa = Ga + 8 | 0;
								if (Qa >>> 0 < 3) {
									Ga = Qa;
									Ra = Ha;
									Fa = Sa;
									Ea = Zb
								} else {
									Gd = Qa;
									Hd = Ha;
									Id = Sa;
									Jd = Zb;
									break
								}
							}
						} else {
							Gd = oc;
							Hd = pc;
							Id = qc;
							Jd = rc
						}
						HEAP32[I >> 2] = Id & 1;
						Ea = Id >>> 1 & 3;
						if ((Ea | 0) == 2)
							HEAP32[l >> 2] = 16;
						else if ((Ea | 0) == 3) {
							HEAP32[B >> 2] = 38488;
							HEAP32[l >> 2] = 29
						} else if (!Ea)
							HEAP32[l >> 2] = 13;
						else if ((Ea | 0) == 1 ? (HEAP32[J >> 2] = 38880, HEAP32[K >> 2] = 9, HEAP32[L >> 2] = 40928, HEAP32[M >> 2] = 5, HEAP32[l >> 2] = 19, N) : 0) {
							ta = 133;
							break a
						}
						Xa = Gd + -3 | 0;
						Ya = Hd;
						Za = Id >>> 3;
						_a = la;
						$a = Jd;
						ab = o;
						bb = r;
						cb = n
					} else if ((ta | 0) == 164) {
						ta = 0;
						Ea = HEAP32[Z >> 2] | 0;
						Fa = HEAP32[_ >> 2] | 0;
						do
							if (zb >>> 0 < (Fa + Ea | 0) >>> 0) {
								Ra = zb;
								Ga = Ea;
								Zb = Fa;
								Sa = Ab;
								Ha = Bb;
								Qa = Cb;
								Pa = Db;
								d: while (1) {
									Wc = (1 << HEAP32[K >> 2]) + -1 | 0;
									Kd = Wc & Qa;
									Ld = HEAP32[J >> 2] | 0;
									Md = HEAPU8[Ld + (Kd << 2) + 1 >> 0] | 0;
									if (Sa >>> 0 < Md >>> 0) {
										Nd = Sa;
										Od = Ha;
										Pd = Qa;
										Qd = Pa;
										while (1) {
											if (!Od) {
												Ia = la;
												Ja = Nd;
												Ka = 0;
												La = Pd;
												Ma = Qd;
												Na = o;
												Oa = Eb;
												break a
											}
											Rd = Od + -1 | 0;
											Sd = Qd + 1 | 0;
											Td = (HEAPU8[Qd >> 0] << Nd) + Pd | 0;
											Ud = Nd + 8 | 0;
											Vd = Wc & Td;
											Wd = HEAPU8[Ld + (Vd << 2) + 1 >> 0] | 0;
											if (Ud >>> 0 < Wd >>> 0) {
												Nd = Ud;
												Od = Rd;
												Pd = Td;
												Qd = Sd
											} else {
												Xd = Wd;
												Yd = Vd;
												Zd = Ud;
												_d = Rd;
												$d = Td;
												ae = Sd;
												break
											}
										}
									} else {
										Xd = Md;
										Yd = Kd;
										Zd = Sa;
										_d = Ha;
										$d = Qa;
										ae = Pa
									}
									Qd = HEAP16[Ld + (Yd << 2) + 2 >> 1] | 0;
									e: do
										if ((Qd & 65535) < 16) {
											HEAP32[aa >> 2] = Ra + 1;
											HEAP16[l + (Ra << 1) + 112 >> 1] = Qd;
											be = Zd - Xd | 0;
											ce = _d;
											de = $d >>> Xd;
											ee = ae
										} else {
											if (Qd << 16 >> 16 == 16) {
												Pd = Xd + 2 | 0;
												if (Zd >>> 0 < Pd >>> 0) {
													Od = Zd;
													Nd = _d;
													Wc = $d;
													Sd = ae;
													while (1) {
														if (!Nd) {
															Ia = la;
															Ja = Od;
															Ka = 0;
															La = Wc;
															Ma = Sd;
															Na = o;
															Oa = Eb;
															break a
														}
														Td = Nd + -1 | 0;
														Rd = Sd + 1 | 0;
														Ud = (HEAPU8[Sd >> 0] << Od) + Wc | 0;
														Vd = Od + 8 | 0;
														if (Vd >>> 0 < Pd >>> 0) {
															Od = Vd;
															Nd = Td;
															Wc = Ud;
															Sd = Rd
														} else {
															fe = Vd;
															ge = Td;
															he = Ud;
															ie = Rd;
															break
														}
													}
												} else {
													fe = Zd;
													ge = _d;
													he = $d;
													ie = ae
												}
												je = he >>> Xd;
												ke = fe - Xd | 0;
												if (!Ra) {
													ta = 178;
													break d
												}
												le = ke + -2 | 0;
												me = (je & 3) + 3 | 0;
												ne = ge;
												oe = je >>> 2;
												pe = HEAP16[l + (Ra + -1 << 1) + 112 >> 1] | 0;
												qe = ie
											} else if (Qd << 16 >> 16 == 17) {
												Sd = Xd + 3 | 0;
												if (Zd >>> 0 < Sd >>> 0) {
													Wc = Zd;
													Nd = _d;
													Od = $d;
													Pd = ae;
													while (1) {
														if (!Nd) {
															Ia = la;
															Ja = Wc;
															Ka = 0;
															La = Od;
															Ma = Pd;
															Na = o;
															Oa = Eb;
															break a
														}
														Rd = Nd + -1 | 0;
														Ud = Pd + 1 | 0;
														Td = (HEAPU8[Pd >> 0] << Wc) + Od | 0;
														Vd = Wc + 8 | 0;
														if (Vd >>> 0 < Sd >>> 0) {
															Wc = Vd;
															Nd = Rd;
															Od = Td;
															Pd = Ud
														} else {
															re = Vd;
															se = Rd;
															te = Td;
															ue = Ud;
															break
														}
													}
												} else {
													re = Zd;
													se = _d;
													te = $d;
													ue = ae
												}
												Pd = te >>> Xd;
												le = -3 - Xd + re | 0;
												me = (Pd & 7) + 3 | 0;
												ne = se;
												oe = Pd >>> 3;
												pe = 0;
												qe = ue
											} else {
												Pd = Xd + 7 | 0;
												if (Zd >>> 0 < Pd >>> 0) {
													Od = Zd;
													Nd = _d;
													Wc = $d;
													Sd = ae;
													while (1) {
														if (!Nd) {
															Ia = la;
															Ja = Od;
															Ka = 0;
															La = Wc;
															Ma = Sd;
															Na = o;
															Oa = Eb;
															break a
														}
														Ud = Nd + -1 | 0;
														Td = Sd + 1 | 0;
														Rd = (HEAPU8[Sd >> 0] << Od) + Wc | 0;
														Vd = Od + 8 | 0;
														if (Vd >>> 0 < Pd >>> 0) {
															Od = Vd;
															Nd = Ud;
															Wc = Rd;
															Sd = Td
														} else {
															ve = Vd;
															we = Ud;
															xe = Rd;
															ye = Td;
															break
														}
													}
												} else {
													ve = Zd;
													we = _d;
													xe = $d;
													ye = ae
												}
												Sd = xe >>> Xd;
												le = -7 - Xd + ve | 0;
												me = (Sd & 127) + 11 | 0;
												ne = we;
												oe = Sd >>> 7;
												pe = 0;
												qe = ye
											}
											if ((Ra + me | 0) >>> 0 > (Zb + Ga | 0) >>> 0) {
												ta = 187;
												break d
											} else {
												ze = Ra;
												Ae = me
											}
											while (1) {
												Sd = Ae + -1 | 0;
												HEAP32[aa >> 2] = ze + 1;
												HEAP16[l + (ze << 1) + 112 >> 1] = pe;
												if (!Sd) {
													be = le;
													ce = ne;
													de = oe;
													ee = qe;
													break e
												}
												ze = HEAP32[aa >> 2] | 0;
												Ae = Sd
											}
										}
									while (0);
									Ra = HEAP32[aa >> 2] | 0;
									Ga = HEAP32[Z >> 2] | 0;
									Zb = HEAP32[_ >> 2] | 0;
									if (Ra >>> 0 >= (Zb + Ga | 0) >>> 0) {
										ta = 190;
										break
									} else {
										Sa = be;
										Ha = ce;
										Qa = de;
										Pa = ee
									}
								}
								if ((ta | 0) == 178) {
									ta = 0;
									HEAP32[B >> 2] = 38616;
									HEAP32[l >> 2] = 29;
									Xa = ke;
									Ya = ge;
									Za = je;
									_a = la;
									$a = ie;
									ab = o;
									bb = r;
									cb = Eb;
									break c
								} else if ((ta | 0) == 187) {
									ta = 0;
									HEAP32[B >> 2] = 38616;
									HEAP32[l >> 2] = 29;
									Xa = le;
									Ya = ne;
									Za = oe;
									_a = la;
									$a = qe;
									ab = o;
									bb = r;
									cb = Eb;
									break c
								} else if ((ta | 0) == 190) {
									ta = 0;
									if ((HEAP32[l >> 2] | 0) == 29) {
										Xa = be;
										Ya = ce;
										Za = de;
										_a = la;
										$a = ee;
										ab = o;
										bb = r;
										cb = Eb;
										break c
									} else {
										Be = Ga;
										Ce = be;
										De = ce;
										Ee = de;
										Fe = ee;
										break
									}
								}
							} else {
								Be = Ea;
								Ce = Ab;
								De = Bb;
								Ee = Cb;
								Fe = Db
							}
						while (0);
						if (!(HEAP16[fa >> 1] | 0)) {
							HEAP32[B >> 2] = 38648;
							HEAP32[l >> 2] = 29;
							Xa = Ce;
							Ya = De;
							Za = Ee;
							_a = la;
							$a = Fe;
							ab = o;
							bb = r;
							cb = Eb;
							break
						}
						HEAP32[ca >> 2] = ba;
						HEAP32[J >> 2] = ba;
						HEAP32[K >> 2] = 9;
						Ea = Ak(1, da, Be, ca, K, ea) | 0;
						if (Ea) {
							HEAP32[B >> 2] = 38688;
							HEAP32[l >> 2] = 29;
							Xa = Ce;
							Ya = De;
							Za = Ee;
							_a = la;
							$a = Fe;
							ab = o;
							bb = r;
							cb = Ea;
							break
						}
						HEAP32[L >> 2] = HEAP32[ca >> 2];
						HEAP32[M >> 2] = 6;
						Ea = Ak(2, l + (HEAP32[Z >> 2] << 1) + 112 | 0, HEAP32[_ >> 2] | 0, ca, M, ea) | 0;
						if (!Ea) {
							HEAP32[l >> 2] = 19;
							if (N) {
								xc = Ce;
								yc = De;
								zc = Ee;
								Ac = la;
								Bc = Fe;
								Cc = 0;
								ta = 281;
								break a
							} else {
								lb = Ce;
								mb = De;
								nb = Ee;
								ob = Fe;
								pb = 0;
								ta = 198;
								break
							}
						} else {
							HEAP32[B >> 2] = 38720;
							HEAP32[l >> 2] = 29;
							Xa = Ce;
							Ya = De;
							Za = Ee;
							_a = la;
							$a = Fe;
							ab = o;
							bb = r;
							cb = Ea;
							break
						}
					}
				while (0);
				if ((ta | 0) == 57) {
					ta = 0;
					Ea = HEAP32[A >> 2] | 0;
					if (Ea) {
						HEAP32[Ea + 8 >> 2] = id & 255;
						HEAP32[Ea + 12 >> 2] = id >>> 8
					}
					if (HEAP32[z >> 2] & 512) {
						HEAP8[j >> 0] = id;
						HEAP8[y >> 0] = id >>> 8;
						HEAP32[x >> 2] = sk(HEAP32[x >> 2] | 0, j, 2) | 0
					}
					HEAP32[l >> 2] = 4;
					Aa = 0;
					Ba = hd;
					Ca = 0;
					Da = jd;
					ta = 62
				} else if ((ta | 0) == 198) {
					ta = 0;
					HEAP32[l >> 2] = 20;
					qb = lb;
					rb = mb;
					sb = nb;
					tb = ob;
					ub = pb;
					ta = 199
				}
				do
					if ((ta | 0) == 62) {
						ta = 0;
						Ea = HEAP32[z >> 2] | 0;
						if (!(Ea & 1024)) {
							Fa = HEAP32[A >> 2] | 0;
							if (!Fa) {
								Ge = Aa;
								He = Ba;
								Ie = Ca;
								Je = Da
							} else {
								HEAP32[Fa + 16 >> 2] = 0;
								Ge = Aa;
								He = Ba;
								Ie = Ca;
								Je = Da
							}
						} else {
							if (Aa >>> 0 < 16) {
								Fa = Aa;
								Pa = Ba;
								Qa = Ca;
								Ha = Da;
								while (1) {
									if (!Pa) {
										Ia = la;
										Ja = Fa;
										Ka = 0;
										La = Qa;
										Ma = Ha;
										Na = o;
										Oa = n;
										break a
									}
									Sa = Pa + -1 | 0;
									Zb = Ha + 1 | 0;
									Ra = (HEAPU8[Ha >> 0] << Fa) + Qa | 0;
									Fa = Fa + 8 | 0;
									if (Fa >>> 0 >= 16) {
										Ke = Sa;
										Le = Ra;
										Me = Zb;
										break
									} else {
										Pa = Sa;
										Qa = Ra;
										Ha = Zb
									}
								}
							} else {
								Ke = Ba;
								Le = Ca;
								Me = Da
							}
							HEAP32[F >> 2] = Le;
							Ha = HEAP32[A >> 2] | 0;
							if (Ha)
								HEAP32[Ha + 20 >> 2] = Le;
							if (!(Ea & 512)) {
								Ge = 0;
								He = Ke;
								Ie = 0;
								Je = Me
							} else {
								HEAP8[j >> 0] = Le;
								HEAP8[y >> 0] = Le >>> 8;
								HEAP32[x >> 2] = sk(HEAP32[x >> 2] | 0, j, 2) | 0;
								Ge = 0;
								He = Ke;
								Ie = 0;
								Je = Me
							}
						}
						HEAP32[l >> 2] = 5;
						Fb = Ge;
						Gb = He;
						Hb = Ie;
						Ib = Je;
						ta = 73
					} else if ((ta | 0) == 199) {
						ta = 0;
						if (rb >>> 0 > 5 & la >>> 0 > 257) {
							HEAP32[m >> 2] = r;
							HEAP32[p >> 2] = la;
							HEAP32[f >> 2] = tb;
							HEAP32[s >> 2] = rb;
							HEAP32[u >> 2] = sb;
							HEAP32[v >> 2] = qb;
							Dk(f, o);
							Ha = HEAP32[m >> 2] | 0;
							Qa = HEAP32[p >> 2] | 0;
							Pa = HEAP32[f >> 2] | 0;
							Fa = HEAP32[s >> 2] | 0;
							Zb = HEAP32[u >> 2] | 0;
							Ra = HEAP32[v >> 2] | 0;
							if ((HEAP32[l >> 2] | 0) != 11) {
								Xa = Ra;
								Ya = Fa;
								Za = Zb;
								_a = Qa;
								$a = Pa;
								ab = o;
								bb = Ha;
								cb = ub;
								break
							}
							HEAP32[O >> 2] = -1;
							Xa = Ra;
							Ya = Fa;
							Za = Zb;
							_a = Qa;
							$a = Pa;
							ab = o;
							bb = Ha;
							cb = ub;
							break
						}
						HEAP32[O >> 2] = 0;
						Ha = (1 << HEAP32[K >> 2]) + -1 | 0;
						Pa = Ha & sb;
						Qa = HEAP32[J >> 2] | 0;
						Zb = HEAP8[Qa + (Pa << 2) + 1 >> 0] | 0;
						Fa = Zb & 255;
						if (Fa >>> 0 > qb >>> 0) {
							Ra = qb;
							Sa = rb;
							Qd = sb;
							Ld = tb;
							while (1) {
								if (!Sa) {
									Ia = la;
									Ja = Ra;
									Ka = 0;
									La = Qd;
									Ma = Ld;
									Na = o;
									Oa = ub;
									break a
								}
								Kd = Sa + -1 | 0;
								Md = Ld + 1 | 0;
								Sd = (HEAPU8[Ld >> 0] << Ra) + Qd | 0;
								Wc = Ra + 8 | 0;
								Nd = Ha & Sd;
								Od = HEAP8[Qa + (Nd << 2) + 1 >> 0] | 0;
								Pd = Od & 255;
								if (Pd >>> 0 > Wc >>> 0) {
									Ra = Wc;
									Sa = Kd;
									Qd = Sd;
									Ld = Md
								} else {
									Ne = Od;
									Oe = Pd;
									Pe = Nd;
									Qe = Wc;
									Re = Kd;
									Se = Sd;
									Te = Md;
									break
								}
							}
						} else {
							Ne = Zb;
							Oe = Fa;
							Pe = Pa;
							Qe = qb;
							Re = rb;
							Se = sb;
							Te = tb
						}
						Ld = HEAP8[Qa + (Pe << 2) >> 0] | 0;
						Qd = HEAP16[Qa + (Pe << 2) + 2 >> 1] | 0;
						Sa = Ld & 255;
						if (Ld << 24 >> 24 != 0 & (Sa & 240 | 0) == 0) {
							Ra = Qd & 65535;
							Ha = (1 << Oe + Sa) + -1 | 0;
							Sa = ((Se & Ha) >>> Oe) + Ra | 0;
							Ea = HEAP8[Qa + (Sa << 2) + 1 >> 0] | 0;
							if (((Ea & 255) + Oe | 0) >>> 0 > Qe >>> 0) {
								Md = Qe;
								Sd = Re;
								Kd = Se;
								Wc = Te;
								while (1) {
									if (!Sd) {
										Ia = la;
										Ja = Md;
										Ka = 0;
										La = Kd;
										Ma = Wc;
										Na = o;
										Oa = ub;
										break a
									}
									Nd = Sd + -1 | 0;
									Pd = Wc + 1 | 0;
									Od = (HEAPU8[Wc >> 0] << Md) + Kd | 0;
									Td = Md + 8 | 0;
									Rd = ((Od & Ha) >>> Oe) + Ra | 0;
									Ud = HEAP8[Qa + (Rd << 2) + 1 >> 0] | 0;
									if (((Ud & 255) + Oe | 0) >>> 0 > Td >>> 0) {
										Md = Td;
										Sd = Nd;
										Kd = Od;
										Wc = Pd
									} else {
										Ue = Rd;
										Ve = Ud;
										We = Td;
										Xe = Nd;
										Ye = Od;
										Ze = Pd;
										break
									}
								}
							} else {
								Ue = Sa;
								Ve = Ea;
								We = Qe;
								Xe = Re;
								Ye = Se;
								Ze = Te
							}
							Wc = HEAP16[Qa + (Ue << 2) + 2 >> 1] | 0;
							Kd = HEAP8[Qa + (Ue << 2) >> 0] | 0;
							HEAP32[O >> 2] = Oe;
							_e = Oe;
							$e = We - Oe | 0;
							af = Xe;
							bf = Kd;
							cf = Ve;
							df = Wc;
							ef = Ye >>> Oe;
							ff = Ze
						} else {
							_e = 0;
							$e = Qe;
							af = Re;
							bf = Ld;
							cf = Ne;
							df = Qd;
							ef = Se;
							ff = Te
						}
						Wc = cf & 255;
						Kd = ef >>> Wc;
						Sd = $e - Wc | 0;
						HEAP32[O >> 2] = _e + Wc;
						HEAP32[F >> 2] = df & 65535;
						Wc = bf & 255;
						if (!(bf << 24 >> 24)) {
							HEAP32[l >> 2] = 25;
							Xa = Sd;
							Ya = af;
							Za = Kd;
							_a = la;
							$a = ff;
							ab = o;
							bb = r;
							cb = ub;
							break
						}
						if (Wc & 32) {
							HEAP32[O >> 2] = -1;
							HEAP32[l >> 2] = 11;
							Xa = Sd;
							Ya = af;
							Za = Kd;
							_a = la;
							$a = ff;
							ab = o;
							bb = r;
							cb = ub;
							break
						}
						if (!(Wc & 64)) {
							Md = Wc & 15;
							HEAP32[P >> 2] = Md;
							HEAP32[l >> 2] = 21;
							ua = Md;
							va = Sd;
							wa = af;
							xa = Kd;
							ya = ff;
							za = ub;
							ta = 217;
							break
						} else {
							HEAP32[B >> 2] = 38744;
							HEAP32[l >> 2] = 29;
							Xa = Sd;
							Ya = af;
							Za = Kd;
							_a = la;
							$a = ff;
							ab = o;
							bb = r;
							cb = ub;
							break
						}
					}
				while (0);
				if ((ta | 0) == 73) {
					ta = 0;
					Kd = HEAP32[z >> 2] | 0;
					if (Kd & 1024) {
						Sd = HEAP32[F >> 2] | 0;
						Md = Sd >>> 0 > Gb >>> 0 ? Gb : Sd;
						if (!Md) {
							gf = Sd;
							hf = Gb;
							jf = Ib
						} else {
							Wc = HEAP32[A >> 2] | 0;
							if ((Wc | 0) != 0 ? (Ra = HEAP32[Wc + 16 >> 2] | 0, (Ra | 0) != 0) : 0) {
								Ha = (HEAP32[Wc + 20 >> 2] | 0) - Sd | 0;
								Sd = HEAP32[Wc + 24 >> 2] | 0;
								qy(Ra + Ha | 0, Ib | 0, ((Ha + Md | 0) >>> 0 > Sd >>> 0 ? Sd - Ha | 0 : Md) | 0) | 0;
								kf = HEAP32[z >> 2] | 0
							} else
								kf = Kd;
							if (kf & 512)
								HEAP32[x >> 2] = sk(HEAP32[x >> 2] | 0, Ib, Md) | 0;
							Kd = (HEAP32[F >> 2] | 0) - Md | 0;
							HEAP32[F >> 2] = Kd;
							gf = Kd;
							hf = Gb - Md | 0;
							jf = Ib + Md | 0
						}
						if (!gf) {
							lf = hf;
							mf = jf
						} else {
							xc = Fb;
							yc = hf;
							zc = Hb;
							Ac = la;
							Bc = jf;
							Cc = n;
							ta = 281;
							break
						}
					} else {
						lf = Gb;
						mf = Ib
					}
					HEAP32[F >> 2] = 0;
					HEAP32[l >> 2] = 6;
					hb = Fb;
					ib = lf;
					jb = Hb;
					kb = mf;
					ta = 83
				} else if ((ta | 0) == 217) {
					ta = 0;
					if (!ua) {
						nf = HEAP32[F >> 2] | 0;
						of = va;
						pf = wa;
						qf = xa;
						rf = ya
					} else {
						if (va >>> 0 < ua >>> 0) {
							Md = va;
							Kd = wa;
							Ha = xa;
							Sd = ya;
							while (1) {
								if (!Kd) {
									Ia = la;
									Ja = Md;
									Ka = 0;
									La = Ha;
									Ma = Sd;
									Na = o;
									Oa = za;
									break a
								}
								Ra = Kd + -1 | 0;
								Wc = Sd + 1 | 0;
								Pa = (HEAPU8[Sd >> 0] << Md) + Ha | 0;
								Fa = Md + 8 | 0;
								if (Fa >>> 0 < ua >>> 0) {
									Md = Fa;
									Kd = Ra;
									Ha = Pa;
									Sd = Wc
								} else {
									sf = Fa;
									tf = Ra;
									uf = Pa;
									vf = Wc;
									break
								}
							}
						} else {
							sf = va;
							tf = wa;
							uf = xa;
							vf = ya
						}
						Sd = (HEAP32[F >> 2] | 0) + ((1 << ua) + -1 & uf) | 0;
						HEAP32[F >> 2] = Sd;
						HEAP32[O >> 2] = (HEAP32[O >> 2] | 0) + ua;
						nf = Sd;
						of = sf - ua | 0;
						pf = tf;
						qf = uf >>> ua;
						rf = vf
					}
					HEAP32[Q >> 2] = nf;
					HEAP32[l >> 2] = 22;
					cc = of;
					dc = pf;
					ec = qf;
					fc = rf;
					gc = za;
					ta = 224
				}
				do
					if ((ta | 0) == 83) {
						ta = 0;
						if (!(HEAP32[z >> 2] & 2048)) {
							Sd = HEAP32[A >> 2] | 0;
							if (!Sd) {
								wf = ib;
								xf = kb
							} else {
								HEAP32[Sd + 28 >> 2] = 0;
								wf = ib;
								xf = kb
							}
						} else {
							if (!ib) {
								xc = hb;
								yc = 0;
								zc = jb;
								Ac = la;
								Bc = kb;
								Cc = n;
								ta = 281;
								break a
							} else
								yf = 0;
							do {
								Sd = yf;
								yf = yf + 1 | 0;
								Ha = HEAP8[kb + Sd >> 0] | 0;
								Sd = HEAP32[A >> 2] | 0;
								if (((Sd | 0) != 0 ? (Kd = HEAP32[Sd + 28 >> 2] | 0, (Kd | 0) != 0) : 0) ? (Md = HEAP32[F >> 2] | 0, Md >>> 0 < (HEAP32[Sd + 32 >> 2] | 0) >>> 0) : 0) {
									HEAP32[F >> 2] = Md + 1;
									HEAP8[Kd + Md >> 0] = Ha
								}
								zf = Ha << 24 >> 24 != 0
							} while (zf & ib >>> 0 > yf >>> 0);
							if (HEAP32[z >> 2] & 512)
								HEAP32[x >> 2] = sk(HEAP32[x >> 2] | 0, kb, yf) | 0;
							Qd = ib - yf | 0;
							Ld = kb + yf | 0;
							if (zf) {
								xc = hb;
								yc = Qd;
								zc = jb;
								Ac = la;
								Bc = Ld;
								Cc = n;
								ta = 281;
								break a
							} else {
								wf = Qd;
								xf = Ld
							}
						}
						HEAP32[F >> 2] = 0;
						HEAP32[l >> 2] = 7;
						Oc = hb;
						Pc = wf;
						Qc = jb;
						Rc = xf;
						ta = 96
					} else if ((ta | 0) == 224) {
						ta = 0;
						Ld = (1 << HEAP32[M >> 2]) + -1 | 0;
						Qd = Ld & ec;
						Qa = HEAP32[L >> 2] | 0;
						Ea = HEAP8[Qa + (Qd << 2) + 1 >> 0] | 0;
						Sa = Ea & 255;
						if (Sa >>> 0 > cc >>> 0) {
							Ha = cc;
							Md = dc;
							Kd = ec;
							Sd = fc;
							while (1) {
								if (!Md) {
									Ia = la;
									Ja = Ha;
									Ka = 0;
									La = Kd;
									Ma = Sd;
									Na = o;
									Oa = gc;
									break a
								}
								Wc = Md + -1 | 0;
								Pa = Sd + 1 | 0;
								Ra = (HEAPU8[Sd >> 0] << Ha) + Kd | 0;
								Fa = Ha + 8 | 0;
								Zb = Ld & Ra;
								Pd = HEAP8[Qa + (Zb << 2) + 1 >> 0] | 0;
								Od = Pd & 255;
								if (Od >>> 0 > Fa >>> 0) {
									Ha = Fa;
									Md = Wc;
									Kd = Ra;
									Sd = Pa
								} else {
									Af = Pd;
									Bf = Od;
									Cf = Zb;
									Df = Fa;
									Ef = Wc;
									Ff = Ra;
									Gf = Pa;
									break
								}
							}
						} else {
							Af = Ea;
							Bf = Sa;
							Cf = Qd;
							Df = cc;
							Ef = dc;
							Ff = ec;
							Gf = fc
						}
						Sd = HEAP8[Qa + (Cf << 2) >> 0] | 0;
						Kd = HEAP16[Qa + (Cf << 2) + 2 >> 1] | 0;
						Md = Sd & 255;
						if (!(Md & 240)) {
							Ha = Kd & 65535;
							Ld = (1 << Bf + Md) + -1 | 0;
							Md = ((Ff & Ld) >>> Bf) + Ha | 0;
							Pa = HEAP8[Qa + (Md << 2) + 1 >> 0] | 0;
							if (((Pa & 255) + Bf | 0) >>> 0 > Df >>> 0) {
								Ra = Df;
								Wc = Ef;
								Fa = Ff;
								Zb = Gf;
								while (1) {
									if (!Wc) {
										Ia = la;
										Ja = Ra;
										Ka = 0;
										La = Fa;
										Ma = Zb;
										Na = o;
										Oa = gc;
										break a
									}
									Od = Wc + -1 | 0;
									Pd = Zb + 1 | 0;
									Nd = (HEAPU8[Zb >> 0] << Ra) + Fa | 0;
									Td = Ra + 8 | 0;
									Ud = ((Nd & Ld) >>> Bf) + Ha | 0;
									Rd = HEAP8[Qa + (Ud << 2) + 1 >> 0] | 0;
									if (((Rd & 255) + Bf | 0) >>> 0 > Td >>> 0) {
										Ra = Td;
										Wc = Od;
										Fa = Nd;
										Zb = Pd
									} else {
										Hf = Ud;
										If = Rd;
										Jf = Td;
										Kf = Od;
										Lf = Nd;
										Mf = Pd;
										break
									}
								}
							} else {
								Hf = Md;
								If = Pa;
								Jf = Df;
								Kf = Ef;
								Lf = Ff;
								Mf = Gf
							}
							Zb = HEAP16[Qa + (Hf << 2) + 2 >> 1] | 0;
							Fa = HEAP8[Qa + (Hf << 2) >> 0] | 0;
							Wc = (HEAP32[O >> 2] | 0) + Bf | 0;
							HEAP32[O >> 2] = Wc;
							Nf = Wc;
							Of = Jf - Bf | 0;
							Pf = Kf;
							Qf = Fa;
							Rf = If;
							Sf = Zb;
							Tf = Lf >>> Bf;
							Uf = Mf
						} else {
							Nf = HEAP32[O >> 2] | 0;
							Of = Df;
							Pf = Ef;
							Qf = Sd;
							Rf = Af;
							Sf = Kd;
							Tf = Ff;
							Uf = Gf
						}
						Zb = Rf & 255;
						Fa = Tf >>> Zb;
						Wc = Of - Zb | 0;
						HEAP32[O >> 2] = Nf + Zb;
						Zb = Qf & 255;
						if (!(Zb & 64)) {
							HEAP32[R >> 2] = Sf & 65535;
							Ra = Zb & 15;
							HEAP32[P >> 2] = Ra;
							HEAP32[l >> 2] = 23;
							na = Ra;
							oa = Wc;
							pa = Pf;
							qa = Fa;
							ra = Uf;
							sa = gc;
							ta = 236;
							break
						} else {
							HEAP32[B >> 2] = 38776;
							HEAP32[l >> 2] = 29;
							Xa = Wc;
							Ya = Pf;
							Za = Fa;
							_a = la;
							$a = Uf;
							ab = o;
							bb = r;
							cb = gc;
							break
						}
					}
				while (0);
				if ((ta | 0) == 96) {
					ta = 0;
					if (!(HEAP32[z >> 2] & 4096)) {
						Fa = HEAP32[A >> 2] | 0;
						if (!Fa) {
							Vf = Pc;
							Wf = Rc
						} else {
							HEAP32[Fa + 36 >> 2] = 0;
							Vf = Pc;
							Wf = Rc
						}
					} else {
						if (!Pc) {
							xc = Oc;
							yc = 0;
							zc = Qc;
							Ac = la;
							Bc = Rc;
							Cc = n;
							ta = 281;
							break
						} else
							Xf = 0;
						do {
							Fa = Xf;
							Xf = Xf + 1 | 0;
							Wc = HEAP8[Rc + Fa >> 0] | 0;
							Fa = HEAP32[A >> 2] | 0;
							if (((Fa | 0) != 0 ? (Ra = HEAP32[Fa + 36 >> 2] | 0, (Ra | 0) != 0) : 0) ? (Zb = HEAP32[F >> 2] | 0, Zb >>> 0 < (HEAP32[Fa + 40 >> 2] | 0) >>> 0) : 0) {
								HEAP32[F >> 2] = Zb + 1;
								HEAP8[Ra + Zb >> 0] = Wc
							}
							Yf = Wc << 24 >> 24 != 0
						} while (Yf & Pc >>> 0 > Xf >>> 0);
						if (HEAP32[z >> 2] & 512)
							HEAP32[x >> 2] = sk(HEAP32[x >> 2] | 0, Rc, Xf) | 0;
						Wc = Pc - Xf | 0;
						Zb = Rc + Xf | 0;
						if (Yf) {
							xc = Oc;
							yc = Wc;
							zc = Qc;
							Ac = la;
							Bc = Zb;
							Cc = n;
							ta = 281;
							break
						} else {
							Vf = Wc;
							Wf = Zb
						}
					}
					HEAP32[l >> 2] = 8;
					kc = Oc;
					lc = Vf;
					mc = Qc;
					nc = Wf;
					ta = 109
				} else if ((ta | 0) == 236) {
					ta = 0;
					if (!na) {
						Zf = oa;
						_f = pa;
						$f = qa;
						ag = ra
					} else {
						if (oa >>> 0 < na >>> 0) {
							Zb = oa;
							Wc = pa;
							Ra = qa;
							Fa = ra;
							while (1) {
								if (!Wc) {
									Ia = la;
									Ja = Zb;
									Ka = 0;
									La = Ra;
									Ma = Fa;
									Na = o;
									Oa = sa;
									break a
								}
								Ha = Wc + -1 | 0;
								Ld = Fa + 1 | 0;
								Qd = (HEAPU8[Fa >> 0] << Zb) + Ra | 0;
								Sa = Zb + 8 | 0;
								if (Sa >>> 0 < na >>> 0) {
									Zb = Sa;
									Wc = Ha;
									Ra = Qd;
									Fa = Ld
								} else {
									bg = Sa;
									cg = Ha;
									dg = Qd;
									eg = Ld;
									break
								}
							}
						} else {
							bg = oa;
							cg = pa;
							dg = qa;
							eg = ra
						}
						HEAP32[R >> 2] = (HEAP32[R >> 2] | 0) + ((1 << na) + -1 & dg);
						HEAP32[O >> 2] = (HEAP32[O >> 2] | 0) + na;
						Zf = bg - na | 0;
						_f = cg;
						$f = dg >>> na;
						ag = eg
					}
					HEAP32[l >> 2] = 24;
					pd = Zf;
					qd = _f;
					rd = $f;
					sd = ag;
					td = sa;
					ta = 242
				}
				do
					if ((ta | 0) == 109) {
						ta = 0;
						Fa = HEAP32[z >> 2] | 0;
						if (Fa & 512) {
							if (kc >>> 0 < 16) {
								Ra = kc;
								Wc = lc;
								Zb = mc;
								Ld = nc;
								while (1) {
									if (!Wc) {
										Ia = la;
										Ja = Ra;
										Ka = 0;
										La = Zb;
										Ma = Ld;
										Na = o;
										Oa = n;
										break a
									}
									Qd = Wc + -1 | 0;
									Ha = Ld + 1 | 0;
									Sa = (HEAPU8[Ld >> 0] << Ra) + Zb | 0;
									Ea = Ra + 8 | 0;
									if (Ea >>> 0 < 16) {
										Ra = Ea;
										Wc = Qd;
										Zb = Sa;
										Ld = Ha
									} else {
										fg = Ea;
										gg = Qd;
										hg = Sa;
										ig = Ha;
										break
									}
								}
							} else {
								fg = kc;
								gg = lc;
								hg = mc;
								ig = nc
							}
							if ((hg | 0) == (HEAP32[x >> 2] & 65535 | 0)) {
								jg = 0;
								kg = gg;
								lg = 0;
								mg = ig
							} else {
								HEAP32[B >> 2] = 38464;
								HEAP32[l >> 2] = 29;
								Xa = fg;
								Ya = gg;
								Za = hg;
								_a = la;
								$a = ig;
								ab = o;
								bb = r;
								cb = n;
								break
							}
						} else {
							jg = kc;
							kg = lc;
							lg = mc;
							mg = nc
						}
						Ld = HEAP32[A >> 2] | 0;
						if (Ld) {
							HEAP32[Ld + 44 >> 2] = Fa >>> 9 & 1;
							HEAP32[Ld + 48 >> 2] = 1
						}
						Ld = sk(0, 0, 0) | 0;
						HEAP32[x >> 2] = Ld;
						HEAP32[E >> 2] = Ld;
						HEAP32[l >> 2] = 11;
						Xa = jg;
						Ya = kg;
						Za = lg;
						_a = la;
						$a = mg;
						ab = o;
						bb = r;
						cb = n
					} else if ((ta | 0) == 242) {
						ta = 0;
						if (!la) {
							xc = pd;
							yc = qd;
							zc = rd;
							Ac = 0;
							Bc = sd;
							Cc = td;
							ta = 281;
							break a
						}
						Ld = o - la | 0;
						Zb = HEAP32[R >> 2] | 0;
						if (Zb >>> 0 > Ld >>> 0) {
							Wc = Zb - Ld | 0;
							if (Wc >>> 0 > (HEAP32[S >> 2] | 0) >>> 0 ? (HEAP32[T >> 2] | 0) != 0 : 0) {
								HEAP32[B >> 2] = 38800;
								HEAP32[l >> 2] = 29;
								Xa = pd;
								Ya = qd;
								Za = rd;
								_a = la;
								$a = sd;
								ab = o;
								bb = r;
								cb = td;
								break
							}
							Ld = HEAP32[U >> 2] | 0;
							if (Wc >>> 0 > Ld >>> 0) {
								Ra = Wc - Ld | 0;
								ng = Ra;
								og = (HEAP32[V >> 2] | 0) + ((HEAP32[W >> 2] | 0) - Ra) | 0
							} else {
								ng = Wc;
								og = (HEAP32[V >> 2] | 0) + (Ld - Wc) | 0
							}
							Wc = HEAP32[F >> 2] | 0;
							pg = Wc;
							qg = ng >>> 0 > Wc >>> 0 ? Wc : ng;
							rg = og
						} else {
							Wc = HEAP32[F >> 2] | 0;
							pg = Wc;
							qg = Wc;
							rg = r + (0 - Zb) | 0
						}
						Zb = qg >>> 0 > la >>> 0 ? la : qg;
						HEAP32[F >> 2] = pg - Zb;
						Wc = ~la;
						Ld = ~qg;
						Ra = Wc >>> 0 > Ld >>> 0 ? Wc : Ld;
						Ld = Zb;
						Wc = rg;
						Kd = r;
						while (1) {
							HEAP8[Kd >> 0] = HEAP8[Wc >> 0] | 0;
							Ld = Ld + -1 | 0;
							if (!Ld)
								break;
							else {
								Wc = Wc + 1 | 0;
								Kd = Kd + 1 | 0
							}
						}
						Kd = la - Zb | 0;
						Wc = r + ~Ra | 0;
						if (!(HEAP32[F >> 2] | 0)) {
							HEAP32[l >> 2] = 20;
							Xa = pd;
							Ya = qd;
							Za = rd;
							_a = Kd;
							$a = sd;
							ab = o;
							bb = Wc;
							cb = td
						} else {
							Xa = pd;
							Ya = qd;
							Za = rd;
							_a = Kd;
							$a = sd;
							ab = o;
							bb = Wc;
							cb = td
						}
					}
				while (0);
				ia = HEAP32[l >> 2] | 0;
				q = Xa;
				ja = Ya;
				ka = Za;
				la = _a;
				ma = $a;
				o = ab;
				r = bb;
				n = cb
			}
			if ((ta | 0) == 122) {
				HEAP32[m >> 2] = r;
				HEAP32[p >> 2] = la;
				HEAP32[f >> 2] = Pb;
				HEAP32[s >> 2] = Nb;
				HEAP32[u >> 2] = Ob;
				HEAP32[v >> 2] = Mb;
				k = 2;
				i = h;
				return k | 0
			} else if ((ta | 0) == 133) {
				Ia = la;
				Ja = Gd + -3 | 0;
				Ka = Hd;
				La = Id >>> 3;
				Ma = Jd;
				Na = o;
				Oa = n
			} else if ((ta | 0) == 280) {
				HEAP32[l >> 2] = 28;
				Ia = la;
				Ja = yd;
				Ka = zd;
				La = Ad;
				Ma = Bd;
				Na = wc;
				Oa = 1
			} else if ((ta | 0) == 281) {
				Ia = Ac;
				Ja = xc;
				Ka = yc;
				La = zc;
				Ma = Bc;
				Na = o;
				Oa = Cc
			} else if ((ta | 0) == 297) {
				k = -4;
				i = h;
				return k | 0
			} else if ((ta | 0) == 298) {
				i = h;
				return k | 0
			}
			HEAP32[m >> 2] = r;
			HEAP32[p >> 2] = Ia;
			HEAP32[f >> 2] = Ma;
			HEAP32[s >> 2] = Ka;
			HEAP32[u >> 2] = La;
			HEAP32[v >> 2] = Ja;
			if (!(HEAP32[W >> 2] | 0))
				if (((Na | 0) != (Ia | 0) ? (W = HEAP32[l >> 2] | 0, W >>> 0 < 29) : 0) ? W >>> 0 < 26 | (g | 0) != 4 : 0)
					ta = 286;
				else {
					sg = Ka;
					tg = Ia
				}
			else
				ta = 286;
			do
				if ((ta | 0) == 286) {
					if (!(zk(f, Na) | 0)) {
						sg = HEAP32[s >> 2] | 0;
						tg = HEAP32[p >> 2] | 0;
						break
					}
					HEAP32[l >> 2] = 30;
					k = -4;
					i = h;
					return k | 0
				}
			while (0);
			p = Na - tg | 0;
			s = f + 8 | 0;
			HEAP32[s >> 2] = t - sg + (HEAP32[s >> 2] | 0);
			HEAP32[X >> 2] = (HEAP32[X >> 2] | 0) + p;
			HEAP32[Y >> 2] = (HEAP32[Y >> 2] | 0) + p;
			if ((HEAP32[w >> 2] | 0) != 0 & (Na | 0) != (tg | 0)) {
				w = HEAP32[x >> 2] | 0;
				Y = (HEAP32[m >> 2] | 0) + (0 - p) | 0;
				if (!(HEAP32[z >> 2] | 0))
					ug = rk(w, Y, p) | 0;
				else
					ug = sk(w, Y, p) | 0;
				HEAP32[x >> 2] = ug;
				HEAP32[E >> 2] = ug
			}
			ug = HEAP32[l >> 2] | 0;
			if ((ug | 0) == 19)
				vg = 256;
			else
				vg = (ug | 0) == 14 ? 256 : 0;
			HEAP32[f + 44 >> 2] = ((HEAP32[I >> 2] | 0) != 0 ? 64 : 0) + (HEAP32[v >> 2] | 0) + ((ug | 0) == 11 ? 128 : 0) + vg;
			k = ((t | 0) == (sg | 0) & (Na | 0) == (tg | 0) | (g | 0) == 4) & (Oa | 0) == 0 ? -5 : Oa;
			i = h;
			return k | 0
		}
		function yk(a) {
			a = a | 0;
			var b = 0,
			d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0;
			b = i;
			if (!a) {
				d = -2;
				i = b;
				return d | 0
			}
			e = a + 28 | 0;
			f = HEAP32[e >> 2] | 0;
			if (!f) {
				d = -2;
				i = b;
				return d | 0
			}
			g = a + 36 | 0;
			h = HEAP32[g >> 2] | 0;
			if (!h) {
				d = -2;
				i = b;
				return d | 0
			}
			j = HEAP32[f + 52 >> 2] | 0;
			k = a + 40 | 0;
			if (!j) {
				l = h;
				m = f
			} else {
				rc[h & 127](HEAP32[k >> 2] | 0, j);
				l = HEAP32[g >> 2] | 0;
				m = HEAP32[e >> 2] | 0
			}
			rc[l & 127](HEAP32[k >> 2] | 0, m);
			HEAP32[e >> 2] = 0;
			d = 0;
			i = b;
			return d | 0
		}
		function zk(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0;
			d = i;
			e = HEAP32[a + 28 >> 2] | 0;
			f = e + 52 | 0;
			g = HEAP32[f >> 2] | 0;
			if (!g) {
				h = mc[HEAP32[a + 32 >> 2] & 31](HEAP32[a + 40 >> 2] | 0, 1 << HEAP32[e + 36 >> 2], 1) | 0;
				HEAP32[f >> 2] = h;
				if (!h) {
					j = 1;
					i = d;
					return j | 0
				} else
					k = h
			} else
				k = g;
			g = e + 40 | 0;
			h = HEAP32[g >> 2] | 0;
			if (!h) {
				l = 1 << HEAP32[e + 36 >> 2];
				HEAP32[g >> 2] = l;
				HEAP32[e + 48 >> 2] = 0;
				HEAP32[e + 44 >> 2] = 0;
				m = l
			} else
				m = h;
			h = b - (HEAP32[a + 16 >> 2] | 0) | 0;
			if (h >>> 0 >= m >>> 0) {
				qy(k | 0, (HEAP32[a + 12 >> 2] | 0) + (0 - m) | 0, m | 0) | 0;
				HEAP32[e + 48 >> 2] = 0;
				HEAP32[e + 44 >> 2] = HEAP32[g >> 2];
				j = 0;
				i = d;
				return j | 0
			}
			b = e + 48 | 0;
			l = HEAP32[b >> 2] | 0;
			n = m - l | 0;
			m = n >>> 0 > h >>> 0 ? h : n;
			n = a + 12 | 0;
			qy(k + l | 0, (HEAP32[n >> 2] | 0) + (0 - h) | 0, m | 0) | 0;
			l = h - m | 0;
			if ((h | 0) != (m | 0)) {
				qy(HEAP32[f >> 2] | 0, (HEAP32[n >> 2] | 0) + (0 - l) | 0, l | 0) | 0;
				HEAP32[b >> 2] = l;
				HEAP32[e + 44 >> 2] = HEAP32[g >> 2];
				j = 0;
				i = d;
				return j | 0
			}
			l = (HEAP32[b >> 2] | 0) + h | 0;
			n = HEAP32[g >> 2] | 0;
			HEAP32[b >> 2] = (l | 0) == (n | 0) ? 0 : l;
			l = e + 44 | 0;
			e = HEAP32[l >> 2] | 0;
			if (e >>> 0 >= n >>> 0) {
				j = 0;
				i = d;
				return j | 0
			}
			HEAP32[l >> 2] = e + h;
			j = 0;
			i = d;
			return j | 0
		}
		function Ak(d, f, g, h, j, k) {
			d = d | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			k = k | 0;
			var l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0,
			O = 0,
			P = 0,
			Q = 0,
			R = 0,
			S = 0,
			T = 0,
			U = 0,
			V = 0;
			l = i;
			i = i + 64 | 0;
			m = l + 32 | 0;
			n = l;
			o = m + 0 | 0;
			p = o + 32 | 0;
			do {
				HEAP16[o >> 1] = 0;
				o = o + 2 | 0
			} while ((o | 0) < (p | 0));
			o = (g | 0) == 0;
			if (!o) {
				p = 0;
				do {
					q = m + (HEAPU16[f + (p << 1) >> 1] << 1) | 0;
					HEAP16[q >> 1] = (HEAP16[q >> 1] | 0) + 1 << 16 >> 16;
					p = p + 1 | 0
				} while ((p | 0) != (g | 0))
			}
			p = HEAP32[j >> 2] | 0;
			q = 15;
			while (1) {
				r = q + -1 | 0;
				if (HEAP16[m + (q << 1) >> 1] | 0)
					break;
				if (!r) {
					s = 7;
					break
				} else
					q = r
			}
			if ((s | 0) == 7) {
				r = HEAP32[h >> 2] | 0;
				HEAP32[h >> 2] = r + 4;
				HEAP8[r >> 0] = 64;
				HEAP8[r + 1 >> 0] = 1;
				HEAP16[r + 2 >> 1] = 0;
				r = HEAP32[h >> 2] | 0;
				HEAP32[h >> 2] = r + 4;
				HEAP8[r >> 0] = 64;
				HEAP8[r + 1 >> 0] = 1;
				HEAP16[r + 2 >> 1] = 0;
				HEAP32[j >> 2] = 1;
				t = 0;
				i = l;
				return t | 0
			}
			r = p >>> 0 > q >>> 0 ? q : p;
			a: do
				if (q >>> 0 > 1) {
					p = 1;
					while (1) {
						u = p + 1 | 0;
						if (HEAP16[m + (p << 1) >> 1] | 0) {
							v = p;
							break a
						}
						if (u >>> 0 < q >>> 0)
							p = u;
						else {
							v = u;
							break
						}
					}
				} else
					v = 1;
			while (0);
			p = r >>> 0 < v >>> 0 ? v : r;
			r = 1;
			u = 1;
			do {
				r = (r << 1) - (HEAPU16[m + (u << 1) >> 1] | 0) | 0;
				u = u + 1 | 0;
				if ((r | 0) < 0) {
					t = -1;
					s = 49;
					break
				}
			} while (u >>> 0 < 16);
			if ((s | 0) == 49) {
				i = l;
				return t | 0
			}
			if ((r | 0) > 0 ? (d | 0) == 0 | (q | 0) != 1 : 0) {
				t = -1;
				i = l;
				return t | 0
			}
			HEAP16[n + 2 >> 1] = 0;
			r = 0;
			u = 1;
			do {
				r = (HEAPU16[m + (u << 1) >> 1] | 0) + (r & 65535) | 0;
				u = u + 1 | 0;
				HEAP16[n + (u << 1) >> 1] = r
			} while ((u | 0) != 15);
			if (!o) {
				o = 0;
				do {
					u = HEAP16[f + (o << 1) >> 1] | 0;
					if (u << 16 >> 16) {
						r = n + ((u & 65535) << 1) | 0;
						u = HEAP16[r >> 1] | 0;
						HEAP16[r >> 1] = u + 1 << 16 >> 16;
						HEAP16[k + ((u & 65535) << 1) >> 1] = o
					}
					o = o + 1 | 0
				} while ((o | 0) != (g | 0))
			}
			if (!d) {
				w = 0;
				x = 0;
				y = k;
				z = 19;
				A = k
			} else if ((d | 0) == 1)
				if (p >>> 0 > 9) {
					t = 1;
					i = l;
					return t | 0
				} else {
					w = 0;
					x = 1;
					y = 41056 + -514 | 0;
					z = 256;
					A = 41120 + -514 | 0
				}
			else {
				g = (d | 0) == 2;
				if (g & p >>> 0 > 9) {
					t = 1;
					i = l;
					return t | 0
				} else {
					w = g;
					x = 0;
					y = 41184;
					z = -1;
					A = 41248
				}
			}
			g = 1 << p;
			d = g + -1 | 0;
			o = p & 255;
			n = p;
			u = 0;
			r = 0;
			B = v;
			v = -1;
			C = HEAP32[h >> 2] | 0;
			D = 0;
			E = g;
			b: while (1) {
				g = 1 << n;
				F = r;
				G = B;
				H = D;
				while (1) {
					I = G - u | 0;
					J = I & 255;
					K = HEAP16[k + (H << 1) >> 1] | 0;
					L = K & 65535;
					if ((L | 0) >= (z | 0))
						if ((L | 0) > (z | 0)) {
							M = HEAP16[A + (L << 1) >> 1] & 255;
							N = HEAP16[y + (L << 1) >> 1] | 0
						} else {
							M = 96;
							N = 0
						}
					else {
						M = 0;
						N = K
					}
					K = 1 << I;
					I = F >>> u;
					L = g;
					do {
						O = L;
						L = L - K | 0;
						P = L + I | 0;
						HEAP8[C + (P << 2) >> 0] = M;
						HEAP8[C + (P << 2) + 1 >> 0] = J;
						HEAP16[C + (P << 2) + 2 >> 1] = N
					} while ((O | 0) != (K | 0));
					K = 1 << G + -1;
					while (1)
						if (!(K & F))
							break;
						else
							K = K >>> 1;
					if (!K)
						Q = 0;
					else
						Q = (K + -1 & F) + K | 0;
					I = H;
					H = H + 1 | 0;
					I = m + (G << 1) | 0;
					L = (HEAP16[I >> 1] | 0) + -1 << 16 >> 16;
					HEAP16[I >> 1] = L;
					if (!(L << 16 >> 16)) {
						if ((G | 0) == (q | 0))
							break b;
						R = HEAPU16[f + (HEAPU16[k + (H << 1) >> 1] << 1) >> 1] | 0
					} else
						R = G;
					if (R >>> 0 <= p >>> 0) {
						F = Q;
						G = R;
						H = H;
						continue
					}
					S = Q & d;
					if ((S | 0) != (v | 0))
						break;
					else {
						F = Q;
						G = R
					}
				}
				G = (u | 0) == 0 ? p : u;
				F = C + (g << 2) | 0;
				L = R - G | 0;
				c: do
					if (R >>> 0 < q >>> 0) {
						I = R;
						O = L;
						P = 1 << L;
						while (1) {
							T = P - (HEAPU16[m + (I << 1) >> 1] | 0) | 0;
							if ((T | 0) < 1) {
								U = O;
								break c
							}
							V = O + 1 | 0;
							I = V + G | 0;
							if (I >>> 0 >= q >>> 0) {
								U = V;
								break
							} else {
								O = V;
								P = T << 1
							}
						}
					} else
						U = L;
				while (0);
				L = (1 << U) + E | 0;
				if (x & L >>> 0 > 851 | w & L >>> 0 > 591) {
					t = 1;
					s = 49;
					break
				}
				g = HEAP32[h >> 2] | 0;
				HEAP8[g + (S << 2) >> 0] = U;
				HEAP8[g + (S << 2) + 1 >> 0] = o;
				HEAP16[g + (S << 2) + 2 >> 1] = (F - g | 0) >>> 2;
				n = U;
				u = G;
				r = Q;
				B = R;
				v = S;
				C = F;
				D = H;
				E = L
			}
			if ((s | 0) == 49) {
				i = l;
				return t | 0
			}
			if (Q) {
				HEAP8[C + (Q << 2) >> 0] = 64;
				HEAP8[C + (Q << 2) + 1 >> 0] = J;
				HEAP16[C + (Q << 2) + 2 >> 1] = 0
			}
			HEAP32[h >> 2] = (HEAP32[h >> 2] | 0) + (E << 2);
			HEAP32[j >> 2] = p;
			t = 0;
			i = l;
			return t | 0
		}
		function Bk(a, b, c) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			var d = 0;
			a = i;
			d = vx(da(c, b) | 0) | 0;
			i = a;
			return d | 0
		}
		function Ck(a, b) {
			a = a | 0;
			b = b | 0;
			a = i;
			wx(b);
			i = a;
			return
		}
		function Dk(e, f) {
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0,
			O = 0,
			P = 0,
			Q = 0,
			R = 0,
			S = 0,
			T = 0,
			U = 0,
			V = 0,
			W = 0,
			X = 0,
			Y = 0,
			Z = 0,
			_ = 0,
			$ = 0,
			aa = 0,
			ba = 0,
			ca = 0,
			da = 0,
			ea = 0,
			fa = 0,
			ga = 0,
			ha = 0,
			ia = 0,
			ja = 0,
			ka = 0,
			la = 0,
			ma = 0,
			na = 0,
			oa = 0,
			pa = 0,
			qa = 0,
			ra = 0,
			sa = 0,
			ta = 0,
			ua = 0,
			va = 0,
			wa = 0,
			xa = 0,
			ya = 0,
			za = 0,
			Aa = 0,
			Ba = 0,
			Ca = 0,
			Da = 0,
			Ea = 0,
			Fa = 0,
			Ga = 0,
			Ha = 0,
			Ia = 0,
			Ja = 0,
			Ka = 0,
			La = 0,
			Ma = 0,
			Na = 0,
			Oa = 0,
			Pa = 0,
			Qa = 0,
			Ra = 0,
			Sa = 0,
			Ta = 0,
			Ua = 0,
			Va = 0,
			Wa = 0,
			Xa = 0;
			g = i;
			h = HEAP32[e + 28 >> 2] | 0;
			j = HEAP32[e >> 2] | 0;
			k = e + 4 | 0;
			l = j + ((HEAP32[k >> 2] | 0) + -6) | 0;
			m = e + 12 | 0;
			n = HEAP32[m >> 2] | 0;
			o = e + 16 | 0;
			p = HEAP32[o >> 2] | 0;
			q = n + (p + -258) | 0;
			r = HEAP32[h + 44 >> 2] | 0;
			s = HEAP32[h + 48 >> 2] | 0;
			t = HEAP32[h + 52 >> 2] | 0;
			u = h + 56 | 0;
			v = h + 60 | 0;
			w = HEAP32[h + 76 >> 2] | 0;
			x = HEAP32[h + 80 >> 2] | 0;
			y = (1 << HEAP32[h + 84 >> 2]) + -1 | 0;
			z = (1 << HEAP32[h + 88 >> 2]) + -1 | 0;
			A = n + (p + ~f) | 0;
			f = h + 7104 | 0;
			p = t + -1 | 0;
			B = (s | 0) == 0;
			C = (HEAP32[h + 40 >> 2] | 0) + -1 | 0;
			D = C + s | 0;
			E = s + -1 | 0;
			F = A + -1 | 0;
			G = A - s | 0;
			H = HEAP32[v >> 2] | 0;
			I = HEAP32[u >> 2] | 0;
			J = j + -1 | 0;
			j = n + -1 | 0;
			a: while (1) {
				if (H >>> 0 < 15) {
					n = J + 2 | 0;
					K = H + 16 | 0;
					L = ((HEAPU8[J + 1 >> 0] | 0) << H) + I + ((HEAPU8[n >> 0] | 0) << H + 8) | 0;
					M = n
				} else {
					K = H;
					L = I;
					M = J
				}
				n = L & y;
				N = HEAP8[w + (n << 2) >> 0] | 0;
				O = HEAP16[w + (n << 2) + 2 >> 1] | 0;
				P = HEAPU8[w + (n << 2) + 1 >> 0] | 0;
				n = L >>> P;
				Q = K - P | 0;
				do
					if (N << 24 >> 24) {
						R = N & 255;
						S = Q;
						T = n;
						P = O;
						while (1) {
							if (R & 16)
								break;
							if (R & 64) {
								U = 57;
								break a
							}
							V = (T & (1 << R) + -1) + (P & 65535) | 0;
							W = HEAP8[w + (V << 2) >> 0] | 0;
							X = HEAP16[w + (V << 2) + 2 >> 1] | 0;
							Y = HEAPU8[w + (V << 2) + 1 >> 0] | 0;
							Z = T >>> Y;
							_ = S - Y | 0;
							if (!(W << 24 >> 24)) {
								U = 6;
								break
							} else {
								R = W & 255;
								S = _;
								T = Z;
								P = X
							}
						}
						if ((U | 0) == 6) {
							U = 0;
							$ = Z;
							aa = _;
							ba = X & 255;
							U = 7;
							break
						}
						W = P & 65535;
						Y = R & 15;
						if (!Y) {
							ca = S;
							da = T;
							ea = M;
							fa = W
						} else {
							if (S >>> 0 < Y >>> 0) {
								V = M + 1 | 0;
								ga = S + 8 | 0;
								ha = ((HEAPU8[V >> 0] | 0) << S) + T | 0;
								ia = V
							} else {
								ga = S;
								ha = T;
								ia = M
							}
							ca = ga - Y | 0;
							da = ha >>> Y;
							ea = ia;
							fa = (ha & (1 << Y) + -1) + W | 0
						}
						if (ca >>> 0 < 15) {
							W = ea + 2 | 0;
							ja = ca + 16 | 0;
							ka = ((HEAPU8[ea + 1 >> 0] | 0) << ca) + da + ((HEAPU8[W >> 0] | 0) << ca + 8) | 0;
							la = W
						} else {
							ja = ca;
							ka = da;
							la = ea
						}
						W = ka & z;
						Y = HEAP16[x + (W << 2) + 2 >> 1] | 0;
						V = HEAPU8[x + (W << 2) + 1 >> 0] | 0;
						ma = ka >>> V;
						na = ja - V | 0;
						V = HEAPU8[x + (W << 2) >> 0] | 0;
						if (!(V & 16)) {
							W = V;
							oa = ma;
							pa = na;
							qa = Y;
							while (1) {
								if (W & 64) {
									U = 54;
									break a
								}
								ra = (oa & (1 << W) + -1) + (qa & 65535) | 0;
								sa = HEAP16[x + (ra << 2) + 2 >> 1] | 0;
								ta = HEAPU8[x + (ra << 2) + 1 >> 0] | 0;
								ua = oa >>> ta;
								va = pa - ta | 0;
								ta = HEAPU8[x + (ra << 2) >> 0] | 0;
								if (!(ta & 16)) {
									W = ta;
									oa = ua;
									pa = va;
									qa = sa
								} else {
									wa = ua;
									xa = va;
									ya = ta;
									za = sa;
									break
								}
							}
						} else {
							wa = ma;
							xa = na;
							ya = V;
							za = Y
						}
						qa = za & 65535;
						W = ya & 15;
						if (xa >>> 0 < W >>> 0) {
							P = la + 1 | 0;
							sa = ((HEAPU8[P >> 0] | 0) << xa) + wa | 0;
							ta = xa + 8 | 0;
							if (ta >>> 0 < W >>> 0) {
								va = la + 2 | 0;
								Aa = xa + 16 | 0;
								Ba = ((HEAPU8[va >> 0] | 0) << ta) + sa | 0;
								Ca = va
							} else {
								Aa = ta;
								Ba = sa;
								Ca = P
							}
						} else {
							Aa = xa;
							Ba = wa;
							Ca = la
						}
						P = (Ba & (1 << W) + -1) + qa | 0;
						Da = Ba >>> W;
						Ea = Aa - W | 0;
						W = j;
						qa = W - A | 0;
						if (P >>> 0 <= qa >>> 0) {
							sa = 2 - fa | 0;
							ta = fa + (sa >>> 0 > 4294967293 ? sa : -3) | 0;
							sa = ta - ((ta >>> 0) % 3 | 0) | 0;
							ta = sa - P | 0;
							va = j + (0 - P) | 0;
							ua = fa;
							ra = j;
							do {
								HEAP8[ra + 1 >> 0] = HEAP8[va + 1 >> 0] | 0;
								HEAP8[ra + 2 >> 0] = HEAP8[va + 2 >> 0] | 0;
								va = va + 3 | 0;
								ra = ra + 3 | 0;
								HEAP8[ra >> 0] = HEAP8[va >> 0] | 0;
								ua = ua + -3 | 0
							} while (ua >>> 0 > 2);
							ua = fa + -3 | 0;
							if ((ua | 0) == (sa | 0)) {
								Fa = Ea;
								Ga = Da;
								Ha = Ca;
								Ia = j + (sa + 3) | 0;
								break
							}
							va = j + (sa + 4) | 0;
							HEAP8[va >> 0] = HEAP8[j + (ta + 4) >> 0] | 0;
							if ((ua - sa | 0) >>> 0 <= 1) {
								Fa = Ea;
								Ga = Da;
								Ha = Ca;
								Ia = va;
								break
							}
							va = j + (sa + 5) | 0;
							HEAP8[va >> 0] = HEAP8[j + (ta + 5) >> 0] | 0;
							Fa = Ea;
							Ga = Da;
							Ha = Ca;
							Ia = va;
							break
						}
						va = P - qa | 0;
						if (va >>> 0 > r >>> 0 ? (HEAP32[f >> 2] | 0) != 0 : 0) {
							U = 22;
							break a
						}
						do
							if (B) {
								ua = t + (C - va) | 0;
								if (fa >>> 0 > va >>> 0) {
									ra = fa - va | 0;
									Y = P - W | 0;
									V = ua;
									na = va;
									ma = j;
									do {
										V = V + 1 | 0;
										ma = ma + 1 | 0;
										HEAP8[ma >> 0] = HEAP8[V >> 0] | 0;
										na = na + -1 | 0
									} while ((na | 0) != 0);
									Ja = j + (F + Y + (1 - P)) | 0;
									Ka = ra;
									La = j + (A + Y) | 0
								} else {
									Ja = ua;
									Ka = fa;
									La = j
								}
							} else {
								if (va >>> 0 <= s >>> 0) {
									na = t + (E - va) | 0;
									if (fa >>> 0 <= va >>> 0) {
										Ja = na;
										Ka = fa;
										La = j;
										break
									}
									V = fa - va | 0;
									ma = P - W | 0;
									Ma = na;
									na = va;
									Na = j;
									do {
										Ma = Ma + 1 | 0;
										Na = Na + 1 | 0;
										HEAP8[Na >> 0] = HEAP8[Ma >> 0] | 0;
										na = na + -1 | 0
									} while ((na | 0) != 0);
									Ja = j + (F + ma + (1 - P)) | 0;
									Ka = V;
									La = j + (A + ma) | 0;
									break
								}
								na = t + (D - va) | 0;
								Ma = va - s | 0;
								if (fa >>> 0 > Ma >>> 0) {
									Na = fa - Ma | 0;
									ua = P - W | 0;
									Y = na;
									ra = Ma;
									Ma = j;
									do {
										Y = Y + 1 | 0;
										Ma = Ma + 1 | 0;
										HEAP8[Ma >> 0] = HEAP8[Y >> 0] | 0;
										ra = ra + -1 | 0
									} while ((ra | 0) != 0);
									ra = j + (G + ua) | 0;
									if (Na >>> 0 > s >>> 0) {
										Y = Na - s | 0;
										Ma = p;
										ma = s;
										V = ra;
										do {
											Ma = Ma + 1 | 0;
											V = V + 1 | 0;
											HEAP8[V >> 0] = HEAP8[Ma >> 0] | 0;
											ma = ma + -1 | 0
										} while ((ma | 0) != 0);
										Ja = j + (F + ua + (1 - P)) | 0;
										Ka = Y;
										La = j + (A + ua) | 0
									} else {
										Ja = p;
										Ka = Na;
										La = ra
									}
								} else {
									Ja = na;
									Ka = fa;
									La = j
								}
							}
						while (0);
						if (Ka >>> 0 > 2) {
							P = Ka + -3 | 0;
							W = (P >>> 0) % 3 | 0;
							va = P - W | 0;
							P = Ja;
							qa = Ka;
							ta = La;
							do {
								HEAP8[ta + 1 >> 0] = HEAP8[P + 1 >> 0] | 0;
								HEAP8[ta + 2 >> 0] = HEAP8[P + 2 >> 0] | 0;
								P = P + 3 | 0;
								ta = ta + 3 | 0;
								HEAP8[ta >> 0] = HEAP8[P >> 0] | 0;
								qa = qa + -3 | 0
							} while (qa >>> 0 > 2);
							Oa = Ja + (va + 3) | 0;
							Pa = W;
							Qa = La + (va + 3) | 0
						} else {
							Oa = Ja;
							Pa = Ka;
							Qa = La
						}
						if (Pa) {
							qa = Qa + 1 | 0;
							HEAP8[qa >> 0] = HEAP8[Oa + 1 >> 0] | 0;
							if (Pa >>> 0 > 1) {
								P = Qa + 2 | 0;
								HEAP8[P >> 0] = HEAP8[Oa + 2 >> 0] | 0;
								Fa = Ea;
								Ga = Da;
								Ha = Ca;
								Ia = P
							} else {
								Fa = Ea;
								Ga = Da;
								Ha = Ca;
								Ia = qa
							}
						} else {
							Fa = Ea;
							Ga = Da;
							Ha = Ca;
							Ia = Qa
						}
					} else {
						$ = n;
						aa = Q;
						ba = O & 255;
						U = 7
					}
				while (0);
				if ((U | 0) == 7) {
					U = 0;
					O = j + 1 | 0;
					HEAP8[O >> 0] = ba;
					Fa = aa;
					Ga = $;
					Ha = M;
					Ia = O
				}
				if (Ha >>> 0 < l >>> 0 & Ia >>> 0 < q >>> 0) {
					H = Fa;
					I = Ga;
					J = Ha;
					j = Ia
				} else {
					Ra = Fa;
					Sa = Ga;
					Ta = Ha;
					Ua = Ia;
					break
				}
			}
			do
				if ((U | 0) == 22) {
					HEAP32[e + 24 >> 2] = 41312;
					HEAP32[h >> 2] = 29;
					Ra = Ea;
					Sa = Da;
					Ta = Ca;
					Ua = j
				} else if ((U | 0) == 54) {
					HEAP32[e + 24 >> 2] = 41344;
					HEAP32[h >> 2] = 29;
					Ra = pa;
					Sa = oa;
					Ta = la;
					Ua = j
				} else if ((U | 0) == 57)
					if (!(R & 32)) {
						HEAP32[e + 24 >> 2] = 41368;
						HEAP32[h >> 2] = 29;
						Ra = S;
						Sa = T;
						Ta = M;
						Ua = j;
						break
					} else {
						HEAP32[h >> 2] = 11;
						Ra = S;
						Sa = T;
						Ta = M;
						Ua = j;
						break
					}
			while (0);
			j = Ra >>> 3;
			M = Ta + (0 - j) | 0;
			T = Ra - (j << 3) | 0;
			Ra = (1 << T) + -1 & Sa;
			HEAP32[e >> 2] = Ta + (1 - j);
			HEAP32[m >> 2] = Ua + 1;
			if (M >>> 0 < l >>> 0)
				Va = l - M | 0;
			else
				Va = l - M | 0;
			HEAP32[k >> 2] = Va + 5;
			if (Ua >>> 0 < q >>> 0) {
				Wa = q - Ua | 0;
				Xa = Wa + 257 | 0;
				HEAP32[o >> 2] = Xa;
				HEAP32[u >> 2] = Ra;
				HEAP32[v >> 2] = T;
				i = g;
				return
			} else {
				Wa = q - Ua | 0;
				Xa = Wa + 257 | 0;
				HEAP32[o >> 2] = Xa;
				HEAP32[u >> 2] = Ra;
				HEAP32[v >> 2] = T;
				i = g;
				return
			}
		}
		function Ek() {
			var a = 0,
			b = 0,
			d = 0,
			e = 0;
			a = i;
			i = i + 16 | 0;
			b = a;
			kb(1, b | 0) | 0;
			d = HEAP32[b >> 2] | 0;
			e = By(d | 0, ((d | 0) < 0) << 31 >> 31 | 0, 1e9, 0) | 0;
			d = HEAP32[b + 4 >> 2] | 0;
			b = ky(e | 0, H | 0, d | 0, ((d | 0) < 0) << 31 >> 31 | 0) | 0;
			i = a;
			return b | 0
		}
		function Fk() {
			var b = 0,
			d = 0,
			e = 0,
			f = 0;
			b = i;
			d = vx(16) | 0;
			if (!d)
				e = 0;
			else {
				HEAP32[d + 8 >> 2] = 16;
				HEAP8[d + 4 >> 0] = 1;
				HEAP32[d >> 2] = 41416;
				e = d
			}
			HEAP32[10350] = e;
			d = vx(336) | 0;
			if (!d)
				f = 0;
			else {
				dl(d, e, 16);
				f = d
			}
			bl(f);
			f = il(16) | 0;
			HEAP32[f + 8 >> 2] = 16;
			HEAP8[f + 4 >> 0] = 1;
			HEAP32[f >> 2] = 41416;
			fl(al() | 0, f);
			lc[c[(HEAP32[f >> 2] | 0) + 32 >> 2] & 255](f);
			i = b;
			return
		}
		function Gk() {
			var a = 0,
			b = 0,
			d = 0;
			a = i;
			b = al() | 0;
			hl(b);
			d = el(b) | 0;
			lc[c[(HEAP32[d >> 2] | 0) + 36 >> 2] & 255](d);
			gl(b);
			if (d)
				lc[c[(HEAP32[d >> 2] | 0) + 4 >> 2] & 255](d);
			d = HEAP32[10350] | 0;
			lc[HEAP32[HEAP32[d >> 2] >> 2] & 255](d);
			wx(HEAP32[10350] | 0);
			HEAP32[10350] = 0;
			wx(b);
			cl();
			i = a;
			return
		}
		function Hk(b, d, e) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			e = i;
			if ((HEAP8[b + 4 >> 0] | 0) != 0 & (d | 0) != 0) {
				i = e;
				return
			} else {
				sy(d | 0, 0, HEAP32[b + 8 >> 2] << 2 | 0) | 0;
				i = e;
				return
			}
		}
		function Ik(a) {
			a = a | 0;
			return
		}
		function Jk(a) {
			a = a | 0;
			var b = 0;
			b = i;
			kl(a);
			i = b;
			return
		}
		function Kk(a, b, d, e) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			e = i;
			d = vx(b) | 0;
			b = 41512;
			a = ky(HEAP32[b >> 2] | 0, HEAP32[b + 4 >> 2] | 0, 1, 0) | 0;
			b = 41512;
			HEAP32[b >> 2] = a;
			HEAP32[b + 4 >> 2] = H;
			i = e;
			return d | 0
		}
		function Lk(a, b, d, e, f) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			f = i;
			d = zx(e, b) | 0;
			b = 41512;
			e = ky(HEAP32[b >> 2] | 0, HEAP32[b + 4 >> 2] | 0, 1, 0) | 0;
			b = 41512;
			HEAP32[b >> 2] = e;
			HEAP32[b + 4 >> 2] = H;
			i = f;
			return d | 0
		}
		function Mk(a, b, d) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			var e = 0;
			d = i;
			a = 41520;
			e = ky(HEAP32[a >> 2] | 0, HEAP32[a + 4 >> 2] | 0, 1, 0) | 0;
			a = 41520;
			HEAP32[a >> 2] = e;
			HEAP32[a + 4 >> 2] = H;
			wx(b);
			i = d;
			return
		}
		function Nk(a, b, d) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			var e = 0;
			d = i;
			a = 41520;
			e = ky(HEAP32[a >> 2] | 0, HEAP32[a + 4 >> 2] | 0, 1, 0) | 0;
			a = 41520;
			HEAP32[a >> 2] = e;
			HEAP32[a + 4 >> 2] = H;
			wx(b);
			i = d;
			return
		}
		function Ok(a) {
			a = a | 0;
			return 0
		}
		function Pk(a) {
			a = a | 0;
			return 0
		}
		function Qk(a) {
			a = a | 0;
			return
		}
		function Rk(a) {
			a = a | 0;
			return
		}
		function Sk(a) {
			a = a | 0;
			return 0
		}
		function Tk(a) {
			a = a | 0;
			return
		}
		function Uk(a) {
			a = a | 0;
			return 0
		}
		function Vk(a, b, c) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			return
		}
		function Wk(a) {
			a = a | 0;
			return
		}
		function Xk(a) {
			a = a | 0;
			return 0
		}
		function Yk(a, b) {
			a = a | 0;
			b = b | 0;
			return
		}
		function Zk(a) {
			a = a | 0;
			return
		}
		function _k(a, b) {
			a = a | 0;
			b = b | 0;
			return
		}
		function $k(a) {
			a = a | 0;
			return
		}
		function al() {
			return HEAP32[10376] | 0
		}
		function bl(a) {
			a = a | 0;
			HEAP32[10376] = a;
			return
		}
		function cl() {
			HEAP32[10376] = 0;
			return
		}
		function dl(a, b, d) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			var e = 0;
			e = a + 16 | 0;
			HEAP32[a + 4 >> 2] = e;
			HEAP32[a >> 2] = e;
			HEAP32[a + 8 >> 2] = a + 80;
			HEAP32[a + 80 >> 2] = 1;
			e = a + 100 | 0;
			HEAP32[a + 88 >> 2] = e;
			HEAP32[a + 84 >> 2] = e;
			HEAP32[a + 92 >> 2] = a + 164;
			HEAP32[a + 164 >> 2] = d;
			d = a + 184 | 0;
			HEAP32[a + 172 >> 2] = d;
			HEAP32[a + 168 >> 2] = d;
			HEAP32[a + 176 >> 2] = a + 248;
			HEAP32[a + 248 >> 2] = b;
			b = a + 268 | 0;
			HEAP32[a + 256 >> 2] = b;
			HEAP32[a + 252 >> 2] = b;
			HEAP32[a + 260 >> 2] = a + 332;
			HEAP32[a + 332 >> 2] = 0;
			return
		}
		function el(a) {
			a = a | 0;
			var b = 0;
			b = HEAP32[a + 172 >> 2] | 0;
			return HEAP32[((HEAP32[a + 168 >> 2] | 0) == (b | 0) ? a + 248 | 0 : b + -4 | 0) >> 2] | 0
		}
		function yg(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0,
			O = 0,
			P = 0,
			Q = 0,
			R = 0,
			S = 0,
			T = 0,
			U = 0,
			V = 0,
			W = 0,
			X = 0,
			Y = 0,
			Z = 0,
			_ = 0,
			$ = 0,
			aa = 0;
			d = i;
			i = i + 208 | 0;
			e = i;
			i = i + 168 | 0;
			HEAP32[e >> 2] = 0;
			f = d + 200 | 0;
			g = d + 24 | 0;
			h = d + 20 | 0;
			j = d + 16 | 0;
			k = d + 12 | 0;
			l = d + 8 | 0;
			m = d + 4 | 0;
			n = d;
			HEAP32[f >> 2] = 0;
			o = g + 156 | 0;
			HEAP32[o + 0 >> 2] = 0;
			HEAP32[o + 4 >> 2] = 0;
			HEAP32[o + 8 >> 2] = 0;
			HEAP32[o + 12 >> 2] = 0;
			HEAP32[h >> 2] = 0;
			HEAP32[j >> 2] = 0;
			HEAP32[o >> 2] = b;
			s = 0;
			b = va(7, 1120, 0, 57, 58) | 0;
			o = s;
			s = 0;
			if ((o | 0) != 0 & (t | 0) != 0) {
				p = oy(HEAP32[o >> 2] | 0, e) | 0;
				if (!p)
					Fa(o | 0, t | 0);
				H = t
			} else
				p = -1;
			if ((p | 0) != 1) {
				HEAP32[n >> 2] = b;
				if (b) {
					s = 0;
					ra(7, b | 0, g | 0, 8);
					b = s;
					s = 0;
					if ((b | 0) != 0 & (t | 0) != 0) {
						q = oy(HEAP32[b >> 2] | 0, e) | 0;
						if (!q)
							Fa(b | 0, t | 0);
						H = t
					} else
						q = -1;
					if ((q | 0) != 1) {
						s = 0;
						q = pa(78, HEAP32[n >> 2] | 0) | 0;
						b = s;
						s = 0;
						if ((b | 0) != 0 & (t | 0) != 0) {
							r = oy(HEAP32[b >> 2] | 0, e) | 0;
							if (!r)
								Fa(b | 0, t | 0);
							H = t
						} else
							r = -1;
						if ((r | 0) != 1) {
							HEAP32[f >> 2] = q;
							if (q) {
								my(g, 1, e | 0) | 0;
								s = 0;
								q = s;
								s = 0;
								if ((q | 0) != 0 & (t | 0) != 0) {
									u = oy(HEAP32[q >> 2] | 0, e) | 0;
									if (!u)
										Fa(q | 0, t | 0);
									H = t
								} else
									u = -1;
								if ((u | 0) == 1) {
									v = H;
									w = 8
								} else {
									v = 0;
									w = 8
								}
							} else
								w = 47
						} else {
							v = H;
							w = 8
						}
					} else {
						v = H;
						w = 8
					}
				} else
					w = 47
			} else {
				v = H;
				w = 8
			}
			a: while (1) {
				b: do
					if ((w | 0) == 8) {
						w = 0;
						if (v) {
							w = 47;
							continue a
						}
						s = 0;
						na(59, HEAP32[n >> 2] | 0, HEAP32[f >> 2] | 0);
						u = s;
						s = 0;
						if ((u | 0) != 0 & (t | 0) != 0) {
							x = oy(HEAP32[u >> 2] | 0, e) | 0;
							if (!x)
								Fa(u | 0, t | 0);
							H = t
						} else
							x = -1;
						if ((x | 0) == 1) {
							v = H;
							w = 8;
							continue a
						}
						s = 0;
						la(1, HEAP32[n >> 2] | 0, HEAP32[f >> 2] | 0, h | 0, j | 0, k | 0, l | 0, m | 0, 0, 0) | 0;
						u = s;
						s = 0;
						if ((u | 0) != 0 & (t | 0) != 0) {
							y = oy(HEAP32[u >> 2] | 0, e) | 0;
							if (!y)
								Fa(u | 0, t | 0);
							H = t
						} else
							y = -1;
						if ((y | 0) == 1) {
							v = H;
							w = 8;
							continue a
						}
						s = 0;
						u = va(8, a | 0, HEAP32[h >> 2] | 0, HEAP32[j >> 2] | 0, 0) | 0;
						q = s;
						s = 0;
						if ((q | 0) != 0 & (t | 0) != 0) {
							z = oy(HEAP32[q >> 2] | 0, e) | 0;
							if (!z)
								Fa(q | 0, t | 0);
							H = t
						} else
							z = -1;
						if ((z | 0) == 1) {
							v = H;
							w = 8;
							continue a
						}
						if (!u) {
							w = 47;
							continue a
						}
						u = HEAP32[l >> 2] | 0;
						if ((u | 0) == 3) {
							s = 0;
							ha(168, HEAP32[n >> 2] | 0);
							q = s;
							s = 0;
							if ((q | 0) != 0 & (t | 0) != 0) {
								A = oy(HEAP32[q >> 2] | 0, e) | 0;
								if (!A)
									Fa(q | 0, t | 0);
								H = t
							} else
								A = -1;
							if ((A | 0) == 1) {
								v = H;
								w = 8;
								continue a
							}
							B = HEAP32[l >> 2] | 0
						} else
							B = u;
						if (!(B & -5)) {
							s = 0;
							ha(168, HEAP32[n >> 2] | 0);
							u = s;
							s = 0;
							if ((u | 0) != 0 & (t | 0) != 0) {
								C = oy(HEAP32[u >> 2] | 0, e) | 0;
								if (!C)
									Fa(u | 0, t | 0);
								H = t
							} else
								C = -1;
							if ((C | 0) == 1) {
								v = H;
								w = 8;
								continue a
							}
							s = 0;
							ha(169, HEAP32[n >> 2] | 0);
							u = s;
							s = 0;
							if ((u | 0) != 0 & (t | 0) != 0) {
								D = oy(HEAP32[u >> 2] | 0, e) | 0;
								if (!D)
									Fa(u | 0, t | 0);
								H = t
							} else
								D = -1;
							if ((D | 0) == 1) {
								v = H;
								w = 8;
								continue a
							}
						}
						if ((HEAP32[k >> 2] | 0) < 8) {
							s = 0;
							ha(168, HEAP32[n >> 2] | 0);
							u = s;
							s = 0;
							if ((u | 0) != 0 & (t | 0) != 0) {
								E = oy(HEAP32[u >> 2] | 0, e) | 0;
								if (!E)
									Fa(u | 0, t | 0);
								H = t
							} else
								E = -1;
							if ((E | 0) == 1) {
								v = H;
								w = 8;
								continue a
							}
						}
						s = 0;
						ha(170, HEAP32[n >> 2] | 0);
						u = s;
						s = 0;
						if ((u | 0) != 0 & (t | 0) != 0) {
							F = oy(HEAP32[u >> 2] | 0, e) | 0;
							if (!F)
								Fa(u | 0, t | 0);
							H = t
						} else
							F = -1;
						if ((F | 0) == 1) {
							v = H;
							w = 8;
							continue a
						}
						s = 0;
						ha(171, HEAP32[n >> 2] | 0);
						u = s;
						s = 0;
						if ((u | 0) != 0 & (t | 0) != 0) {
							G = oy(HEAP32[u >> 2] | 0, e) | 0;
							if (!G)
								Fa(u | 0, t | 0);
							H = t
						} else
							G = -1;
						if ((G | 0) == 1) {
							v = H;
							w = 8;
							continue a
						}
						s = 0;
						u = ia(24, HEAP32[n >> 2] | 0, HEAP32[f >> 2] | 0, 16) | 0;
						q = s;
						s = 0;
						if ((q | 0) != 0 & (t | 0) != 0) {
							I = oy(HEAP32[q >> 2] | 0, e) | 0;
							if (!I)
								Fa(q | 0, t | 0);
							H = t
						} else
							I = -1;
						if ((I | 0) == 1) {
							v = H;
							w = 8;
							continue a
						}
						if (u) {
							s = 0;
							ha(168, HEAP32[n >> 2] | 0);
							u = s;
							s = 0;
							if ((u | 0) != 0 & (t | 0) != 0) {
								J = oy(HEAP32[u >> 2] | 0, e) | 0;
								if (!J)
									Fa(u | 0, t | 0);
								H = t
							} else
								J = -1;
							if ((J | 0) == 1) {
								v = H;
								w = 8;
								continue a
							}
						}
						s = 0;
						ra(9, HEAP32[n >> 2] | 0, 255, 1);
						u = s;
						s = 0;
						if ((u | 0) != 0 & (t | 0) != 0) {
							K = oy(HEAP32[u >> 2] | 0, e) | 0;
							if (!K)
								Fa(u | 0, t | 0);
							H = t
						} else
							K = -1;
						if ((K | 0) == 1) {
							v = H;
							w = 8;
							continue a
						}
						u = HEAP32[j >> 2] | 0;
						s = 0;
						q = ya(16, u | 0, 4) | 0;
						r = s;
						s = 0;
						if ((r | 0) != 0 & (t | 0) != 0) {
							L = oy(HEAP32[r >> 2] | 0, e) | 0;
							if (!L)
								Fa(r | 0, t | 0);
							H = t
						} else
							L = -1;
						if ((L | 0) == 1) {
							v = H;
							w = 8;
							continue a
						}
						r = (q | 0) == 0;
						if (r) {
							s = 0;
							ha(172, a | 0);
							b = s;
							s = 0;
							if ((b | 0) != 0 & (t | 0) != 0) {
								M = oy(HEAP32[b >> 2] | 0, e) | 0;
								if (!M)
									Fa(b | 0, t | 0);
								H = t
							} else
								M = -1;
							if ((M | 0) == 1) {
								v = H;
								w = 8;
								continue a
							}
							w = 56;
							break
						}
						b = HEAP32[h >> 2] << 2;
						c: do
							if (u) {
								p = 0;
								while (1) {
									s = 0;
									o = pa(79, b | 0) | 0;
									N = s;
									s = 0;
									if ((N | 0) != 0 & (t | 0) != 0) {
										O = oy(HEAP32[N >> 2] | 0, e) | 0;
										if (!O)
											Fa(N | 0, t | 0);
										H = t
									} else
										O = -1;
									if ((O | 0) == 1) {
										v = H;
										w = 8;
										continue a
									}
									HEAP32[q + (p << 2) >> 2] = o;
									p = p + 1 | 0;
									if (!o)
										break;
									if (p >>> 0 >= u >>> 0)
										break c
								}
								s = 0;
								ha(172, a | 0);
								p = s;
								s = 0;
								if ((p | 0) != 0 & (t | 0) != 0) {
									P = oy(HEAP32[p >> 2] | 0, e) | 0;
									if (!P)
										Fa(p | 0, t | 0);
									H = t
								} else
									P = -1;
								if ((P | 0) == 1) {
									v = H;
									w = 8;
									continue a
								}
								if (r) {
									w = 56;
									break b
								}
								if (HEAP32[j >> 2] | 0) {
									p = 0;
									while (1) {
										s = 0;
										ha(173, HEAP32[q + (p << 2) >> 2] | 0);
										o = s;
										s = 0;
										if ((o | 0) != 0 & (t | 0) != 0) {
											Q = oy(HEAP32[o >> 2] | 0, e) | 0;
											if (!Q)
												Fa(o | 0, t | 0);
											H = t
										} else
											Q = -1;
										if ((Q | 0) == 1) {
											v = H;
											w = 8;
											continue a
										}
										p = p + 1 | 0;
										if (p >>> 0 >= (HEAP32[j >> 2] | 0) >>> 0)
											break
									}
								}
								s = 0;
								ha(173, q | 0);
								p = s;
								s = 0;
								if ((p | 0) != 0 & (t | 0) != 0) {
									R = oy(HEAP32[p >> 2] | 0, e) | 0;
									if (!R)
										Fa(p | 0, t | 0);
									H = t
								} else
									R = -1;
								if ((R | 0) == 1) {
									v = H;
									w = 8;
									continue a
								}
								w = 56;
								break b
							}
						while (0);
						s = 0;
						na(60, HEAP32[n >> 2] | 0, q | 0);
						r = s;
						s = 0;
						if ((r | 0) != 0 & (t | 0) != 0) {
							S = oy(HEAP32[r >> 2] | 0, e) | 0;
							if (!S)
								Fa(r | 0, t | 0);
							H = t
						} else
							S = -1;
						if ((S | 0) == 1) {
							v = H;
							w = 8;
							continue a
						}
						s = 0;
						na(61, HEAP32[n >> 2] | 0, HEAP32[f >> 2] | 0);
						r = s;
						s = 0;
						if ((r | 0) != 0 & (t | 0) != 0) {
							T = oy(HEAP32[r >> 2] | 0, e) | 0;
							if (!T)
								Fa(r | 0, t | 0);
							H = t
						} else
							T = -1;
						if ((T | 0) == 1) {
							v = H;
							w = 8;
							continue a
						}
						s = 0;
						ra(10, n | 0, f | 0, 0);
						r = s;
						s = 0;
						if ((r | 0) != 0 & (t | 0) != 0) {
							U = oy(HEAP32[r >> 2] | 0, e) | 0;
							if (!U)
								Fa(r | 0, t | 0);
							H = t
						} else
							U = -1;
						if ((U | 0) == 1) {
							v = H;
							w = 8;
							continue a
						}
						if (HEAP32[j >> 2] | 0) {
							r = 0;
							u = HEAP32[a + 44 >> 2] | 0;
							while (1) {
								p = q + (r << 2) | 0;
								qy(u | 0, HEAP32[p >> 2] | 0, b | 0) | 0;
								s = 0;
								ha(173, HEAP32[p >> 2] | 0);
								p = s;
								s = 0;
								if ((p | 0) != 0 & (t | 0) != 0) {
									V = oy(HEAP32[p >> 2] | 0, e) | 0;
									if (!V)
										Fa(p | 0, t | 0);
									H = t
								} else
									V = -1;
								if ((V | 0) == 1) {
									v = H;
									w = 8;
									continue a
								}
								r = r + 1 | 0;
								if (r >>> 0 >= (HEAP32[j >> 2] | 0) >>> 0)
									break;
								else
									u = u + b | 0
							}
						}
						s = 0;
						ha(173, q | 0);
						b = s;
						s = 0;
						if ((b | 0) != 0 & (t | 0) != 0) {
							W = oy(HEAP32[b >> 2] | 0, e) | 0;
							if (!W)
								Fa(b | 0, t | 0);
							H = t
						} else
							W = -1;
						if ((W | 0) == 1) {
							v = H;
							w = 8;
							continue a
						}
						X = 1
					} else if ((w | 0) == 47) {
						w = 0;
						s = 0;
						ha(172, a | 0);
						b = s;
						s = 0;
						if ((b | 0) != 0 & (t | 0) != 0) {
							Y = oy(HEAP32[b >> 2] | 0, e) | 0;
							if (!Y)
								Fa(b | 0, t | 0);
							H = t
						} else
							Y = -1;
						if ((Y | 0) == 1) {
							v = H;
							w = 8;
							continue a
						}
						w = 56
					}
				while (0);
				do
					if ((w | 0) == 56) {
						w = 0;
						if (!(HEAP32[n >> 2] | 0))
							X = 0;
						else {
							if (!(HEAP32[f >> 2] | 0)) {
								s = 0;
								ra(10, n | 0, 0, 0);
								b = s;
								s = 0;
								if ((b | 0) != 0 & (t | 0) != 0) {
									Z = oy(HEAP32[b >> 2] | 0, e) | 0;
									if (!Z)
										Fa(b | 0, t | 0);
									H = t
								} else
									Z = -1;
								if ((Z | 0) == 1) {
									v = H;
									w = 8;
									continue a
								}
								X = 0;
								break
							}
							s = 0;
							ra(10, n | 0, f | 0, 0);
							b = s;
							s = 0;
							if ((b | 0) != 0 & (t | 0) != 0) {
								_ = oy(HEAP32[b >> 2] | 0, e) | 0;
								if (!_)
									Fa(b | 0, t | 0);
								H = t
							} else
								_ = -1;
							if ((_ | 0) == 1) {
								v = H;
								w = 8;
								continue a
							}
							s = 0;
							ha(173, HEAP32[f >> 2] | 0);
							b = s;
							s = 0;
							if ((b | 0) != 0 & (t | 0) != 0) {
								$ = oy(HEAP32[b >> 2] | 0, e) | 0;
								if (!$)
									Fa(b | 0, t | 0);
								H = t
							} else
								$ = -1;
							if (($ | 0) == 1) {
								v = H;
								w = 8;
								continue a
							}
							X = 0
						}
					}
				while (0);
				b = HEAP32[g + 160 >> 2] | 0;
				if (!b) {
					w = 66;
					break
				}
				s = 0;
				ha(174, b | 0);
				b = s;
				s = 0;
				if ((b | 0) != 0 & (t | 0) != 0) {
					aa = oy(HEAP32[b >> 2] | 0, e) | 0;
					if (!aa)
						Fa(b | 0, t | 0);
					H = t
				} else
					aa = -1;
				if ((aa | 0) == 1) {
					v = H;
					w = 8
				} else
					break
			}
			if ((w | 0) == 66) {
				i = d;
				return X | 0
			}
			i = d;
			return X | 0
		}
		function zg(a, b) {
			a = a | 0;
			b = b | 0;
			Fa(Lg(a) | 0, 1)
		}
		function Ag(a, b) {
			a = a | 0;
			b = b | 0;
			return
		}
		function Bg(a, b, d) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			var e = 0;
			e = i;
			Qj(c[(Lg(a) | 0) + 156 >> 2] | 0, b, 0, d);
			i = e;
			return
		}
		function Cg() {
			var a = 0,
			b = 0;
			a = i;
			i = i + 16 | 0;
			b = a;
			HEAP32[b + 0 >> 2] = 0;
			HEAP32[b + 4 >> 2] = 0;
			HEAP32[b + 8 >> 2] = 0;
			HEAP32[b + 12 >> 2] = 0;
			HEAP32[272] = 1104;
			HEAP32[274] = 1120;
			HEAP32[276] = HEAP32[b + 0 >> 2];
			HEAP32[277] = HEAP32[b + 4 >> 2];
			HEAP32[278] = HEAP32[b + 8 >> 2];
			HEAP32[279] = HEAP32[b + 12 >> 2];
			HEAP32[273] = 1120;
			Sa(167, 1088, o | 0) | 0;
			i = a;
			return
		}
		function Dg(a, b, d, e, f) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0;
			f = i;
			if ((d | 0) == (e | 0)) {
				i = f;
				return
			}
			g = e;
			e = g - d | 0;
			h = e >> 2;
			j = a + 8 | 0;
			k = a + 4 | 0;
			l = HEAP32[k >> 2] | 0;
			m = l;
			if (h >>> 0 > (HEAP32[j >> 2] | 0) - m >> 2 >>> 0) {
				n = HEAP32[a >> 2] | 0;
				o = n;
				p = m - o | 0;
				q = p >> 2;
				r = (q | 0) == 0 ? 1 : p >> 1;
				p = q + h | 0;
				q = b;
				s = q - o | 0;
				qy(0, n | 0, s | 0) | 0;
				n = s >> 2;
				qy(0 + (n << 2) | 0, d | 0, e | 0) | 0;
				s = n + h | 0;
				n = m - q | 0;
				qy(0 + (s << 2) | 0, b | 0, n | 0) | 0;
				HEAP32[a >> 2] = 0;
				HEAP32[k >> 2] = 0 + ((n >> 2) + s << 2);
				HEAP32[j >> 2] = 0 + ((r >>> 0 > p >>> 0 ? r : p) << 2);
				i = f;
				return
			}
			p = b;
			r = m - p | 0;
			m = r >> 2;
			if (h >>> 0 < m >>> 0) {
				j = l + (0 - h << 2) | 0;
				ry(l | 0, j | 0, e | 0) | 0;
				HEAP32[k >> 2] = (HEAP32[k >> 2] | 0) + (h << 2);
				s = j - p | 0;
				ry(l + (0 - (s >> 2) << 2) | 0, b | 0, s | 0) | 0;
				ry(b | 0, d | 0, e | 0) | 0;
				i = f;
				return
			} else {
				e = d + (m << 2) | 0;
				ry(l | 0, e | 0, g - e | 0) | 0;
				e = (HEAP32[k >> 2] | 0) + (h - m << 2) | 0;
				HEAP32[k >> 2] = e;
				ry(e | 0, b | 0, r | 0) | 0;
				HEAP32[k >> 2] = (HEAP32[k >> 2] | 0) + (m << 2);
				ry(b | 0, d | 0, r | 0) | 0;
				i = f;
				return
			}
		}
		function Eg(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0,
			e = 0;
			d = i;
			i = i + 16 | 0;
			e = d;
			if ((a | 0) != 0 ? (d = HEAP32[a + 168 >> 2] | 0, (d | 0) != 0) : 0)
				rc[d & 127](a, b);
			d = HEAP32[p >> 2] | 0;
			HEAP32[e >> 2] = (b | 0) != 0 ? b : 7624;
			Qb(d | 0, 7600, e | 0) | 0;
			ec(10, d | 0) | 0;
			ah(a, 1)
		}
		function Fg(a, b, d) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0;
			e = i;
			i = i + 16 | 0;
			f = e;
			if (!a) {
				g = 0;
				i = e;
				return g | 0
			}
			if ((4294967295 / (d >>> 0) | 0) >>> 0 <= b >>> 0) {
				h = HEAP32[a + 172 >> 2] | 0;
				if (!h) {
					j = HEAP32[p >> 2] | 0;
					HEAP32[f >> 2] = 1128;
					Qb(j | 0, 7576, f | 0) | 0;
					ec(10, j | 0) | 0;
					g = 0;
					i = e;
					return g | 0
				} else {
					rc[h & 127](a, 1128);
					g = 0;
					i = e;
					return g | 0
				}
			}
			h = da(d, b) | 0;
			if (h) {
				b = HEAP32[a + 720 >> 2] | 0;
				if (!b)
					k = vx(h) | 0;
				else
					k = Cc[b & 31](a, h) | 0;
				if (k) {
					g = k;
					i = e;
					return g | 0
				}
			}
			k = HEAP32[a + 172 >> 2] | 0;
			if (!k) {
				h = HEAP32[p >> 2] | 0;
				HEAP32[f >> 2] = 3264;
				Qb(h | 0, 7576, f | 0) | 0;
				ec(10, h | 0) | 0;
				g = 0;
				i = e;
				return g | 0
			} else {
				rc[k & 127](a, 3264);
				g = 0;
				i = e;
				return g | 0
			}
			return 0
		}
		function Gg(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0,
			e = 0;
			d = i;
			if ((a | 0) == 0 | (b | 0) == 0) {
				i = d;
				return
			}
			e = HEAP32[a + 724 >> 2] | 0;
			if (!e) {
				wx(b);
				i = d;
				return
			} else {
				rc[e & 127](a, b);
				i = d;
				return
			}
		}
		function Hg(b, d) {
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0;
			e = i;
			i = i + 144 | 0;
			f = e;
			g = e + 8 | 0;
			h = (d | 0) == 0;
			j = b + 212 | 0;
			if (!h) {
				if ((HEAP8[d >> 0] | 0) != 49)
					HEAP32[j >> 2] = HEAP32[j >> 2] | 131072;
				if ((HEAP8[d + 1 >> 0] | 0) != 46)
					HEAP32[j >> 2] = HEAP32[j >> 2] | 131072;
				if ((HEAP8[d + 2 >> 0] | 0) != 54)
					HEAP32[j >> 2] = HEAP32[j >> 2] | 131072;
				if ((HEAP8[d + 3 >> 0] | 0) != 46)
					HEAP32[j >> 2] = HEAP32[j >> 2] | 131072;
				if ((HEAP8[d + 4 >> 0] | 0) != 55)
					HEAP32[j >> 2] = HEAP32[j >> 2] | 131072;
				k = HEAP32[j >> 2] | 0;
				if (!(HEAP8[d + 5 >> 0] | 0))
					l = k;
				else {
					m = k | 131072;
					HEAP32[j >> 2] = m;
					l = m
				}
			} else {
				m = HEAP32[j >> 2] | 131072;
				HEAP32[j >> 2] = m;
				l = m
			}
			if (!(l & 131072)) {
				n = 1;
				i = e;
				return n | 0
			}
			if (((!h ? (HEAP8[d >> 0] | 0) == 49 : 0) ? (HEAP8[d + 2 >> 0] | 0) == 54 : 0) ? (HEAP8[d + 3 >> 0] | 0) == 46 : 0) {
				n = 1;
				i = e;
				return n | 0
			}
			l = 0;
			m = 1168;
			j = 65;
			while (1) {
				k = m + 1 | 0;
				HEAP8[g + l >> 0] = j;
				l = l + 1 | 0;
				if ((l | 0) == 30)
					break;
				else {
					m = k;
					j = HEAP8[k >> 0] | 0
				}
			}
			HEAP8[g + 30 >> 0] = 0;
			if (!h ? (h = HEAP8[d >> 0] | 0, h << 24 >> 24 != 0) : 0) {
				j = 30;
				m = d;
				d = h;
				do {
					m = m + 1 | 0;
					h = j;
					j = j + 1 | 0;
					HEAP8[g + h >> 0] = d;
					d = HEAP8[m >> 0] | 0
				} while (d << 24 >> 24 != 0 & j >>> 0 < 127);
				HEAP8[g + j >> 0] = 0;
				if (j >>> 0 < 128)
					if (j >>> 0 < 127) {
						o = j;
						q = 20
					} else {
						HEAP8[g + j >> 0] = 0;
						r = 127;
						q = 27
					}
			} else {
				HEAP8[g + 30 >> 0] = 0;
				o = 30;
				q = 20
			}
			if ((q | 0) == 20) {
				j = o + -127 | 0;
				d = j >>> 0 > 4294967278 ? j : -18;
				j = 1200 + (0 - d) | 0;
				m = o;
				h = 1200;
				l = 32;
				while (1) {
					k = h + 1 | 0;
					HEAP8[g + m >> 0] = l;
					if ((k | 0) == (j | 0))
						break;
					else {
						m = m + 1 | 0;
						h = k;
						l = HEAP8[k >> 0] | 0
					}
				}
				l = o - d | 0;
				HEAP8[g + l >> 0] = 0;
				if (l >>> 0 < 128)
					if (l >>> 0 < 127) {
						d = l + -127 | 0;
						o = d >>> 0 > 4294967291 ? d : -5;
						d = 1256 + (0 - o) | 0;
						h = l;
						m = 1256;
						j = 49;
						while (1) {
							k = m + 1 | 0;
							HEAP8[g + h >> 0] = j;
							if ((k | 0) == (d | 0))
								break;
							else {
								h = h + 1 | 0;
								m = k;
								j = HEAP8[k >> 0] | 0
							}
						}
						r = l - o | 0;
						q = 27
					} else {
						r = 127;
						q = 27
					}
			}
			if ((q | 0) == 27)
				HEAP8[g + r >> 0] = 0;
			if (b) {
				a: do
					if ((HEAP8[g >> 0] | 0) == 35) {
						r = 1;
						while (1) {
							q = r + 1 | 0;
							if ((HEAP8[g + r >> 0] | 0) == 32) {
								s = r;
								break a
							}
							if ((q | 0) < 15)
								r = q;
							else {
								s = q;
								break
							}
						}
					} else
						s = 0;
				while (0);
				r = HEAP32[b + 172 >> 2] | 0;
				if (!r)
					t = s;
				else {
					rc[r & 127](b, g + s | 0);
					n = 0;
					i = e;
					return n | 0
				}
			} else
				t = 0;
			s = HEAP32[p >> 2] | 0;
			HEAP32[f >> 2] = g + t;
			Qb(s | 0, 7576, f | 0) | 0;
			ec(10, s | 0) | 0;
			n = 0;
			i = e;
			return n | 0
		}
		function Ig(a, b, d, e, f, g, h) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			var j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			q = 0,
			r = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0;
			j = i;
			i = i + 1072 | 0;
			k = j;
			l = i;
			i = i + 168 | 0;
			HEAP32[l >> 2] = 0;
			m = j + 160 | 0;
			n = j + 4 | 0;
			sy(m | 0, 0, 900) | 0;
			HEAP32[m + 748 >> 2] = 2147483647;
			HEAP32[m + 752 >> 2] = 2147483647;
			HEAP32[m + 756 >> 2] = 0;
			HEAP32[m + 760 >> 2] = 0;
			HEAP32[m + 716 >> 2] = f;
			f = m + 720 | 0;
			HEAP32[f >> 2] = g;
			HEAP32[m + 724 >> 2] = h;
			HEAP32[m + 176 >> 2] = b;
			HEAP32[m + 168 >> 2] = d;
			d = m + 172 | 0;
			HEAP32[d >> 2] = e;
			my(n, 1, l | 0) | 0;
			s = 0;
			e = s;
			s = 0;
			if ((e | 0) != 0 & (t | 0) != 0) {
				o = oy(HEAP32[e >> 2] | 0, l) | 0;
				if (!o)
					Fa(e | 0, t | 0);
				H = t
			} else
				o = -1;
			if ((o | 0) == 1)
				q = H;
			else
				q = 0;
			while (1) {
				if (q) {
					r = 0;
					u = 19;
					break
				}
				v = m + 160 | 0;
				HEAP32[v >> 2] = n;
				w = m + 164 | 0;
				HEAP32[w >> 2] = 0;
				x = m + 156 | 0;
				HEAP32[x >> 2] = 62;
				s = 0;
				o = ya(17, m | 0, a | 0) | 0;
				e = s;
				s = 0;
				if ((e | 0) != 0 & (t | 0) != 0) {
					y = oy(HEAP32[e >> 2] | 0, l) | 0;
					if (!y)
						Fa(e | 0, t | 0);
					H = t
				} else
					y = -1;
				if ((y | 0) == 1) {
					q = H;
					continue
				}
				if (!o) {
					r = 0;
					u = 19;
					break
				}
				o = HEAP32[f >> 2] | 0;
				if (!o) {
					s = 0;
					e = pa(79, 900) | 0;
					b = s;
					s = 0;
					if ((b | 0) != 0 & (t | 0) != 0) {
						z = oy(HEAP32[b >> 2] | 0, l) | 0;
						if (!z)
							Fa(b | 0, t | 0);
						H = t
					} else
						z = -1;
					if ((z | 0) == 1) {
						q = H;
						continue
					}
					A = e
				} else {
					s = 0;
					e = ya(o | 0, m | 0, 900) | 0;
					o = s;
					s = 0;
					if ((o | 0) != 0 & (t | 0) != 0) {
						B = oy(HEAP32[o >> 2] | 0, l) | 0;
						if (!B)
							Fa(o | 0, t | 0);
						H = t
					} else
						B = -1;
					if ((B | 0) == 1) {
						q = H;
						continue
					}
					A = e
				}
				if (A) {
					u = 18;
					break
				}
				e = HEAP32[d >> 2] | 0;
				if (e) {
					s = 0;
					na(e | 0, m | 0, 3264);
					e = s;
					s = 0;
					if ((e | 0) != 0 & (t | 0) != 0) {
						C = oy(HEAP32[e >> 2] | 0, l) | 0;
						if (!C)
							Fa(e | 0, t | 0);
						H = t
					} else
						C = -1;
					if ((C | 0) == 1) {
						q = H;
						continue
					} else {
						u = 14;
						break
					}
				}
				e = HEAP32[p >> 2] | 0;
				s = 0;
				HEAP32[k >> 2] = 3264;
				ia(25, e | 0, 7576, k | 0) | 0;
				o = s;
				s = 0;
				if ((o | 0) != 0 & (t | 0) != 0) {
					D = oy(HEAP32[o >> 2] | 0, l) | 0;
					if (!D)
						Fa(o | 0, t | 0);
					H = t
				} else
					D = -1;
				if ((D | 0) == 1) {
					q = H;
					continue
				}
				s = 0;
				ya(18, 10, e | 0) | 0;
				e = s;
				s = 0;
				if ((e | 0) != 0 & (t | 0) != 0) {
					E = oy(HEAP32[e >> 2] | 0, l) | 0;
					if (!E)
						Fa(e | 0, t | 0);
					H = t
				} else
					E = -1;
				if ((E | 0) == 1)
					q = H;
				else {
					u = 17;
					break
				}
			}
			if ((u | 0) == 14) {
				r = 0;
				i = j;
				return r | 0
			} else if ((u | 0) == 17) {
				r = 0;
				i = j;
				return r | 0
			} else if ((u | 0) == 18) {
				HEAP32[m + 256 >> 2] = 26;
				HEAP32[m + 260 >> 2] = 63;
				HEAP32[m + 264 >> 2] = A;
				HEAP32[v >> 2] = 0;
				HEAP32[w >> 2] = 0;
				HEAP32[x >> 2] = 0;
				qy(A | 0, m | 0, 900) | 0;
				r = A;
				i = j;
				return r | 0
			} else if ((u | 0) == 19) {
				i = j;
				return r | 0
			}
			return 0
		}
		function Jg(a) {
			a = a | 0;
			var b = 0,
			d = 0,
			e = 0,
			f = 0;
			b = i;
			if (a) {
				d = HEAP32[a + 720 >> 2] | 0;
				if (!d)
					e = vx(268) | 0;
				else
					e = Cc[d & 31](a, 268) | 0;
				if (!e)
					f = e;
				else {
					sy(e | 0, 0, 268) | 0;
					f = e
				}
			} else
				f = 0;
			i = b;
			return f | 0
		}
		function Kg(e, f, g, h) {
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			var j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0;
			j = i;
			if ((e | 0) == 0 | (f | 0) == 0) {
				i = j;
				return
			}
			k = f + 232 | 0;
			do
				if (g & 16384 & HEAP32[k >> 2]) {
					if ((h | 0) != -1) {
						l = f + 136 | 0;
						m = HEAP32[l >> 2] | 0;
						if (!m)
							break;
						n = HEAP32[m + (h * 28 | 0) + 4 >> 2] | 0;
						if (!n)
							break;
						m = HEAP32[e + 724 >> 2] | 0;
						if (!m)
							wx(n);
						else
							rc[m & 127](e, n);
						c[(HEAP32[l >> 2] | 0) + (h * 28 | 0) + 4 >> 2] = 0;
						break
					}
					l = f + 128 | 0;
					if ((HEAP32[l >> 2] | 0) > 0) {
						n = 0;
						do {
							Kg(e, f, 16384, n);
							n = n + 1 | 0
						} while ((n | 0) < (HEAP32[l >> 2] | 0))
					}
					n = f + 136 | 0;
					m = HEAP32[n >> 2] | 0;
					do
						if (m) {
							o = HEAP32[e + 724 >> 2] | 0;
							if (!o) {
								wx(m);
								break
							} else {
								rc[o & 127](e, m);
								break
							}
						}
					while (0);
					HEAP32[n >> 2] = 0;
					HEAP32[l >> 2] = 0
				}
			while (0);
			m = HEAP32[k >> 2] | 0;
			if (!(g & 8192 & m))
				p = m;
			else {
				m = f + 156 | 0;
				o = HEAP32[m >> 2] | 0;
				do
					if (o) {
						q = HEAP32[e + 724 >> 2] | 0;
						if (!q) {
							wx(o);
							break
						} else {
							rc[q & 127](e, o);
							break
						}
					}
				while (0);
				HEAP32[m >> 2] = 0;
				m = f + 8 | 0;
				HEAP32[m >> 2] = HEAP32[m >> 2] & -17;
				p = HEAP32[k >> 2] | 0
			}
			if (!(g & 256 & p))
				r = p;
			else {
				p = f + 256 | 0;
				m = HEAP32[p >> 2] | 0;
				do
					if (m) {
						o = HEAP32[e + 724 >> 2] | 0;
						if (!o) {
							wx(m);
							break
						} else {
							rc[o & 127](e, m);
							break
						}
					}
				while (0);
				m = f + 260 | 0;
				o = HEAP32[m >> 2] | 0;
				do
					if (o) {
						q = HEAP32[e + 724 >> 2] | 0;
						if (!q) {
							wx(o);
							break
						} else {
							rc[q & 127](e, o);
							break
						}
					}
				while (0);
				HEAP32[p >> 2] = 0;
				HEAP32[m >> 2] = 0;
				m = f + 8 | 0;
				HEAP32[m >> 2] = HEAP32[m >> 2] & -16385;
				r = HEAP32[k >> 2] | 0
			}
			if (!(g & 128 & r))
				s = r;
			else {
				r = f + 208 | 0;
				m = HEAP32[r >> 2] | 0;
				do
					if (m) {
						p = HEAP32[e + 724 >> 2] | 0;
						if (!p) {
							wx(m);
							break
						} else {
							rc[p & 127](e, m);
							break
						}
					}
				while (0);
				m = f + 220 | 0;
				p = HEAP32[m >> 2] | 0;
				do
					if (p) {
						o = HEAP32[e + 724 >> 2] | 0;
						if (!o) {
							wx(p);
							break
						} else {
							rc[o & 127](e, p);
							break
						}
					}
				while (0);
				HEAP32[r >> 2] = 0;
				HEAP32[m >> 2] = 0;
				m = f + 224 | 0;
				r = HEAP32[m >> 2] | 0;
				if (r) {
					p = f + 229 | 0;
					if (HEAP8[p >> 0] | 0) {
						o = e + 724 | 0;
						q = r;
						t = 0;
						do {
							u = HEAP32[q + (t << 2) >> 2] | 0;
							do
								if (u) {
									v = HEAP32[o >> 2] | 0;
									if (!v) {
										wx(u);
										break
									} else {
										rc[v & 127](e, u);
										break
									}
								}
							while (0);
							c[(HEAP32[m >> 2] | 0) + (t << 2) >> 2] = 0;
							t = t + 1 | 0;
							q = HEAP32[m >> 2] | 0
						} while (t >>> 0 < (HEAPU8[p >> 0] | 0) >>> 0);
						if (q) {
							w = q;
							x = 51
						}
					} else {
						w = r;
						x = 51
					}
					do
						if ((x | 0) == 51) {
							r = HEAP32[e + 724 >> 2] | 0;
							if (!r) {
								wx(w);
								break
							} else {
								rc[r & 127](e, w);
								break
							}
						}
					while (0);
					HEAP32[m >> 2] = 0
				}
				m = f + 8 | 0;
				HEAP32[m >> 2] = HEAP32[m >> 2] & -1025;
				s = HEAP32[k >> 2] | 0
			}
			if (!(g & 16 & s))
				y = s;
			else {
				s = f + 116 | 0;
				m = HEAP32[s >> 2] | 0;
				do
					if (m) {
						w = HEAP32[e + 724 >> 2] | 0;
						if (!w) {
							wx(m);
							break
						} else {
							rc[w & 127](e, m);
							break
						}
					}
				while (0);
				m = f + 120 | 0;
				w = HEAP32[m >> 2] | 0;
				do
					if (w) {
						r = HEAP32[e + 724 >> 2] | 0;
						if (!r) {
							wx(w);
							break
						} else {
							rc[r & 127](e, w);
							break
						}
					}
				while (0);
				HEAP32[s >> 2] = 0;
				HEAP32[m >> 2] = 0;
				m = f + 8 | 0;
				HEAP32[m >> 2] = HEAP32[m >> 2] & -4097;
				y = HEAP32[k >> 2] | 0
			}
			do
				if (g & 32 & y) {
					if ((h | 0) == -1) {
						m = f + 248 | 0;
						s = HEAP32[m >> 2] | 0;
						if (s) {
							if ((s | 0) > 0) {
								s = 0;
								do {
									Kg(e, f, 32, s);
									s = s + 1 | 0
								} while ((s | 0) < (HEAP32[m >> 2] | 0))
							}
							s = f + 244 | 0;
							w = HEAP32[s >> 2] | 0;
							do
								if (w) {
									r = HEAP32[e + 724 >> 2] | 0;
									if (!r) {
										wx(w);
										break
									} else {
										rc[r & 127](e, w);
										break
									}
								}
							while (0);
							HEAP32[s >> 2] = 0;
							HEAP32[m >> 2] = 0
						}
						w = f + 8 | 0;
						HEAP32[w >> 2] = HEAP32[w >> 2] & -8193;
						break
					}
					w = f + 244 | 0;
					r = HEAP32[w >> 2] | 0;
					if (r) {
						q = HEAP32[r + (h << 4) >> 2] | 0;
						do
							if (q) {
								r = HEAP32[e + 724 >> 2] | 0;
								if (!r) {
									wx(q);
									break
								} else {
									rc[r & 127](e, q);
									break
								}
							}
						while (0);
						q = HEAP32[(HEAP32[w >> 2] | 0) + (h << 4) + 8 >> 2] | 0;
						do
							if (q) {
								m = HEAP32[e + 724 >> 2] | 0;
								if (!m) {
									wx(q);
									break
								} else {
									rc[m & 127](e, q);
									break
								}
							}
						while (0);
						q = HEAP32[w >> 2] | 0;
						HEAP32[q + (h << 4) >> 2] = 0;
						HEAP32[q + (h << 4) + 8 >> 2] = 0
					}
				}
			while (0);
			do
				if (g & 512 & HEAP32[k >> 2]) {
					if ((h | 0) != -1) {
						y = f + 236 | 0;
						q = HEAP32[y >> 2] | 0;
						if (!q)
							break;
						m = HEAP32[q + (h * 20 | 0) + 8 >> 2] | 0;
						do
							if (m) {
								q = HEAP32[e + 724 >> 2] | 0;
								if (!q) {
									wx(m);
									break
								} else {
									rc[q & 127](e, m);
									break
								}
							}
						while (0);
						c[(HEAP32[y >> 2] | 0) + (h * 20 | 0) + 8 >> 2] = 0;
						break
					}
					m = f + 240 | 0;
					w = HEAP32[m >> 2] | 0;
					if (w) {
						if ((w | 0) > 0) {
							w = 0;
							do {
								Kg(e, f, 512, w);
								w = w + 1 | 0
							} while ((w | 0) < (HEAP32[m >> 2] | 0))
						}
						w = f + 236 | 0;
						y = HEAP32[w >> 2] | 0;
						do
							if (y) {
								q = HEAP32[e + 724 >> 2] | 0;
								if (!q) {
									wx(y);
									break
								} else {
									rc[q & 127](e, y);
									break
								}
							}
						while (0);
						HEAP32[w >> 2] = 0;
						HEAP32[m >> 2] = 0
					}
				}
			while (0);
			y = HEAP32[k >> 2] | 0;
			if (!(g & 8 & y))
				z = y;
			else {
				y = f + 204 | 0;
				q = HEAP32[y >> 2] | 0;
				do
					if (q) {
						s = HEAP32[e + 724 >> 2] | 0;
						if (!s) {
							wx(q);
							break
						} else {
							rc[s & 127](e, q);
							break
						}
					}
				while (0);
				HEAP32[y >> 2] = 0;
				y = f + 8 | 0;
				HEAP32[y >> 2] = HEAP32[y >> 2] & -65;
				z = HEAP32[k >> 2] | 0
			}
			if (!(g & 4096 & z))
				A = z;
			else {
				z = f + 16 | 0;
				y = HEAP32[z >> 2] | 0;
				do
					if (y) {
						q = HEAP32[e + 724 >> 2] | 0;
						if (!q) {
							wx(y);
							break
						} else {
							rc[q & 127](e, y);
							break
						}
					}
				while (0);
				HEAP32[z >> 2] = 0;
				z = f + 8 | 0;
				HEAP32[z >> 2] = HEAP32[z >> 2] & -9;
				HEAP16[f + 20 >> 1] = 0;
				A = HEAP32[k >> 2] | 0
			}
			if (!(g & 64 & A))
				B = A;
			else {
				z = f + 264 | 0;
				y = HEAP32[z >> 2] | 0;
				if (!y)
					C = A;
				else {
					A = f + 4 | 0;
					if (HEAP32[A >> 2] | 0) {
						q = e + 724 | 0;
						s = y;
						r = 0;
						do {
							p = HEAP32[s + (r << 2) >> 2] | 0;
							do
								if (p) {
									t = HEAP32[q >> 2] | 0;
									if (!t) {
										wx(p);
										break
									} else {
										rc[t & 127](e, p);
										break
									}
								}
							while (0);
							c[(HEAP32[z >> 2] | 0) + (r << 2) >> 2] = 0;
							r = r + 1 | 0;
							s = HEAP32[z >> 2] | 0
						} while (r >>> 0 < (HEAP32[A >> 2] | 0) >>> 0);
						if (s) {
							D = s;
							x = 125
						}
					} else {
						D = y;
						x = 125
					}
					do
						if ((x | 0) == 125) {
							y = HEAP32[e + 724 >> 2] | 0;
							if (!y) {
								wx(D);
								break
							} else {
								rc[y & 127](e, D);
								break
							}
						}
					while (0);
					HEAP32[z >> 2] = 0;
					C = HEAP32[k >> 2] | 0
				}
				z = f + 8 | 0;
				HEAP32[z >> 2] = HEAP32[z >> 2] & -32769;
				B = C
			}
			HEAP32[k >> 2] = B & ~((h | 0) == -1 ? g : g & -16929);
			i = j;
			return
		}
		function Lg(a) {
			a = a | 0;
			var b = 0;
			if (!a)
				b = 0;
			else
				b = HEAP32[a + 188 >> 2] | 0;
			return b | 0
		}
		function Mg(a, d, e) {
			a = a | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0.0,
			l = 0,
			m = 0;
			f = i;
			if ((e + -16 | 0) >>> 0 <= 624999984) {
				g = HEAP16[d + 74 >> 1] | 0;
				if ((g & 8) == 0 ? 1 : (HEAP32[a + 208 >> 2] & 32768 | 0) == 0) {
					h = d + 74 | 0;
					if (g << 16 >> 16 < 0) {
						i = f;
						return
					}
					do
						if (g & 1) {
							j = HEAP32[d >> 2] | 0;
							if ((!((e | 0) == 0 | (j | 0) == 0) ? (k = +R( + ( + (j | 0) * 1.0e5 /  + (e | 0) + .5)), k <= 2147483647.0 & k >= -2147483648.0) : 0) ? (~~k + -95e3 | 0) >>> 0 <= 1e4 : 0)
								break;
							if (!(g & 32)) {
								Ng(a, 8088, 0);
								break
							}
							Ng(a, 8056, 2);
							i = f;
							return
						}
					while (0);
					HEAP32[d >> 2] = e;
					HEAP16[h >> 1] = g & 65535 | 9;
					i = f;
					return
				} else {
					l = g;
					m = 1544
				}
			} else {
				l = HEAP16[d + 74 >> 1] | 0;
				m = 1512
			}
			HEAP16[d + 74 >> 1] = l & 65535 | 32768;
			Ng(a, m, 1);
			i = f;
			return
		}
		function Ng(b, d, e) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0;
			f = i;
			i = i + 16 | 0;
			g = f;
			if (HEAP32[b + 208 >> 2] & 32768) {
				if ((e | 0) < 2) {
					Zg(b, d);
					i = f;
					return
				}
				if (!(HEAP32[b + 212 >> 2] & 1048576))
					_g(b, d);
				Zg(b, d);
				i = f;
				return
			}
			h = HEAP32[b + 212 >> 2] | 0;
			if ((e | 0) < 1) {
				if (!(h & 2097152))
					Eg(b, d);
				a: do
					if ((HEAP8[d >> 0] | 0) == 35) {
						e = 1;
						while (1) {
							j = e + 1 | 0;
							if ((HEAP8[d + e >> 0] | 0) == 32) {
								k = e;
								break a
							}
							if ((j | 0) < 15)
								e = j;
							else {
								k = j;
								break
							}
						}
					} else
						k = 0;
				while (0);
				e = HEAP32[b + 172 >> 2] | 0;
				j = d + k | 0;
				if (!e) {
					k = HEAP32[p >> 2] | 0;
					HEAP32[g >> 2] = j;
					Qb(k | 0, 7576, g | 0) | 0;
					ec(10, k | 0) | 0;
					i = f;
					return
				} else {
					rc[e & 127](b, j);
					i = f;
					return
				}
			} else {
				if (!(h & 4194304))
					Eg(b, d);
				b: do
					if ((HEAP8[d >> 0] | 0) == 35) {
						h = 1;
						while (1) {
							j = h + 1 | 0;
							if ((HEAP8[d + h >> 0] | 0) == 32) {
								l = h;
								break b
							}
							if ((j | 0) < 15)
								h = j;
							else {
								l = j;
								break
							}
						}
					} else
						l = 0;
				while (0);
				h = HEAP32[b + 172 >> 2] | 0;
				j = d + l | 0;
				if (!h) {
					l = HEAP32[p >> 2] | 0;
					HEAP32[g >> 2] = j;
					Qb(l | 0, 7576, g | 0) | 0;
					ec(10, l | 0) | 0;
					i = f;
					return
				} else {
					rc[h & 127](b, j);
					i = f;
					return
				}
			}
		}
		function Og(a, d, f, g) {
			a = a | 0;
			d = d | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0;
			h = i;
			i = i + 48 | 0;
			j = h;
			k = ri(j, f) | 0;
			if ((k | 0) == 1) {
				l = d + 74 | 0;
				HEAP16[l >> 1] = HEAPU16[l >> 1] | 0 | 32768;
				Pg(a, 1560);
				m = 0;
				i = h;
				return m | 0
			} else if (!k) {
				k = d + 74 | 0;
				l = HEAPU16[k >> 1] | 0;
				if (l & 32768) {
					m = 0;
					i = h;
					return m | 0
				}
				n = d + 4 | 0;
				do
					if (!((g | 0) > 1 | (l & 2 | 0) == 0))
						if (!(si(f, n, 100) | 0)) {
							HEAP16[k >> 1] = l | 32768;
							Pg(a, 8024);
							m = 0;
							i = h;
							return m | 0
						} else {
							if (!g)
								m = 1;
							else
								break;
							i = h;
							return m | 0
						}
				while (0);
				HEAP32[n + 0 >> 2] = HEAP32[f + 0 >> 2];
				HEAP32[n + 4 >> 2] = HEAP32[f + 4 >> 2];
				HEAP32[n + 8 >> 2] = HEAP32[f + 8 >> 2];
				HEAP32[n + 12 >> 2] = HEAP32[f + 12 >> 2];
				HEAP32[n + 16 >> 2] = HEAP32[f + 16 >> 2];
				HEAP32[n + 20 >> 2] = HEAP32[f + 20 >> 2];
				HEAP32[n + 24 >> 2] = HEAP32[f + 24 >> 2];
				HEAP32[n + 28 >> 2] = HEAP32[f + 28 >> 2];
				n = d + 36 | 0;
				g = j + 0 | 0;
				j = n + 36 | 0;
				do {
					HEAP32[n >> 2] = HEAP32[g >> 2];
					n = n + 4 | 0;
					g = g + 4 | 0
				} while ((n | 0) < (j | 0));
				g = (si(f, 1776, 1e3) | 0) == 0;
				HEAP16[k >> 1] = g ? l & 65469 | 2 : l | 66;
				m = 2;
				i = h;
				return m | 0
			} else {
				m = d + 74 | 0;
				HEAP16[m >> 1] = HEAPU16[m >> 1] | 0 | 32768;
				Eg(a, 1584)
			}
			return 0
		}
		function Pg(b, d) {
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0;
			e = i;
			i = i + 16 | 0;
			f = e;
			g = (HEAP32[b + 208 >> 2] & 32768 | 0) != 0;
			if (!(HEAP32[b + 212 >> 2] & 1048576)) {
				if (!g)
					Eg(b, d);
				if (!(HEAP32[b + 376 >> 2] | 0))
					Eg(b, d);
				else
					_g(b, d)
			}
			if (g ? (HEAP32[b + 376 >> 2] | 0) != 0 : 0) {
				Zg(b, d);
				i = e;
				return
			}
			if (b) {
				a: do
					if ((HEAP8[d >> 0] | 0) == 35) {
						g = 1;
						while (1) {
							h = g + 1 | 0;
							if ((HEAP8[d + g >> 0] | 0) == 32) {
								j = g;
								break a
							}
							if ((h | 0) < 15)
								g = h;
							else {
								j = h;
								break
							}
						}
					} else
						j = 0;
				while (0);
				g = HEAP32[b + 172 >> 2] | 0;
				if (!g)
					k = j;
				else {
					rc[g & 127](b, d + j | 0);
					i = e;
					return
				}
			} else
				k = 0;
			j = HEAP32[p >> 2] | 0;
			HEAP32[f >> 2] = d + k;
			Qb(j | 0, 7576, f | 0) | 0;
			ec(10, j | 0) | 0;
			i = e;
			return
		}
		function Qg(a, d, f) {
			a = a | 0;
			d = d | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0.0;
			g = i;
			h = d + 74 | 0;
			j = HEAP16[h >> 1] | 0;
			k = j & 65535;
			if (k & 32768) {
				l = 0;
				i = g;
				return l | 0
			}
			if (f >>> 0 > 3) {
				ui(a, d, 1664, f, 1672);
				l = 0;
				i = g;
				return l | 0
			}
			if ((k & 4 | 0) != 0 ? (HEAPU16[d + 72 >> 1] | 0 | 0) != (f | 0) : 0) {
				ui(a, d, 1664, f, 1704);
				l = 0;
				i = g;
				return l | 0
			}
			if (k & 32) {
				Pg(a, 1736);
				l = 0;
				i = g;
				return l | 0
			}
			if ((k & 2 | 0) != 0 ? (si(1776, d + 4 | 0, 100) | 0) == 0 : 0) {
				Ng(a, 1808, 2);
				m = HEAP16[h >> 1] | 0
			} else
				m = j;
			do
				if (!(m & 1))
					n = m;
				else {
					j = HEAP32[d >> 2] | 0;
					if (((j | 0) != 0 ? (o = +R( + ( + (j | 0) * 1.0e5 / 45455.0 + .5)), o <= 2147483647.0 & o >= -2147483648.0) : 0) ? (~~o + -95e3 | 0) >>> 0 <= 1e4 : 0) {
						n = m;
						break
					}
					Ng(a, 8056, 2);
					n = HEAP16[h >> 1] | 0
				}
			while (0);
			HEAP16[d + 72 >> 1] = f;
			f = n & 65535;
			n = d + 4 | 0;
			HEAP32[n + 0 >> 2] = HEAP32[444];
			HEAP32[n + 4 >> 2] = HEAP32[445];
			HEAP32[n + 8 >> 2] = HEAP32[446];
			HEAP32[n + 12 >> 2] = HEAP32[447];
			HEAP32[n + 16 >> 2] = HEAP32[448];
			HEAP32[n + 20 >> 2] = HEAP32[449];
			HEAP32[n + 24 >> 2] = HEAP32[450];
			HEAP32[n + 28 >> 2] = HEAP32[451];
			n = d + 36 | 0;
			a = 1624 | 0;
			m = n + 36 | 0;
			do {
				HEAP32[n >> 2] = HEAP32[a >> 2];
				n = n + 4 | 0;
				a = a + 4 | 0
			} while ((n | 0) < (m | 0));
			HEAP32[d >> 2] = 45455;
			HEAP16[h >> 1] = f | 231;
			l = 1;
			i = g;
			return l | 0
		}
		function Rg(a, b, c, e, f, g) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0,
			k = 0;
			h = i;
			j = (HEAPU8[f + 1 >> 0] | 0) << 16 | (HEAPU8[f >> 0] | 0) << 24 | (HEAPU8[f + 2 >> 0] | 0) << 8 | (HEAPU8[f + 3 >> 0] | 0);
			if ((j | 0) != (e | 0)) {
				ui(a, b, c, j, 1872);
				k = 0;
				i = h;
				return k | 0
			}
			j = (HEAPU8[f + 129 >> 0] | 0) << 16 | (HEAPU8[f + 128 >> 0] | 0) << 24 | (HEAPU8[f + 130 >> 0] | 0) << 8 | (HEAPU8[f + 131 >> 0] | 0);
			if (j >>> 0 <= 357913930 ? ((j * 12 | 0) + 132 | 0) >>> 0 <= e >>> 0 : 0) {
				e = (HEAPU8[f + 65 >> 0] | 0) << 16 | (HEAPU8[f + 64 >> 0] | 0) << 24 | (HEAPU8[f + 66 >> 0] | 0) << 8 | (HEAPU8[f + 67 >> 0] | 0);
				if (e >>> 0 > 65534) {
					ui(a, b, c, e, 1928);
					k = 0;
					i = h;
					return k | 0
				}
				if (e >>> 0 > 3)
					ui(a, 0, c, e, 1960);
				e = (HEAPU8[f + 37 >> 0] | 0) << 16 | (HEAPU8[f + 36 >> 0] | 0) << 24 | (HEAPU8[f + 38 >> 0] | 0) << 8 | (HEAPU8[f + 39 >> 0] | 0);
				if ((e | 0) != 1633907568) {
					ui(a, b, c, e, 1992);
					k = 0;
					i = h;
					return k | 0
				}
				if (by(f + 68 | 0, 2016, 12) | 0)
					ui(a, 0, c, 0, 2032);
				e = (HEAPU8[f + 17 >> 0] | 0) << 16 | (HEAPU8[f + 16 >> 0] | 0) << 24 | (HEAPU8[f + 18 >> 0] | 0) << 8 | (HEAPU8[f + 19 >> 0] | 0);
				if ((e | 0) == 1196573017) {
					if (g & 2) {
						ui(a, b, c, 1196573017, 2112);
						k = 0;
						i = h;
						return k | 0
					}
				} else if ((e | 0) == 1380401696) {
					if (!(g & 2)) {
						ui(a, b, c, 1380401696, 2064);
						k = 0;
						i = h;
						return k | 0
					}
				} else {
					ui(a, b, c, e, 2160);
					k = 0;
					i = h;
					return k | 0
				}
				e = (HEAPU8[f + 13 >> 0] | 0) << 16 | (HEAPU8[f + 12 >> 0] | 0) << 24 | (HEAPU8[f + 14 >> 0] | 0) << 8 | (HEAPU8[f + 15 >> 0] | 0);
				if ((e | 0) == 1633842036) {
					ui(a, b, c, 1633842036, 2192);
					k = 0;
					i = h;
					return k | 0
				} else if ((e | 0) == 1818848875) {
					ui(a, b, c, 1818848875, 2232);
					k = 0;
					i = h;
					return k | 0
				} else if ((e | 0) == 1852662636)
					ui(a, 0, c, 1852662636, 2272);
				else if (!((e | 0) == 1936744803 | (e | 0) == 1886549106 | (e | 0) == 1835955314 | (e | 0) == 1935896178))
					ui(a, 0, c, e, 2312);
				e = (HEAPU8[f + 21 >> 0] | 0) << 16 | (HEAPU8[f + 20 >> 0] | 0) << 24 | (HEAPU8[f + 22 >> 0] | 0) << 8 | (HEAPU8[f + 23 >> 0] | 0);
				if ((e | 0) == 1281450528 | (e | 0) == 1482250784) {
					k = 1;
					i = h;
					return k | 0
				}
				ui(a, b, c, e, 2344);
				k = 0;
				i = h;
				return k | 0
			}
			ui(a, b, c, j, 1904);
			k = 0;
			i = h;
			return k | 0
		}
		function Sg(a, b, c, e, f) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0;
			g = i;
			h = (HEAPU8[f + 129 >> 0] | 0) << 16 | (HEAPU8[f + 128 >> 0] | 0) << 24 | (HEAPU8[f + 130 >> 0] | 0) << 8 | (HEAPU8[f + 131 >> 0] | 0);
			if (!h) {
				j = 1;
				i = g;
				return j | 0
			}
			k = 0;
			l = f + 132 | 0;
			while (1) {
				m = (HEAPU8[l + 1 >> 0] | 0) << 16 | (HEAPU8[l >> 0] | 0) << 24 | (HEAPU8[l + 2 >> 0] | 0) << 8 | (HEAPU8[l + 3 >> 0] | 0);
				f = HEAPU8[l + 7 >> 0] | 0;
				n = (HEAPU8[l + 5 >> 0] | 0) << 16 | (HEAPU8[l + 4 >> 0] | 0) << 24 | (HEAPU8[l + 6 >> 0] | 0) << 8 | f;
				o = (HEAPU8[l + 9 >> 0] | 0) << 16 | (HEAPU8[l + 8 >> 0] | 0) << 24 | (HEAPU8[l + 10 >> 0] | 0) << 8 | (HEAPU8[l + 11 >> 0] | 0);
				if (f & 3)
					ui(a, 0, c, m, 2376);
				if (n >>> 0 > e >>> 0 | o >>> 0 > (e - n | 0) >>> 0)
					break;
				k = k + 1 | 0;
				if (k >>> 0 >= h >>> 0) {
					j = 1;
					p = 8;
					break
				} else
					l = l + 12 | 0
			}
			if ((p | 0) == 8) {
				i = g;
				return j | 0
			}
			ui(a, b, c, m, 2424);
			j = 0;
			i = g;
			return j | 0
		}
		function Tg(a, b, f, g) {
			a = a | 0;
			b = b | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0,
			O = 0,
			P = 0,
			Q = 0,
			R = 0,
			S = 0,
			T = 0,
			U = 0,
			V = 0;
			h = i;
			j = f + 84 | 0;
			k = f + 85 | 0;
			l = f + 86 | 0;
			m = f + 87 | 0;
			n = f + 88 | 0;
			o = f + 89 | 0;
			p = f + 90 | 0;
			q = f + 91 | 0;
			r = f + 92 | 0;
			s = f + 93 | 0;
			t = f + 94 | 0;
			u = f + 95 | 0;
			v = f + 96 | 0;
			w = f + 97 | 0;
			x = f + 98 | 0;
			y = f + 99 | 0;
			z = f + 1 | 0;
			A = f + 2 | 0;
			B = f + 3 | 0;
			C = f + 64 | 0;
			D = f + 65 | 0;
			E = f + 66 | 0;
			F = f + 67 | 0;
			G = g;
			g = 0;
			H = 0;
			I = 65536;
			J = 0;
			while (1) {
				if (((((HEAPU8[k >> 0] | 0) << 16 | (HEAPU8[j >> 0] | 0) << 24 | (HEAPU8[l >> 0] | 0) << 8 | (HEAPU8[m >> 0] | 0) | 0) == (HEAP32[7668 + (H << 5) >> 2] | 0) ? ((HEAPU8[o >> 0] | 0) << 16 | (HEAPU8[n >> 0] | 0) << 24 | (HEAPU8[p >> 0] | 0) << 8 | (HEAPU8[q >> 0] | 0) | 0) == (HEAP32[7672 + (H << 5) >> 2] | 0) : 0) ? ((HEAPU8[s >> 0] | 0) << 16 | (HEAPU8[r >> 0] | 0) << 24 | (HEAPU8[t >> 0] | 0) << 8 | (HEAPU8[u >> 0] | 0) | 0) == (HEAP32[7676 + (H << 5) >> 2] | 0) : 0) ? ((HEAPU8[w >> 0] | 0) << 16 | (HEAPU8[v >> 0] | 0) << 24 | (HEAPU8[x >> 0] | 0) << 8 | (HEAPU8[y >> 0] | 0) | 0) == (HEAP32[7680 + (H << 5) >> 2] | 0) : 0) {
					if (!J) {
						K = (HEAPU8[D >> 0] | 0) << 16 | (HEAPU8[C >> 0] | 0) << 24 | (HEAPU8[E >> 0] | 0) << 8 | (HEAPU8[F >> 0] | 0);
						L = (HEAPU8[z >> 0] | 0) << 16 | (HEAPU8[f >> 0] | 0) << 24 | (HEAPU8[A >> 0] | 0) << 8 | (HEAPU8[B >> 0] | 0)
					} else {
						K = I;
						L = J
					}
					if ((L | 0) == (HEAP32[7664 + (H << 5) >> 2] | 0) ? (K | 0) == (HEAPU16[7686 + (H << 5) >> 1] | 0 | 0) : 0) {
						if (!G)
							M = rk(rk(0, 0, 0) | 0, f, L) | 0;
						else
							M = G;
						if ((M | 0) == (HEAP32[7656 + (H << 5) >> 2] | 0)) {
							if (!g)
								N = sk(sk(0, 0, 0) | 0, f, L) | 0;
							else
								N = g;
							if ((N | 0) == (HEAP32[7660 + (H << 5) >> 2] | 0))
								break;
							else {
								O = M;
								P = N
							}
						} else {
							O = M;
							P = g
						}
					} else {
						O = G;
						P = g
					}
					if (H >>> 0 < 4) {
						Pg(a, 7960);
						Q = O;
						R = P;
						S = K;
						T = L
					} else {
						Q = O;
						R = P;
						S = K;
						T = L
					}
				} else {
					Q = G;
					R = g;
					S = I;
					T = J
				}
				U = H + 1 | 0;
				if (U >>> 0 < 7) {
					G = Q;
					g = R;
					H = U;
					I = S;
					J = T
				} else {
					V = 24;
					break
				}
			}
			if ((V | 0) == 24) {
				i = h;
				return
			}
			if ((H + -5 | 0) >>> 0 >= 2) {
				if (H >>> 0 >= 4)
					Ng(a, 7912, 0)
			} else
				Ng(a, 7880, 2);
			Qg(a, b, (HEAPU8[D >> 0] | 0) << 16 | (HEAPU8[C >> 0] | 0) << 24 | (HEAPU8[E >> 0] | 0) << 8 | (HEAPU8[F >> 0] | 0)) | 0;
			i = h;
			return
		}
		function Ug(d) {
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0.0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0;
			e = i;
			if (HEAP8[d + 701 >> 0] | 0) {
				i = e;
				return
			}
			if (!(HEAP16[d + 898 >> 1] & 2)) {
				i = e;
				return
			}
			f = HEAP32[d + 864 >> 2] | 0;
			g = HEAP32[d + 876 >> 2] | 0;
			h = HEAP32[d + 888 >> 2] | 0;
			j = g + f + h | 0;
			if (!((j | 0) > 0 & (f | 0) > -1))
				Eg(d, 2504);
			k = (j | 0) == 0;
			if (k)
				Eg(d, 2504);
			do
				if (f) {
					l = +R( + ( + (f | 0) * 32768.0 /  + (j | 0) + .5));
					if (l <= 2147483647.0 & l >= -2147483648.0) {
						m = ~~l;
						break
					} else
						Eg(d, 2504)
				} else
					m = 0;
			while (0);
			if (!(m >>> 0 < 32769 & (g | 0) > -1))
				Eg(d, 2504);
			if (!k)
				if (g) {
					l = +R( + ( + (g | 0) * 32768.0 /  + (j | 0) + .5));
					if (l <= 2147483647.0 & l >= -2147483648.0) {
						n = 1;
						o = ~~l
					} else {
						n = 0;
						o = g
					}
				} else {
					n = 1;
					o = 0
				}
			else {
				n = 0;
				o = g
			}
			if (k | n & (o | 0) > -1 & (o | 0) < 32769 & (h | 0) > -1 ^ 1)
				Eg(d, 2504);
			if (h) {
				l = +R( + ( + (h | 0) * 32768.0 /  + (j | 0) + .5));
				if (!(l <= 2147483647.0 & l >= -2147483648.0))
					Eg(d, 2504);
				j = ~~l;
				if (j >>> 0 < 32769)
					p = j;
				else
					Eg(d, 2504)
			} else
				p = 0;
			j = o + m + p | 0;
			if ((j | 0) >= 32770)
				Eg(d, 2504);
			if ((j | 0) <= 32768)
				if ((j | 0) < 32768) {
					q = 1;
					r = 20
				} else {
					s = m;
					t = o;
					u = p
				}
			else {
				q = -1;
				r = 20
			}
			do
				if ((r | 0) == 20) {
					if (!((o | 0) < (m | 0) | (o | 0) < (p | 0))) {
						s = m;
						t = q + o | 0;
						u = p;
						break
					}
					if ((m | 0) < (o | 0) | (m | 0) < (p | 0)) {
						s = m;
						t = o;
						u = q + p | 0;
						break
					} else {
						s = q + m | 0;
						t = o;
						u = p;
						break
					}
				}
			while (0);
			if ((t + s + u | 0) != 32768)
				Eg(d, 2456);
			HEAP16[d + 702 >> 1] = s;
			HEAP16[d + 704 >> 1] = t;
			i = e;
			return
		}
		function Vg(a, b, d, e, f, g, h, j) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			var k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0;
			k = i;
			i = i + 16 | 0;
			l = k;
			do
				if (!b) {
					if ((a | 0) != 0 ? (m = HEAP32[a + 172 >> 2] | 0, (m | 0) != 0) : 0) {
						rc[m & 127](a, 2544);
						n = 1;
						break
					}
					m = HEAP32[p >> 2] | 0;
					HEAP32[l >> 2] = 2544;
					Qb(m | 0, 7576, l | 0) | 0;
					ec(10, m | 0) | 0;
					n = 1
				} else
					n = 0;
			while (0);
			do
				if (!d) {
					if ((a | 0) != 0 ? (m = HEAP32[a + 172 >> 2] | 0, (m | 0) != 0) : 0) {
						rc[m & 127](a, 2576);
						o = 1;
						break
					}
					m = HEAP32[p >> 2] | 0;
					HEAP32[l >> 2] = 2576;
					Qb(m | 0, 7576, l | 0) | 0;
					ec(10, m | 0) | 0;
					o = 1
				} else
					o = n;
			while (0);
			do
				if ((HEAP32[a + 748 >> 2] | 0) >>> 0 < b >>> 0) {
					if ((a | 0) != 0 ? (n = HEAP32[a + 172 >> 2] | 0, (n | 0) != 0) : 0) {
						rc[n & 127](a, 2608);
						q = 1;
						break
					}
					n = HEAP32[p >> 2] | 0;
					HEAP32[l >> 2] = 2608;
					Qb(n | 0, 7576, l | 0) | 0;
					ec(10, n | 0) | 0;
					q = 1
				} else
					q = o;
			while (0);
			do
				if ((HEAP32[a + 752 >> 2] | 0) >>> 0 < d >>> 0) {
					if ((a | 0) != 0 ? (o = HEAP32[a + 172 >> 2] | 0, (o | 0) != 0) : 0) {
						rc[o & 127](a, 2648);
						r = 1;
						break
					}
					o = HEAP32[p >> 2] | 0;
					HEAP32[l >> 2] = 2648;
					Qb(o | 0, 7576, l | 0) | 0;
					ec(10, o | 0) | 0;
					r = 1
				} else
					r = q;
			while (0);
			do
				if ((b | 0) < 0) {
					if ((a | 0) != 0 ? (q = HEAP32[a + 172 >> 2] | 0, (q | 0) != 0) : 0) {
						rc[q & 127](a, 2688);
						s = 1;
						break
					}
					q = HEAP32[p >> 2] | 0;
					HEAP32[l >> 2] = 2688;
					Qb(q | 0, 7576, l | 0) | 0;
					ec(10, q | 0) | 0;
					s = 1
				} else
					s = r;
			while (0);
			do
				if ((d | 0) < 0) {
					if ((a | 0) != 0 ? (r = HEAP32[a + 172 >> 2] | 0, (r | 0) != 0) : 0) {
						rc[r & 127](a, 2720);
						t = 1;
						break
					}
					r = HEAP32[p >> 2] | 0;
					HEAP32[l >> 2] = 2720;
					Qb(r | 0, 7576, l | 0) | 0;
					ec(10, r | 0) | 0;
					t = 1
				} else
					t = s;
			while (0);
			do
				if (b >>> 0 > 536870798) {
					if ((a | 0) != 0 ? (s = HEAP32[a + 172 >> 2] | 0, (s | 0) != 0) : 0) {
						rc[s & 127](a, 2752);
						break
					}
					s = HEAP32[p >> 2] | 0;
					HEAP32[l >> 2] = 2752;
					Qb(s | 0, 7576, l | 0) | 0;
					ec(10, s | 0) | 0
				}
			while (0);
			a: do
				switch (e | 0) {
				case 1:
				case 2:
				case 4:
				case 8:
				case 16: {
						u = t;
						break
					}
				default: {
						if ((a | 0) != 0 ? (b = HEAP32[a + 172 >> 2] | 0, (b | 0) != 0) : 0) {
							rc[b & 127](a, 2800);
							u = 1;
							break a
						}
						b = HEAP32[p >> 2] | 0;
						HEAP32[l >> 2] = 2800;
						Qb(b | 0, 7576, l | 0) | 0;
						ec(10, b | 0) | 0;
						u = 1
					}
				}
			while (0);
			do
				if ((f | 0) < 0 | (f | 0) == 1 | (f | 0) == 5 | (f | 0) > 6) {
					if ((a | 0) != 0 ? (t = HEAP32[a + 172 >> 2] | 0, (t | 0) != 0) : 0) {
						rc[t & 127](a, 2832);
						v = 1;
						break
					}
					t = HEAP32[p >> 2] | 0;
					HEAP32[l >> 2] = 2832;
					Qb(t | 0, 7576, l | 0) | 0;
					ec(10, t | 0) | 0;
					v = 1
				} else
					v = u;
			while (0);
			if (!((f | 0) == 3 & (e | 0) > 8) ? !(((f | 0) == 2 | (f | 0) == 4 | (f | 0) == 6) & (e | 0) < 8) : 0)
				w = v;
			else
				x = 48;
			do
				if ((x | 0) == 48) {
					if ((a | 0) != 0 ? (v = HEAP32[a + 172 >> 2] | 0, (v | 0) != 0) : 0) {
						rc[v & 127](a, 2864);
						w = 1;
						break
					}
					v = HEAP32[p >> 2] | 0;
					HEAP32[l >> 2] = 2864;
					Qb(v | 0, 7576, l | 0) | 0;
					ec(10, v | 0) | 0;
					w = 1
				}
			while (0);
			do
				if ((g | 0) > 1) {
					if ((a | 0) != 0 ? (v = HEAP32[a + 172 >> 2] | 0, (v | 0) != 0) : 0) {
						rc[v & 127](a, 2920);
						y = 1;
						break
					}
					v = HEAP32[p >> 2] | 0;
					HEAP32[l >> 2] = 2920;
					Qb(v | 0, 7576, l | 0) | 0;
					ec(10, v | 0) | 0;
					y = 1
				} else
					y = w;
			while (0);
			do
				if (!h)
					z = y;
				else {
					if ((a | 0) != 0 ? (w = HEAP32[a + 172 >> 2] | 0, (w | 0) != 0) : 0) {
						rc[w & 127](a, 2960);
						z = 1;
						break
					}
					w = HEAP32[p >> 2] | 0;
					HEAP32[l >> 2] = 2960;
					Qb(w | 0, 7576, l | 0) | 0;
					ec(10, w | 0) | 0;
					z = 1
				}
			while (0);
			y = a + 208 | 0;
			do
				if ((HEAP32[y >> 2] & 4096 | 0) != 0 ? (HEAP32[a + 708 >> 2] | 0) != 0 : 0) {
					if ((a | 0) != 0 ? (h = HEAP32[a + 172 >> 2] | 0, (h | 0) != 0) : 0) {
						rc[h & 127](a, 3e3);
						break
					}
					h = HEAP32[p >> 2] | 0;
					HEAP32[l >> 2] = 3e3;
					Qb(h | 0, 7576, l | 0) | 0;
					ec(10, h | 0) | 0
				}
			while (0);
			if (j) {
				if (((j | 0) == 64 ? (HEAP32[a + 708 >> 2] & 4 | 0) != 0 : 0) ? (HEAP32[y >> 2] & 4096 | 0) == 0 & (f & -5 | 0) == 2 : 0)
					A = z;
				else
					x = 71;
				do
					if ((x | 0) == 71) {
						if ((a | 0) != 0 ? (f = HEAP32[a + 172 >> 2] | 0, (f | 0) != 0) : 0) {
							rc[f & 127](a, 3056);
							A = 1;
							break
						}
						f = HEAP32[p >> 2] | 0;
						HEAP32[l >> 2] = 3056;
						Qb(f | 0, 7576, l | 0) | 0;
						ec(10, f | 0) | 0;
						A = 1
					}
				while (0);
				if (!(HEAP32[y >> 2] & 4096))
					B = A;
				else {
					if ((a | 0) != 0 ? (A = HEAP32[a + 172 >> 2] | 0, (A | 0) != 0) : 0) {
						rc[A & 127](a, 3088);
						Eg(a, 3120)
					}
					A = HEAP32[p >> 2] | 0;
					HEAP32[l >> 2] = 3088;
					Qb(A | 0, 7576, l | 0) | 0;
					ec(10, A | 0) | 0;
					Eg(a, 3120)
				}
			} else
				B = z;
			if ((B | 0) == 1)
				Eg(a, 3120);
			else {
				i = k;
				return
			}
		}
		function Wg(b, d, e, f) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0;
			g = i;
			h = HEAP32[e >> 2] | 0;
			j = HEAP32[f >> 2] | 0;
			a: do
				if (j >>> 0 < d >>> 0) {
					k = j;
					l = h;
					while (1) {
						switch (HEAP8[b + k >> 0] | 0) {
						case 101:
						case 69: {
								m = 32;
								break
							}
						case 46: {
								m = 16;
								break
							}
						case 45: {
								m = 132;
								break
							}
						case 57:
						case 56:
						case 55:
						case 54:
						case 53:
						case 52:
						case 51:
						case 50:
						case 49: {
								m = 264;
								break
							}
						case 48: {
								m = 8;
								break
							}
						case 43: {
								m = 4;
								break
							}
						default: {
								n = k;
								o = l;
								break a
							}
						}
						b: do
							switch (m & 60 | l & 3 | 0) {
							case 4: {
									if (l & 60) {
										n = k;
										o = l;
										break a
									}
									p = m | l;
									break
								}
							case 6: {
									if (l & 60) {
										n = k;
										o = l;
										break a
									}
									p = l | 4;
									break
								}
							case 33: {
									if (!(l & 8)) {
										n = k;
										o = l;
										break a
									}
									p = l & 448 | 2;
									break
								}
							case 9: {
									p = l | m | 64;
									break
								}
							case 16: {
									if (l & 16) {
										n = k;
										o = l;
										break a
									}
									if (!(l & 8)) {
										p = l & 448 | m | 1;
										break b
									} else {
										p = m | l;
										break b
									}
									break
								}
							case 32: {
									if (!(l & 8)) {
										n = k;
										o = l;
										break a
									}
									p = l & 448 | 2;
									break
								}
							case 8: {
									if (!(l & 16))
										q = l;
									else
										q = l & 448 | 17;
									p = m | q | 64;
									break
								}
							case 10: {
									p = l | 72;
									break
								}
							default: {
									n = k;
									o = l;
									break a
								}
							}
						while (0);
						r = k + 1 | 0;
						if (r >>> 0 < d >>> 0) {
							k = r;
							l = p
						} else {
							n = r;
							o = p;
							break a
						}
					}
				} else {
					n = j;
					o = h
				}
			while (0);
			HEAP32[e >> 2] = o;
			HEAP32[f >> 2] = n;
			i = g;
			return o >>> 3 & 1 | 0
		}
		function Xg(a) {
			a = a | 0;
			var b = 0,
			d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0;
			b = i;
			d = a + 492 | 0;
			e = HEAP32[d >> 2] | 0;
			f = (a | 0) == 0;
			do
				if (!(f | (e | 0) == 0)) {
					g = HEAP32[a + 724 >> 2] | 0;
					if (!g) {
						wx(e);
						break
					} else {
						rc[g & 127](a, e);
						break
					}
				}
			while (0);
			HEAP32[d >> 2] = 0;
			d = a + 496 | 0;
			e = HEAP32[d >> 2] | 0;
			if (e) {
				g = 8 - (HEAP32[a + 484 >> 2] | 0) | 0;
				h = 1 << g;
				if ((g | 0) == 31)
					j = e;
				else {
					g = a + 724 | 0;
					k = e;
					e = 0;
					while (1) {
						l = HEAP32[k + (e << 2) >> 2] | 0;
						do
							if (!(f | (l | 0) == 0)) {
								m = HEAP32[g >> 2] | 0;
								if (!m) {
									wx(l);
									break
								} else {
									rc[m & 127](a, l);
									break
								}
							}
						while (0);
						e = e + 1 | 0;
						l = HEAP32[d >> 2] | 0;
						if ((e | 0) >= (h | 0)) {
							j = l;
							break
						} else
							k = l
					}
				}
				do
					if (!(f | (j | 0) == 0)) {
						k = HEAP32[a + 724 >> 2] | 0;
						if (!k) {
							wx(j);
							break
						} else {
							rc[k & 127](a, j);
							break
						}
					}
				while (0);
				HEAP32[d >> 2] = 0
			}
			d = a + 500 | 0;
			j = HEAP32[d >> 2] | 0;
			do
				if (!(f | (j | 0) == 0)) {
					k = HEAP32[a + 724 >> 2] | 0;
					if (!k) {
						wx(j);
						break
					} else {
						rc[k & 127](a, j);
						break
					}
				}
			while (0);
			HEAP32[d >> 2] = 0;
			d = a + 504 | 0;
			j = HEAP32[d >> 2] | 0;
			do
				if (!(f | (j | 0) == 0)) {
					k = HEAP32[a + 724 >> 2] | 0;
					if (!k) {
						wx(j);
						break
					} else {
						rc[k & 127](a, j);
						break
					}
				}
			while (0);
			HEAP32[d >> 2] = 0;
			d = a + 508 | 0;
			j = HEAP32[d >> 2] | 0;
			if (j) {
				k = 8 - (HEAP32[a + 484 >> 2] | 0) | 0;
				h = 1 << k;
				if ((k | 0) == 31)
					n = j;
				else {
					k = a + 724 | 0;
					e = j;
					j = 0;
					while (1) {
						g = HEAP32[e + (j << 2) >> 2] | 0;
						do
							if (!(f | (g | 0) == 0)) {
								l = HEAP32[k >> 2] | 0;
								if (!l) {
									wx(g);
									break
								} else {
									rc[l & 127](a, g);
									break
								}
							}
						while (0);
						j = j + 1 | 0;
						g = HEAP32[d >> 2] | 0;
						if ((j | 0) >= (h | 0)) {
							n = g;
							break
						} else
							e = g
					}
				}
				do
					if (!(f | (n | 0) == 0)) {
						e = HEAP32[a + 724 >> 2] | 0;
						if (!e) {
							wx(n);
							break
						} else {
							rc[e & 127](a, n);
							break
						}
					}
				while (0);
				HEAP32[d >> 2] = 0
			}
			d = a + 512 | 0;
			n = HEAP32[d >> 2] | 0;
			if (!n) {
				i = b;
				return
			}
			e = 8 - (HEAP32[a + 484 >> 2] | 0) | 0;
			h = 1 << e;
			if ((e | 0) == 31)
				o = n;
			else {
				e = a + 724 | 0;
				j = n;
				n = 0;
				while (1) {
					k = HEAP32[j + (n << 2) >> 2] | 0;
					do
						if (!(f | (k | 0) == 0)) {
							g = HEAP32[e >> 2] | 0;
							if (!g) {
								wx(k);
								break
							} else {
								rc[g & 127](a, k);
								break
							}
						}
					while (0);
					n = n + 1 | 0;
					k = HEAP32[d >> 2] | 0;
					if ((n | 0) >= (h | 0)) {
						o = k;
						break
					} else
						j = k
				}
			}
			do
				if (!(f | (o | 0) == 0)) {
					j = HEAP32[a + 724 >> 2] | 0;
					if (!j) {
						wx(o);
						break
					} else {
						rc[j & 127](a, o);
						break
					}
				}
			while (0);
			HEAP32[d >> 2] = 0;
			i = b;
			return
		}
		function Yg(d, e) {
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			q = 0.0,
			r = 0.0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0,
			O = 0,
			P = 0,
			Q = 0,
			S = 0,
			T = 0;
			f = i;
			i = i + 16 | 0;
			g = f;
			h = d + 492 | 0;
			if (!(HEAP32[h >> 2] | 0)) {
				if (HEAP32[d + 496 >> 2] | 0)
					if (!d)
						j = 6;
					else
						j = 4
			} else
				j = 4;
			if ((j | 0) == 4) {
				k = HEAP32[d + 172 >> 2] | 0;
				if (!k)
					j = 6;
				else {
					rc[k & 127](d, 3144);
					j = 7
				}
			}
			if ((j | 0) == 6) {
				k = HEAP32[p >> 2] | 0;
				HEAP32[g >> 2] = 3144;
				Qb(k | 0, 7576, g | 0) | 0;
				ec(10, k | 0) | 0;
				j = 7
			}
			if ((j | 0) == 7)
				Xg(d);
			if ((e | 0) >= 9) {
				if (!(HEAP8[d + 435 >> 0] & 2))
					l = HEAP8[d + 519 >> 0] | 0;
				else {
					e = HEAP8[d + 516 >> 0] | 0;
					k = HEAP8[d + 517 >> 0] | 0;
					g = (k & 255) > (e & 255) ? k : e;
					e = HEAP8[d + 518 >> 0] | 0;
					l = (e & 255) > (g & 255) ? e : g
				}
				if (l << 24 >> 24 != 0 & (l & 255) < 16)
					m = 16 - (l & 255) & 255;
				else
					m = 0;
				l = d + 216 | 0;
				g = HEAP32[l >> 2] & 67109888;
				e = (g | 0) != 0 & (m & 255) < 5 ? 5 : m;
				m = (e & 255) > 8 ? 8 : e & 255;
				HEAP32[d + 484 >> 2] = m;
				e = d + 496 | 0;
				k = d + 488 | 0;
				n = HEAP32[k >> 2] | 0;
				o = (n | 0) > 0;
				if (g) {
					if (o) {
						q = +R( + ( + (n | 0) * ( + (HEAP32[d + 824 >> 2] | 0) * 1.0e-05) + .5));
						if (q <= 2147483647.0 & q >= -2147483648.0)
							r =  + (~~q | 0) * 1.0e-05;
						else
							r = 0.0
					} else
						r = 1.0;
					g = 8 - m | 0;
					s = 1 << g;
					t = (1 << 16 - m) + -1 | 0;
					u = s << 2;
					v = (d | 0) == 0;
					do
						if (!v) {
							if (!u)
								Eg(d, 3264);
							w = d + 720 | 0;
							x = HEAP32[w >> 2] | 0;
							if (!x)
								y = vx(u) | 0;
							else
								y = Cc[x & 31](d, u) | 0;
							if (!y)
								Eg(d, 3264);
							else {
								sy(y | 0, 0, u | 0) | 0;
								z = y;
								A = w;
								break
							}
						} else {
							z = 0;
							A = 720
						}
					while (0);
					HEAP32[e >> 2] = z;
					y = 0;
					do {
						if (!v) {
							u = HEAP32[A >> 2] | 0;
							if (!u)
								B = vx(512) | 0;
							else
								B = Cc[u & 31](d, 512) | 0;
							if (!B) {
								j = 82;
								break
							} else
								C = B
						} else
							C = 0;
						HEAP32[z + (y << 2) >> 2] = C;
						y = y + 1 | 0
					} while (y >>> 0 < s >>> 0);
					if ((j | 0) == 82)
						Eg(d, 3264);
					j = 255 >>> m;
					y = 0;
					C = 0;
					while (1) {
						B = y * 257 | 0;
						A = B & 65535;
						v = ((((da(~~+R( + (+U( + ( + ((B + 128 | 0) >>> 0) / 65535.0), +r) * 65535.0 + .5)) & 65535, t) | 0) + 32768 | 0) >>> 0) / 65535 | 0) + 1 | 0;
						if (C >>> 0 < v >>> 0) {
							B = C;
							do {
								b[(HEAP32[z + ((B & j) << 2) >> 2] | 0) + (B >>> g << 1) >> 1] = A;
								B = B + 1 | 0
							} while ((B | 0) != (v | 0));
							D = v
						} else
							D = C;
						y = y + 1 | 0;
						if ((y | 0) == 255)
							break;
						else
							C = D
					}
					C = s << 8;
					if (D >>> 0 < C >>> 0) {
						s = D;
						do {
							b[(HEAP32[z + ((s & j) << 2) >> 2] | 0) + (s >>> g << 1) >> 1] = -1;
							s = s + 1 | 0
						} while ((s | 0) != (C | 0))
					}
				} else {
					if (o) {
						r = +R( + (1.0e15 /  + (HEAP32[d + 824 >> 2] | 0) /  + (n | 0) + .5));
						if (r <= 2147483647.0 & r >= -2147483648.0)
							E = ~~r;
						else
							E = 0
					} else
						E = 1e5;
					vi(d, e, m, E)
				}
				if (!(HEAP32[l >> 2] & 6291584)) {
					i = f;
					return
				}
				l = d + 824 | 0;
				r = +R( + (1.0e10 /  + (HEAP32[l >> 2] | 0) + .5));
				if (r <= 2147483647.0 & r >= -2147483648.0)
					F = ~~r;
				else
					F = 0;
				vi(d, d + 512 | 0, m, F);
				F = d + 508 | 0;
				E = HEAP32[k >> 2] | 0;
				if ((E | 0) > 0) {
					r = +R( + (1.0e10 /  + (E | 0) + .5));
					if (r <= 2147483647.0 & r >= -2147483648.0)
						G = ~~r;
					else
						G = 0
				} else
					G = HEAP32[l >> 2] | 0;
				vi(d, F, m, G);
				i = f;
				return
			}
			G = d + 488 | 0;
			m = HEAP32[G >> 2] | 0;
			if ((m | 0) > 0) {
				r = +R( + (1.0e15 /  + (HEAP32[d + 824 >> 2] | 0) /  + (m | 0) + .5));
				if (r <= 2147483647.0 & r >= -2147483648.0)
					H = ~~r;
				else
					H = 0
			} else
				H = 1e5;
			m = (d | 0) == 0;
			if (!m) {
				F = HEAP32[d + 720 >> 2] | 0;
				if (!F)
					I = vx(256) | 0;
				else
					I = Cc[F & 31](d, 256) | 0;
				if (!I)
					Eg(d, 3264);
				else
					J = I
			} else
				J = 0;
			HEAP32[h >> 2] = J;
			if ((H + -95e3 | 0) >>> 0 > 1e4) {
				r =  + (H | 0) * 1.0e-05;
				H = 0;
				do {
					if ((H | 0) != 0 & H >>> 0 < 255)
						K = ~~+R( + (+U( + ( + (H >>> 0) / 255.0), +r) * 255.0 + .5)) & 255;
					else
						K = H & 255;
					HEAP8[J + H >> 0] = K;
					H = H + 1 | 0
				} while ((H | 0) != 256)
			} else {
				H = 0;
				do {
					HEAP8[J + H >> 0] = H;
					H = H + 1 | 0
				} while ((H | 0) != 256)
			}
			if (!(HEAP32[d + 216 >> 2] & 6291584)) {
				i = f;
				return
			}
			H = d + 504 | 0;
			J = d + 824 | 0;
			r = +R( + (1.0e10 /  + (HEAP32[J >> 2] | 0) + .5));
			if (r <= 2147483647.0 & r >= -2147483648.0)
				L = ~~r;
			else
				L = 0;
			if (!m) {
				K = HEAP32[d + 720 >> 2] | 0;
				if (!K)
					M = vx(256) | 0;
				else
					M = Cc[K & 31](d, 256) | 0;
				if (!M)
					Eg(d, 3264);
				else
					N = M
			} else
				N = 0;
			HEAP32[H >> 2] = N;
			if ((L + -95e3 | 0) >>> 0 > 1e4) {
				r =  + (L | 0) * 1.0e-05;
				L = 0;
				do {
					if ((L | 0) != 0 & L >>> 0 < 255)
						O = ~~+R( + (+U( + ( + (L >>> 0) / 255.0), +r) * 255.0 + .5)) & 255;
					else
						O = L & 255;
					HEAP8[N + L >> 0] = O;
					L = L + 1 | 0
				} while ((L | 0) != 256)
			} else {
				L = 0;
				do {
					HEAP8[N + L >> 0] = L;
					L = L + 1 | 0
				} while ((L | 0) != 256)
			}
			L = d + 500 | 0;
			N = HEAP32[G >> 2] | 0;
			if ((N | 0) > 0) {
				r = +R( + (1.0e10 /  + (N | 0) + .5));
				if (r <= 2147483647.0 & r >= -2147483648.0)
					P = ~~r;
				else
					P = 0
			} else
				P = HEAP32[J >> 2] | 0;
			if (!m) {
				m = HEAP32[d + 720 >> 2] | 0;
				if (!m)
					Q = vx(256) | 0;
				else
					Q = Cc[m & 31](d, 256) | 0;
				if (!Q)
					Eg(d, 3264);
				else
					S = Q
			} else
				S = 0;
			HEAP32[L >> 2] = S;
			if ((P + -95e3 | 0) >>> 0 <= 1e4) {
				L = 0;
				do {
					HEAP8[S + L >> 0] = L;
					L = L + 1 | 0
				} while ((L | 0) != 256);
				i = f;
				return
			}
			r =  + (P | 0) * 1.0e-05;
			P = 0;
			do {
				if ((P | 0) != 0 & P >>> 0 < 255)
					T = ~~+R( + (+U( + ( + (P >>> 0) / 255.0), +r) * 255.0 + .5)) & 255;
				else
					T = P & 255;
				HEAP8[S + P >> 0] = T;
				P = P + 1 | 0
			} while ((P | 0) != 256);
			i = f;
			return
		}
		function Zg(b, d) {
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0;
			e = i;
			i = i + 224 | 0;
			f = e;
			g = e + 4 | 0;
			if (!b) {
				h = HEAP32[p >> 2] | 0;
				HEAP32[f >> 2] = d;
				Qb(h | 0, 7576, f | 0) | 0;
				ec(10, h | 0) | 0;
				i = e;
				return
			}
			wi(HEAP32[b + 376 >> 2] | 0, g, d);
			a: do
				if ((HEAP8[g >> 0] | 0) == 35) {
					d = 1;
					while (1) {
						h = d + 1 | 0;
						if ((HEAP8[g + d >> 0] | 0) == 32) {
							j = d;
							break a
						}
						if ((h | 0) < 15)
							d = h;
						else {
							j = h;
							break
						}
					}
				} else
					j = 0;
			while (0);
			d = HEAP32[b + 172 >> 2] | 0;
			h = g + j | 0;
			if (!d) {
				j = HEAP32[p >> 2] | 0;
				HEAP32[f >> 2] = h;
				Qb(j | 0, 7576, f | 0) | 0;
				ec(10, j | 0) | 0;
				i = e;
				return
			} else {
				rc[d & 127](b, h);
				i = e;
				return
			}
		}
		function _g(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0,
			e = 0;
			d = i;
			i = i + 224 | 0;
			e = d;
			if (!a)
				Eg(0, b);
			else {
				wi(HEAP32[a + 376 >> 2] | 0, e, b);
				Eg(a, e)
			}
		}
		function $g(a) {
			a = a | 0;
			var b = 0,
			d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0;
			b = i;
			i = i + 160 | 0;
			d = i;
			i = i + 168 | 0;
			HEAP32[d >> 2] = 0;
			e = b;
			if (!a) {
				i = b;
				return
			}
			f = a + 160 | 0;
			g = HEAP32[f >> 2] | 0;
			h = a + 164 | 0;
			a: do
				if ((g | 0) != 0 ? !((HEAP32[h >> 2] | 0) == 0 | (g | 0) == (a | 0)) : 0) {
					my(e, 1, d | 0) | 0;
					s = 0;
					j = s;
					s = 0;
					if ((j | 0) != 0 & (t | 0) != 0) {
						k = oy(HEAP32[j >> 2] | 0, d) | 0;
						if (!k)
							Fa(j | 0, t | 0);
						H = t
					} else
						k = -1;
					if ((k | 0) == 1)
						l = H;
					else
						l = 0;
					while (1) {
						if (l)
							break a;
						HEAP32[f >> 2] = e;
						HEAP32[h >> 2] = 0;
						HEAP32[a + 156 >> 2] = 62;
						j = HEAP32[a + 724 >> 2] | 0;
						if (!j) {
							s = 0;
							ha(173, g | 0);
							m = s;
							s = 0;
							if ((m | 0) != 0 & (t | 0) != 0) {
								n = oy(HEAP32[m >> 2] | 0, d) | 0;
								if (!n)
									Fa(m | 0, t | 0);
								H = t
							} else
								n = -1;
							if ((n | 0) == 1) {
								l = H;
								continue
							} else {
								o = 11;
								break
							}
						} else {
							s = 0;
							na(j | 0, a | 0, g | 0);
							j = s;
							s = 0;
							if ((j | 0) != 0 & (t | 0) != 0) {
								p = oy(HEAP32[j >> 2] | 0, d) | 0;
								if (!p)
									Fa(j | 0, t | 0);
								H = t
							} else
								p = -1;
							if ((p | 0) == 1) {
								l = H;
								continue
							} else {
								o = 9;
								break
							}
						}
					}
					if ((o | 0) == 9)
						break;
					else if ((o | 0) == 11)
						break
				}
			while (0);
			HEAP32[h >> 2] = 0;
			HEAP32[f >> 2] = 0;
			HEAP32[a + 156 >> 2] = 0;
			i = b;
			return
		}
		function ah(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0,
			e = 0;
			if (((a | 0) != 0 ? (d = HEAP32[a + 156 >> 2] | 0, (d | 0) != 0) : 0) ? (e = HEAP32[a + 160 >> 2] | 0, (e | 0) != 0) : 0)
				rc[d & 127](e, b);
			Gb()
		}
		function bh(a, b, d) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0;
			e = i;
			if (!((a | 0) != 0 & (b | 0) != 0)) {
				f = 0;
				i = e;
				return f | 0
			}
			f = HEAP32[b + 8 >> 2] & d;
			i = e;
			return f | 0
		}
		function ch(b, e, f, g, h, j, k, l, m) {
			b = b | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			k = k | 0;
			l = l | 0;
			m = m | 0;
			var n = 0,
			o = 0,
			p = 0;
			n = i;
			if ((b | 0) == 0 | (e | 0) == 0 | (f | 0) == 0 | (g | 0) == 0 | (h | 0) == 0 | (j | 0) == 0) {
				o = 0;
				i = n;
				return o | 0
			}
			p = HEAP32[e >> 2] | 0;
			HEAP32[f >> 2] = p;
			f = HEAP32[e + 4 >> 2] | 0;
			HEAP32[g >> 2] = f;
			g = HEAPU8[e + 24 >> 0] | 0;
			HEAP32[h >> 2] = g;
			h = HEAPU8[e + 25 >> 0] | 0;
			HEAP32[j >> 2] = h;
			if (l)
				HEAP32[l >> 2] = HEAPU8[e + 26 >> 0];
			if (m)
				HEAP32[m >> 2] = HEAPU8[e + 27 >> 0];
			m = HEAP8[e + 28 >> 0] | 0;
			if (k)
				HEAP32[k >> 2] = m & 255;
			Vg(b, p, f, g, h, m & 255, HEAPU8[e + 26 >> 0] | 0, HEAPU8[e + 27 >> 0] | 0);
			o = 1;
			i = n;
			return o | 0
		}
		function dh(b, e, f) {
			b = b | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0;
			g = i;
			i = i + 16 | 0;
			h = g;
			j = b + 208 | 0;
			k = HEAP32[j >> 2] | 0;
			if (k & 1)
				_g(b, 4112);
			if ((f | 0) != 13)
				_g(b, 4128);
			HEAP32[j >> 2] = k | 1;
			do
				if (b) {
					k = HEAP32[b + 184 >> 2] | 0;
					if (!k)
						Eg(b, 3688);
					vc[k & 31](b, h, 13);
					k = HEAP32[b + 212 >> 2] | 0;
					if (!(HEAP32[b + 376 >> 2] & 536870912)) {
						if (k & 2048)
							break
					} else if ((k & 768 | 0) == 768)
						break;
					k = b + 412 | 0;
					HEAP32[k >> 2] = sk(HEAP32[k >> 2] | 0, h, 13) | 0
				}
			while (0);
			xh(b, 0) | 0;
			k = (HEAPU8[h + 1 >> 0] | 0) << 16 | (HEAPU8[h >> 0] | 0) << 24 | (HEAPU8[h + 2 >> 0] | 0) << 8 | (HEAPU8[h + 3 >> 0] | 0);
			if ((k | 0) < 0)
				Eg(b, 4056);
			j = (HEAPU8[h + 5 >> 0] | 0) << 16 | (HEAPU8[h + 4 >> 0] | 0) << 24 | (HEAPU8[h + 6 >> 0] | 0) << 8 | (HEAPU8[h + 7 >> 0] | 0);
			if ((j | 0) < 0)
				Eg(b, 4056);
			f = HEAP8[h + 8 >> 0] | 0;
			l = f & 255;
			m = HEAP8[h + 9 >> 0] | 0;
			n = m & 255;
			o = HEAP8[h + 10 >> 0] | 0;
			p = o & 255;
			q = HEAP8[h + 11 >> 0] | 0;
			r = q & 255;
			s = HEAP8[h + 12 >> 0] | 0;
			h = s & 255;
			HEAP32[b + 348 >> 2] = k;
			HEAP32[b + 352 >> 2] = j;
			HEAP8[b + 436 >> 0] = f;
			HEAP8[b + 432 >> 0] = s;
			HEAP8[b + 435 >> 0] = m;
			HEAP8[b + 712 >> 0] = q;
			HEAP8[b + 744 >> 0] = o;
			if ((n | 0) == 2) {
				HEAP8[b + 439 >> 0] = 3;
				t = 3
			} else if ((n | 0) == 6) {
				HEAP8[b + 439 >> 0] = 4;
				t = 4
			} else if ((n | 0) == 4) {
				HEAP8[b + 439 >> 0] = 2;
				t = 2
			} else {
				HEAP8[b + 439 >> 0] = 1;
				t = 1
			}
			o = da(t, l) | 0;
			HEAP8[b + 438 >> 0] = o;
			t = o & 255;
			if (t >>> 0 > 7) {
				u = da(t >>> 3, k) | 0;
				v = b + 364 | 0;
				HEAP32[v >> 2] = u;
				gi(b, e, k, j, l, n, h, p, r);
				i = g;
				return
			} else {
				u = ((da(t, k) | 0) + 7 | 0) >>> 3;
				v = b + 364 | 0;
				HEAP32[v >> 2] = u;
				gi(b, e, k, j, l, n, h, p, r);
				i = g;
				return
			}
		}
		function eh(a, b, d, e) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0;
			f = i;
			i = i + 16 | 0;
			g = f;
			h = a + 684 | 0;
			do
				if (!(HEAP32[h >> 2] | 0)) {
					if (!e)
						j = HEAP32[a + 688 >> 2] | 0;
					else
						j = e;
					if ((j | 0) == 3)
						k = 17;
					else if ((j | 0) == 2 ? (HEAP32[a + 376 >> 2] & 536870912 | 0) != 0 : 0)
						k = 17;
					else
						k = 18;
					if ((k | 0) == 17) {
						l = (xi(a, d) | 0) == 0;
						m = l ? 1 : j;
						k = 19;
						break
					} else if ((k | 0) == 18) {
						xh(a, d) | 0;
						m = j;
						k = 19;
						break
					}
				} else if (xi(a, d) | 0) {
					l = Cc[HEAP32[h >> 2] & 31](a, a + 764 | 0) | 0;
					if ((l | 0) < 0)
						_g(a, 4896);
					if (!l)
						if ((e | 0) < 2)
							if ((HEAP32[a + 688 >> 2] | 0) < 2) {
								Zg(a, 4920);
								if (!(HEAP32[a + 212 >> 2] & 2097152))
									Eg(a, 4944);
								l = HEAP32[a + 172 >> 2] | 0;
								if (!l) {
									n = HEAP32[p >> 2] | 0;
									HEAP32[g >> 2] = 4944;
									Qb(n | 0, 7576, g | 0) | 0;
									ec(10, n | 0) | 0;
									k = 20;
									break
								} else {
									rc[l & 127](a, 4944);
									k = 20;
									break
								}
							} else
								k = 20;
						else {
							m = e;
							k = 19
						}
					else
						o = 1
				} else
					o = 0;
			while (0);
			if ((k | 0) == 19)
				if ((m | 0) == 2)
					k = 20;
				else if ((m | 0) == 3)
					k = 21;
				else
					o = 0;
			if ((k | 0) == 20)
				if (!(HEAP32[a + 376 >> 2] & 536870912))
					o = 0;
				else
					k = 21;
			do
				if ((k | 0) == 21) {
					m = a + 756 | 0;
					e = HEAP32[m >> 2] | 0;
					if ((e | 0) == 2) {
						HEAP32[m >> 2] = 1;
						if (!(HEAP32[a + 212 >> 2] & 1048576))
							_g(a, 4768);
						else {
							Zg(a, 4768);
							o = 0;
							break
						}
					} else if ((e | 0) == 1) {
						o = 0;
						break
					} else if (e)
						HEAP32[m >> 2] = e + -1;
					oi(a, b, a + 764 | 0, 1);
					o = 1
				}
			while (0);
			b = a + 772 | 0;
			k = HEAP32[b >> 2] | 0;
			do
				if (!((a | 0) == 0 | (k | 0) == 0)) {
					e = HEAP32[a + 724 >> 2] | 0;
					if (!e) {
						wx(k);
						break
					} else {
						rc[e & 127](a, k);
						break
					}
				}
			while (0);
			HEAP32[b >> 2] = 0;
			if (o) {
				i = f;
				return
			}
			if (!(HEAP32[a + 376 >> 2] & 536870912))
				_g(a, 5024);
			else {
				i = f;
				return
			}
		}
		function fh(d, e, f) {
			d = d | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0;
			g = i;
			i = i + 784 | 0;
			h = g + 8 | 0;
			j = g;
			k = d + 208 | 0;
			l = HEAP32[k >> 2] | 0;
			if (!(l & 1))
				_g(d, 4136);
			if (l & 2)
				_g(d, 1544);
			if (l & 4) {
				xh(d, f) | 0;
				if (!(HEAP32[d + 212 >> 2] & 1048576))
					_g(d, 4112);
				Zg(d, 4112);
				i = g;
				return
			}
			HEAP32[k >> 2] = l | 2;
			l = d + 435 | 0;
			if (!(HEAP8[l >> 0] & 2)) {
				xh(d, f) | 0;
				if (!(HEAP32[d + 212 >> 2] & 1048576))
					_g(d, 4152);
				Zg(d, 4152);
				i = g;
				return
			}
			if (!(f >>> 0 < 769 & ((f >>> 0) % 3 | 0 | 0) == 0)) {
				xh(d, f) | 0;
				if ((HEAP8[l >> 0] | 0) == 3)
					_g(d, 4128);
				if (!(HEAP32[d + 212 >> 2] & 1048576))
					_g(d, 4128);
				Zg(d, 4128);
				i = g;
				return
			}
			l = (f | 0) / 3 | 0;
			a: do
				if ((f | 0) > 2) {
					k = (d | 0) == 0;
					m = j + 1 | 0;
					n = j + 2 | 0;
					o = d + 184 | 0;
					p = d + 376 | 0;
					q = d + 212 | 0;
					r = d + 412 | 0;
					s = 0;
					t = h;
					b: while (1) {
						do
							if (!k) {
								u = HEAP32[o >> 2] | 0;
								if (!u)
									break b;
								vc[u & 31](d, j, 3);
								u = HEAP32[q >> 2] | 0;
								if (!(HEAP32[p >> 2] & 536870912)) {
									if (u & 2048)
										break
								} else if ((u & 768 | 0) == 768)
									break;
								HEAP32[r >> 2] = sk(HEAP32[r >> 2] | 0, j, 3) | 0
							}
						while (0);
						HEAP8[t >> 0] = HEAP8[j >> 0] | 0;
						HEAP8[t + 1 >> 0] = HEAP8[m >> 0] | 0;
						HEAP8[t + 2 >> 0] = HEAP8[n >> 0] | 0;
						s = s + 1 | 0;
						if ((s | 0) >= (l | 0))
							break a;
						else
							t = t + 3 | 0
					}
					Eg(d, 3688)
				}
			while (0);
			xh(d, 0) | 0;
			hi(d, e, h, l);
			l = d + 428 | 0;
			if (!(HEAP16[l >> 1] | 0)) {
				if (!e) {
					i = g;
					return
				}
				h = HEAP32[e + 8 >> 2] | 0;
				if (!(h & 16))
					v = h;
				else {
					HEAP16[l >> 1] = 0;
					w = 34
				}
			} else {
				HEAP16[l >> 1] = 0;
				if (!e)
					w = 35;
				else
					w = 34
			}
			if ((w | 0) == 34) {
				HEAP16[e + 22 >> 1] = 0;
				w = 35
			}
			do
				if ((w | 0) == 35) {
					if (!(HEAP32[d + 212 >> 2] & 1048576))
						_g(d, 4184);
					Zg(d, 4184);
					if (!e) {
						i = g;
						return
					} else {
						v = HEAP32[e + 8 >> 2] | 0;
						break
					}
				}
			while (0);
			w = e + 8 | 0;
			do
				if (v & 64)
					if (!(HEAP32[d + 212 >> 2] & 1048576))
						_g(d, 4208);
					else {
						Zg(d, 4208);
						x = HEAP32[w >> 2] | 0;
						break
					}
				else
					x = v;
			while (0);
			if (!(x & 32)) {
				i = g;
				return
			}
			if (!(HEAP32[d + 212 >> 2] & 1048576))
				_g(d, 4232);
			Zg(d, 4232);
			i = g;
			return
		}
		function gh(a, e, f) {
			a = a | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0;
			g = i;
			i = i + 16 | 0;
			h = g;
			j = HEAP32[a + 208 >> 2] | 0;
			if (!(j & 1))
				_g(a, 4136);
			if (j & 6) {
				xh(a, f) | 0;
				if (!(HEAP32[a + 212 >> 2] & 1048576))
					_g(a, 4112);
				Zg(a, 4112);
				i = g;
				return
			}
			if ((f | 0) != 4) {
				xh(a, f) | 0;
				if (!(HEAP32[a + 212 >> 2] & 1048576))
					_g(a, 4128);
				Zg(a, 4128);
				i = g;
				return
			}
			do
				if (a) {
					f = HEAP32[a + 184 >> 2] | 0;
					if (!f)
						Eg(a, 3688);
					vc[f & 31](a, h, 4);
					f = HEAP32[a + 212 >> 2] | 0;
					if (!(HEAP32[a + 376 >> 2] & 536870912)) {
						if (f & 2048)
							break
					} else if ((f & 768 | 0) == 768)
						break;
					f = a + 412 | 0;
					HEAP32[f >> 2] = sk(HEAP32[f >> 2] | 0, h, 4) | 0
				}
			while (0);
			if (xh(a, 0) | 0) {
				i = g;
				return
			}
			f = (HEAPU8[h + 1 >> 0] | 0) << 16 | (HEAPU8[h >> 0] | 0) << 24 | (HEAPU8[h + 2 >> 0] | 0) << 8 | (HEAPU8[h + 3 >> 0] | 0);
			h = a + 824 | 0;
			Mg(a, h, (f | 0) > -1 ? f : -1);
			if (!e) {
				i = g;
				return
			}
			f = e + 40 | 0;
			j = h + 0 | 0;
			h = f + 76 | 0;
			do {
				HEAP32[f >> 2] = HEAP32[j >> 2];
				f = f + 4 | 0;
				j = j + 4 | 0
			} while ((f | 0) < (h | 0));
			j = HEAP16[e + 114 >> 1] | 0;
			f = j & 65535;
			if (f & 32768) {
				h = e + 8 | 0;
				HEAP32[h >> 2] = HEAP32[h >> 2] & -6150;
				Kg(a, e, 16, -1);
				i = g;
				return
			}
			a = e + 8 | 0;
			e = HEAP32[a >> 2] | 0;
			h = (f & 128 | 0) == 0 ? e & -2049 : e | 2048;
			e = (j & 2) == 0 ? h & -5 : h | 4;
			HEAP32[a >> 2] = e;
			if (!(j & 1)) {
				HEAP32[a >> 2] = e & -2;
				i = g;
				return
			} else {
				HEAP32[a >> 2] = e | 1;
				i = g;
				return
			}
		}
		function hh(b, e, f) {
			b = b | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0;
			g = i;
			i = i + 16 | 0;
			h = g;
			j = h + 3 | 0;
			k = h + 2 | 0;
			l = h + 1 | 0;
			HEAP32[h >> 2] = 0;
			m = HEAP32[b + 208 >> 2] | 0;
			if (!(m & 1))
				_g(b, 4136);
			if (m & 6) {
				xh(b, f) | 0;
				if (!(HEAP32[b + 212 >> 2] & 1048576))
					_g(b, 4112);
				Zg(b, 4112);
				i = g;
				return
			}
			m = (e | 0) == 0;
			if (!m ? (HEAP32[e + 8 >> 2] & 2 | 0) != 0 : 0) {
				xh(b, f) | 0;
				if (!(HEAP32[b + 212 >> 2] & 1048576))
					_g(b, 1544);
				Zg(b, 1544);
				i = g;
				return
			}
			n = b + 435 | 0;
			if ((HEAP8[n >> 0] | 0) == 3)
				o = 3;
			else
				o = HEAPU8[b + 439 >> 0] | 0;
			if ((o | 0) != (f | 0) | f >>> 0 > 4) {
				if (!(HEAP32[b + 212 >> 2] & 1048576))
					_g(b, 4128);
				Zg(b, 4128);
				xh(b, f) | 0;
				i = g;
				return
			}
			o = (b | 0) == 0;
			if (!o) {
				p = HEAP32[b + 184 >> 2] | 0;
				if (!p)
					Eg(b, 3688);
				vc[p & 31](b, h, f);
				p = HEAP32[b + 212 >> 2] | 0;
				if (!(HEAP32[b + 376 >> 2] & 536870912))
					q = (p & 2048 | 0) == 0;
				else
					q = (p & 768 | 0) != 768;
				if (q & (f | 0) != 0) {
					q = b + 412 | 0;
					p = h;
					r = f;
					f = HEAP32[q >> 2] | 0;
					while (1) {
						s = (r | 0) == 0 ? -1 : r;
						f = sk(f, p, s) | 0;
						if ((r | 0) == (s | 0))
							break;
						else {
							p = p + s | 0;
							r = r - s | 0
						}
					}
					HEAP32[q >> 2] = f
				}
			}
			if (xh(b, 0) | 0) {
				i = g;
				return
			}
			f = HEAP8[h >> 0] | 0;
			h = b + 516 | 0;
			if (!(HEAP8[n >> 0] & 2)) {
				sy(h | 0, f | 0, 4) | 0;
				HEAP8[b + 520 >> 0] = HEAP8[l >> 0] | 0
			} else {
				HEAP8[h >> 0] = f;
				HEAP8[b + 517 >> 0] = HEAP8[l >> 0] | 0;
				HEAP8[b + 518 >> 0] = HEAP8[k >> 0] | 0;
				HEAP8[b + 520 >> 0] = HEAP8[j >> 0] | 0
			}
			if (o | m) {
				i = g;
				return
			}
			m = e + 148 | 0;
			HEAP8[m + 0 >> 0] = HEAP8[h + 0 >> 0] | 0;
			HEAP8[m + 1 >> 0] = HEAP8[h + 1 >> 0] | 0;
			HEAP8[m + 2 >> 0] = HEAP8[h + 2 >> 0] | 0;
			HEAP8[m + 3 >> 0] = HEAP8[h + 3 >> 0] | 0;
			HEAP8[m + 4 >> 0] = HEAP8[h + 4 >> 0] | 0;
			h = e + 8 | 0;
			HEAP32[h >> 2] = HEAP32[h >> 2] | 2;
			i = g;
			return
		}
		function ih(a, f, g) {
			a = a | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0;
			h = i;
			i = i + 64 | 0;
			j = h + 32 | 0;
			k = h;
			l = HEAP32[a + 208 >> 2] | 0;
			if (!(l & 1))
				_g(a, 4136);
			if (l & 6) {
				xh(a, g) | 0;
				if (!(HEAP32[a + 212 >> 2] & 1048576))
					_g(a, 4112);
				Zg(a, 4112);
				i = h;
				return
			}
			if ((g | 0) != 32) {
				xh(a, g) | 0;
				if (!(HEAP32[a + 212 >> 2] & 1048576))
					_g(a, 4128);
				Zg(a, 4128);
				i = h;
				return
			}
			do
				if (a) {
					g = HEAP32[a + 184 >> 2] | 0;
					if (!g)
						Eg(a, 3688);
					vc[g & 31](a, j, 32);
					g = HEAP32[a + 212 >> 2] | 0;
					if (!(HEAP32[a + 376 >> 2] & 536870912)) {
						if (g & 2048)
							break
					} else if ((g & 768 | 0) == 768)
						break;
					g = a + 412 | 0;
					HEAP32[g >> 2] = sk(HEAP32[g >> 2] | 0, j, 32) | 0
				}
			while (0);
			if (xh(a, 0) | 0) {
				i = h;
				return
			}
			g = (HEAPU8[j + 1 >> 0] | 0) << 16 | (HEAPU8[j >> 0] | 0) << 24 | (HEAPU8[j + 2 >> 0] | 0) << 8 | (HEAPU8[j + 3 >> 0] | 0);
			l = k + 24 | 0;
			HEAP32[l >> 2] = (g | 0) > -1 ? g : -1;
			g = (HEAPU8[j + 5 >> 0] | 0) << 16 | (HEAPU8[j + 4 >> 0] | 0) << 24 | (HEAPU8[j + 6 >> 0] | 0) << 8 | (HEAPU8[j + 7 >> 0] | 0);
			m = k + 28 | 0;
			HEAP32[m >> 2] = (g | 0) > -1 ? g : -1;
			g = (HEAPU8[j + 9 >> 0] | 0) << 16 | (HEAPU8[j + 8 >> 0] | 0) << 24 | (HEAPU8[j + 10 >> 0] | 0) << 8 | (HEAPU8[j + 11 >> 0] | 0);
			HEAP32[k >> 2] = (g | 0) > -1 ? g : -1;
			g = (HEAPU8[j + 13 >> 0] | 0) << 16 | (HEAPU8[j + 12 >> 0] | 0) << 24 | (HEAPU8[j + 14 >> 0] | 0) << 8 | (HEAPU8[j + 15 >> 0] | 0);
			n = (g | 0) > -1 ? g : -1;
			HEAP32[k + 4 >> 2] = n;
			g = (HEAPU8[j + 17 >> 0] | 0) << 16 | (HEAPU8[j + 16 >> 0] | 0) << 24 | (HEAPU8[j + 18 >> 0] | 0) << 8 | (HEAPU8[j + 19 >> 0] | 0);
			o = (g | 0) > -1 ? g : -1;
			HEAP32[k + 8 >> 2] = o;
			g = (HEAPU8[j + 21 >> 0] | 0) << 16 | (HEAPU8[j + 20 >> 0] | 0) << 24 | (HEAPU8[j + 22 >> 0] | 0) << 8 | (HEAPU8[j + 23 >> 0] | 0);
			p = (g | 0) > -1 ? g : -1;
			HEAP32[k + 12 >> 2] = p;
			g = (HEAPU8[j + 25 >> 0] | 0) << 16 | (HEAPU8[j + 24 >> 0] | 0) << 24 | (HEAPU8[j + 26 >> 0] | 0) << 8 | (HEAPU8[j + 27 >> 0] | 0);
			q = (g | 0) > -1 ? g : -1;
			HEAP32[k + 16 >> 2] = q;
			g = (HEAPU8[j + 29 >> 0] | 0) << 16 | (HEAPU8[j + 28 >> 0] | 0) << 24 | (HEAPU8[j + 30 >> 0] | 0) << 8 | (HEAPU8[j + 31 >> 0] | 0);
			j = (g | 0) > -1 ? g : -1;
			HEAP32[k + 20 >> 2] = j;
			if ((HEAP32[l >> 2] | 0) == -1 | (HEAP32[m >> 2] | 0) == -1 | (HEAP32[k >> 2] | 0) == -1 | (n | 0) == -1 | (o | 0) == -1 | (p | 0) == -1 | (q | 0) == -1 | (j | 0) == -1) {
				if (!(HEAP32[a + 212 >> 2] & 1048576))
					_g(a, 4256);
				Zg(a, 4256);
				i = h;
				return
			}
			j = a + 824 | 0;
			q = a + 898 | 0;
			p = HEAPU16[q >> 1] | 0;
			if (p & 32768) {
				i = h;
				return
			}
			if (!(p & 16)) {
				HEAP16[q >> 1] = p | 16;
				Og(a, j, k, 1) | 0;
				if (!f) {
					i = h;
					return
				}
				r = f + 40 | 0;
				s = j + 0 | 0;
				t = r + 76 | 0;
				do {
					HEAP32[r >> 2] = HEAP32[s >> 2];
					r = r + 4 | 0;
					s = s + 4 | 0
				} while ((r | 0) < (t | 0));
				k = HEAP16[f + 114 >> 1] | 0;
				o = k & 65535;
				if (o & 32768) {
					n = f + 8 | 0;
					HEAP32[n >> 2] = HEAP32[n >> 2] & -6150;
					Kg(a, f, 16, -1);
					i = h;
					return
				}
				n = f + 8 | 0;
				m = HEAP32[n >> 2] | 0;
				l = (o & 128 | 0) == 0 ? m & -2049 : m | 2048;
				m = (k & 2) == 0 ? l & -5 : l | 4;
				HEAP32[n >> 2] = m;
				if (!(k & 1)) {
					HEAP32[n >> 2] = m & -2;
					i = h;
					return
				} else {
					HEAP32[n >> 2] = m | 1;
					i = h;
					return
				}
			} else {
				HEAP16[q >> 1] = p | 32768;
				do
					if (f) {
						r = f + 40 | 0;
						s = j + 0 | 0;
						t = r + 76 | 0;
						do {
							HEAP32[r >> 2] = HEAP32[s >> 2];
							r = r + 4 | 0;
							s = s + 4 | 0
						} while ((r | 0) < (t | 0));
						p = HEAP16[f + 114 >> 1] | 0;
						q = p & 65535;
						if (q & 32768) {
							m = f + 8 | 0;
							HEAP32[m >> 2] = HEAP32[m >> 2] & -6150;
							Kg(a, f, 16, -1);
							break
						}
						m = f + 8 | 0;
						n = HEAP32[m >> 2] | 0;
						k = (q & 128 | 0) == 0 ? n & -2049 : n | 2048;
						n = (p & 2) == 0 ? k & -5 : k | 4;
						HEAP32[m >> 2] = n;
						if (!(p & 1)) {
							HEAP32[m >> 2] = n & -2;
							break
						} else {
							HEAP32[m >> 2] = n | 1;
							break
						}
					}
				while (0);
				if (!(HEAP32[a + 212 >> 2] & 1048576))
					_g(a, 1544);
				Zg(a, 1544);
				i = h;
				return
			}
		}
		function jh(a, f, g) {
			a = a | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0;
			h = i;
			i = i + 16 | 0;
			j = h;
			k = HEAP32[a + 208 >> 2] | 0;
			if (!(k & 1))
				_g(a, 4136);
			if (k & 6) {
				xh(a, g) | 0;
				if (!(HEAP32[a + 212 >> 2] & 1048576))
					_g(a, 4112);
				Zg(a, 4112);
				i = h;
				return
			}
			if ((g | 0) != 1) {
				xh(a, g) | 0;
				if (!(HEAP32[a + 212 >> 2] & 1048576))
					_g(a, 4128);
				Zg(a, 4128);
				i = h;
				return
			}
			do
				if (a) {
					g = HEAP32[a + 184 >> 2] | 0;
					if (!g)
						Eg(a, 3688);
					vc[g & 31](a, j, 1);
					g = HEAP32[a + 212 >> 2] | 0;
					if (!(HEAP32[a + 376 >> 2] & 536870912)) {
						if (g & 2048)
							break
					} else if ((g & 768 | 0) == 768)
						break;
					g = a + 412 | 0;
					HEAP32[g >> 2] = sk(HEAP32[g >> 2] | 0, j, 1) | 0
				}
			while (0);
			if (xh(a, 0) | 0) {
				i = h;
				return
			}
			g = a + 824 | 0;
			k = a + 898 | 0;
			l = HEAPU16[k >> 1] | 0;
			if (l & 32768) {
				i = h;
				return
			}
			if (!(l & 4)) {
				Qg(a, g, HEAPU8[j >> 0] | 0) | 0;
				if (!f) {
					i = h;
					return
				}
				m = f + 40 | 0;
				n = g + 0 | 0;
				o = m + 76 | 0;
				do {
					HEAP32[m >> 2] = HEAP32[n >> 2];
					m = m + 4 | 0;
					n = n + 4 | 0
				} while ((m | 0) < (o | 0));
				j = HEAP16[f + 114 >> 1] | 0;
				p = j & 65535;
				if (p & 32768) {
					q = f + 8 | 0;
					HEAP32[q >> 2] = HEAP32[q >> 2] & -6150;
					Kg(a, f, 16, -1);
					i = h;
					return
				}
				q = f + 8 | 0;
				r = HEAP32[q >> 2] | 0;
				s = (p & 128 | 0) == 0 ? r & -2049 : r | 2048;
				r = (j & 2) == 0 ? s & -5 : s | 4;
				HEAP32[q >> 2] = r;
				if (!(j & 1)) {
					HEAP32[q >> 2] = r & -2;
					i = h;
					return
				} else {
					HEAP32[q >> 2] = r | 1;
					i = h;
					return
				}
			} else {
				HEAP16[k >> 1] = l | 32768;
				do
					if (f) {
						m = f + 40 | 0;
						n = g + 0 | 0;
						o = m + 76 | 0;
						do {
							HEAP32[m >> 2] = HEAP32[n >> 2];
							m = m + 4 | 0;
							n = n + 4 | 0
						} while ((m | 0) < (o | 0));
						l = HEAP16[f + 114 >> 1] | 0;
						k = l & 65535;
						if (k & 32768) {
							r = f + 8 | 0;
							HEAP32[r >> 2] = HEAP32[r >> 2] & -6150;
							Kg(a, f, 16, -1);
							break
						}
						r = f + 8 | 0;
						q = HEAP32[r >> 2] | 0;
						j = (k & 128 | 0) == 0 ? q & -2049 : q | 2048;
						q = (l & 2) == 0 ? j & -5 : j | 4;
						HEAP32[r >> 2] = q;
						if (!(l & 1)) {
							HEAP32[r >> 2] = q & -2;
							break
						} else {
							HEAP32[r >> 2] = q | 1;
							break
						}
					}
				while (0);
				if (!(HEAP32[a + 212 >> 2] & 1048576))
					_g(a, 4272);
				Zg(a, 4272);
				i = h;
				return
			}
		}
		function kh(f, g, h) {
			f = f | 0;
			g = g | 0;
			h = h | 0;
			var j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0,
			O = 0,
			P = 0,
			Q = 0,
			R = 0,
			S = 0,
			T = 0;
			j = i;
			i = i + 1248 | 0;
			k = j + 4 | 0;
			l = j + 1164 | 0;
			m = j + 1032 | 0;
			n = j + 8 | 0;
			o = j;
			HEAP32[k >> 2] = h;
			p = HEAP32[f + 208 >> 2] | 0;
			if (!(p & 1))
				_g(f, 4136);
			if (p & 6) {
				xh(f, h) | 0;
				if (!(HEAP32[f + 212 >> 2] & 1048576))
					_g(f, 4112);
				Zg(f, 4112);
				i = j;
				return
			}
			if (h >>> 0 < 9) {
				xh(f, h) | 0;
				if (!(HEAP32[f + 212 >> 2] & 1048576))
					_g(f, 1840);
				Zg(f, 1840);
				i = j;
				return
			}
			p = f + 824 | 0;
			q = f + 898 | 0;
			r = HEAPU16[q >> 1] | 0;
			if (r & 32768) {
				xh(f, h) | 0;
				i = j;
				return
			}
			do
				if (!(r & 4)) {
					s = h >>> 0 < 81 ? h : 81;
					t = (f | 0) == 0;
					if (!t) {
						u = HEAP32[f + 184 >> 2] | 0;
						if (!u)
							Eg(f, 3688);
						vc[u & 31](f, l, s);
						u = HEAP32[f + 212 >> 2] | 0;
						if (!(HEAP32[f + 376 >> 2] & 536870912))
							v = (u & 2048 | 0) == 0;
						else
							v = (u & 768 | 0) != 768;
						if (v & (s | 0) != 0) {
							u = f + 412 | 0;
							w = l;
							x = s;
							y = HEAP32[u >> 2] | 0;
							while (1) {
								z = (x | 0) == 0 ? -1 : x;
								y = sk(y, w, z) | 0;
								if ((x | 0) == (z | 0))
									break;
								else {
									w = w + z | 0;
									x = x - z | 0
								}
							}
							HEAP32[u >> 2] = y
						}
					}
					x = h - s | 0;
					HEAP32[k >> 2] = x;
					if (s) {
						w = 0;
						while (1) {
							z = w + 1 | 0;
							if (!(HEAP8[l + w >> 0] | 0)) {
								A = 1;
								B = w;
								break
							}
							C = z >>> 0 < 80;
							if (C & z >>> 0 < s >>> 0)
								w = z;
							else {
								A = C;
								B = z;
								break
							}
						}
						if ((B | 0) != 0 & A) {
							w = B + 1 | 0;
							if (w >>> 0 < s >>> 0 ? (HEAP8[l + w >> 0] | 0) == 0 : 0) {
								y = B + 2 | 0;
								if (yi(f, 1766015824) | 0) {
									D = x;
									E = HEAP32[f + 248 >> 2] | 0;
									F = 79;
									break
								}
								HEAP32[o >> 2] = 132;
								HEAP32[f + 224 >> 2] = l + y;
								HEAP32[f + 228 >> 2] = s - y;
								zi(f, n, k, m, o, 0);
								do
									if (!(HEAP32[o >> 2] | 0)) {
										y = HEAPU8[m + 3 >> 0] | 0;
										u = HEAPU8[m + 1 >> 0] << 16 | HEAPU8[m >> 0] << 24 | HEAPU8[m + 2 >> 0] << 8 | y;
										if (u >>> 0 < 132) {
											ui(f, p, l, u, 1840);
											G = 0;
											H = 1;
											break
										}
										if (y & 3) {
											ui(f, p, l, u, 1856);
											G = 0;
											H = 1;
											break
										}
										if (Rg(f, p, l, u, m, HEAPU8[f + 435 >> 0] | 0) | 0) {
											y = HEAP8[m + 128 >> 0] | 0;
											z = HEAP8[m + 129 >> 0] | 0;
											C = HEAP8[m + 130 >> 0] | 0;
											I = HEAP8[m + 131 >> 0] | 0;
											J = f + 788 | 0;
											K = HEAP32[J >> 2] | 0;
											do
												if (K) {
													L = f + 792 | 0;
													if ((HEAP32[L >> 2] | 0) >>> 0 < u >>> 0) {
														HEAP32[J >> 2] = 0;
														HEAP32[L >> 2] = 0;
														if (t) {
															F = 43;
															break
														}
														L = HEAP32[f + 724 >> 2] | 0;
														if (!L) {
															wx(K);
															F = 43;
															break
														} else {
															rc[L & 127](f, K);
															F = 43;
															break
														}
													} else
														M = K
												} else
													F = 43;
											while (0);
											if ((F | 0) == 43) {
												if (!u) {
													G = 4320;
													H = 1;
													break
												}
												do
													if (t)
														F = 47;
													else {
														K = HEAP32[f + 720 >> 2] | 0;
														if (!K) {
															F = 47;
															break
														}
														N = Cc[K & 31](f, u) | 0
													}
												while (0);
												if ((F | 0) == 47)
													N = vx(u) | 0;
												if (!N) {
													G = 4320;
													H = 1;
													break
												}
												HEAP32[J >> 2] = N;
												HEAP32[f + 792 >> 2] = u;
												M = N
											}
											qy(M | 0, m | 0, 132) | 0;
											K = ((z & 255) << 16 | (y & 255) << 24 | (C & 255) << 8 | I & 255) * 12 | 0;
											HEAP32[o >> 2] = K;
											zi(f, n, k, M + 132 | 0, o, 0);
											if (HEAP32[o >> 2] | 0) {
												G = HEAP32[f + 248 >> 2] | 0;
												H = 1;
												break
											}
											if (Sg(f, p, l, u, M) | 0) {
												HEAP32[o >> 2] = u + -132 - K;
												zi(f, n, k, M + (K + 132) | 0, o, 1);
												K = HEAP32[k >> 2] | 0;
												L = (K | 0) == 0;
												if (!L ? (HEAP32[f + 212 >> 2] & 1048576 | 0) == 0 : 0) {
													G = 4296;
													H = 1;
													break
												}
												if (HEAP32[o >> 2] | 0) {
													G = 1440;
													H = 1;
													break
												}
												if (!L)
													Zg(f, 4296);
												xh(f, K) | 0;
												Tg(f, p, M, HEAP32[f + 272 >> 2] | 0);
												if (g) {
													Kg(f, g, 16, 0);
													do
														if (!w) {
															HEAP32[g + 116 >> 2] = 0;
															F = 66
														} else {
															do
																if (t)
																	F = 63;
																else {
																	K = HEAP32[f + 720 >> 2] | 0;
																	if (!K) {
																		F = 63;
																		break
																	}
																	O = Cc[K & 31](f, w) | 0
																}
															while (0);
															if ((F | 0) == 63)
																O = vx(w) | 0;
															HEAP32[g + 116 >> 2] = O;
															if (!O) {
																F = 66;
																break
															}
															qy(O | 0, l | 0, w | 0) | 0;
															HEAP32[g + 124 >> 2] = u;
															HEAP32[g + 120 >> 2] = M;
															HEAP32[J >> 2] = 0;
															K = g + 232 | 0;
															HEAP32[K >> 2] = HEAP32[K >> 2] | 16;
															K = g + 8 | 0;
															HEAP32[K >> 2] = HEAP32[K >> 2] | 4096;
															P = 0
														}
													while (0);
													if ((F | 0) == 66) {
														HEAP16[q >> 1] = HEAPU16[q >> 1] | 32768;
														P = 4320
													}
													Q = g + 40 | 0;
													R = p + 0 | 0;
													S = Q + 76 | 0;
													do {
														HEAP32[Q >> 2] = HEAP32[R >> 2];
														Q = Q + 4 | 0;
														R = R + 4 | 0
													} while ((Q | 0) < (S | 0));
													J = HEAP16[g + 114 >> 1] | 0;
													u = J & 65535;
													do
														if (!(u & 32768)) {
															I = g + 8 | 0;
															C = HEAP32[I >> 2] | 0;
															y = (u & 128 | 0) == 0 ? C & -2049 : C | 2048;
															C = (J & 2) == 0 ? y & -5 : y | 4;
															HEAP32[I >> 2] = C;
															if (!(J & 1)) {
																HEAP32[I >> 2] = C & -2;
																break
															} else {
																HEAP32[I >> 2] = C | 1;
																break
															}
														} else {
															C = g + 8 | 0;
															HEAP32[C >> 2] = HEAP32[C >> 2] & -6150;
															Kg(f, g, 16, -1)
														}
													while (0);
													if (P) {
														G = P;
														H = 0;
														break
													}
												}
												HEAP32[f + 220 >> 2] = 0;
												i = j;
												return
											} else {
												G = 0;
												H = 1
											}
										} else {
											G = 0;
											H = 1
										}
									} else {
										G = HEAP32[f + 248 >> 2] | 0;
										H = 1
									}
								while (0);
								HEAP32[f + 220 >> 2] = 0;
								if (H) {
									D = HEAP32[k >> 2] | 0;
									E = G;
									F = 79
								} else
									T = G
							} else {
								D = x;
								E = 4336;
								F = 79
							}
						} else {
							D = x;
							E = 4360;
							F = 79
						}
					} else {
						D = x;
						E = 4360;
						F = 79
					}
				} else {
					D = h;
					E = 4272;
					F = 79
				}
			while (0);
			if ((F | 0) == 79) {
				xh(f, D) | 0;
				T = E
			}
			HEAP16[q >> 1] = HEAPU16[q >> 1] | 32768;
			do
				if (g) {
					Q = g + 40 | 0;
					R = p + 0 | 0;
					S = Q + 76 | 0;
					do {
						HEAP32[Q >> 2] = HEAP32[R >> 2];
						Q = Q + 4 | 0;
						R = R + 4 | 0
					} while ((Q | 0) < (S | 0));
					x = HEAP16[g + 114 >> 1] | 0;
					q = x & 65535;
					if (q & 32768) {
						E = g + 8 | 0;
						HEAP32[E >> 2] = HEAP32[E >> 2] & -6150;
						Kg(f, g, 16, -1);
						break
					}
					E = g + 8 | 0;
					D = HEAP32[E >> 2] | 0;
					F = (q & 128 | 0) == 0 ? D & -2049 : D | 2048;
					D = (x & 2) == 0 ? F & -5 : F | 4;
					HEAP32[E >> 2] = D;
					if (!(x & 1)) {
						HEAP32[E >> 2] = D & -2;
						break
					} else {
						HEAP32[E >> 2] = D | 1;
						break
					}
				}
			while (0);
			if (!T) {
				i = j;
				return
			}
			if (!(HEAP32[f + 212 >> 2] & 1048576))
				_g(f, T);
			Zg(f, T);
			i = j;
			return
		}
		function lh(e, f, g) {
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0;
			h = i;
			i = i + 32 | 0;
			j = h;
			k = h + 8 | 0;
			l = e + 756 | 0;
			m = HEAP32[l >> 2] | 0;
			if ((m | 0) == 1) {
				xh(e, g) | 0;
				i = h;
				return
			} else if (m)
				n = 3;
			if ((n | 0) == 3 ? (o = m + -1 | 0, HEAP32[l >> 2] = o, (o | 0) == 1) : 0) {
				if ((e | 0) != 0 ? (o = HEAP32[e + 172 >> 2] | 0, (o | 0) != 0) : 0)
					rc[o & 127](e, 4376);
				else {
					o = HEAP32[p >> 2] | 0;
					HEAP32[j >> 2] = 4376;
					Qb(o | 0, 7576, j | 0) | 0;
					ec(10, o | 0) | 0
				}
				xh(e, g) | 0;
				i = h;
				return
			}
			o = HEAP32[e + 208 >> 2] | 0;
			if (!(o & 1))
				_g(e, 4136);
			if (o & 4) {
				xh(e, g) | 0;
				if (!(HEAP32[e + 212 >> 2] & 1048576))
					_g(e, 4112);
				Zg(e, 4112);
				i = h;
				return
			}
			o = g + 1 | 0;
			l = e + 788 | 0;
			m = HEAP32[l >> 2] | 0;
			do
				if (m) {
					q = e + 792 | 0;
					if ((HEAP32[q >> 2] | 0) >>> 0 < o >>> 0) {
						HEAP32[l >> 2] = 0;
						HEAP32[q >> 2] = 0;
						if (e) {
							q = HEAP32[e + 724 >> 2] | 0;
							if (!q) {
								wx(m);
								n = 21;
								break
							} else {
								rc[q & 127](e, m);
								n = 21;
								break
							}
						} else
							n = 21
					} else
						r = m
				} else
					n = 21;
			while (0);
			do
				if ((n | 0) == 21) {
					if (o) {
						if ((e | 0) != 0 ? (m = HEAP32[e + 720 >> 2] | 0, (m | 0) != 0) : 0)
							s = Cc[m & 31](e, o) | 0;
						else
							s = vx(o) | 0;
						if (s) {
							HEAP32[l >> 2] = s;
							HEAP32[e + 792 >> 2] = o;
							r = s;
							break
						}
					}
					xh(e, g) | 0;
					if (!(HEAP32[e + 212 >> 2] & 1048576))
						_g(e, 4320);
					Zg(e, 4320);
					i = h;
					return
				}
			while (0);
			s = (e | 0) == 0;
			if (!s) {
				o = HEAP32[e + 184 >> 2] | 0;
				if (!o)
					Eg(e, 3688);
				vc[o & 31](e, r, g);
				o = HEAP32[e + 212 >> 2] | 0;
				if (!(HEAP32[e + 376 >> 2] & 536870912))
					t = (o & 2048 | 0) == 0;
				else
					t = (o & 768 | 0) != 768;
				if (t & (g | 0) != 0) {
					t = e + 412 | 0;
					o = r;
					l = g;
					n = HEAP32[t >> 2] | 0;
					while (1) {
						m = (l | 0) == 0 ? -1 : l;
						n = sk(n, o, m) | 0;
						if ((l | 0) == (m | 0))
							break;
						else {
							o = o + m | 0;
							l = l - m | 0
						}
					}
					HEAP32[t >> 2] = n
				}
			}
			if (xh(e, 0) | 0) {
				i = h;
				return
			}
			HEAP8[r + g >> 0] = 0;
			n = r;
			while (1) {
				u = n + 1 | 0;
				if (!(HEAP8[n >> 0] | 0))
					break;
				else
					n = u
			}
			if (u >>> 0 > (r + (g + -2) | 0) >>> 0) {
				if (!s ? (t = HEAP32[e + 172 >> 2] | 0, (t | 0) != 0) : 0) {
					rc[t & 127](e, 4416);
					i = h;
					return
				}
				t = HEAP32[p >> 2] | 0;
				HEAP32[j >> 2] = 4416;
				Qb(t | 0, 7576, j | 0) | 0;
				ec(10, t | 0) | 0;
				i = h;
				return
			}
			t = n + 2 | 0;
			n = HEAP8[u >> 0] | 0;
			u = k + 4 | 0;
			HEAP8[u >> 0] = n;
			l = n << 24 >> 24 == 8 ? 6 : 10;
			n = r - t + g | 0;
			if ((n >>> 0) % (l >>> 0) | 0) {
				if (!s ? (g = HEAP32[e + 172 >> 2] | 0, (g | 0) != 0) : 0) {
					rc[g & 127](e, 4440);
					i = h;
					return
				}
				g = HEAP32[p >> 2] | 0;
				HEAP32[j >> 2] = 4440;
				Qb(g | 0, 7576, j | 0) | 0;
				ec(10, g | 0) | 0;
				i = h;
				return
			}
			g = (n >>> 0) / (l >>> 0) | 0;
			if (g >>> 0 > 429496729) {
				if (!s ? (l = HEAP32[e + 172 >> 2] | 0, (l | 0) != 0) : 0) {
					rc[l & 127](e, 4472);
					i = h;
					return
				}
				l = HEAP32[p >> 2] | 0;
				HEAP32[j >> 2] = 4472;
				Qb(l | 0, 7576, j | 0) | 0;
				ec(10, l | 0) | 0;
				i = h;
				return
			}
			l = k + 12 | 0;
			HEAP32[l >> 2] = g;
			n = g * 10 | 0;
			if (!s) {
				if (n) {
					s = HEAP32[e + 720 >> 2] | 0;
					if (!s)
						v = vx(n) | 0;
					else
						v = Cc[s & 31](e, n) | 0;
					if (v) {
						n = k + 8 | 0;
						HEAP32[n >> 2] = v;
						s = HEAP32[l >> 2] | 0;
						if ((s | 0) > 0) {
							l = HEAP8[u >> 0] | 0;
							u = t;
							t = 0;
							while (1) {
								g = v + (t * 10 | 0) | 0;
								if (l << 24 >> 24 == 8) {
									HEAP16[g >> 1] = HEAPU8[u >> 0] | 0;
									HEAP16[v + (t * 10 | 0) + 2 >> 1] = HEAPU8[u + 1 >> 0] | 0;
									HEAP16[v + (t * 10 | 0) + 4 >> 1] = HEAPU8[u + 2 >> 0] | 0;
									HEAP16[v + (t * 10 | 0) + 6 >> 1] = HEAPU8[u + 3 >> 0] | 0;
									w = u + 4 | 0
								} else {
									HEAP16[g >> 1] = HEAPU8[u >> 0] << 8 | HEAPU8[u + 1 >> 0];
									HEAP16[v + (t * 10 | 0) + 2 >> 1] = HEAPU8[u + 2 >> 0] << 8 | HEAPU8[u + 3 >> 0];
									HEAP16[v + (t * 10 | 0) + 4 >> 1] = HEAPU8[u + 4 >> 0] << 8 | HEAPU8[u + 5 >> 0];
									HEAP16[v + (t * 10 | 0) + 6 >> 1] = HEAPU8[u + 6 >> 0] << 8 | HEAPU8[u + 7 >> 0];
									w = u + 8 | 0
								}
								HEAP16[v + (t * 10 | 0) + 8 >> 1] = HEAPU8[w >> 0] << 8 | HEAPU8[w + 1 >> 0];
								t = t + 1 | 0;
								if ((t | 0) >= (s | 0))
									break;
								else
									u = w + 2 | 0
							}
						}
						HEAP32[k >> 2] = r;
						ii(e, f, k, 1);
						f = HEAP32[n >> 2] | 0;
						if (!f) {
							i = h;
							return
						}
						n = HEAP32[e + 724 >> 2] | 0;
						if (!n) {
							wx(f);
							i = h;
							return
						} else {
							rc[n & 127](e, f);
							i = h;
							return
						}
					}
				}
				f = e + 172 | 0;
				n = HEAP32[f >> 2] | 0;
				if (!n) {
					r = HEAP32[p >> 2] | 0;
					HEAP32[j >> 2] = 3264;
					Qb(r | 0, 7576, j | 0) | 0;
					ec(10, r | 0) | 0
				} else
					rc[n & 127](e, 3264);
				HEAP32[k + 8 >> 2] = 0;
				n = HEAP32[f >> 2] | 0;
				if (n) {
					rc[n & 127](e, 4496);
					i = h;
					return
				}
			} else
				HEAP32[k + 8 >> 2] = 0;
			k = HEAP32[p >> 2] | 0;
			HEAP32[j >> 2] = 4496;
			Qb(k | 0, 7576, j | 0) | 0;
			ec(10, k | 0) | 0;
			i = h;
			return
		}
		function mh(f, g, h) {
			f = f | 0;
			g = g | 0;
			h = h | 0;
			var j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0;
			j = i;
			i = i + 272 | 0;
			k = j + 8 | 0;
			l = j + 6 | 0;
			m = j;
			n = HEAP32[f + 208 >> 2] | 0;
			if (!(n & 1))
				_g(f, 4136);
			if (n & 4) {
				xh(f, h) | 0;
				if (!(HEAP32[f + 212 >> 2] & 1048576))
					_g(f, 4112);
				Zg(f, 4112);
				i = j;
				return
			}
			if ((g | 0) != 0 ? (HEAP32[g + 8 >> 2] & 16 | 0) != 0 : 0) {
				xh(f, h) | 0;
				if (!(HEAP32[f + 212 >> 2] & 1048576))
					_g(f, 1544);
				Zg(f, 1544);
				i = j;
				return
			}
			o = HEAP8[f + 435 >> 0] | 0;
			if (!(o << 24 >> 24)) {
				if ((h | 0) != 2) {
					xh(f, h) | 0;
					if (!(HEAP32[f + 212 >> 2] & 1048576))
						_g(f, 4128);
					Zg(f, 4128);
					i = j;
					return
				}
				do
					if (f) {
						p = HEAP32[f + 184 >> 2] | 0;
						if (!p)
							Eg(f, 3688);
						vc[p & 31](f, l, 2);
						p = HEAP32[f + 212 >> 2] | 0;
						if (!(HEAP32[f + 376 >> 2] & 536870912)) {
							if (p & 2048)
								break
						} else if ((p & 768 | 0) == 768)
							break;
						p = f + 412 | 0;
						HEAP32[p >> 2] = sk(HEAP32[p >> 2] | 0, l, 2) | 0
					}
				while (0);
				HEAP16[f + 428 >> 1] = 1;
				HEAP16[f + 540 >> 1] = (HEAPU8[l >> 0] | 0) << 8 | (HEAPU8[l + 1 >> 0] | 0)
			} else if (o << 24 >> 24 == 2) {
				if ((h | 0) != 6) {
					xh(f, h) | 0;
					if (!(HEAP32[f + 212 >> 2] & 1048576))
						_g(f, 4128);
					Zg(f, 4128);
					i = j;
					return
				}
				do
					if (f) {
						l = HEAP32[f + 184 >> 2] | 0;
						if (!l)
							Eg(f, 3688);
						vc[l & 31](f, m, 6);
						l = HEAP32[f + 212 >> 2] | 0;
						if (!(HEAP32[f + 376 >> 2] & 536870912)) {
							if (l & 2048)
								break
						} else if ((l & 768 | 0) == 768)
							break;
						l = f + 412 | 0;
						HEAP32[l >> 2] = sk(HEAP32[l >> 2] | 0, m, 6) | 0
					}
				while (0);
				HEAP16[f + 428 >> 1] = 1;
				HEAP16[f + 534 >> 1] = (HEAPU8[m >> 0] | 0) << 8 | (HEAPU8[m + 1 >> 0] | 0);
				HEAP16[f + 536 >> 1] = (HEAPU8[m + 2 >> 0] | 0) << 8 | (HEAPU8[m + 3 >> 0] | 0);
				HEAP16[f + 538 >> 1] = (HEAPU8[m + 4 >> 0] | 0) << 8 | (HEAPU8[m + 5 >> 0] | 0)
			} else if (o << 24 >> 24 == 3) {
				if (!(n & 2)) {
					xh(f, h) | 0;
					if (!(HEAP32[f + 212 >> 2] & 1048576))
						_g(f, 4112);
					Zg(f, 4112);
					i = j;
					return
				}
				if ((h >>> 0 > 256 ? 1 : (HEAPU16[f + 420 >> 1] | 0) >>> 0 < h >>> 0) | (h | 0) == 0) {
					xh(f, h) | 0;
					if (!(HEAP32[f + 212 >> 2] & 1048576))
						_g(f, 4128);
					Zg(f, 4128);
					i = j;
					return
				}
				do
					if (f) {
						n = HEAP32[f + 184 >> 2] | 0;
						if (!n)
							Eg(f, 3688);
						vc[n & 31](f, k, h);
						n = HEAP32[f + 212 >> 2] | 0;
						if (!(HEAP32[f + 376 >> 2] & 536870912)) {
							if (n & 2048)
								break
						} else if ((n & 768 | 0) == 768)
							break;
						n = f + 412 | 0;
						o = k;
						m = h;
						l = HEAP32[n >> 2] | 0;
						while (1) {
							p = (m | 0) == 0 ? -1 : m;
							l = sk(l, o, p) | 0;
							if ((m | 0) == (p | 0))
								break;
							else {
								o = o + p | 0;
								m = m - p | 0
							}
						}
						HEAP32[n >> 2] = l
					}
				while (0);
				HEAP16[f + 428 >> 1] = h
			} else {
				xh(f, h) | 0;
				if (!(HEAP32[f + 212 >> 2] & 1048576))
					_g(f, 4536);
				Zg(f, 4536);
				i = j;
				return
			}
			h = f + 428 | 0;
			if (!(xh(f, 0) | 0)) {
				ji(f, g, k, HEAPU16[h >> 1] | 0, f + 532 | 0);
				i = j;
				return
			} else {
				HEAP16[h >> 1] = 0;
				i = j;
				return
			}
		}
		function nh(e, f, g) {
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0;
			h = i;
			i = i + 16 | 0;
			j = h;
			k = HEAP32[e + 208 >> 2] | 0;
			if (!(k & 1))
				_g(e, 4136);
			if ((k & 4 | 0) == 0 ? (l = e + 435 | 0, m = HEAP8[l >> 0] | 0, n = m << 24 >> 24 == 3, !(n & (k & 2 | 0) == 0)) : 0) {
				k = (f | 0) != 0;
				if (k ? (HEAP32[f + 8 >> 2] & 32 | 0) != 0 : 0) {
					xh(e, g) | 0;
					if (!(HEAP32[e + 212 >> 2] & 1048576))
						_g(e, 1544);
					Zg(e, 1544);
					i = h;
					return
				}
				if (n)
					o = 1;
				else
					o = (m & 2) << 1 | 2;
				if ((o | 0) != (g | 0)) {
					xh(e, g) | 0;
					if (!(HEAP32[e + 212 >> 2] & 1048576))
						_g(e, 4128);
					Zg(e, 4128);
					i = h;
					return
				}
				o = (e | 0) == 0;
				do
					if (!o) {
						m = HEAP32[e + 184 >> 2] | 0;
						if (!m)
							Eg(e, 3688);
						vc[m & 31](e, j, g);
						m = HEAP32[e + 212 >> 2] | 0;
						if (!(HEAP32[e + 376 >> 2] & 536870912)) {
							if (m & 2048)
								break
						} else if ((m & 768 | 0) == 768)
							break;
						m = e + 412 | 0;
						n = j;
						p = g;
						q = HEAP32[m >> 2] | 0;
						while (1) {
							r = (p | 0) == 0 ? -1 : p;
							q = sk(q, n, r) | 0;
							if ((p | 0) == (r | 0))
								break;
							else {
								n = n + r | 0;
								p = p - r | 0
							}
						}
						HEAP32[m >> 2] = q
					}
				while (0);
				if (xh(e, 0) | 0) {
					i = h;
					return
				}
				p = HEAP8[l >> 0] | 0;
				do
					if (p << 24 >> 24 == 3) {
						l = HEAP8[j >> 0] | 0;
						if (!k) {
							i = h;
							return
						}
						n = HEAP16[f + 20 >> 1] | 0;
						if (!(n << 16 >> 16)) {
							s = l;
							t = 0;
							u = 0;
							v = 0;
							w = 0
						} else {
							r = l & 255;
							if (r >>> 0 < (n & 65535) >>> 0) {
								n = HEAP32[e + 416 >> 2] | 0;
								s = l;
								t = HEAPU8[n + (r * 3 | 0) >> 0] | 0;
								u = HEAPU8[n + (r * 3 | 0) + 1 >> 0] | 0;
								v = HEAPU8[n + (r * 3 | 0) + 2 >> 0] | 0;
								w = 0;
								break
							}
							if (!(HEAP32[e + 212 >> 2] & 1048576))
								_g(e, 4568);
							Zg(e, 4568);
							i = h;
							return
						}
					} else {
						r = ((HEAPU8[j >> 0] | 0) << 8 | (HEAPU8[j + 1 >> 0] | 0)) & 65535;
						if (!(p & 2)) {
							s = 0;
							t = r;
							u = r;
							v = r;
							w = r
						} else {
							s = 0;
							t = r;
							u = ((HEAPU8[j + 2 >> 0] | 0) << 8 | (HEAPU8[j + 3 >> 0] | 0)) & 65535;
							v = ((HEAPU8[j + 4 >> 0] | 0) << 8 | (HEAPU8[j + 5 >> 0] | 0)) & 65535;
							w = 0
						}
					}
				while (0);
				if (o | (f | 0) == 0) {
					i = h;
					return
				}
				HEAP8[f + 170 >> 0] = s;
				HEAP16[f + 172 >> 1] = t;
				HEAP16[f + 174 >> 1] = u;
				HEAP16[f + 176 >> 1] = v;
				HEAP16[f + 178 >> 1] = w;
				w = f + 8 | 0;
				HEAP32[w >> 2] = HEAP32[w >> 2] | 32;
				i = h;
				return
			}
			xh(e, g) | 0;
			if (!(HEAP32[e + 212 >> 2] & 1048576))
				_g(e, 4112);
			Zg(e, 4112);
			i = h;
			return
		}
		function oh(a, f, g) {
			a = a | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0;
			h = i;
			i = i + 528 | 0;
			j = h;
			k = h + 512 | 0;
			l = HEAP32[a + 208 >> 2] | 0;
			if (!(l & 1))
				_g(a, 4136);
			if ((l & 6 | 0) != 2) {
				xh(a, g) | 0;
				if (!(HEAP32[a + 212 >> 2] & 1048576))
					_g(a, 4112);
				Zg(a, 4112);
				i = h;
				return
			}
			if ((f | 0) != 0 ? (HEAP32[f + 8 >> 2] & 64 | 0) != 0 : 0) {
				xh(a, g) | 0;
				if (!(HEAP32[a + 212 >> 2] & 1048576))
					_g(a, 1544);
				Zg(a, 1544);
				i = h;
				return
			}
			l = g >>> 1;
			if (g >>> 0 > 513 ? 1 : (l | 0) != (HEAPU16[a + 420 >> 1] | 0 | 0)) {
				xh(a, g) | 0;
				if (!(HEAP32[a + 212 >> 2] & 1048576))
					_g(a, 4128);
				Zg(a, 4128);
				i = h;
				return
			}
			a: do
				if (l) {
					g = (a | 0) == 0;
					m = k + 1 | 0;
					n = a + 184 | 0;
					o = a + 376 | 0;
					p = a + 212 | 0;
					q = a + 412 | 0;
					r = 0;
					b: while (1) {
						do
							if (!g) {
								s = HEAP32[n >> 2] | 0;
								if (!s)
									break b;
								vc[s & 31](a, k, 2);
								s = HEAP32[p >> 2] | 0;
								if (!(HEAP32[o >> 2] & 536870912)) {
									if (s & 2048)
										break
								} else if ((s & 768 | 0) == 768)
									break;
								HEAP32[q >> 2] = sk(HEAP32[q >> 2] | 0, k, 2) | 0
							}
						while (0);
						HEAP16[j + (r << 1) >> 1] = (HEAPU8[k >> 0] | 0) << 8 | (HEAPU8[m >> 0] | 0);
						r = r + 1 | 0;
						if (r >>> 0 >= l >>> 0)
							break a
					}
					Eg(a, 3688)
				}
			while (0);
			if (xh(a, 0) | 0) {
				i = h;
				return
			}
			ki(a, f, j);
			i = h;
			return
		}
		function ph(b, e, f) {
			b = b | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0;
			g = i;
			i = i + 16 | 0;
			h = g;
			j = HEAP32[b + 208 >> 2] | 0;
			if (!(j & 1))
				_g(b, 4136);
			if (j & 4) {
				xh(b, f) | 0;
				if (!(HEAP32[b + 212 >> 2] & 1048576))
					_g(b, 4112);
				Zg(b, 4112);
				i = g;
				return
			}
			j = (e | 0) == 0;
			if (!j ? (HEAP32[e + 8 >> 2] & 128 | 0) != 0 : 0) {
				xh(b, f) | 0;
				if (!(HEAP32[b + 212 >> 2] & 1048576))
					_g(b, 1544);
				Zg(b, 1544);
				i = g;
				return
			}
			if ((f | 0) != 9) {
				xh(b, f) | 0;
				if (!(HEAP32[b + 212 >> 2] & 1048576))
					_g(b, 4128);
				Zg(b, 4128);
				i = g;
				return
			}
			f = (b | 0) == 0;
			do
				if (!f) {
					k = HEAP32[b + 184 >> 2] | 0;
					if (!k)
						Eg(b, 3688);
					vc[k & 31](b, h, 9);
					k = HEAP32[b + 212 >> 2] | 0;
					if (!(HEAP32[b + 376 >> 2] & 536870912)) {
						if (k & 2048)
							break
					} else if ((k & 768 | 0) == 768)
						break;
					k = b + 412 | 0;
					HEAP32[k >> 2] = sk(HEAP32[k >> 2] | 0, h, 9) | 0
				}
			while (0);
			if ((xh(b, 0) | 0) != 0 | (f | j)) {
				i = g;
				return
			}
			j = HEAP8[h + 8 >> 0] | 0;
			f = (HEAPU8[h + 4 >> 0] | 0) << 24 | (HEAPU8[h + 5 >> 0] | 0) << 16 | (HEAPU8[h + 6 >> 0] | 0) << 8 | (HEAPU8[h + 7 >> 0] | 0);
			HEAP32[e + 192 >> 2] = (HEAPU8[h >> 0] | 0) << 24 | (HEAPU8[h + 1 >> 0] | 0) << 16 | (HEAPU8[h + 2 >> 0] | 0) << 8 | (HEAPU8[h + 3 >> 0] | 0);
			HEAP32[e + 196 >> 2] = f;
			HEAP8[e + 200 >> 0] = j;
			j = e + 8 | 0;
			HEAP32[j >> 2] = HEAP32[j >> 2] | 128;
			i = g;
			return
		}
		function qh(b, e, f) {
			b = b | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0;
			g = i;
			i = i + 16 | 0;
			h = g;
			j = HEAP32[b + 208 >> 2] | 0;
			if (!(j & 1))
				_g(b, 4136);
			if (j & 4) {
				xh(b, f) | 0;
				if (!(HEAP32[b + 212 >> 2] & 1048576))
					_g(b, 4112);
				Zg(b, 4112);
				i = g;
				return
			}
			j = (e | 0) == 0;
			if (!j ? (HEAP32[e + 8 >> 2] & 256 | 0) != 0 : 0) {
				xh(b, f) | 0;
				if (!(HEAP32[b + 212 >> 2] & 1048576))
					_g(b, 1544);
				Zg(b, 1544);
				i = g;
				return
			}
			if ((f | 0) != 9) {
				xh(b, f) | 0;
				if (!(HEAP32[b + 212 >> 2] & 1048576))
					_g(b, 4128);
				Zg(b, 4128);
				i = g;
				return
			}
			f = (b | 0) == 0;
			do
				if (!f) {
					k = HEAP32[b + 184 >> 2] | 0;
					if (!k)
						Eg(b, 3688);
					vc[k & 31](b, h, 9);
					k = HEAP32[b + 212 >> 2] | 0;
					if (!(HEAP32[b + 376 >> 2] & 536870912)) {
						if (k & 2048)
							break
					} else if ((k & 768 | 0) == 768)
						break;
					k = b + 412 | 0;
					HEAP32[k >> 2] = sk(HEAP32[k >> 2] | 0, h, 9) | 0
				}
			while (0);
			if ((xh(b, 0) | 0) != 0 | (f | j)) {
				i = g;
				return
			}
			j = HEAP8[h + 8 >> 0] | 0;
			f = (HEAPU8[h + 4 >> 0] | 0) << 24 | (HEAPU8[h + 5 >> 0] | 0) << 16 | (HEAPU8[h + 6 >> 0] | 0) << 8 | (HEAPU8[h + 7 >> 0] | 0);
			HEAP32[e + 180 >> 2] = (HEAPU8[h >> 0] | 0) << 24 | (HEAPU8[h + 1 >> 0] | 0) << 16 | (HEAPU8[h + 2 >> 0] | 0) << 8 | (HEAPU8[h + 3 >> 0] | 0);
			HEAP32[e + 184 >> 2] = f;
			HEAP8[e + 188 >> 0] = j;
			j = e + 8 | 0;
			HEAP32[j >> 2] = HEAP32[j >> 2] | 256;
			i = g;
			return
		}
		function rh(b, e, f) {
			b = b | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0;
			g = i;
			i = i + 16 | 0;
			h = g;
			j = HEAP32[b + 208 >> 2] | 0;
			if (!(j & 1))
				_g(b, 4136);
			if (j & 4) {
				xh(b, f) | 0;
				if (!(HEAP32[b + 212 >> 2] & 1048576))
					_g(b, 4112);
				Zg(b, 4112);
				i = g;
				return
			}
			if ((e | 0) != 0 ? (HEAP32[e + 8 >> 2] & 1024 | 0) != 0 : 0) {
				xh(b, f) | 0;
				if (!(HEAP32[b + 212 >> 2] & 1048576))
					_g(b, 1544);
				Zg(b, 1544);
				i = g;
				return
			}
			j = f + 1 | 0;
			k = b + 788 | 0;
			l = HEAP32[k >> 2] | 0;
			do
				if (l) {
					m = b + 792 | 0;
					if ((HEAP32[m >> 2] | 0) >>> 0 < j >>> 0) {
						HEAP32[k >> 2] = 0;
						HEAP32[m >> 2] = 0;
						if (b) {
							m = HEAP32[b + 724 >> 2] | 0;
							if (!m) {
								wx(l);
								n = 18;
								break
							} else {
								rc[m & 127](b, l);
								n = 18;
								break
							}
						} else
							n = 18
					} else
						o = l
				} else
					n = 18;
			while (0);
			do
				if ((n | 0) == 18) {
					if (j) {
						if ((b | 0) != 0 ? (l = HEAP32[b + 720 >> 2] | 0, (l | 0) != 0) : 0)
							q = Cc[l & 31](b, j) | 0;
						else
							q = vx(j) | 0;
						if (q) {
							HEAP32[k >> 2] = q;
							HEAP32[b + 792 >> 2] = j;
							o = q;
							break
						}
					}
					xh(b, f) | 0;
					if (!(HEAP32[b + 212 >> 2] & 1048576))
						_g(b, 4320);
					Zg(b, 4320);
					i = g;
					return
				}
			while (0);
			q = (b | 0) == 0;
			if (!q) {
				j = HEAP32[b + 184 >> 2] | 0;
				if (!j)
					Eg(b, 3688);
				vc[j & 31](b, o, f);
				j = HEAP32[b + 212 >> 2] | 0;
				if (!(HEAP32[b + 376 >> 2] & 536870912))
					r = (j & 2048 | 0) == 0;
				else
					r = (j & 768 | 0) != 768;
				if (r & (f | 0) != 0) {
					r = b + 412 | 0;
					j = o;
					k = f;
					l = HEAP32[r >> 2] | 0;
					while (1) {
						m = (k | 0) == 0 ? -1 : k;
						l = sk(l, j, m) | 0;
						if ((k | 0) == (m | 0))
							break;
						else {
							j = j + m | 0;
							k = k - m | 0
						}
					}
					HEAP32[r >> 2] = l
				}
			}
			if (xh(b, 0) | 0) {
				i = g;
				return
			}
			l = o + f | 0;
			HEAP8[l >> 0] = 0;
			f = o;
			while (1) {
				s = f + 1 | 0;
				if (!(HEAP8[f >> 0] | 0))
					break;
				else
					f = s
			}
			if (l >>> 0 <= (f + 12 | 0) >>> 0) {
				if (!(HEAP32[b + 212 >> 2] & 1048576))
					_g(b, 4128);
				Zg(b, 4128);
				i = g;
				return
			}
			r = HEAPU8[f + 2 >> 0] << 16 | HEAPU8[s >> 0] << 24 | HEAPU8[f + 3 >> 0] << 8 | HEAPU8[f + 4 >> 0];
			s = HEAPU8[f + 6 >> 0] << 16 | HEAPU8[f + 5 >> 0] << 24 | HEAPU8[f + 7 >> 0] << 8 | HEAPU8[f + 8 >> 0];
			k = HEAP8[f + 9 >> 0] | 0;
			j = HEAP8[f + 10 >> 0] | 0;
			m = f + 11 | 0;
			f = k & 255;
			if ((k << 24 >> 24 != 0 | j << 24 >> 24 == 2 ? (k + -1 << 24 >> 24 & 255) > 1 | j << 24 >> 24 == 3 : 0) ? k << 24 >> 24 != 3 | j << 24 >> 24 == 4 : 0) {
				do
					if ((k & 255) > 3)
						if (!(HEAP32[b + 212 >> 2] & 1048576))
							_g(b, 4608);
						else {
							Zg(b, 4608);
							t = m;
							break
						}
					else
						t = m;
				while (0);
				while (1)
					if (!(HEAP8[t >> 0] | 0))
						break;
					else
						t = t + 1 | 0;
				k = j & 255;
				u = k << 2;
				do
					if (!q) {
						if (j << 24 >> 24) {
							v = HEAP32[b + 720 >> 2] | 0;
							if (!v)
								w = vx(u) | 0;
							else
								w = Cc[v & 31](b, u) | 0;
							if (w) {
								v = t;
								x = 0;
								a: while (1) {
									y = v + 1 | 0;
									HEAP32[w + (x << 2) >> 2] = y;
									if (y >>> 0 > l >>> 0)
										break;
									else
										z = y;
									while (1) {
										y = z + 1 | 0;
										if (!(HEAP8[z >> 0] | 0))
											break;
										if (y >>> 0 > l >>> 0)
											break a;
										else
											z = y
									}
									x = x + 1 | 0;
									if ((x | 0) >= (k | 0)) {
										n = 79;
										break
									} else
										v = z
								}
								if ((n | 0) == 79) {
									li(b, e, o, r, s, f, k, m, w);
									v = HEAP32[b + 724 >> 2] | 0;
									if (!v) {
										wx(w);
										i = g;
										return
									} else {
										rc[v & 127](b, w);
										i = g;
										return
									}
								}
								v = HEAP32[b + 724 >> 2] | 0;
								if (!v)
									wx(w);
								else
									rc[v & 127](b, w);
								if (!(HEAP32[b + 212 >> 2] & 1048576))
									_g(b, 4640);
								Zg(b, 4640);
								i = g;
								return
							}
						}
						v = HEAP32[b + 172 >> 2] | 0;
						if (!v) {
							x = HEAP32[p >> 2] | 0;
							HEAP32[h >> 2] = 3264;
							Qb(x | 0, 7576, h | 0) | 0;
							ec(10, x | 0) | 0;
							break
						} else {
							rc[v & 127](b, 3264);
							break
						}
					}
				while (0);
				if (!(HEAP32[b + 212 >> 2] & 1048576))
					_g(b, 4320);
				Zg(b, 4320);
				i = g;
				return
			}
			if (!(HEAP32[b + 212 >> 2] & 1048576))
				_g(b, 4584);
			Zg(b, 4584);
			i = g;
			return
		}
		function sh(b, e, f) {
			b = b | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0;
			g = i;
			i = i + 16 | 0;
			h = g + 4 | 0;
			j = g;
			k = HEAP32[b + 208 >> 2] | 0;
			if (!(k & 1))
				_g(b, 4136);
			if (k & 4) {
				xh(b, f) | 0;
				if (!(HEAP32[b + 212 >> 2] & 1048576))
					_g(b, 4112);
				Zg(b, 4112);
				i = g;
				return
			}
			if ((e | 0) != 0 ? (HEAP32[e + 8 >> 2] & 16384 | 0) != 0 : 0) {
				xh(b, f) | 0;
				if (!(HEAP32[b + 212 >> 2] & 1048576))
					_g(b, 1544);
				Zg(b, 1544);
				i = g;
				return
			}
			if (f >>> 0 < 4) {
				xh(b, f) | 0;
				if (!(HEAP32[b + 212 >> 2] & 1048576))
					_g(b, 4128);
				Zg(b, 4128);
				i = g;
				return
			}
			k = f + 1 | 0;
			l = b + 788 | 0;
			m = HEAP32[l >> 2] | 0;
			do
				if (m) {
					n = b + 792 | 0;
					if ((HEAP32[n >> 2] | 0) >>> 0 < k >>> 0) {
						HEAP32[l >> 2] = 0;
						HEAP32[n >> 2] = 0;
						if (b) {
							n = HEAP32[b + 724 >> 2] | 0;
							if (!n) {
								wx(m);
								o = 22;
								break
							} else {
								rc[n & 127](b, m);
								o = 22;
								break
							}
						} else
							o = 22
					} else
						p = m
				} else
					o = 22;
			while (0);
			do
				if ((o | 0) == 22) {
					if (k) {
						if ((b | 0) != 0 ? (m = HEAP32[b + 720 >> 2] | 0, (m | 0) != 0) : 0)
							q = Cc[m & 31](b, k) | 0;
						else
							q = vx(k) | 0;
						if (q) {
							HEAP32[l >> 2] = q;
							HEAP32[b + 792 >> 2] = k;
							p = q;
							break
						}
					}
					if (!(HEAP32[b + 212 >> 2] & 1048576))
						_g(b, 4320);
					Zg(b, 4320);
					xh(b, f) | 0;
					i = g;
					return
				}
			while (0);
			if (b) {
				q = HEAP32[b + 184 >> 2] | 0;
				if (!q)
					Eg(b, 3688);
				vc[q & 31](b, p, f);
				q = HEAP32[b + 212 >> 2] | 0;
				if (!(HEAP32[b + 376 >> 2] & 536870912))
					r = (q & 2048 | 0) == 0;
				else
					r = (q & 768 | 0) != 768;
				if (r & (f | 0) != 0) {
					r = b + 412 | 0;
					q = p;
					k = f;
					l = HEAP32[r >> 2] | 0;
					while (1) {
						o = (k | 0) == 0 ? -1 : k;
						l = sk(l, q, o) | 0;
						if ((k | 0) == (o | 0))
							break;
						else {
							q = q + o | 0;
							k = k - o | 0
						}
					}
					HEAP32[r >> 2] = l
				}
			}
			HEAP8[p + f >> 0] = 0;
			if (xh(b, 0) | 0) {
				i = g;
				return
			}
			if (((HEAP8[p >> 0] | 0) + -1 << 24 >> 24 & 255) >= 2) {
				if (!(HEAP32[b + 212 >> 2] & 1048576))
					_g(b, 4656);
				Zg(b, 4656);
				i = g;
				return
			}
			HEAP32[h >> 2] = 1;
			HEAP32[j >> 2] = 0;
			if (((Wg(p, f, j, h) | 0) != 0 ? (l = HEAP32[h >> 2] | 0, l >>> 0 < f >>> 0) : 0) ? (r = l + 1 | 0, HEAP32[h >> 2] = r, (HEAP8[p + l >> 0] | 0) == 0) : 0) {
				if ((HEAP32[j >> 2] & 392 | 0) != 264) {
					if (!(HEAP32[b + 212 >> 2] & 1048576))
						_g(b, 4696);
					Zg(b, 4696);
					i = g;
					return
				}
				HEAP32[j >> 2] = 0;
				l = (Wg(p, f, j, h) | 0) != 0;
				if (!(l & (HEAP32[h >> 2] | 0) == (f | 0))) {
					if (!(HEAP32[b + 212 >> 2] & 1048576))
						_g(b, 4720);
					Zg(b, 4720);
					i = g;
					return
				}
				if ((HEAP32[j >> 2] & 392 | 0) == 264) {
					mi(b, e, HEAPU8[p >> 0] | 0, p + 1 | 0, p + r | 0);
					i = g;
					return
				}
				if (!(HEAP32[b + 212 >> 2] & 1048576))
					_g(b, 4744);
				Zg(b, 4744);
				i = g;
				return
			}
			if (!(HEAP32[b + 212 >> 2] & 1048576))
				_g(b, 4672);
			Zg(b, 4672);
			i = g;
			return
		}
		function th(e, f, g) {
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0;
			h = i;
			i = i + 16 | 0;
			j = h;
			k = h + 4 | 0;
			l = e + 208 | 0;
			m = HEAP32[l >> 2] | 0;
			if (!(m & 1))
				_g(e, 4136);
			n = (f | 0) == 0;
			if (!n ? (HEAP32[f + 8 >> 2] & 512 | 0) != 0 : 0) {
				xh(e, g) | 0;
				if (!(HEAP32[e + 212 >> 2] & 1048576))
					_g(e, 1544);
				Zg(e, 1544);
				i = h;
				return
			}
			if (m & 4)
				HEAP32[l >> 2] = m | 8;
			if ((g | 0) != 7) {
				xh(e, g) | 0;
				if (!(HEAP32[e + 212 >> 2] & 1048576))
					_g(e, 4128);
				Zg(e, 4128);
				i = h;
				return
			}
			g = (e | 0) == 0;
			do
				if (!g) {
					m = HEAP32[e + 184 >> 2] | 0;
					if (!m)
						Eg(e, 3688);
					vc[m & 31](e, k, 7);
					m = HEAP32[e + 212 >> 2] | 0;
					if (!(HEAP32[e + 376 >> 2] & 536870912)) {
						if (m & 2048)
							break
					} else if ((m & 768 | 0) == 768)
						break;
					m = e + 412 | 0;
					HEAP32[m >> 2] = sk(HEAP32[m >> 2] | 0, k, 7) | 0
				}
			while (0);
			if (xh(e, 0) | 0) {
				i = h;
				return
			}
			m = HEAP8[k + 6 >> 0] | 0;
			o = HEAP8[k + 5 >> 0] | 0;
			q = HEAP8[k + 4 >> 0] | 0;
			r = HEAP8[k + 3 >> 0] | 0;
			s = HEAP8[k + 2 >> 0] | 0;
			t = (HEAPU8[k >> 0] | 0) << 8 | (HEAPU8[k + 1 >> 0] | 0);
			if (g | n) {
				i = h;
				return
			}
			if (HEAP32[l >> 2] & 512) {
				i = h;
				return
			}
			if (!((s + -1 << 24 >> 24 & 255) > 11 | (r + -1 << 24 >> 24 & 255) > 30 | (q & 255) > 23 | (o & 255) > 59 | (m & 255) > 60)) {
				l = ty(m & 255 | 0, 0, 48) | 0;
				m = H;
				n = ty(o & 255 | 0, 0, 40) | 0;
				o = H | m | q & 255;
				q = ty(r & 255 | 0, 0, 24) | 0;
				r = o | H;
				o = ty(s & 255 | 0, 0, 16) | 0;
				s = r | H;
				r = n | l | q | o | t;
				t = f + 140 | 0;
				o = t;
				HEAP16[o >> 1] = r;
				HEAP16[o + 2 >> 1] = r >>> 16;
				r = t + 4 | 0;
				HEAP16[r >> 1] = s;
				HEAP16[r + 2 >> 1] = s >>> 16;
				s = f + 8 | 0;
				HEAP32[s >> 2] = HEAP32[s >> 2] | 512;
				i = h;
				return
			}
			s = HEAP32[e + 172 >> 2] | 0;
			if (!s) {
				f = HEAP32[p >> 2] | 0;
				HEAP32[j >> 2] = 1224;
				Qb(f | 0, 7576, j | 0) | 0;
				ec(10, f | 0) | 0;
				i = h;
				return
			} else {
				rc[s & 127](e, 1224);
				i = h;
				return
			}
		}
		function uh(b, d, e) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			q = 0,
			r = 0,
			s = 0;
			f = i;
			i = i + 32 | 0;
			g = f;
			h = f + 4 | 0;
			j = b + 756 | 0;
			k = HEAP32[j >> 2] | 0;
			if ((k | 0) == 1) {
				xh(b, e) | 0;
				i = f;
				return
			} else if (k)
				l = 3;
			if ((l | 0) == 3 ? (m = k + -1 | 0, HEAP32[j >> 2] = m, (m | 0) == 1) : 0) {
				xh(b, e) | 0;
				if (!(HEAP32[b + 212 >> 2] & 1048576))
					_g(b, 4768);
				Zg(b, 4768);
				i = f;
				return
			}
			m = b + 208 | 0;
			j = HEAP32[m >> 2] | 0;
			if (!(j & 1))
				_g(b, 4136);
			if (j & 4)
				HEAP32[m >> 2] = j | 8;
			j = e + 1 | 0;
			m = b + 788 | 0;
			k = HEAP32[m >> 2] | 0;
			do
				if (k) {
					n = b + 792 | 0;
					if ((HEAP32[n >> 2] | 0) >>> 0 < j >>> 0) {
						HEAP32[m >> 2] = 0;
						HEAP32[n >> 2] = 0;
						if (b) {
							n = HEAP32[b + 724 >> 2] | 0;
							if (!n) {
								wx(k);
								l = 17;
								break
							} else {
								rc[n & 127](b, k);
								l = 17;
								break
							}
						} else
							l = 17
					} else
						o = k
				} else
					l = 17;
			while (0);
			do
				if ((l | 0) == 17) {
					if (j) {
						if ((b | 0) != 0 ? (k = HEAP32[b + 720 >> 2] | 0, (k | 0) != 0) : 0)
							q = Cc[k & 31](b, j) | 0;
						else
							q = vx(j) | 0;
						if (q) {
							HEAP32[m >> 2] = q;
							HEAP32[b + 792 >> 2] = j;
							o = q;
							break
						}
					}
					Zg(b, 7472);
					if (!(HEAP32[b + 212 >> 2] & 1048576))
						_g(b, 4320);
					Zg(b, 4320);
					i = f;
					return
				}
			while (0);
			q = (b | 0) == 0;
			if (!q) {
				j = HEAP32[b + 184 >> 2] | 0;
				if (!j)
					Eg(b, 3688);
				vc[j & 31](b, o, e);
				j = HEAP32[b + 212 >> 2] | 0;
				if (!(HEAP32[b + 376 >> 2] & 536870912))
					r = (j & 2048 | 0) == 0;
				else
					r = (j & 768 | 0) != 768;
				if (r & (e | 0) != 0) {
					r = b + 412 | 0;
					j = o;
					m = e;
					l = HEAP32[r >> 2] | 0;
					while (1) {
						k = (m | 0) == 0 ? -1 : m;
						l = sk(l, j, k) | 0;
						if ((m | 0) == (k | 0))
							break;
						else {
							j = j + k | 0;
							m = m - k | 0
						}
					}
					HEAP32[r >> 2] = l
				}
			}
			if (xh(b, 0) | 0) {
				i = f;
				return
			}
			l = o + e | 0;
			HEAP8[l >> 0] = 0;
			e = o;
			while (1) {
				s = e + 1 | 0;
				if (!(HEAP8[e >> 0] | 0))
					break;
				else
					e = s
			}
			r = (e | 0) == (l | 0) ? e : s;
			HEAP32[h >> 2] = -1;
			HEAP32[h + 4 >> 2] = o;
			HEAP32[h + 20 >> 2] = 0;
			HEAP32[h + 24 >> 2] = 0;
			HEAP32[h + 16 >> 2] = 0;
			HEAP32[h + 8 >> 2] = r;
			HEAP32[h + 12 >> 2] = py(r | 0) | 0;
			if (!(ni(b, d, h, 1) | 0)) {
				i = f;
				return
			}
			if (!q ? (q = HEAP32[b + 172 >> 2] | 0, (q | 0) != 0) : 0) {
				rc[q & 127](b, 4792);
				i = f;
				return
			}
			b = HEAP32[p >> 2] | 0;
			HEAP32[g >> 2] = 4792;
			Qb(b | 0, 7576, g | 0) | 0;
			ec(10, b | 0) | 0;
			i = f;
			return
		}
		function vh(b, d, e) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0;
			f = i;
			i = i + 32 | 0;
			g = f + 28 | 0;
			h = f;
			j = b + 756 | 0;
			k = HEAP32[j >> 2] | 0;
			if ((k | 0) == 1) {
				xh(b, e) | 0;
				i = f;
				return
			} else if (k)
				l = 3;
			if ((l | 0) == 3 ? (m = k + -1 | 0, HEAP32[j >> 2] = m, (m | 0) == 1) : 0) {
				xh(b, e) | 0;
				if (!(HEAP32[b + 212 >> 2] & 1048576))
					_g(b, 4768);
				Zg(b, 4768);
				i = f;
				return
			}
			m = b + 208 | 0;
			j = HEAP32[m >> 2] | 0;
			if (!(j & 1))
				_g(b, 4136);
			if (j & 4)
				HEAP32[m >> 2] = j | 8;
			j = b + 788 | 0;
			m = HEAP32[j >> 2] | 0;
			do
				if (m) {
					k = b + 792 | 0;
					if ((HEAP32[k >> 2] | 0) >>> 0 < e >>> 0) {
						HEAP32[j >> 2] = 0;
						HEAP32[k >> 2] = 0;
						if (b) {
							k = HEAP32[b + 724 >> 2] | 0;
							if (!k) {
								wx(m);
								l = 17;
								break
							} else {
								rc[k & 127](b, m);
								l = 17;
								break
							}
						} else
							l = 17
					} else
						n = m
				} else
					l = 17;
			while (0);
			do
				if ((l | 0) == 17) {
					if (e) {
						if ((b | 0) != 0 ? (m = HEAP32[b + 720 >> 2] | 0, (m | 0) != 0) : 0)
							o = Cc[m & 31](b, e) | 0;
						else
							o = vx(e) | 0;
						if (o) {
							HEAP32[j >> 2] = o;
							HEAP32[b + 792 >> 2] = e;
							n = o;
							break
						}
					}
					xh(b, e) | 0;
					if (!(HEAP32[b + 212 >> 2] & 1048576))
						_g(b, 4320);
					Zg(b, 4320);
					i = f;
					return
				}
			while (0);
			if (b) {
				o = HEAP32[b + 184 >> 2] | 0;
				if (!o)
					Eg(b, 3688);
				vc[o & 31](b, n, e);
				o = HEAP32[b + 212 >> 2] | 0;
				if (!(HEAP32[b + 376 >> 2] & 536870912))
					p = (o & 2048 | 0) == 0;
				else
					p = (o & 768 | 0) != 768;
				if (p & (e | 0) != 0) {
					p = b + 412 | 0;
					o = n;
					l = e;
					m = HEAP32[p >> 2] | 0;
					while (1) {
						k = (l | 0) == 0 ? -1 : l;
						m = sk(m, o, k) | 0;
						if ((l | 0) == (k | 0))
							break;
						else {
							o = o + k | 0;
							l = l - k | 0
						}
					}
					HEAP32[p >> 2] = m
				}
			}
			if (xh(b, 0) | 0) {
				i = f;
				return
			}
			do
				if (e) {
					m = 0;
					while (1) {
						p = m + 1 | 0;
						if (!(HEAP8[n + m >> 0] | 0)) {
							q = m;
							break
						}
						if (p >>> 0 < e >>> 0)
							m = p;
						else {
							q = p;
							break
						}
					}
					if ((q + -1 | 0) >>> 0 <= 78)
						if ((q + 3 | 0) >>> 0 <= e >>> 0)
							if (!(HEAP8[n + (q + 1) >> 0] | 0)) {
								HEAP32[g >> 2] = -1;
								m = q + 2 | 0;
								if ((Ai(b, e, m, g) | 0) == 1) {
									p = HEAP32[j >> 2] | 0;
									l = HEAP32[g >> 2] | 0;
									HEAP8[p + (l + m) >> 0] = 0;
									HEAP32[h >> 2] = 0;
									HEAP32[h + 4 >> 2] = p;
									HEAP32[h + 8 >> 2] = p + m;
									HEAP32[h + 12 >> 2] = l;
									HEAP32[h + 16 >> 2] = 0;
									HEAP32[h + 20 >> 2] = 0;
									HEAP32[h + 24 >> 2] = 0;
									if (ni(b, d, h, 1) | 0) {
										r = 1416;
										break
									}
									i = f;
									return
								} else {
									l = HEAP32[b + 248 >> 2] | 0;
									if (l) {
										r = l;
										break
									}
									i = f;
									return
								}
							} else
								r = 4840;
						else
							r = 1440;
					else
						r = 4360
				} else
					r = 4360;
			while (0);
			if (!(HEAP32[b + 212 >> 2] & 1048576))
				_g(b, r);
			Zg(b, r);
			i = f;
			return
		}
		function wh(b, d, e) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0;
			f = i;
			i = i + 32 | 0;
			g = f + 28 | 0;
			h = f;
			j = b + 756 | 0;
			k = HEAP32[j >> 2] | 0;
			if ((k | 0) == 1) {
				xh(b, e) | 0;
				i = f;
				return
			} else if (k)
				l = 3;
			if ((l | 0) == 3 ? (m = k + -1 | 0, HEAP32[j >> 2] = m, (m | 0) == 1) : 0) {
				xh(b, e) | 0;
				if (!(HEAP32[b + 212 >> 2] & 1048576))
					_g(b, 4768);
				Zg(b, 4768);
				i = f;
				return
			}
			m = b + 208 | 0;
			j = HEAP32[m >> 2] | 0;
			if (!(j & 1))
				_g(b, 4136);
			if (j & 4)
				HEAP32[m >> 2] = j | 8;
			j = e + 1 | 0;
			m = b + 788 | 0;
			k = HEAP32[m >> 2] | 0;
			do
				if (k) {
					n = b + 792 | 0;
					if ((HEAP32[n >> 2] | 0) >>> 0 < j >>> 0) {
						HEAP32[m >> 2] = 0;
						HEAP32[n >> 2] = 0;
						if (b) {
							n = HEAP32[b + 724 >> 2] | 0;
							if (!n) {
								wx(k);
								l = 17;
								break
							} else {
								rc[n & 127](b, k);
								l = 17;
								break
							}
						} else
							l = 17
					} else
						o = k
				} else
					l = 17;
			while (0);
			do
				if ((l | 0) == 17) {
					if (j) {
						if ((b | 0) != 0 ? (k = HEAP32[b + 720 >> 2] | 0, (k | 0) != 0) : 0)
							p = Cc[k & 31](b, j) | 0;
						else
							p = vx(j) | 0;
						if (p) {
							HEAP32[m >> 2] = p;
							HEAP32[b + 792 >> 2] = j;
							o = p;
							break
						}
					}
					Zg(b, 7472);
					xh(b, e) | 0;
					if (!(HEAP32[b + 212 >> 2] & 1048576))
						_g(b, 4320);
					Zg(b, 4320);
					i = f;
					return
				}
			while (0);
			if (b) {
				p = HEAP32[b + 184 >> 2] | 0;
				if (!p)
					Eg(b, 3688);
				vc[p & 31](b, o, e);
				p = HEAP32[b + 212 >> 2] | 0;
				if (!(HEAP32[b + 376 >> 2] & 536870912))
					q = (p & 2048 | 0) == 0;
				else
					q = (p & 768 | 0) != 768;
				if (q & (e | 0) != 0) {
					q = b + 412 | 0;
					p = o;
					j = e;
					l = HEAP32[q >> 2] | 0;
					while (1) {
						k = (j | 0) == 0 ? -1 : j;
						l = sk(l, p, k) | 0;
						if ((j | 0) == (k | 0))
							break;
						else {
							p = p + k | 0;
							j = j - k | 0
						}
					}
					HEAP32[q >> 2] = l
				}
			}
			if (xh(b, 0) | 0) {
				i = f;
				return
			}
			a: do
				if (e) {
					l = 0;
					while (1) {
						q = l + 1 | 0;
						if (!(HEAP8[o + l >> 0] | 0)) {
							r = l;
							break
						}
						if (q >>> 0 < e >>> 0)
							l = q;
						else {
							r = q;
							break
						}
					}
					if ((r + -1 | 0) >>> 0 <= 78)
						if ((r + 5 | 0) >>> 0 <= e >>> 0) {
							l = HEAP8[o + (r + 1) >> 0] | 0;
							if (l << 24 >> 24 == 1) {
								if (HEAP8[o + (r + 2) >> 0] | 0) {
									s = 4872;
									break
								}
							} else if (l << 24 >> 24) {
								s = 4872;
								break
							}
							q = l << 24 >> 24 != 0;
							HEAP32[g >> 2] = 0;
							l = r + 3 | 0;
							b: do
								if (l >>> 0 < e >>> 0) {
									j = l;
									while (1) {
										p = j + 1 | 0;
										if (!(HEAP8[o + j >> 0] | 0)) {
											t = j;
											break b
										}
										if (p >>> 0 < e >>> 0)
											j = p;
										else {
											t = p;
											break
										}
									}
								} else
									t = l;
							while (0);
							j = t + 1 | 0;
							c: do
								if (j >>> 0 < e >>> 0) {
									p = j;
									while (1) {
										k = p + 1 | 0;
										if (!(HEAP8[o + p >> 0] | 0)) {
											u = p;
											break c
										}
										if (k >>> 0 < e >>> 0)
											p = k;
										else {
											u = k;
											break
										}
									}
								} else
									u = j;
							while (0);
							p = u + 1 | 0;
							do
								if (q | p >>> 0 > e >>> 0) {
									if (!(q & p >>> 0 < e >>> 0)) {
										s = 1440;
										break a
									}
									HEAP32[g >> 2] = -1;
									if ((Ai(b, e, p, g) | 0) != 1) {
										k = HEAP32[b + 248 >> 2] | 0;
										if (!k) {
											v = o;
											break
										} else {
											s = k;
											break a
										}
									} else {
										v = HEAP32[m >> 2] | 0;
										break
									}
								} else {
									HEAP32[g >> 2] = e - p;
									v = o
								}
							while (0);
							HEAP8[v + ((HEAP32[g >> 2] | 0) + p) >> 0] = 0;
							HEAP32[h >> 2] = q ? 1 : 2;
							HEAP32[h + 4 >> 2] = v;
							HEAP32[h + 20 >> 2] = v + l;
							HEAP32[h + 24 >> 2] = v + j;
							HEAP32[h + 8 >> 2] = v + p;
							HEAP32[h + 12 >> 2] = 0;
							HEAP32[h + 16 >> 2] = HEAP32[g >> 2];
							if (!(ni(b, d, h, 1) | 0)) {
								i = f;
								return
							} else
								s = 1416
						} else
							s = 1440;
					else
						s = 4360
				} else
					s = 4360;
			while (0);
			if (!(HEAP32[b + 212 >> 2] & 1048576))
				_g(b, s);
			Zg(b, s);
			i = f;
			return
		}
		function xh(a, b) {
			a = a | 0;
			b = b | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0;
			e = i;
			i = i + 1040 | 0;
			f = e + 1024 | 0;
			g = e;
			a: do
				if (!b) {
					h = a + 212 | 0;
					j = a + 376 | 0
				} else {
					k = (a | 0) == 0;
					l = a + 184 | 0;
					m = a + 376 | 0;
					n = a + 212 | 0;
					o = a + 412 | 0;
					p = b;
					while (1) {
						q = p >>> 0 < 1024 ? p : 1024;
						r = p;
						p = p - q | 0;
						if (!k) {
							s = HEAP32[l >> 2] | 0;
							if (!s)
								break;
							vc[s & 31](a, g, q);
							s = HEAP32[n >> 2] | 0;
							if (!(HEAP32[m >> 2] & 536870912))
								t = (s & 2048 | 0) == 0;
							else
								t = (s & 768 | 0) != 768;
							if (t & (q | 0) != 0) {
								s = g;
								u = q;
								v = HEAP32[o >> 2] | 0;
								while (1) {
									w = (u | 0) == 0 ? -1 : u;
									v = sk(v, s, w) | 0;
									if ((u | 0) == (w | 0))
										break;
									else {
										s = s + w | 0;
										u = u - w | 0
									}
								}
								HEAP32[o >> 2] = v
							}
						}
						if ((r | 0) == (q | 0)) {
							h = n;
							j = m;
							break a
						}
					}
					Eg(a, 3688)
				}
			while (0);
			g = HEAP32[h >> 2] | 0;
			if (!(HEAP32[j >> 2] & 536870912))
				x = (g & 2048 | 0) == 0;
			else
				x = (g & 768 | 0) != 768;
			HEAP32[a + 800 >> 2] = 129;
			g = HEAP32[a + 184 >> 2] | 0;
			if (!g)
				Eg(a, 3688);
			vc[g & 31](a, f, 4);
			if (!x) {
				y = 0;
				i = e;
				return y | 0
			}
			if (((HEAPU8[f + 1 >> 0] | 0) << 16 | (HEAPU8[f >> 0] | 0) << 24 | (HEAPU8[f + 2 >> 0] | 0) << 8 | (HEAPU8[f + 3 >> 0] | 0) | 0) == (HEAP32[a + 412 >> 2] | 0)) {
				y = 0;
				i = e;
				return y | 0
			}
			f = HEAP32[h >> 2] | 0;
			if (!(HEAP32[j >> 2] & 536870912)) {
				if (f & 1024)
					z = 25
			} else if (!(f & 512))
				z = 25;
			if ((z | 0) == 25) {
				Zg(a, 4096);
				y = 1;
				i = e;
				return y | 0
			}
			if (!(f & 1048576))
				_g(a, 4096);
			Zg(a, 4096);
			y = 0;
			i = e;
			return y | 0
		}
		function yh(f, g) {
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0,
			O = 0,
			P = 0,
			Q = 0,
			R = 0,
			S = 0,
			T = 0,
			U = 0,
			V = 0,
			W = 0,
			X = 0,
			Y = 0,
			Z = 0,
			_ = 0,
			$ = 0,
			aa = 0,
			ba = 0,
			ca = 0,
			ea = 0;
			h = i;
			i = i + 16 | 0;
			j = h;
			k = f + 384 | 0;
			l = HEAP32[k >> 2] | 0;
			if (!l)
				Eg(f, 3896);
			m = f + 212 | 0;
			if ((HEAP32[m >> 2] & 16448 | 0) == 16384)
				Eg(f, 3912);
			n = f + 216 | 0;
			o = HEAP32[n >> 2] | 0;
			do
				if (o & 4096) {
					if ((HEAP8[g + 8 >> 0] | 0) == 3) {
						Th(g, l + 1 | 0, HEAP32[f + 416 >> 2] | 0, HEAP32[f + 528 >> 2] | 0, HEAPU16[f + 428 >> 1] | 0);
						break
					}
					q = l + 1 | 0;
					if ((HEAP16[f + 428 >> 1] | 0) == 0 | (o & 33554432 | 0) == 0) {
						Uh(g, q, 0);
						break
					} else {
						Uh(g, q, f + 532 | 0);
						break
					}
				}
			while (0);
			o = HEAP32[n >> 2] | 0;
			if ((o & 262272 | 0) == 262144 ? (l = HEAP8[g + 8 >> 0] | 0, l << 24 >> 24 == 4 | l << 24 >> 24 == 6) : 0) {
				Vh(g, (HEAP32[k >> 2] | 0) + 1 | 0, 0);
				r = HEAP32[n >> 2] | 0
			} else
				r = o;
			do
				if (r & 6291456) {
					if (!(Wh(f, g, (HEAP32[k >> 2] | 0) + 1 | 0) | 0)) {
						s = HEAP32[n >> 2] | 0;
						break
					}
					HEAP8[f + 700 >> 0] = 1;
					do
						if ((HEAP32[n >> 2] & 6291456 | 0) == 4194304) {
							if ((f | 0) != 0 ? (o = HEAP32[f + 172 >> 2] | 0, (o | 0) != 0) : 0) {
								rc[o & 127](f, 3936);
								break
							}
							o = HEAP32[p >> 2] | 0;
							HEAP32[j >> 2] = 3936;
							Qb(o | 0, 7576, j | 0) | 0;
							ec(10, o | 0) | 0
						}
					while (0);
					o = HEAP32[n >> 2] | 0;
					if ((o & 6291456 | 0) == 2097152)
						Eg(f, 3936);
					else
						s = o
				} else
					s = r;
			while (0);
			if ((s & 16384 | 0) != 0 ? (HEAP32[f + 208 >> 2] & 2048 | 0) == 0 : 0) {
				Xh(g, (HEAP32[k >> 2] | 0) + 1 | 0);
				t = HEAP32[n >> 2] | 0
			} else
				t = s;
			if (!(t & 128))
				u = t;
			else {
				Yh(g, (HEAP32[k >> 2] | 0) + 1 | 0, f);
				u = HEAP32[n >> 2] | 0
			}
			do
				if ((u & 6299648 | 0) == 8192) {
					if (u & 128) {
						if (HEAP16[f + 428 >> 1] | 0) {
							v = u;
							break
						}
						t = HEAP8[f + 435 >> 0] | 0;
						if (!(t & 4))
							w = t;
						else {
							v = u;
							break
						}
					} else
						w = HEAP8[f + 435 >> 0] | 0;
					if (w << 24 >> 24 != 3) {
						Zh(g, (HEAP32[k >> 2] | 0) + 1 | 0, f);
						v = HEAP32[n >> 2] | 0
					} else
						v = u
				} else
					v = u;
			while (0);
			if ((v & 262272 | 0) == 262272 ? (u = HEAP8[g + 8 >> 0] | 0, u << 24 >> 24 == 4 | u << 24 >> 24 == 6) : 0) {
				Vh(g, (HEAP32[k >> 2] | 0) + 1 | 0, 0);
				x = HEAP32[n >> 2] | 0
			} else
				x = v;
			if ((x & 8388608 | 0) != 0 ? (HEAP8[g + 8 >> 0] & 4) != 0 : 0) {
				_h(g, (HEAP32[k >> 2] | 0) + 1 | 0, f);
				y = HEAP32[n >> 2] | 0
			} else
				y = x;
			if ((y & 67108864 | 0) != 0 ? (x = HEAP32[k >> 2] | 0, v = x + 1 | 0, u = g + 9 | 0, (HEAP8[u >> 0] | 0) == 16) : 0) {
				w = g + 4 | 0;
				t = HEAP32[w >> 2] | 0;
				s = x + (t + 1) | 0;
				if ((t | 0) > 0) {
					t = v;
					x = v;
					while (1) {
						v = HEAPU8[x >> 0] | 0;
						HEAP8[t >> 0] = (((((HEAPU8[x + 1 >> 0] | 0) - v | 0) * 65535 | 0) + 8388480 | 0) >>> 24) + v;
						x = x + 2 | 0;
						if (x >>> 0 >= s >>> 0)
							break;
						else
							t = t + 1 | 0
					}
					z = HEAP32[n >> 2] | 0
				} else
					z = y;
				HEAP8[u >> 0] = 8;
				u = HEAPU8[g + 10 >> 0] | 0;
				HEAP8[g + 11 >> 0] = u << 3;
				HEAP32[w >> 2] = da(u, HEAP32[g >> 2] | 0) | 0;
				A = z
			} else
				A = y;
			if ((A & 1024 | 0) != 0 ? (y = HEAP32[k >> 2] | 0, z = y + 1 | 0, u = g + 9 | 0, (HEAP8[u >> 0] | 0) == 16) : 0) {
				w = g + 4 | 0;
				t = HEAP32[w >> 2] | 0;
				s = y + (t + 1) | 0;
				if ((t | 0) > 0) {
					t = z;
					y = z;
					while (1) {
						HEAP8[t >> 0] = HEAP8[y >> 0] | 0;
						y = y + 2 | 0;
						if (y >>> 0 >= s >>> 0)
							break;
						else
							t = t + 1 | 0
					}
					B = HEAP32[n >> 2] | 0
				} else
					B = A;
				HEAP8[u >> 0] = 8;
				u = HEAPU8[g + 10 >> 0] | 0;
				HEAP8[g + 11 >> 0] = u << 3;
				HEAP32[w >> 2] = da(u, HEAP32[g >> 2] | 0) | 0;
				C = B
			} else
				C = A;
			do
				if (C & 64) {
					$h(g, (HEAP32[k >> 2] | 0) + 1 | 0, HEAP32[f + 612 >> 2] | 0, HEAP32[f + 616 >> 2] | 0);
					if (!(HEAP32[g + 4 >> 2] | 0))
						Eg(f, 3976);
					else {
						D = HEAP32[n >> 2] | 0;
						break
					}
				} else
					D = C;
			while (0);
			if (((D & 512 | 0) != 0 ? (C = HEAP32[k >> 2] | 0, A = g + 9 | 0, (HEAP8[A >> 0] | 0) == 8) : 0) ? (HEAP8[g + 8 >> 0] | 0) != 3 : 0) {
				B = g + 4 | 0;
				u = HEAP32[B >> 2] | 0;
				w = u << 1;
				if ((w | 0) > (u | 0)) {
					t = C + (w | 1) | 0;
					w = C + (u + 1) | 0;
					do {
						w = w + -1 | 0;
						C = HEAP8[w >> 0] | 0;
						HEAP8[t + -1 >> 0] = C;
						t = t + -2 | 0;
						HEAP8[t >> 0] = C
					} while (t >>> 0 > w >>> 0);
					E = HEAP32[n >> 2] | 0;
					F = HEAP32[B >> 2] | 0
				} else {
					E = D;
					F = u
				}
				HEAP32[B >> 2] = F << 1;
				HEAP8[A >> 0] = 16;
				HEAP8[g + 11 >> 0] = HEAPU8[g + 10 >> 0] << 4;
				G = E
			} else
				G = D;
			if ((G & 16384 | 0) != 0 ? (HEAP32[f + 208 >> 2] & 2048 | 0) != 0 : 0) {
				Xh(g, (HEAP32[k >> 2] | 0) + 1 | 0);
				H = HEAP32[n >> 2] | 0
			} else
				H = G;
			a: do
				if (H & 32) {
					G = (HEAP32[k >> 2] | 0) + 1 | 0;
					D = HEAP8[g + 8 >> 0] | 0;
					if (!(D << 24 >> 24)) {
						E = HEAP32[g + 4 >> 2] | 0;
						if (!E)
							break;
						else {
							I = 0;
							J = G
						}
						while (1) {
							HEAP8[J >> 0] = HEAPU8[J >> 0] ^ 255;
							I = I + 1 | 0;
							if ((I | 0) == (E | 0))
								break a;
							else
								J = J + 1 | 0
						}
					} else if (D << 24 >> 24 != 4)
						break;
					E = HEAP8[g + 9 >> 0] | 0;
					if (E << 24 >> 24 == 8) {
						A = HEAP32[g + 4 >> 2] | 0;
						if (!A)
							break;
						else {
							K = 0;
							L = G
						}
						while (1) {
							HEAP8[L >> 0] = HEAPU8[L >> 0] ^ 255;
							K = K + 2 | 0;
							if (K >>> 0 >= A >>> 0)
								break;
							else
								L = L + 2 | 0
						}
					} else if (E << 24 >> 24 == 16) {
						A = HEAP32[g + 4 >> 2] | 0;
						if (!A)
							break;
						else {
							M = 0;
							N = G
						}
						while (1) {
							HEAP8[N >> 0] = HEAPU8[N >> 0] ^ 255;
							D = N + 1 | 0;
							HEAP8[D >> 0] = HEAPU8[D >> 0] ^ 255;
							M = M + 4 | 0;
							if (M >>> 0 >= A >>> 0)
								break;
							else
								N = N + 4 | 0
						}
					} else
						break
				}
			while (0);
			N = HEAP32[n >> 2] | 0;
			if (!(N & 8))
				O = N;
			else {
				ai(g, (HEAP32[k >> 2] | 0) + 1 | 0, f + 521 | 0);
				O = HEAP32[n >> 2] | 0
			}
			if (O & 4)
				bi(g, (HEAP32[k >> 2] | 0) + 1 | 0);
			O = g + 8 | 0;
			do
				if ((HEAP8[O >> 0] | 0) == 3) {
					if ((HEAP32[f + 424 >> 2] | 0) <= -1)
						break;
					ci(f, g)
				}
			while (0);
			do
				if (HEAP32[n >> 2] & 1) {
					N = (HEAP32[k >> 2] | 0) + 1 | 0;
					M = HEAP8[O >> 0] | 0;
					if (!(M & 2))
						break;
					L = HEAP32[g >> 2] | 0;
					K = HEAP8[g + 9 >> 0] | 0;
					if (K << 24 >> 24 == 8)
						if (M << 24 >> 24 == 6) {
							if (!L)
								break;
							else {
								P = 0;
								Q = N
							}
							while (1) {
								J = HEAP8[Q >> 0] | 0;
								I = Q + 2 | 0;
								HEAP8[Q >> 0] = HEAP8[I >> 0] | 0;
								HEAP8[I >> 0] = J;
								P = P + 1 | 0;
								if ((P | 0) == (L | 0))
									break;
								else
									Q = Q + 4 | 0
							}
						} else if (M << 24 >> 24 == 2) {
							if (!L)
								break;
							else {
								R = 0;
								S = N
							}
							while (1) {
								J = HEAP8[S >> 0] | 0;
								I = S + 2 | 0;
								HEAP8[S >> 0] = HEAP8[I >> 0] | 0;
								HEAP8[I >> 0] = J;
								R = R + 1 | 0;
								if ((R | 0) == (L | 0))
									break;
								else
									S = S + 3 | 0
							}
						} else
							break;
					else if (K << 24 >> 24 == 16)
						if (M << 24 >> 24 == 6) {
							if (!L)
								break;
							else {
								T = 0;
								U = N
							}
							while (1) {
								J = HEAP8[U >> 0] | 0;
								I = U + 4 | 0;
								HEAP8[U >> 0] = HEAP8[I >> 0] | 0;
								HEAP8[I >> 0] = J;
								J = U + 1 | 0;
								I = HEAP8[J >> 0] | 0;
								H = U + 5 | 0;
								HEAP8[J >> 0] = HEAP8[H >> 0] | 0;
								HEAP8[H >> 0] = I;
								T = T + 1 | 0;
								if ((T | 0) == (L | 0))
									break;
								else
									U = U + 8 | 0
							}
						} else if (M << 24 >> 24 == 2) {
							if (!L)
								break;
							else {
								V = 0;
								W = N
							}
							while (1) {
								K = HEAP8[W >> 0] | 0;
								I = W + 4 | 0;
								HEAP8[W >> 0] = HEAP8[I >> 0] | 0;
								HEAP8[I >> 0] = K;
								K = W + 1 | 0;
								I = HEAP8[K >> 0] | 0;
								H = W + 5 | 0;
								HEAP8[K >> 0] = HEAP8[H >> 0] | 0;
								HEAP8[H >> 0] = I;
								V = V + 1 | 0;
								if ((V | 0) == (L | 0))
									break;
								else
									W = W + 6 | 0
							}
						} else
							break;
					else
						break
				}
			while (0);
			W = HEAP32[n >> 2] | 0;
			do
				if (!(W & 65536))
					X = W;
				else {
					V = HEAP32[k >> 2] | 0;
					U = V + 1 | 0;
					T = HEAP8[g + 9 >> 0] | 0;
					if ((T & 255) >= 8) {
						X = W;
						break
					}
					S = HEAP32[g + 4 >> 2] | 0;
					R = V + (S + 1) | 0;
					if (T << 24 >> 24 == 2)
						Y = 6752;
					else if (T << 24 >> 24 == 4)
						Y = 7008;
					else if (T << 24 >> 24 == 1)
						Y = 6496;
					else {
						X = W;
						break
					}
					if ((S | 0) > 0)
						Z = U;
					else {
						X = W;
						break
					}
					do {
						HEAP8[Z >> 0] = HEAP8[Y + (HEAPU8[Z >> 0] | 0) >> 0] | 0;
						Z = Z + 1 | 0
					} while (Z >>> 0 < R >>> 0);
					X = HEAP32[n >> 2] | 0
				}
			while (0);
			if (!(X & 32768))
				_ = X;
			else {
				di(g, (HEAP32[k >> 2] | 0) + 1 | 0, HEAPU16[f + 444 >> 1] | 0, HEAP32[m >> 2] | 0);
				_ = HEAP32[n >> 2] | 0
			}
			if (!(_ & 524288))
				$ = _;
			else {
				ei(g, (HEAP32[k >> 2] | 0) + 1 | 0);
				$ = HEAP32[n >> 2] | 0
			}
			if (!($ & 131072))
				aa = $;
			else {
				fi(g, (HEAP32[k >> 2] | 0) + 1 | 0);
				aa = HEAP32[n >> 2] | 0
			}
			do
				if (!(aa & 16))
					ba = aa;
				else {
					if ((HEAP8[g + 9 >> 0] | 0) != 16) {
						ba = aa;
						break
					}
					$ = da(HEAPU8[g + 10 >> 0] | 0, HEAP32[g >> 2] | 0) | 0;
					if (!$) {
						ba = aa;
						break
					}
					_ = 0;
					m = (HEAP32[k >> 2] | 0) + 1 | 0;
					while (1) {
						X = HEAP8[m >> 0] | 0;
						Z = m + 1 | 0;
						HEAP8[m >> 0] = HEAP8[Z >> 0] | 0;
						HEAP8[Z >> 0] = X;
						_ = _ + 1 | 0;
						if ((_ | 0) == ($ | 0))
							break;
						else
							m = m + 2 | 0
					}
					ba = HEAP32[n >> 2] | 0
				}
			while (0);
			if (!(ba & 1048576)) {
				i = h;
				return
			}
			ba = HEAP32[f + 192 >> 2] | 0;
			if (ba)
				vc[ba & 31](f, g, (HEAP32[k >> 2] | 0) + 1 | 0);
			k = HEAP8[f + 204 >> 0] | 0;
			if (k << 24 >> 24)
				HEAP8[g + 9 >> 0] = k;
			k = HEAP8[f + 205 >> 0] | 0;
			f = g + 10 | 0;
			if (!(k << 24 >> 24))
				ca = HEAP8[f >> 0] | 0;
			else {
				HEAP8[f >> 0] = k;
				ca = k
			}
			k = da(ca & 255, HEAPU8[g + 9 >> 0] | 0) | 0;
			HEAP8[g + 11 >> 0] = k;
			ca = k & 255;
			k = HEAP32[g >> 2] | 0;
			if (ca >>> 0 > 7)
				ea = da(ca >>> 3, k) | 0;
			else
				ea = ((da(ca, k) | 0) + 7 | 0) >>> 3;
			HEAP32[g + 4 >> 2] = ea;
			i = h;
			return
		}
		function zh(b, e, f, g) {
			b = b | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0;
			h = i;
			i = i + 16 | 0;
			j = h;
			if (!((e | 0) != 0 & (b | 0) != 0)) {
				i = h;
				return
			}
			k = HEAP32[b >> 2] | 0;
			l = HEAP32[5440 + (f << 2) >> 2] | 0;
			f = da(l, k) | 0;
			m = b + 11 | 0;
			n = HEAPU8[m >> 0] | 0;
			if ((n | 0) == 2) {
				o = (k << 1) + 6 & 6;
				if (!(g & 65536)) {
					p = (f << 1) + 6 & 6 ^ 6;
					q = 6;
					r = 2;
					s = 0;
					t = o ^ 6
				} else {
					p = (f << 1) + 6 & 6;
					q = 0;
					r = -2;
					s = 6;
					t = o
				}
				if (k) {
					o = e + ((f + -1 | 0) >>> 2) | 0;
					u = p;
					p = 0;
					v = e + ((k + -1 | 0) >>> 2) | 0;
					w = t;
					while (1) {
						t = (HEAPU8[v >> 0] | 0) >>> w & 3;
						x = o;
						y = u;
						z = 0;
						do {
							HEAP8[x >> 0] = (HEAPU8[x >> 0] | 0) & 16191 >>> (6 - y | 0) | t << y;
							A = (y | 0) == (q | 0);
							x = A ? x + -1 | 0 : x;
							y = A ? s : y + r | 0;
							z = z + 1 | 0
						} while ((z | 0) < (l | 0));
						z = (w | 0) == (q | 0);
						p = p + 1 | 0;
						if (p >>> 0 >= (HEAP32[b >> 2] | 0) >>> 0)
							break;
						else {
							o = x;
							u = y;
							v = z ? v + -1 | 0 : v;
							w = z ? s : w + r | 0
						}
					}
				}
			} else if ((n | 0) == 4) {
				r = k & 1;
				if (!(g & 65536)) {
					B = f & 1;
					C = 4;
					D = 4;
					E = 0;
					F = r
				} else {
					B = f & 1 ^ 1;
					C = 0;
					D = -4;
					E = 4;
					F = r ^ 1
				}
				if (k) {
					r = e + ((f + -1 | 0) >>> 1) | 0;
					w = B << 2;
					B = 0;
					s = e + ((k + -1 | 0) >>> 1) | 0;
					v = F << 2;
					while (1) {
						F = (HEAPU8[s >> 0] | 0) >>> v & 15;
						u = r;
						o = w;
						p = 0;
						do {
							HEAP8[u >> 0] = (HEAPU8[u >> 0] | 0) & 3855 >>> (4 - o | 0) | F << o;
							q = (o | 0) == (C | 0);
							u = q ? u + -1 | 0 : u;
							o = q ? E : o + D | 0;
							p = p + 1 | 0
						} while ((p | 0) < (l | 0));
						p = (v | 0) == (C | 0);
						B = B + 1 | 0;
						if (B >>> 0 >= (HEAP32[b >> 2] | 0) >>> 0)
							break;
						else {
							r = u;
							w = o;
							s = p ? s + -1 | 0 : s;
							v = p ? E : v + D | 0
						}
					}
				}
			} else if ((n | 0) == 1) {
				D = k + 7 & 7;
				if (!(g & 65536)) {
					G = f + 7 & 7 ^ 7;
					H = 7;
					I = 1;
					J = 0;
					K = D ^ 7
				} else {
					G = f + 7 & 7;
					H = 0;
					I = -1;
					J = 7;
					K = D
				}
				if (k) {
					D = e + ((f + -1 | 0) >>> 3) | 0;
					g = G;
					G = 0;
					v = e + ((k + -1 | 0) >>> 3) | 0;
					E = K;
					while (1) {
						K = (HEAPU8[v >> 0] | 0) >>> E & 1;
						s = D;
						w = g;
						r = 0;
						do {
							HEAP8[s >> 0] = (HEAPU8[s >> 0] | 0) & 32639 >>> (7 - w | 0) | K << w;
							B = (w | 0) == (H | 0);
							w = B ? J : w + I | 0;
							s = B ? s + -1 | 0 : s;
							r = r + 1 | 0
						} while ((r | 0) < (l | 0));
						r = (E | 0) == (H | 0);
						G = G + 1 | 0;
						if (G >>> 0 >= (HEAP32[b >> 2] | 0) >>> 0)
							break;
						else {
							D = s;
							g = w;
							v = r ? v + -1 | 0 : v;
							E = r ? J : E + I | 0
						}
					}
				}
			} else {
				I = n >>> 3;
				if (k) {
					n = e + (da(I, f + -1 | 0) | 0) | 0;
					E = e + (da(I, k + -1 | 0) | 0) | 0;
					k = 0 - I | 0;
					e = 0 - (da((l | 0) > 1 ? l : 1, I) | 0) | 0;
					J = n;
					n = 0;
					v = E;
					while (1) {
						qy(j | 0, v | 0, I | 0) | 0;
						E = J;
						g = 0;
						while (1) {
							qy(E | 0, j | 0, I | 0) | 0;
							g = g + 1 | 0;
							if ((g | 0) >= (l | 0))
								break;
							else
								E = E + k | 0
						}
						n = n + 1 | 0;
						if (n >>> 0 >= (HEAP32[b >> 2] | 0) >>> 0)
							break;
						else {
							J = J + e | 0;
							v = v + k | 0
						}
					}
				}
			}
			HEAP32[b >> 2] = f;
			k = HEAP8[m >> 0] | 0;
			m = k & 255;
			if ((k & 255) > 7)
				L = da(m >>> 3, f) | 0;
			else
				L = ((da(m, f) | 0) + 7 | 0) >>> 3;
			HEAP32[b + 4 >> 2] = L;
			i = h;
			return
		}
		function Ah(e, f, g) {
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0,
			O = 0,
			P = 0,
			Q = 0,
			R = 0,
			S = 0,
			T = 0,
			U = 0,
			V = 0,
			W = 0,
			X = 0,
			Y = 0,
			Z = 0;
			h = i;
			j = HEAP8[e + 443 >> 0] | 0;
			k = j & 255;
			l = HEAP32[e + 384 >> 2] | 0;
			m = l + 1 | 0;
			n = HEAP32[e + 348 >> 2] | 0;
			o = HEAP8[e + 433 >> 0] | 0;
			p = o & 255;
			if (!(j << 24 >> 24))
				Eg(e, 5080);
			q = HEAP32[e + 404 >> 2] | 0;
			if (q) {
				if ((j & 255) > 7)
					r = da(n, k >>> 3) | 0;
				else
					r = ((da(n, k) | 0) + 7 | 0) >>> 3;
				if ((q | 0) != (r | 0))
					Eg(e, 5112)
			}
			if (!n)
				Eg(e, 5152);
			r = da(n, k) | 0;
			q = r & 7;
			do
				if (q) {
					if ((j & 255) > 7)
						s = da(n, k >>> 3) | 0;
					else
						s = (r + 7 | 0) >>> 3;
					t = f + (s + -1) | 0;
					u = HEAP8[t >> 0] | 0;
					if (!(HEAP32[e + 216 >> 2] & 65536)) {
						v = u;
						w = 255 >>> q;
						x = t;
						break
					} else {
						v = u;
						w = 255 << q;
						x = t;
						break
					}
				} else {
					v = 0;
					w = 0;
					x = 0
				}
			while (0);
			a: do
				if ((HEAP8[e + 432 >> 0] | 0) != 0 ? (q = HEAP32[e + 216 >> 2] | 0, (q & 2 | 0) != 0 & (o & 255) < 6) : 0) {
					if ((g | 0) == 1) {
						s = p & 1;
						if (!s) {
							y = 78;
							break
						} else
							z = s
					} else if (!g)
						z = p & 1;
					else {
						y = 78;
						break
					}
					s = z << 3 - ((p + 1 | 0) >>> 1) & 7;
					if (n >>> 0 <= s >>> 0) {
						i = h;
						return
					}
					if ((j & 255) < 8) {
						t = 8 / (k >>> 0) | 0;
						u = (g | 0) != 0;
						do
							if (!(q & 65536))
								if (u) {
									if (j << 24 >> 24 == 1)
										A = 0;
									else
										A = j << 24 >> 24 == 2 ? 1 : 2;
									B = 5328 + (A * 12 | 0) + (p >>> 1 << 2) + 36 | 0;
									break
								} else {
									if (j << 24 >> 24 == 1)
										C = 0;
									else
										C = j << 24 >> 24 == 2 ? 1 : 2;
									B = 5184 + (C * 24 | 0) + (p << 2) + 72 | 0;
									break
								}
							else if (u) {
								if (j << 24 >> 24 == 1)
									D = 0;
								else
									D = j << 24 >> 24 == 2 ? 1 : 2;
								B = 5328 + (D * 12 | 0) + (p >>> 1 << 2) | 0;
								break
							} else {
								if (j << 24 >> 24 == 1)
									E = 0;
								else
									E = j << 24 >> 24 == 2 ? 1 : 2;
								B = 5184 + (E * 24 | 0) + (p << 2) | 0;
								break
							}
						while (0);
						u = f;
						q = HEAP32[B >> 2] | 0;
						F = n;
						G = m;
						while (1) {
							H = q >>> 8 | q << 24;
							I = q & 255;
							if ((I | 0) == 255)
								HEAP8[u >> 0] = HEAP8[G >> 0] | 0;
							else if (I)
								HEAP8[u >> 0] = HEAPU8[G >> 0] & q | HEAPU8[u >> 0] & (q ^ 255);
							if (F >>> 0 <= t >>> 0)
								break a;
							u = u + 1 | 0;
							q = H;
							F = F - t | 0;
							G = G + 1 | 0
						}
					}
					if (k & 7)
						Eg(e, 5400);
					G = k >>> 3;
					t = da(s, G) | 0;
					F = (da(n, G) | 0) - t | 0;
					q = f + t | 0;
					u = t + 1 | 0;
					H = l + u | 0;
					if (!g)
						J = G;
					else {
						I = G << ((6 - p | 0) >>> 1);
						J = I >>> 0 > F >>> 0 ? F : I
					}
					I = G << ((7 - p | 0) >>> 1);
					if ((J | 0) == 1) {
						HEAP8[q >> 0] = HEAP8[H >> 0] | 0;
						if (F >>> 0 > I >>> 0) {
							K = q;
							L = F;
							M = H
						} else {
							i = h;
							return
						}
						do {
							K = K + I | 0;
							M = M + I | 0;
							L = L - I | 0;
							HEAP8[K >> 0] = HEAP8[M >> 0] | 0
						} while (L >>> 0 > I >>> 0);
						i = h;
						return
					} else if ((J | 0) == 3) {
						HEAP8[q >> 0] = HEAP8[H >> 0] | 0;
						s = t + 2 | 0;
						HEAP8[f + u >> 0] = HEAP8[l + s >> 0] | 0;
						HEAP8[f + s >> 0] = HEAP8[l + (t + 3) >> 0] | 0;
						if (F >>> 0 > I >>> 0) {
							N = q;
							O = F;
							P = H
						} else {
							i = h;
							return
						}
						do {
							s = P;
							P = P + I | 0;
							G = N;
							N = N + I | 0;
							O = O - I | 0;
							HEAP8[N >> 0] = HEAP8[P >> 0] | 0;
							Q = I + 1 | 0;
							HEAP8[G + Q >> 0] = HEAP8[s + Q >> 0] | 0;
							Q = I + 2 | 0;
							HEAP8[G + Q >> 0] = HEAP8[s + Q >> 0] | 0
						} while (O >>> 0 > I >>> 0);
						i = h;
						return
					} else if ((J | 0) == 2) {
						t = q;
						u = F;
						Q = H;
						do {
							HEAP8[t >> 0] = HEAP8[Q >> 0] | 0;
							HEAP8[t + 1 >> 0] = HEAP8[Q + 1 >> 0] | 0;
							if (u >>> 0 <= I >>> 0) {
								y = 84;
								break
							}
							Q = Q + I | 0;
							t = t + I | 0;
							u = u - I | 0
						} while (u >>> 0 > 1);
						if ((y | 0) == 84) {
							i = h;
							return
						}
						HEAP8[t >> 0] = HEAP8[Q >> 0] | 0;
						i = h;
						return
					} else {
						if ((J >>> 0 < 16 ? (u = q, (u & 1 | 0) == 0) : 0) ? (s = H, ((s | I | J) & 1 | 0) == 0) : 0)
							if (!((u | I | s | J) & 3)) {
								s = ((I - J | 0) >>> 2) + 1 | 0;
								u = q;
								G = F;
								R = H;
								do {
									S = J;
									T = u;
									U = R;
									while (1) {
										HEAP32[T >> 2] = HEAP32[U >> 2];
										S = S + -4 | 0;
										if (!S)
											break;
										else {
											T = T + 4 | 0;
											U = U + 4 | 0
										}
									}
									if (G >>> 0 <= I >>> 0) {
										y = 84;
										break
									}
									u = T + (s << 2) | 0;
									R = U + (s << 2) | 0;
									G = G - I | 0
								} while (J >>> 0 <= G >>> 0);
								if ((y | 0) == 84) {
									i = h;
									return
								}
								s = u;
								Q = G;
								t = R;
								while (1) {
									HEAP8[s >> 0] = HEAP8[t >> 0] | 0;
									Q = Q + -1 | 0;
									if (!Q)
										break;
									else {
										s = s + 1 | 0;
										t = t + 1 | 0
									}
								}
								i = h;
								return
							} else {
								t = ((I - J | 0) >>> 1) + 1 | 0;
								s = q;
								Q = F;
								R = H;
								do {
									G = J;
									u = s;
									S = R;
									while (1) {
										HEAP16[u >> 1] = HEAP16[S >> 1] | 0;
										G = G + -2 | 0;
										if (!G)
											break;
										else {
											u = u + 2 | 0;
											S = S + 2 | 0
										}
									}
									if (Q >>> 0 <= I >>> 0) {
										y = 84;
										break
									}
									s = u + (t << 1) | 0;
									R = S + (t << 1) | 0;
									Q = Q - I | 0
								} while (J >>> 0 <= Q >>> 0);
								if ((y | 0) == 84) {
									i = h;
									return
								}
								t = s;
								G = Q;
								U = R;
								while (1) {
									HEAP8[t >> 0] = HEAP8[U >> 0] | 0;
									G = G + -1 | 0;
									if (!G)
										break;
									else {
										t = t + 1 | 0;
										U = U + 1 | 0
									}
								}
								i = h;
								return
							}
						qy(q | 0, H | 0, J | 0) | 0;
						if (F >>> 0 > I >>> 0) {
							V = q;
							W = J;
							X = F;
							Y = H
						} else {
							i = h;
							return
						}
						do {
							Y = Y + I | 0;
							V = V + I | 0;
							X = X - I | 0;
							W = W >>> 0 > X >>> 0 ? X : W;
							qy(V | 0, Y | 0, W | 0) | 0
						} while (X >>> 0 > I >>> 0);
						i = h;
						return
					}
				} else
					y = 78;
			while (0);
			if ((y | 0) == 78) {
				if ((j & 255) > 7)
					Z = da(n, k >>> 3) | 0;
				else
					Z = (r + 7 | 0) >>> 3;
				qy(f | 0, m | 0, Z | 0) | 0
			}
			if (!x) {
				i = h;
				return
			}
			HEAP8[x >> 0] = HEAPU8[x >> 0] & (w ^ 255) | v & 255 & w;
			i = h;
			return
		}
		function Bh(a, b, d) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0;
			e = i;
			i = i + 16 | 0;
			f = e;
			if (!a) {
				i = e;
				return
			}
			HEAP32[a + 188 >> 2] = b;
			HEAP32[a + 184 >> 2] = (d | 0) == 0 ? 11 : d;
			d = a + 180 | 0;
			do
				if (HEAP32[d >> 2] | 0) {
					HEAP32[d >> 2] = 0;
					b = HEAP32[a + 172 >> 2] | 0;
					if (!b) {
						g = HEAP32[p >> 2] | 0;
						HEAP32[f >> 2] = 3736;
						Qb(g | 0, 7576, f | 0) | 0;
						ec(10, g | 0) | 0;
						break
					} else {
						rc[b & 127](a, 3736);
						break
					}
				}
			while (0);
			HEAP32[a + 472 >> 2] = 0;
			i = e;
			return
		}
		function Ch(a, b, d, e) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0;
			f = i;
			i = i + 16 | 0;
			g = f;
			h = Ig(a, b, d, e, 0, 0, 0) | 0;
			if (!h) {
				i = f;
				return h | 0
			}
			HEAP32[h + 208 >> 2] = 32768;
			HEAP32[h + 796 >> 2] = 8192;
			e = h + 212 | 0;
			HEAP32[e >> 2] = HEAP32[e >> 2] | 3145728;
			HEAP32[h + 188 >> 2] = 0;
			HEAP32[h + 184 >> 2] = 11;
			e = h + 180 | 0;
			do
				if (HEAP32[e >> 2] | 0) {
					HEAP32[e >> 2] = 0;
					d = HEAP32[h + 172 >> 2] | 0;
					if (!d) {
						b = HEAP32[p >> 2] | 0;
						HEAP32[g >> 2] = 3736;
						Qb(b | 0, 7576, g | 0) | 0;
						ec(10, b | 0) | 0;
						break
					} else {
						rc[d & 127](h, 3736);
						break
					}
				}
			while (0);
			HEAP32[h + 472 >> 2] = 0;
			i = f;
			return h | 0
		}
		function Dh(b, d) {
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0;
			e = i;
			i = i + 16 | 0;
			f = e;
			if ((b | 0) == 0 | (d | 0) == 0) {
				i = e;
				return
			}
			Eh(b, d);
			g = b + 376 | 0;
			h = b + 208 | 0;
			j = b + 435 | 0;
			k = b + 212 | 0;
			l = f + 1 | 0;
			m = f + 2 | 0;
			n = f + 3 | 0;
			o = f + 4 | 0;
			p = b + 692 | 0;
			q = b + 696 | 0;
			a: while (1) {
				r = Fh(b) | 0;
				s = HEAP32[g >> 2] | 0;
				t = (s | 0) == 1229209940;
				u = HEAP32[h >> 2] | 0;
				if (!t)
					if (!(u & 4))
						v = u;
					else {
						w = u | 8;
						HEAP32[h >> 2] = w;
						v = w
					}
				else {
					if (!(u & 1)) {
						x = 5;
						break
					}
					if ((HEAP8[j >> 0] | 0) == 3 & (u & 2 | 0) == 0) {
						x = 7;
						break
					}
					if (!(u & 8))
						y = u;
					else {
						if (!(HEAP32[k >> 2] & 1048576)) {
							x = 10;
							break
						}
						Zg(b, 3400);
						y = HEAP32[h >> 2] | 0
					}
					u = y | 4;
					HEAP32[h >> 2] = u;
					v = u
				}
				if ((s | 0) == 1229278788) {
					if ((v & 5 | 0) != 5) {
						x = 18;
						break
					}
					HEAP32[h >> 2] = v | 24;
					xh(b, r) | 0;
					if (!r)
						continue;
					if (!(HEAP32[k >> 2] & 1048576)) {
						x = 21;
						break
					}
					Zg(b, 4128);
					continue
				} else if ((s | 0) == 1229472850) {
					dh(b, d, r);
					continue
				} else {
					HEAP8[f >> 0] = s >>> 24;
					HEAP8[l >> 0] = s >>> 16;
					HEAP8[m >> 0] = s >>> 8;
					HEAP8[n >> 0] = s;
					HEAP8[o >> 0] = 0;
					u = HEAP32[p >> 2] | 0;
					b: do
						if (u) {
							w = HEAP32[q >> 2] | 0;
							z = w + (u * 5 | 0) | 0;
							while (1) {
								A = z + -5 | 0;
								if (!(by(f, A, 4) | 0))
									break;
								if (A >>> 0 > w >>> 0)
									z = A;
								else
									break b
							}
							w = HEAP8[z + -1 >> 0] | 0;
							if (w << 24 >> 24) {
								eh(b, d, r, w & 255);
								if ((s | 0) != 1347179589)
									if (t) {
										x = 31;
										break a
									} else
										continue a;
								else {
									HEAP32[h >> 2] = HEAP32[h >> 2] | 2;
									continue a
								}
							}
						}
					while (0);
					if ((s | 0) == 1347179589) {
						fh(b, d, r);
						continue
					}
					if (t) {
						x = 35;
						break
					}
					do
						if ((s | 0) == 1866876531) {
							qh(b, d, r);
							continue a
						} else if ((s | 0) == 1883789683) {
							ph(b, d, r);
							continue a
						} else if ((s | 0) == 2052348020) {
							vh(b, d, r);
							continue a
						} else if ((s | 0) == 1950960965) {
							th(b, d, r);
							continue a
						} else if ((s | 0) == 1665684045) {
							ih(b, d, r);
							continue a
						} else if ((s | 0) == 1951551059) {
							mh(b, d, r);
							continue a
						} else if ((s | 0) == 1767135348) {
							wh(b, d, r);
							continue a
						} else if ((s | 0) == 1950701684) {
							uh(b, d, r);
							continue a
						} else if ((s | 0) == 1749635924) {
							oh(b, d, r);
							continue a
						} else if ((s | 0) == 1649100612) {
							nh(b, d, r);
							continue a
						} else if ((s | 0) == 1934642260) {
							lh(b, d, r);
							continue a
						} else if ((s | 0) == 1766015824) {
							kh(b, d, r);
							continue a
						} else if ((s | 0) == 1933787468) {
							sh(b, d, r);
							continue a
						} else if ((s | 0) == 1933723988) {
							hh(b, d, r);
							continue a
						} else if ((s | 0) == 1883455820) {
							rh(b, d, r);
							continue a
						} else if ((s | 0) == 1732332865) {
							gh(b, d, r);
							continue a
						} else if ((s | 0) == 1934772034) {
							jh(b, d, r);
							continue a
						} else {
							eh(b, d, r, 0);
							continue a
						}
					while (0)
				}
			}
			if ((x | 0) == 5)
				_g(b, 3336);
			else if ((x | 0) == 7)
				_g(b, 3368);
			else if ((x | 0) == 10)
				_g(b, 3400);
			else if ((x | 0) == 18)
				_g(b, 4112);
			else if ((x | 0) == 21)
				_g(b, 4128);
			else if ((x | 0) == 31) {
				HEAP32[b + 408 >> 2] = 0;
				i = e;
				return
			} else if ((x | 0) == 35) {
				HEAP32[b + 408 >> 2] = r;
				i = e;
				return
			}
		}
		function Eh(b, d) {
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0;
			e = i;
			i = i + 16 | 0;
			f = e;
			g = b + 441 | 0;
			h = HEAP8[g >> 0] | 0;
			j = h & 255;
			if ((h & 255) > 7) {
				i = e;
				return
			}
			k = 8 - j | 0;
			HEAP32[b + 800 >> 2] = 17;
			l = HEAP32[b + 184 >> 2] | 0;
			if (!l)
				Eg(b, 3688);
			m = d + j + 32 | 0;
			vc[l & 31](b, m, k);
			HEAP8[g >> 0] = 8;
			g = f;
			HEAP32[g >> 2] = 1196314761;
			HEAP32[g + 4 >> 2] = 169478669;
			if (k >>> 0 <= 8)
				if (h << 24 >> 24 == 8)
					Eg(b, 3296);
				else
					n = k;
			else
				n = 8;
			if (!(by(m, f + j | 0, (n + j | 0) >>> 0 > 8 ? k : n) | 0)) {
				if ((h & 255) >= 3) {
					i = e;
					return
				}
				n = b + 208 | 0;
				HEAP32[n >> 2] = HEAP32[n >> 2] | 4096;
				i = e;
				return
			}
			if ((h & 255) >= 4)
				Eg(b, 3296);
			h = k + -4 | 0;
			e = f;
			HEAP32[e >> 2] = 1196314761;
			HEAP32[e + 4 >> 2] = 169478669;
			if (h >>> 0 <= 8)
				if (!h)
					Eg(b, 3280);
				else
					o = h;
			else
				o = 8;
			if (!(by(m, f + j | 0, (o + j | 0) >>> 0 > 8 ? k : o) | 0))
				Eg(b, 3296);
			else
				Eg(b, 3280)
		}
		function Fh(a) {
			a = a | 0;
			var b = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0;
			b = i;
			i = i + 16 | 0;
			e = b;
			f = a + 800 | 0;
			HEAP32[f >> 2] = 33;
			g = HEAP32[a + 184 >> 2] | 0;
			if (!g)
				Eg(a, 3688);
			vc[g & 31](a, e, 8);
			g = (HEAPU8[e + 1 >> 0] | 0) << 16 | (HEAPU8[e >> 0] | 0) << 24 | (HEAPU8[e + 2 >> 0] | 0) << 8 | (HEAPU8[e + 3 >> 0] | 0);
			if ((g | 0) < 0)
				Eg(a, 4056);
			h = e + 4 | 0;
			j = a + 376 | 0;
			HEAP32[j >> 2] = (HEAPU8[e + 5 >> 0] | 0) << 16 | (HEAPU8[h >> 0] | 0) << 24 | (HEAPU8[e + 6 >> 0] | 0) << 8 | (HEAPU8[e + 7 >> 0] | 0);
			e = sk(0, 0, 0) | 0;
			k = a + 412 | 0;
			HEAP32[k >> 2] = e;
			l = HEAP32[j >> 2] | 0;
			m = HEAP32[a + 212 >> 2] | 0;
			if (!(l & 536870912))
				if (!(m & 2048))
					n = 8;
				else {
					o = l;
					p = 1
				}
			else if ((m & 768 | 0) == 768) {
				o = l;
				p = 1
			} else
				n = 8;
			if ((n | 0) == 8) {
				HEAP32[k >> 2] = sk(e, h, 4) | 0;
				o = HEAP32[j >> 2] | 0;
				p = 1
			}
			while (1) {
				j = o & 255;
				if ((j + -65 | 0) >>> 0 > 57 | (j + -91 | 0) >>> 0 < 6) {
					n = 10;
					break
				}
				p = p + 1 | 0;
				if ((p | 0) >= 5) {
					n = 12;
					break
				} else
					o = o >>> 8
			}
			if ((n | 0) == 10)
				_g(a, 5056);
			else if ((n | 0) == 12) {
				HEAP32[f >> 2] = 65;
				i = b;
				return g | 0
			}
			return 0
		}
		function Gh(e) {
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0;
			f = i;
			Sh(e);
			g = e + 432 | 0;
			if (!(HEAP8[g >> 0] | 0)) {
				HEAP32[e + 356 >> 2] = HEAP32[e + 352 >> 2];
				h = HEAP32[e + 348 >> 2] | 0;
				HEAP32[e + 368 >> 2] = h;
				j = h;
				k = HEAP32[e + 216 >> 2] | 0
			} else {
				h = HEAP32[e + 216 >> 2] | 0;
				l = HEAP32[e + 352 >> 2] | 0;
				if (!(h & 2))
					HEAP32[e + 356 >> 2] = (l + 7 | 0) >>> 3;
				else
					HEAP32[e + 356 >> 2] = l;
				l = HEAP32[e + 348 >> 2] | 0;
				m = HEAPU8[e + 433 >> 0] | 0;
				n = HEAPU8[7288 + m >> 0] | 0;
				HEAP32[e + 368 >> 2] = ((l + -1 + n - (HEAPU8[7280 + m >> 0] | 0) | 0) >>> 0) / (n >>> 0) | 0;
				j = l;
				k = h
			}
			h = HEAPU8[e + 438 >> 0] | 0;
			l = e + 216 | 0;
			if (!(k & 4))
				o = h;
			else
				o = (HEAPU8[e + 436 >> 0] | 0) < 8 ? 8 : h;
			h = HEAP32[l >> 2] | 0;
			k = (h & 4096 | 0) == 0;
			do
				if (!k) {
					n = HEAP8[e + 435 >> 0] | 0;
					if (n << 24 >> 24 == 2) {
						if (!(HEAP16[e + 428 >> 1] | 0)) {
							p = o;
							break
						}
						p = (o << 2 >>> 0) / 3 | 0;
						break
					} else if (!(n << 24 >> 24)) {
						p = (o >>> 0 < 8 ? 8 : o) << ((HEAP16[e + 428 >> 1] | 0) != 0 & 1);
						break
					} else if (n << 24 >> 24 == 3) {
						p = (HEAP16[e + 428 >> 1] | 0) == 0 ? 24 : 32;
						break
					} else {
						p = o;
						break
					}
				} else
					p = o;
			while (0);
			do
				if (h & 512)
					if (k) {
						o = h & -513;
						HEAP32[l >> 2] = o;
						q = o;
						r = p;
						break
					} else {
						q = h;
						r = p << ((HEAPU8[e + 436 >> 0] | 0) < 16 & 1);
						break
					}
				else {
					q = h;
					r = p
				}
			while (0);
			p = (q & 32768 | 0) == 0;
			do
				if (!p) {
					h = HEAP8[e + 435 >> 0] | 0;
					if (h << 24 >> 24 == 3 | h << 24 >> 24 == 2) {
						s = (r | 0) < 33 ? 32 : 64;
						break
					} else if (!(h << 24 >> 24)) {
						s = (r | 0) < 9 ? 16 : 32;
						break
					} else {
						s = r;
						break
					}
				} else
					s = r;
			while (0);
			do
				if (!(q & 16384))
					t = s;
				else {
					if (((HEAP16[e + 428 >> 1] | 0) == 0 | (q & 4096 | 0) == 0) & p ? (r = HEAP8[e + 435 >> 0] | 0, r << 24 >> 24 != 4) : 0) {
						h = r << 24 >> 24 == 6;
						if ((s | 0) < 9) {
							t = h ? 32 : 24;
							break
						} else {
							t = h ? 64 : 48;
							break
						}
					}
					t = (s | 0) < 17 ? 32 : 64
				}
			while (0);
			if (!(q & 1048576))
				u = t;
			else {
				q = da(HEAPU8[e + 205 >> 0] | 0, HEAPU8[e + 204 >> 0] | 0) | 0;
				u = (q | 0) > (t | 0) ? q : t
			}
			HEAP8[e + 442 >> 0] = u;
			HEAP8[e + 443 >> 0] = 0;
			t = j + 7 & -8;
			if ((u | 0) > 7)
				v = da(t, u >>> 3) | 0;
			else
				v = (da(t, u) | 0) >>> 3;
			t = (u + 7 >> 3) + 49 + v | 0;
			v = e + 784 | 0;
			if (t >>> 0 > (HEAP32[v >> 2] | 0) >>> 0) {
				u = e + 728 | 0;
				j = HEAP32[u >> 2] | 0;
				q = (e | 0) == 0;
				do
					if (!(q | (j | 0) == 0)) {
						s = HEAP32[e + 724 >> 2] | 0;
						if (!s) {
							wx(j);
							break
						} else {
							rc[s & 127](e, j);
							break
						}
					}
				while (0);
				j = e + 804 | 0;
				s = HEAP32[j >> 2] | 0;
				do
					if (!(q | (s | 0) == 0)) {
						p = HEAP32[e + 724 >> 2] | 0;
						if (!p) {
							wx(s);
							break
						} else {
							rc[p & 127](e, s);
							break
						}
					}
				while (0);
				do
					if (!(HEAP8[g >> 0] | 0))
						if (!q) {
							if (!t)
								Eg(e, 3264);
							s = HEAP32[e + 720 >> 2] | 0;
							if (!s)
								w = vx(t) | 0;
							else
								w = Cc[s & 31](e, t) | 0;
							if (!w)
								Eg(e, 3264);
							else {
								x = w;
								y = 61
							}
						} else
							y = 60;
					else if (!q) {
						if (!t)
							Eg(e, 3264);
						s = HEAP32[e + 720 >> 2] | 0;
						if (!s)
							z = vx(t) | 0;
						else
							z = Cc[s & 31](e, t) | 0;
						if (!z)
							Eg(e, 3264);
						else {
							sy(z | 0, 0, t | 0) | 0;
							x = z;
							y = 61;
							break
						}
					} else
						y = 60;
				while (0);
				do
					if ((y | 0) == 60) {
						HEAP32[u >> 2] = 0;
						A = 0;
						B = 0
					} else if ((y | 0) == 61) {
						HEAP32[u >> 2] = x;
						if (!q) {
							if (!t)
								Eg(e, 3264);
							z = HEAP32[e + 720 >> 2] | 0;
							if (!z)
								C = vx(t) | 0;
							else
								C = Cc[z & 31](e, t) | 0;
							if (!C)
								Eg(e, 3264);
							else {
								A = C;
								B = HEAP32[u >> 2] | 0;
								break
							}
						} else {
							A = 0;
							B = x
						}
					}
				while (0);
				HEAP32[j >> 2] = A;
				HEAP32[e + 384 >> 2] = B + (B + 32 & 15 ^ 31);
				HEAP32[e + 380 >> 2] = A + (A + 32 & 15 ^ 31);
				HEAP32[v >> 2] = t
			}
			t = HEAP32[e + 364 >> 2] | 0;
			if ((t | 0) == -1)
				Eg(e, 5544);
			sy(HEAP32[e + 380 >> 2] | 0, 0, t + 1 | 0) | 0;
			t = e + 788 | 0;
			v = HEAP32[t >> 2] | 0;
			do
				if ((v | 0) != 0 ? (HEAP32[e + 792 >> 2] = 0, HEAP32[t >> 2] = 0, (e | 0) != 0) : 0) {
					A = HEAP32[e + 724 >> 2] | 0;
					if (!A) {
						wx(v);
						break
					} else {
						rc[A & 127](e, v);
						break
					}
				}
			while (0);
			if (!(yi(e, 1229209940) | 0)) {
				v = e + 212 | 0;
				HEAP32[v >> 2] = HEAP32[v >> 2] | 64;
				i = f;
				return
			} else
				Eg(e, HEAP32[e + 248 >> 2] | 0)
		}
		function Hh(b, e, f) {
			b = b | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0;
			g = i;
			i = i + 16 | 0;
			h = g;
			if (!b) {
				i = g;
				return
			}
			if (!(HEAP32[b + 212 >> 2] & 64))
				Gh(b);
			j = HEAP32[b + 368 >> 2] | 0;
			HEAP32[h >> 2] = j;
			HEAP8[h + 8 >> 0] = HEAP8[b + 435 >> 0] | 0;
			HEAP8[h + 9 >> 0] = HEAP8[b + 436 >> 0] | 0;
			HEAP8[h + 10 >> 0] = HEAP8[b + 439 >> 0] | 0;
			k = b + 438 | 0;
			l = HEAP8[k >> 0] | 0;
			m = h + 11 | 0;
			HEAP8[m >> 0] = l;
			n = l & 255;
			if ((l & 255) > 7)
				o = da(n >>> 3, j) | 0;
			else
				o = ((da(j, n) | 0) + 7 | 0) >>> 3;
			n = h + 4 | 0;
			HEAP32[n >> 2] = o;
			j = b + 372 | 0;
			l = HEAP32[j >> 2] | 0;
			p = b + 432 | 0;
			a: do
				if ((HEAP8[p >> 0] | 0) != 0 ? (HEAP32[b + 216 >> 2] & 2 | 0) != 0 : 0)
					switch (HEAPU8[b + 433 >> 0] | 0) {
					case 2: {
							if ((l & 7 | 0) == 4)
								break a;
							if (!((f | 0) == 0 | (l & 4 | 0) == 0))
								Ah(b, f, 1);
							Ih(b);
							i = g;
							return
						}
					case 4: {
							if ((l & 3 | 0) == 2)
								break a;
							if (!((f | 0) == 0 | (l & 2 | 0) == 0))
								Ah(b, f, 1);
							Ih(b);
							i = g;
							return
						}
					case 1: {
							if ((l & 7 | 0) == 0 ? (HEAP32[b + 348 >> 2] | 0) >>> 0 >= 5 : 0)
								break a;
							if (f)
								Ah(b, f, 1);
							Ih(b);
							i = g;
							return
						}
					case 0: {
							if (!(l & 7))
								break a;
							if (f)
								Ah(b, f, 1);
							Ih(b);
							i = g;
							return
						}
					case 5: {
							if ((l & 1 | 0) == 0 ? (HEAP32[b + 348 >> 2] | 0) >>> 0 >= 2 : 0)
								break a;
							if (f)
								Ah(b, f, 1);
							Ih(b);
							i = g;
							return
						}
					case 3: {
							if ((l & 3 | 0) == 0 ? (HEAP32[b + 348 >> 2] | 0) >>> 0 >= 3 : 0)
								break a;
							if (f)
								Ah(b, f, 1);
							Ih(b);
							i = g;
							return
						}
					default: {
							if (l & 1)
								break a;
							Ih(b);
							i = g;
							return
						}
					}
			while (0);
			if (!(HEAP32[b + 208 >> 2] & 4))
				Eg(b, 3456);
			l = b + 384 | 0;
			Jh(b, HEAP32[l >> 2] | 0, o + 1 | 0);
			q = HEAP32[l >> 2] | 0;
			r = HEAP8[q >> 0] | 0;
			s = r & 255;
			if (r << 24 >> 24) {
				if ((r & 255) >= 5)
					Eg(b, 3424);
				r = q + 1 | 0;
				t = b + 380 | 0;
				u = (HEAP32[t >> 2] | 0) + 1 | 0;
				v = s + -1 | 0;
				if (v >>> 0 < 4) {
					s = b + 808 | 0;
					if (!(HEAP32[s >> 2] | 0)) {
						w = (HEAPU8[k >> 0] | 0) + 7 | 0;
						HEAP32[s >> 2] = 12;
						HEAP32[b + 812 >> 2] = 13;
						HEAP32[b + 816 >> 2] = 14;
						HEAP32[b + 820 >> 2] = (w & 504 | 0) == 8 ? 16 : 15
					}
					vc[HEAP32[b + (v << 2) + 808 >> 2] & 31](h, r, u);
					x = t;
					y = HEAP32[n >> 2] | 0;
					z = HEAP32[l >> 2] | 0
				} else {
					x = t;
					y = o;
					z = q
				}
			} else {
				x = b + 380 | 0;
				y = o;
				z = q
			}
			qy(HEAP32[x >> 2] | 0, z | 0, y + 1 | 0) | 0;
			if ((HEAP32[b + 708 >> 2] & 4 | 0) != 0 ? (HEAP8[b + 712 >> 0] | 0) == 64 : 0)
				Kh(h, (HEAP32[l >> 2] | 0) + 1 | 0);
			y = b + 216 | 0;
			if (HEAP32[y >> 2] | 0)
				yh(b, h);
			z = b + 443 | 0;
			x = HEAP8[z >> 0] | 0;
			q = HEAP8[m >> 0] | 0;
			if (!(x << 24 >> 24)) {
				HEAP8[z >> 0] = q;
				if ((q & 255) > (HEAPU8[b + 442 >> 0] | 0))
					Eg(b, 3496)
			} else if (x << 24 >> 24 != q << 24 >> 24)
				Eg(b, 3520);
			if ((HEAP8[p >> 0] | 0) != 0 ? (p = HEAP32[y >> 2] | 0, (p & 2 | 0) != 0) : 0) {
				y = HEAP8[b + 433 >> 0] | 0;
				if ((y & 255) < 6)
					zh(h, (HEAP32[l >> 2] | 0) + 1 | 0, y & 255, p);
				if (f)
					Ah(b, f, 1);
				if (e)
					Ah(b, e, 0)
			} else {
				if (e)
					Ah(b, e, -1);
				if (f)
					Ah(b, f, -1)
			}
			Ih(b);
			f = HEAP32[b + 544 >> 2] | 0;
			if (!f) {
				i = g;
				return
			}
			vc[f & 31](b, HEAP32[j >> 2] | 0, HEAPU8[b + 433 >> 0] | 0);
			i = g;
			return
		}
		function Ih(b) {
			b = b | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0;
			e = i;
			f = b + 372 | 0;
			g = (HEAP32[f >> 2] | 0) + 1 | 0;
			HEAP32[f >> 2] = g;
			h = b + 356 | 0;
			if (g >>> 0 < (HEAP32[h >> 2] | 0) >>> 0) {
				i = e;
				return
			}
			do
				if ((HEAP8[b + 432 >> 0] | 0) != 0 ? (HEAP32[f >> 2] = 0, sy(HEAP32[b + 380 >> 2] | 0, 0, (HEAP32[b + 364 >> 2] | 0) + 1 | 0) | 0, g = b + 433 | 0, j = (HEAP8[g >> 0] | 0) + 1 << 24 >> 24, HEAP8[g >> 0] = j, (j & 255) <= 6) : 0) {
					k = (HEAP32[b + 348 >> 2] | 0) + -1 | 0;
					l = b + 368 | 0;
					m = (HEAP32[b + 216 >> 2] & 2 | 0) == 0;
					n = b + 352 | 0;
					o = j;
					p = j & 255;
					while (1) {
						j = HEAPU8[7288 + p >> 0] | 0;
						q = ((k + j - (HEAPU8[7280 + p >> 0] | 0) | 0) >>> 0) / (j >>> 0) | 0;
						if (!m)
							break;
						j = o & 255;
						r = HEAPU8[7272 + j >> 0] | 0;
						s = (((HEAP32[n >> 2] | 0) + -1 + r - (HEAPU8[7264 + j >> 0] | 0) | 0) >>> 0) / (r >>> 0) | 0;
						HEAP32[h >> 2] = s;
						if (!((s | 0) == 0 | (q | 0) == 0))
							break;
						s = o + 1 << 24 >> 24;
						HEAP8[g >> 0] = s;
						if ((s & 255) > 6) {
							t = 9;
							break
						} else {
							o = s;
							p = s & 255
						}
					}
					if ((t | 0) == 9) {
						HEAP32[l >> 2] = q;
						break
					}
					HEAP32[l >> 2] = q;
					if ((o & 255) < 7) {
						i = e;
						return
					}
				}
			while (0);
			q = b + 212 | 0;
			if ((HEAP32[q >> 2] & 8 | 0) == 0 ? (Jh(b, 0, 0), HEAP32[b + 236 >> 2] = 0, t = HEAP32[q >> 2] | 0, (t & 8 | 0) == 0) : 0) {
				h = b + 208 | 0;
				HEAP32[h >> 2] = HEAP32[h >> 2] | 8;
				HEAP32[q >> 2] = t | 8
			}
			t = b + 220 | 0;
			if ((HEAP32[t >> 2] | 0) != 1229209940) {
				i = e;
				return
			}
			HEAP32[b + 224 >> 2] = 0;
			HEAP32[b + 228 >> 2] = 0;
			HEAP32[t >> 2] = 0;
			xh(b, HEAP32[b + 408 >> 2] | 0) | 0;
			i = e;
			return
		}
		function Jh(a, b, d) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0,
			I = 0;
			e = i;
			i = i + 1024 | 0;
			f = e;
			g = a + 224 | 0;
			h = a + 236 | 0;
			HEAP32[h >> 2] = b;
			j = a + 240 | 0;
			HEAP32[j >> 2] = 0;
			k = a + 228 | 0;
			l = (b | 0) != 0;
			m = a + 408 | 0;
			n = a + 376 | 0;
			o = a + 796 | 0;
			p = a + 788 | 0;
			q = (a | 0) == 0;
			r = a + 792 | 0;
			s = a + 720 | 0;
			t = a + 184 | 0;
			u = a + 212 | 0;
			v = a + 412 | 0;
			w = a + 724 | 0;
			x = (b | 0) == 0 ? 0 : d;
			a: while (1) {
				if (!(HEAP32[k >> 2] | 0)) {
					d = HEAP32[m >> 2] | 0;
					while (1) {
						if (d)
							break;
						xh(a, 0) | 0;
						b = Fh(a) | 0;
						HEAP32[m >> 2] = b;
						if ((HEAP32[n >> 2] | 0) == 1229209940)
							d = b;
						else {
							y = 6;
							break a
						}
					}
					b = HEAP32[o >> 2] | 0;
					z = b >>> 0 > d >>> 0 ? d : b;
					b = HEAP32[p >> 2] | 0;
					do
						if (b)
							if ((HEAP32[r >> 2] | 0) >>> 0 < z >>> 0) {
								HEAP32[p >> 2] = 0;
								HEAP32[r >> 2] = 0;
								if (!q) {
									A = HEAP32[w >> 2] | 0;
									if (!A) {
										wx(b);
										y = 13;
										break
									} else {
										rc[A & 127](a, b);
										y = 13;
										break
									}
								} else
									y = 13
							} else
								B = b;
						else
							y = 13;
					while (0);
					if ((y | 0) == 13) {
						y = 0;
						if (!z) {
							y = 20;
							break
						}
						if (!q ? (b = HEAP32[s >> 2] | 0, (b | 0) != 0) : 0)
							C = Cc[b & 31](a, z) | 0;
						else
							C = vx(z) | 0;
						if (!C) {
							y = 20;
							break
						}
						HEAP32[p >> 2] = C;
						HEAP32[r >> 2] = z;
						B = C
					}
					if (!q) {
						b = HEAP32[t >> 2] | 0;
						if (!b) {
							y = 23;
							break
						}
						vc[b & 31](a, B, z);
						b = HEAP32[u >> 2] | 0;
						if (!(HEAP32[n >> 2] & 536870912))
							D = (b & 2048 | 0) == 0;
						else
							D = (b & 768 | 0) != 768;
						if (D & (z | 0) != 0) {
							b = B;
							d = z;
							A = HEAP32[v >> 2] | 0;
							while (1) {
								E = (d | 0) == 0 ? -1 : d;
								A = sk(A, b, E) | 0;
								if ((d | 0) == (E | 0))
									break;
								else {
									b = b + E | 0;
									d = d - E | 0
								}
							}
							HEAP32[v >> 2] = A
						}
					}
					HEAP32[m >> 2] = (HEAP32[m >> 2] | 0) - z;
					HEAP32[g >> 2] = B;
					HEAP32[k >> 2] = z
				}
				if (l) {
					F = 0;
					G = x
				} else {
					HEAP32[h >> 2] = f;
					F = x;
					G = 1024
				}
				HEAP32[j >> 2] = G;
				H = xk(g, 0) | 0;
				d = HEAP32[j >> 2] | 0;
				x = (l ? d : 1024 - d | 0) + F | 0;
				HEAP32[j >> 2] = 0;
				if ((H | 0) == 1) {
					y = 35;
					break
				} else if (H) {
					y = 40;
					break
				}
				if (!x) {
					y = 63;
					break
				}
			}
			if ((y | 0) == 6)
				Eg(a, 5472);
			else if ((y | 0) == 20)
				_g(a, 7472);
			else if ((y | 0) == 23)
				Eg(a, 3688);
			else if ((y | 0) == 35) {
				HEAP32[h >> 2] = 0;
				h = a + 208 | 0;
				HEAP32[h >> 2] = HEAP32[h >> 2] | 8;
				h = HEAP32[u >> 2] | 0;
				HEAP32[u >> 2] = h | 8;
				if (!((HEAP32[k >> 2] | 0) == 0 ? (HEAP32[m >> 2] | 0) == 0 : 0))
					y = 37;
				do
					if ((y | 0) == 37)
						if (!(h & 1048576))
							_g(a, 5496);
						else {
							Zg(a, 5496);
							break
						}
				while (0);
				if (!x) {
					i = e;
					return
				}
				if (l)
					Eg(a, 5472);
				if (!(HEAP32[u >> 2] & 1048576))
					_g(a, 5520);
				Zg(a, 5520);
				i = e;
				return
			} else if ((y | 0) == 40) {
				x = a + 248 | 0;
				h = HEAP32[x >> 2] | 0;
				b: do
					if (!h)
						switch (H | 0) {
						case -2: {
								HEAP32[x >> 2] = 1368;
								I = 1368;
								break b;
								break
							}
						case -7: {
								HEAP32[x >> 2] = 1488;
								I = 1488;
								break b;
								break
							}
						case -6: {
								HEAP32[x >> 2] = 1456;
								I = 1456;
								break b;
								break
							}
						case 2: {
								HEAP32[x >> 2] = 1328;
								I = 1328;
								break b;
								break
							}
						case -1: {
								HEAP32[x >> 2] = 1352;
								I = 1352;
								break b;
								break
							}
						case -3: {
								HEAP32[x >> 2] = 1392;
								I = 1392;
								break b;
								break
							}
						case -5: {
								HEAP32[x >> 2] = 1440;
								I = 1440;
								break b;
								break
							}
						case -4: {
								HEAP32[x >> 2] = 1416;
								I = 1416;
								break b;
								break
							}
						default: {
								HEAP32[x >> 2] = 1264;
								I = 1264;
								break b
							}
						}
					else
						I = h;
				while (0);
				if (l)
					_g(a, I);
				if (!(HEAP32[u >> 2] & 1048576))
					_g(a, I);
				Zg(a, I);
				i = e;
				return
			} else if ((y | 0) == 63) {
				i = e;
				return
			}
		}
		function Kh(b, e) {
			b = b | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0;
			f = i;
			g = HEAP8[b + 8 >> 0] | 0;
			if (!(g & 2)) {
				i = f;
				return
			}
			h = HEAP32[b >> 2] | 0;
			j = HEAP8[b + 9 >> 0] | 0;
			if (j << 24 >> 24 == 16) {
				if (g << 24 >> 24 == 6)
					k = 8;
				else if (g << 24 >> 24 == 2)
					k = 6;
				else {
					i = f;
					return
				}
				if (!h) {
					i = f;
					return
				} else {
					l = 0;
					m = e
				}
				while (1) {
					b = m + 1 | 0;
					n = (HEAPU8[m + 2 >> 0] | 0) << 8 | (HEAPU8[m + 3 >> 0] | 0);
					o = m + 4 | 0;
					p = m + 5 | 0;
					q = n + ((HEAPU8[m >> 0] | 0) << 8 | (HEAPU8[b >> 0] | 0)) | 0;
					r = ((HEAPU8[o >> 0] | 0) << 8 | (HEAPU8[p >> 0] | 0)) + n | 0;
					HEAP8[m >> 0] = q >>> 8;
					HEAP8[b >> 0] = q;
					HEAP8[o >> 0] = r >>> 8;
					HEAP8[p >> 0] = r;
					l = l + 1 | 0;
					if ((l | 0) == (h | 0))
						break;
					else
						m = m + k | 0
				}
				i = f;
				return
			} else if (j << 24 >> 24 == 8) {
				if (g << 24 >> 24 == 2)
					s = 3;
				else if (g << 24 >> 24 == 6)
					s = 4;
				else {
					i = f;
					return
				}
				if (!h) {
					i = f;
					return
				} else {
					t = 0;
					u = e
				}
				while (1) {
					e = HEAPU8[u + 1 >> 0] | 0;
					HEAP8[u >> 0] = e + (HEAPU8[u >> 0] | 0);
					g = u + 2 | 0;
					HEAP8[g >> 0] = e + (HEAPU8[g >> 0] | 0);
					t = t + 1 | 0;
					if ((t | 0) == (h | 0))
						break;
					else
						u = u + s | 0
				}
				i = f;
				return
			} else {
				i = f;
				return
			}
		}
		function Lh(b, d) {
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0;
			e = i;
			i = i + 16 | 0;
			f = e;
			if (!b) {
				i = e;
				return
			}
			g = b + 432 | 0;
			h = (HEAP8[g >> 0] | 0) == 0;
			if (HEAP32[b + 212 >> 2] & 64) {
				if (!h ? (HEAP32[b + 216 >> 2] & 2 | 0) == 0 : 0) {
					j = HEAP32[b + 172 >> 2] | 0;
					if (!j) {
						k = HEAP32[p >> 2] | 0;
						HEAP32[f >> 2] = 3568;
						Qb(k | 0, 7576, f | 0) | 0;
						ec(10, k | 0) | 0
					} else
						rc[j & 127](b, 3568);
					HEAP32[b + 356 >> 2] = HEAP32[b + 352 >> 2]
				}
				if (!(HEAP8[g >> 0] | 0))
					l = 1;
				else {
					g = b + 216 | 0;
					HEAP32[g >> 2] = HEAP32[g >> 2] | 2;
					l = 7
				}
			} else {
				if (h)
					m = 1;
				else {
					h = b + 216 | 0;
					HEAP32[h >> 2] = HEAP32[h >> 2] | 2;
					m = 7
				}
				Gh(b);
				l = m
			}
			m = HEAP32[b + 352 >> 2] | 0;
			h = (m | 0) == 0;
			g = 0;
			do {
				if (!h) {
					j = 0;
					k = d;
					while (1) {
						Hh(b, HEAP32[k >> 2] | 0, 0);
						j = j + 1 | 0;
						if ((j | 0) == (m | 0))
							break;
						else
							k = k + 4 | 0
					}
				}
				g = g + 1 | 0
			} while ((g | 0) < (l | 0));
			i = e;
			return
		}
		function Mh(b, d) {
			b = b | 0;
			d = d | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0;
			f = i;
			i = i + 16 | 0;
			g = f;
			if (!b) {
				i = f;
				return
			}
			HEAP8[g >> 0] = 73;
			h = g + 1 | 0;
			HEAP8[h >> 0] = 68;
			j = g + 2 | 0;
			HEAP8[j >> 0] = 65;
			k = g + 3 | 0;
			HEAP8[k >> 0] = 84;
			l = g + 4 | 0;
			HEAP8[l >> 0] = 0;
			m = b + 692 | 0;
			n = HEAP32[m >> 2] | 0;
			a: do
				if (n) {
					o = HEAP32[b + 696 >> 2] | 0;
					p = o + (n * 5 | 0) | 0;
					while (1) {
						q = p + -5 | 0;
						if (!(by(g, q, 4) | 0))
							break;
						if (q >>> 0 > o >>> 0)
							p = q;
						else {
							r = 7;
							break a
						}
					}
					if (!(HEAP8[p + -1 >> 0] | 0))
						r = 7
				} else
					r = 7;
			while (0);
			if ((r | 0) == 7) {
				n = b + 212 | 0;
				if ((HEAP32[n >> 2] & 8 | 0) == 0 ? (Jh(b, 0, 0), HEAP32[b + 236 >> 2] = 0, o = HEAP32[n >> 2] | 0, (o & 8 | 0) == 0) : 0) {
					q = b + 208 | 0;
					HEAP32[q >> 2] = HEAP32[q >> 2] | 8;
					HEAP32[n >> 2] = o | 8
				}
				o = b + 220 | 0;
				if ((HEAP32[o >> 2] | 0) == 1229209940) {
					HEAP32[b + 224 >> 2] = 0;
					HEAP32[b + 228 >> 2] = 0;
					HEAP32[o >> 2] = 0;
					xh(b, HEAP32[b + 408 >> 2] | 0) | 0
				}
			}
			if ((HEAP8[b + 435 >> 0] | 0) == 3 ? (HEAP32[b + 424 >> 2] | 0) > (HEAPU16[b + 420 >> 1] | 0) : 0)
				Pg(b, 3640);
			o = b + 376 | 0;
			n = b + 208 | 0;
			q = b + 696 | 0;
			s = b + 212 | 0;
			b: while (1) {
				t = Fh(b) | 0;
				u = HEAP32[o >> 2] | 0;
				c: do
					if ((u | 0) == 1229472850)
						dh(b, d, t);
					else if ((u | 0) == 1229278788) {
						v = HEAP32[n >> 2] | 0;
						if ((v & 5 | 0) != 5) {
							r = 19;
							break b
						}
						HEAP32[n >> 2] = v | 24;
						xh(b, t) | 0;
						if (t) {
							if (!(HEAP32[s >> 2] & 1048576)) {
								r = 22;
								break b
							}
							Zg(b, 4128)
						}
					} else {
						HEAP8[g >> 0] = u >>> 24;
						HEAP8[h >> 0] = u >>> 16;
						HEAP8[j >> 0] = u >>> 8;
						HEAP8[k >> 0] = u;
						HEAP8[l >> 0] = 0;
						v = HEAP32[m >> 2] | 0;
						d: do
							if (!v)
								r = 28;
							else {
								w = HEAP32[q >> 2] | 0;
								x = w + (v * 5 | 0) | 0;
								while (1) {
									y = x + -5 | 0;
									if (!(by(g, y, 4) | 0))
										break;
									if (y >>> 0 > w >>> 0)
										x = y;
									else {
										r = 28;
										break d
									}
								}
								w = HEAP8[x + -1 >> 0] | 0;
								y = w & 255;
								z = (u | 0) == 1229209940;
								if (!(w << 24 >> 24)) {
									if (z) {
										r = 37;
										break
									}
									if ((u | 0) == 1934772034) {
										r = 52;
										break
									} else if ((u | 0) == 1766015824) {
										r = 53;
										break
									} else if ((u | 0) == 1732332865) {
										r = 45;
										break
									} else if ((u | 0) == 1934642260) {
										r = 54;
										break
									} else if ((u | 0) == 1951551059) {
										r = 57;
										break
									} else if ((u | 0) == 1347179589) {
										r = 42;
										break
									} else if ((u | 0) == 1883789683) {
										r = 50;
										break
									} else if ((u | 0) == 2052348020) {
										r = 58;
										break
									} else if ((u | 0) == 1933723988) {
										r = 51;
										break
									} else if ((u | 0) == 1883455820) {
										r = 48;
										break
									} else if ((u | 0) == 1767135348) {
										r = 59;
										break
									} else if ((u | 0) == 1933787468) {
										r = 49;
										break
									} else if ((u | 0) == 1950701684) {
										r = 55;
										break
									} else if ((u | 0) == 1665684045) {
										r = 44;
										break
									} else if ((u | 0) == 1950960965) {
										r = 56;
										break
									} else if ((u | 0) == 1866876531) {
										r = 47;
										break
									} else if ((u | 0) == 1649100612) {
										r = 43;
										break
									} else if ((u | 0) == 1749635924) {
										r = 46;
										break
									} else {
										r = 60;
										break
									}
								}
								do
									if (z) {
										if ((t | 0) == 0 ? (HEAP32[n >> 2] & 8192 | 0) == 0 : 0)
											break;
										Pg(b, 3400)
									}
								while (0);
								eh(b, d, t, y);
								if ((u | 0) != 1347179589)
									break c;
								HEAP32[n >> 2] = HEAP32[n >> 2] | 2;
								break c
							}
						while (0);
						if ((r | 0) == 28) {
							r = 0;
							if ((u | 0) == 1934772034)
								r = 52;
							else if ((u | 0) == 1766015824)
								r = 53;
							else if ((u | 0) == 1732332865)
								r = 45;
							else if ((u | 0) == 1229209940)
								r = 37;
							else if ((u | 0) == 1934642260)
								r = 54;
							else if ((u | 0) == 1951551059)
								r = 57;
							else if ((u | 0) == 1347179589)
								r = 42;
							else if ((u | 0) == 1883789683)
								r = 50;
							else if ((u | 0) == 2052348020)
								r = 58;
							else if ((u | 0) == 1933723988)
								r = 51;
							else if ((u | 0) == 1883455820)
								r = 48;
							else if ((u | 0) == 1767135348)
								r = 59;
							else if ((u | 0) == 1933787468)
								r = 49;
							else if ((u | 0) == 1950701684)
								r = 55;
							else if ((u | 0) == 1665684045)
								r = 44;
							else if ((u | 0) == 1950960965)
								r = 56;
							else if ((u | 0) == 1866876531)
								r = 47;
							else if ((u | 0) == 1649100612)
								r = 43;
							else if ((u | 0) == 1749635924)
								r = 46;
							else
								r = 60
						}
						switch (r | 0) {
						case 37: {
								r = 0;
								if (!((t | 0) == 0 ? (HEAP32[n >> 2] & 8192 | 0) == 0 : 0))
									Pg(b, 3400);
								xh(b, t) | 0;
								break c;
								break
							}
						case 42: {
								r = 0;
								fh(b, d, t);
								break c;
								break
							}
						case 43: {
								r = 0;
								nh(b, d, t);
								break c;
								break
							}
						case 44: {
								r = 0;
								ih(b, d, t);
								break c;
								break
							}
						case 45: {
								r = 0;
								gh(b, d, t);
								break c;
								break
							}
						case 46: {
								r = 0;
								oh(b, d, t);
								break c;
								break
							}
						case 47: {
								r = 0;
								qh(b, d, t);
								break c;
								break
							}
						case 48: {
								r = 0;
								rh(b, d, t);
								break c;
								break
							}
						case 49: {
								r = 0;
								sh(b, d, t);
								break c;
								break
							}
						case 50: {
								r = 0;
								ph(b, d, t);
								break c;
								break
							}
						case 51: {
								r = 0;
								hh(b, d, t);
								break c;
								break
							}
						case 52: {
								r = 0;
								jh(b, d, t);
								break c;
								break
							}
						case 53: {
								r = 0;
								kh(b, d, t);
								break c;
								break
							}
						case 54: {
								r = 0;
								lh(b, d, t);
								break c;
								break
							}
						case 55: {
								r = 0;
								uh(b, d, t);
								break c;
								break
							}
						case 56: {
								r = 0;
								th(b, d, t);
								break c;
								break
							}
						case 57: {
								r = 0;
								mh(b, d, t);
								break c;
								break
							}
						case 58: {
								r = 0;
								vh(b, d, t);
								break c;
								break
							}
						case 59: {
								r = 0;
								wh(b, d, t);
								break c;
								break
							}
						case 60: {
								r = 0;
								eh(b, d, t, 0);
								break c;
								break
							}
						}
					}
				while (0);
				if (HEAP32[n >> 2] & 16) {
					r = 62;
					break
				}
			}
			if ((r | 0) == 19)
				_g(b, 4112);
			else if ((r | 0) == 22)
				_g(b, 4128);
			else if ((r | 0) == 62) {
				i = f;
				return
			}
		}
		function Nh(a, b, d) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0;
			e = i;
			i = i + 912 | 0;
			f = e;
			if (!a) {
				i = e;
				return
			}
			g = HEAP32[a >> 2] | 0;
			if (!g) {
				i = e;
				return
			}
			do
				if ((d | 0) != 0 ? (h = HEAP32[d >> 2] | 0, (h | 0) != 0) : 0) {
					HEAP32[d >> 2] = 0;
					Kg(g, h, 32767, -1);
					sy(h | 0, 0, 268) | 0;
					j = HEAP32[g + 724 >> 2] | 0;
					if (!j) {
						wx(h);
						break
					} else {
						rc[j & 127](g, h);
						break
					}
				}
			while (0);
			do
				if ((b | 0) != 0 ? (d = HEAP32[b >> 2] | 0, (d | 0) != 0) : 0) {
					HEAP32[b >> 2] = 0;
					Kg(g, d, 32767, -1);
					sy(d | 0, 0, 268) | 0;
					h = HEAP32[g + 724 >> 2] | 0;
					if (!h) {
						wx(d);
						break
					} else {
						rc[h & 127](g, d);
						break
					}
				}
			while (0);
			HEAP32[a >> 2] = 0;
			Xg(g);
			a = HEAP32[g + 728 >> 2] | 0;
			do
				if (a) {
					b = HEAP32[g + 724 >> 2] | 0;
					if (!b) {
						wx(a);
						break
					} else {
						rc[b & 127](g, a);
						break
					}
				}
			while (0);
			a = HEAP32[g + 804 >> 2] | 0;
			do
				if (a) {
					b = HEAP32[g + 724 >> 2] | 0;
					if (!b) {
						wx(a);
						break
					} else {
						rc[b & 127](g, a);
						break
					}
				}
			while (0);
			a = HEAP32[g + 788 >> 2] | 0;
			do
				if (a) {
					b = HEAP32[g + 724 >> 2] | 0;
					if (!b) {
						wx(a);
						break
					} else {
						rc[b & 127](g, a);
						break
					}
				}
			while (0);
			a = HEAP32[g + 612 >> 2] | 0;
			do
				if (a) {
					b = HEAP32[g + 724 >> 2] | 0;
					if (!b) {
						wx(a);
						break
					} else {
						rc[b & 127](g, a);
						break
					}
				}
			while (0);
			a = HEAP32[g + 616 >> 2] | 0;
			do
				if (a) {
					b = HEAP32[g + 724 >> 2] | 0;
					if (!b) {
						wx(a);
						break
					} else {
						rc[b & 127](g, a);
						break
					}
				}
			while (0);
			a = g + 676 | 0;
			do
				if ((HEAP32[a >> 2] & 4096 | 0) != 0 ? (b = HEAP32[g + 416 >> 2] | 0, (b | 0) != 0) : 0) {
					d = HEAP32[g + 724 >> 2] | 0;
					if (!d) {
						wx(b);
						break
					} else {
						rc[d & 127](g, b);
						break
					}
				}
			while (0);
			b = HEAP32[a >> 2] | 0;
			HEAP32[a >> 2] = b & -4097;
			do
				if ((b & 8192 | 0) != 0 ? (d = HEAP32[g + 528 >> 2] | 0, (d | 0) != 0) : 0) {
					h = HEAP32[g + 724 >> 2] | 0;
					if (!h) {
						wx(d);
						break
					} else {
						rc[h & 127](g, d);
						break
					}
				}
			while (0);
			HEAP32[a >> 2] = HEAP32[a >> 2] & -8193;
			yk(g + 224 | 0) | 0;
			a = HEAP32[g + 568 >> 2] | 0;
			do
				if (a) {
					b = HEAP32[g + 724 >> 2] | 0;
					if (!b) {
						wx(a);
						break
					} else {
						rc[b & 127](g, a);
						break
					}
				}
			while (0);
			a = HEAP32[g + 772 >> 2] | 0;
			do
				if (a) {
					b = HEAP32[g + 724 >> 2] | 0;
					if (!b) {
						wx(a);
						break
					} else {
						rc[b & 127](g, a);
						break
					}
				}
			while (0);
			a = HEAP32[g + 696 >> 2] | 0;
			do
				if (a) {
					b = HEAP32[g + 724 >> 2] | 0;
					if (!b) {
						wx(a);
						break
					} else {
						rc[b & 127](g, a);
						break
					}
				}
			while (0);
			qy(f | 0, g | 0, 900) | 0;
			sy(g | 0, 0, 900) | 0;
			a = HEAP32[f + 724 >> 2] | 0;
			if (!a)
				wx(g);
			else
				rc[a & 127](f, g);
			$g(f);
			i = e;
			return
		}
		function Oh(a) {
			a = a | 0;
			var b = 0,
			d = 0,
			e = 0,
			f = 0;
			b = i;
			i = i + 16 | 0;
			d = b;
			if (!a) {
				i = b;
				return
			}
			e = a + 212 | 0;
			f = HEAP32[e >> 2] | 0;
			if (!(f & 64)) {
				HEAP32[e >> 2] = f | 16384;
				e = a + 216 | 0;
				HEAP32[e >> 2] = HEAP32[e >> 2] | 1024;
				i = b;
				return
			}
			if (!(f & 4194304))
				Eg(a, 7512);
			f = HEAP32[a + 172 >> 2] | 0;
			if (!f) {
				e = HEAP32[p >> 2] | 0;
				HEAP32[d >> 2] = 7512;
				Qb(e | 0, 7576, d | 0) | 0;
				ec(10, e | 0) | 0;
				i = b;
				return
			} else {
				rc[f & 127](a, 7512);
				i = b;
				return
			}
		}
		function Ph(a) {
			a = a | 0;
			var b = 0,
			d = 0,
			e = 0,
			f = 0;
			b = i;
			i = i + 16 | 0;
			d = b;
			if (!a) {
				i = b;
				return
			}
			e = a + 212 | 0;
			f = HEAP32[e >> 2] | 0;
			if (!(f & 64)) {
				HEAP32[e >> 2] = f | 16384;
				e = a + 216 | 0;
				HEAP32[e >> 2] = HEAP32[e >> 2] | 33558528;
				i = b;
				return
			}
			if (!(f & 4194304))
				Eg(a, 7512);
			f = HEAP32[a + 172 >> 2] | 0;
			if (!f) {
				e = HEAP32[p >> 2] | 0;
				HEAP32[d >> 2] = 7512;
				Qb(e | 0, 7576, d | 0) | 0;
				ec(10, e | 0) | 0;
				i = b;
				return
			} else {
				rc[f & 127](a, 7512);
				i = b;
				return
			}
		}
		function Qh(a) {
			a = a | 0;
			var b = 0,
			d = 0,
			e = 0,
			f = 0;
			b = i;
			i = i + 16 | 0;
			d = b;
			if (!a) {
				i = b;
				return
			}
			e = a + 212 | 0;
			f = HEAP32[e >> 2] | 0;
			if (!(f & 64)) {
				HEAP32[e >> 2] = f | 16384;
				HEAP32[a + 216 >> 2] = HEAP32[a + 216 >> 2] | 20480;
				i = b;
				return
			}
			if (!(f & 4194304))
				Eg(a, 7512);
			f = HEAP32[a + 172 >> 2] | 0;
			if (!f) {
				e = HEAP32[p >> 2] | 0;
				HEAP32[d >> 2] = 7512;
				Qb(e | 0, 7576, d | 0) | 0;
				ec(10, e | 0) | 0;
				i = b;
				return
			} else {
				rc[f & 127](a, 7512);
				i = b;
				return
			}
		}
		function Rh(a, b, d) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			var e = 0;
			e = i;
			if (!a) {
				i = e;
				return
			}
			if ((Ca(b | 0, 1, d | 0, HEAP32[a + 188 >> 2] | 0) | 0) == (d | 0)) {
				i = e;
				return
			} else
				Eg(a, 3720)
		}
		function Sh(f) {
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			q = 0,
			r = 0.0,
			s = 0,
			t = 0.0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0.0,
			N = 0,
			O = 0,
			P = 0,
			Q = 0,
			S = 0,
			T = 0,
			V = 0,
			W = 0,
			X = 0,
			Y = 0,
			Z = 0,
			_ = 0,
			$ = 0,
			aa = 0,
			ba = 0,
			ca = 0,
			ea = 0,
			fa = 0,
			ga = 0,
			ha = 0,
			ia = 0,
			ja = 0,
			ka = 0,
			la = 0,
			ma = 0,
			na = 0,
			oa = 0,
			pa = 0,
			qa = 0,
			ra = 0,
			sa = 0,
			ta = 0,
			ua = 0,
			va = 0,
			wa = 0,
			xa = 0,
			ya = 0,
			za = 0,
			Aa = 0,
			Ba = 0,
			Ca = 0,
			Da = 0,
			Ea = 0,
			Fa = 0,
			Ga = 0,
			Ha = 0,
			Ia = 0,
			Ja = 0,
			Ka = 0;
			g = i;
			i = i + 16 | 0;
			h = g;
			j = f + 824 | 0;
			k = HEAP32[j >> 2] | 0;
			l = f + 488 | 0;
			m = HEAP32[l >> 2] | 0;
			n = (m | 0) != 0;
			do
				if (!k) {
					if (!n) {
						HEAP32[j >> 2] = 1e5;
						HEAP32[l >> 2] = 1e5;
						o = 1e5;
						q = 0;
						break
					}
					r = +R( + (1.0e10 /  + (m | 0) + .5));
					if (r <= 2147483647.0 & r >= -2147483648.0)
						s = ~~r;
					else
						s = 0;
					HEAP32[j >> 2] = s;
					o = m;
					q = 0
				} else {
					r =  + (k | 0);
					if (n) {
						t = +R( + (r *  + (m | 0) / 1.0e5 + .5));
						if (!(t <= 2147483647.0 & t >= -2147483648.0)) {
							o = m;
							q = 1;
							break
						}
						o = m;
						q = (~~t + -95e3 | 0) >>> 0 > 1e4;
						break
					}
					t = +R( + (1.0e10 / r + .5));
					if (t <= 2147483647.0 & t >= -2147483648.0)
						u = ~~t;
					else
						u = 0;
					HEAP32[l >> 2] = u;
					o = u;
					q = 0
				}
			while (0);
			u = f + 898 | 0;
			HEAP16[u >> 1] = HEAPU16[u >> 1] | 1;
			u = f + 216 | 0;
			m = HEAP32[u >> 2] | 0;
			n = q ? m | 8192 : m & -8193;
			HEAP32[u >> 2] = n;
			if ((n & 262272 | 0) == 262144) {
				m = n & -41943297;
				HEAP32[u >> 2] = m;
				q = f + 212 | 0;
				HEAP32[q >> 2] = HEAP32[q >> 2] & -8193;
				HEAP16[f + 428 >> 1] = 0;
				v = m
			} else
				v = n;
			if ((o + -95e3 | 0) >>> 0 > 1e4)
				w = v;
			else {
				o = v & -8388609;
				HEAP32[u >> 2] = o;
				v = f + 212 | 0;
				HEAP32[v >> 2] = HEAP32[v >> 2] & -8193;
				w = o
			}
			if (!(w & 6291456))
				x = w;
			else {
				Ug(f);
				x = HEAP32[u >> 2] | 0
			}
			if (!(x & 256)) {
				if (((x & 16512 | 0) == 16512 ? (w = HEAP16[f + 454 >> 1] | 0, w << 16 >> 16 == (HEAP16[f + 456 >> 1] | 0)) : 0) ? w << 16 >> 16 == (HEAP16[f + 458 >> 1] | 0) : 0) {
					o = f + 208 | 0;
					HEAP32[o >> 2] = HEAP32[o >> 2] | 2048;
					HEAP16[f + 460 >> 1] = w
				}
			} else if (!(HEAP8[f + 435 >> 0] & 2)) {
				w = f + 208 | 0;
				HEAP32[w >> 2] = HEAP32[w >> 2] | 2048
			}
			w = f + 435 | 0;
			o = HEAP8[w >> 0] | 0;
			if (o << 24 >> 24 == 3) {
				v = HEAP16[f + 428 >> 1] | 0;
				a: do
					if (!(v << 16 >> 16)) {
						y = 0;
						z = 0;
						A = 32
					} else {
						n = HEAP32[f + 528 >> 2] | 0;
						m = v & 65535;
						q = 0;
						k = 0;
						while (1) {
							s = HEAP8[n + q >> 0] | 0;
							if (s << 24 >> 24 != -1)
								if (!(s << 24 >> 24))
									B = 1;
								else {
									C = v;
									D = x;
									break a
								}
							else
								B = k;
							q = q + 1 | 0;
							if ((q | 0) >= (m | 0)) {
								y = v;
								z = B;
								A = 32;
								break
							} else
								k = B
						}
					}
				while (0);
				if ((A | 0) == 32) {
					B = x & -8388609;
					HEAP32[u >> 2] = B;
					v = f + 212 | 0;
					HEAP32[v >> 2] = HEAP32[v >> 2] & -8193;
					if (!z) {
						z = x & -8388993;
						HEAP32[u >> 2] = z;
						C = y;
						D = z
					} else {
						C = y;
						D = B
					}
				}
				if (((D & 4352 | 0) == 4352 ? (B = HEAPU8[f + 452 >> 0] | 0, y = HEAP32[f + 416 >> 2] | 0, HEAP16[f + 454 >> 1] = HEAPU8[y + (B * 3 | 0) >> 0] | 0, HEAP16[f + 456 >> 1] = HEAPU8[y + (B * 3 | 0) + 1 >> 0] | 0, HEAP16[f + 458 >> 1] = HEAPU8[y + (B * 3 | 0) + 2 >> 0] | 0, (D & 34078720 | 0) == 524288) : 0) ? (B = C & 65535, C << 16 >> 16 != 0) : 0) {
					C = HEAP32[f + 528 >> 2] | 0;
					y = 0;
					do {
						z = C + y | 0;
						HEAP8[z >> 0] = HEAPU8[z >> 0] ^ 255;
						y = y + 1 | 0
					} while ((y | 0) < (B | 0));
					E = HEAP32[u >> 2] | 0
				} else
					E = D
			} else {
				if (!(o & 4)) {
					D = (HEAP16[f + 428 >> 1] | 0) == 0;
					B = x & -8388609;
					HEAP32[u >> 2] = B;
					y = f + 212 | 0;
					HEAP32[y >> 2] = HEAP32[y >> 2] & -8193;
					if (D) {
						D = x & -8388993;
						HEAP32[u >> 2] = D;
						F = D
					} else
						F = B
				} else
					F = x;
				if ((F & 4352 | 0) == 4352 & (o & 2) == 0) {
					o = HEAPU16[f + 460 >> 1] | 0;
					x = HEAPU16[f + 540 >> 1] | 0;
					B = HEAPU8[f + 436 >> 0] | 0;
					if ((B | 0) == 4) {
						G = o * 17 | 0;
						H = x * 17 | 0
					} else if ((B | 0) == 2) {
						G = o * 85 | 0;
						H = x * 85 | 0
					} else if ((B | 0) == 1) {
						G = o * 255 | 0;
						H = x * 255 | 0
					} else {
						G = o;
						H = x
					}
					x = G & 65535;
					HEAP16[f + 458 >> 1] = x;
					HEAP16[f + 456 >> 1] = x;
					HEAP16[f + 454 >> 1] = x;
					if (!(F & 33554432)) {
						x = H & 65535;
						HEAP16[f + 538 >> 1] = x;
						HEAP16[f + 536 >> 1] = x;
						HEAP16[f + 534 >> 1] = x;
						E = F
					} else
						E = F
				} else
					E = F
			}
			if ((E & 896 | 0) == 640 ? (HEAP8[f + 436 >> 0] | 0) != 16 : 0) {
				F = f + 454 | 0;
				HEAP16[F >> 1] = (((HEAPU16[F >> 1] | 0) * 255 | 0) + 32895 | 0) >>> 16;
				F = f + 456 | 0;
				HEAP16[F >> 1] = (((HEAPU16[F >> 1] | 0) * 255 | 0) + 32895 | 0) >>> 16;
				F = f + 458 | 0;
				HEAP16[F >> 1] = (((HEAPU16[F >> 1] | 0) * 255 | 0) + 32895 | 0) >>> 16;
				F = f + 460 | 0;
				HEAP16[F >> 1] = (((HEAPU16[F >> 1] | 0) * 255 | 0) + 32895 | 0) >>> 16
			}
			F = E & 128;
			if ((F | 0) != 0 & (E & 67109888 | 0) != 0 & (E & 256 | 0) == 0 ? (HEAP8[f + 436 >> 0] | 0) == 16 : 0) {
				x = f + 454 | 0;
				HEAP16[x >> 1] = (HEAPU16[x >> 1] | 0) * 257;
				x = f + 456 | 0;
				HEAP16[x >> 1] = (HEAPU16[x >> 1] | 0) * 257;
				x = f + 458 | 0;
				HEAP16[x >> 1] = (HEAPU16[x >> 1] | 0) * 257;
				x = f + 460 | 0;
				HEAP16[x >> 1] = (HEAPU16[x >> 1] | 0) * 257
			}
			x = f + 462 | 0;
			H = f + 452 | 0;
			HEAP16[x + 0 >> 1] = HEAP16[H + 0 >> 1] | 0;
			HEAP16[x + 2 >> 1] = HEAP16[H + 2 >> 1] | 0;
			HEAP16[x + 4 >> 1] = HEAP16[H + 4 >> 1] | 0;
			HEAP16[x + 6 >> 1] = HEAP16[H + 6 >> 1] | 0;
			HEAP16[x + 8 >> 1] = HEAP16[H + 8 >> 1] | 0;
			do
				if (!(E & 8192)) {
					if (E & 6291456) {
						if (((HEAP32[j >> 2] | 0) + -95e3 | 0) >>> 0 > 1e4) {
							A = 67;
							break
						}
						if (((HEAP32[l >> 2] | 0) + -95e3 | 0) >>> 0 > 1e4) {
							A = 67;
							break
						}
					}
					H = (F | 0) == 0;
					if (!H) {
						if (((HEAP32[j >> 2] | 0) + -95e3 | 0) >>> 0 > 1e4) {
							A = 67;
							break
						}
						if (((HEAP32[l >> 2] | 0) + -95e3 | 0) >>> 0 > 1e4) {
							A = 67;
							break
						}
						if ((HEAP8[f + 446 >> 0] | 0) == 3 ? ((HEAP32[f + 448 >> 2] | 0) + -95e3 | 0) >>> 0 > 1e4 : 0) {
							A = 67;
							break
						}
					}
					if ((E & 8388608 | 0) != 0 ? ((HEAP32[l >> 2] | 0) + -95e3 | 0) >>> 0 > 1e4 : 0) {
						A = 67;
						break
					}
					if (!H ? (HEAP8[w >> 0] | 0) == 3 : 0) {
						H = HEAP16[f + 428 >> 1] | 0;
						x = H & 65535;
						G = HEAP32[f + 416 >> 2] | 0;
						o = HEAP16[f + 454 >> 1] | 0;
						B = o & 255;
						D = HEAP16[f + 456 >> 1] | 0;
						y = D & 255;
						C = HEAP16[f + 458 >> 1] | 0;
						z = C & 255;
						if (!(H << 16 >> 16))
							I = E;
						else {
							H = f + 528 | 0;
							v = o & 255;
							o = D & 255;
							D = C & 255;
							C = 0;
							do {
								k = (HEAP32[H >> 2] | 0) + C | 0;
								m = HEAP8[k >> 0] | 0;
								if (!(m << 24 >> 24)) {
									HEAP8[G + (C * 3 | 0) >> 0] = B;
									HEAP8[G + (C * 3 | 0) + 1 >> 0] = y;
									HEAP8[G + (C * 3 | 0) + 2 >> 0] = z
								} else if (m << 24 >> 24 != -1) {
									q = G + (C * 3 | 0) | 0;
									n = m & 255;
									m = (da(n ^ 255, v) | 0) + 128 + (da(HEAPU8[q >> 0] | 0, n) | 0) | 0;
									HEAP8[q >> 0] = ((m >>> 8 & 255) + m | 0) >>> 8;
									m = G + (C * 3 | 0) + 1 | 0;
									q = HEAPU8[k >> 0] | 0;
									n = (da(q, HEAPU8[m >> 0] | 0) | 0) + 128 + (da(q ^ 255, o) | 0) | 0;
									HEAP8[m >> 0] = ((n >>> 8 & 255) + n | 0) >>> 8;
									n = G + (C * 3 | 0) + 2 | 0;
									m = HEAPU8[k >> 0] | 0;
									k = (da(m, HEAPU8[n >> 0] | 0) | 0) + 128 + (da(m ^ 255, D) | 0) | 0;
									HEAP8[n >> 0] = ((k >>> 8 & 255) + k | 0) >>> 8
								}
								C = C + 1 | 0
							} while ((C | 0) < (x | 0));
							I = HEAP32[u >> 2] | 0
						}
						x = I & -129;
						HEAP32[u >> 2] = x;
						J = x
					} else
						J = E
				} else
					A = 67;
			while (0);
			do
				if ((A | 0) == 67) {
					E = f + 436 | 0;
					Yg(f, HEAPU8[E >> 0] | 0);
					I = HEAP32[u >> 2] | 0;
					if (!(I & 128)) {
						if ((HEAP8[w >> 0] | 0) != 3) {
							J = I;
							break
						}
						if (!((I & 4096 | 0) == 0 | (I & 6291456 | 0) == 0)) {
							J = I;
							break
						}
						F = HEAP32[f + 416 >> 2] | 0;
						x = HEAP16[f + 420 >> 1] | 0;
						C = x & 65535;
						if (x << 16 >> 16) {
							x = HEAP32[f + 492 >> 2] | 0;
							D = 0;
							do {
								G = F + (D * 3 | 0) | 0;
								HEAP8[G >> 0] = HEAP8[x + (HEAPU8[G >> 0] | 0) >> 0] | 0;
								G = F + (D * 3 | 0) + 1 | 0;
								HEAP8[G >> 0] = HEAP8[x + (HEAPU8[G >> 0] | 0) >> 0] | 0;
								G = F + (D * 3 | 0) + 2 | 0;
								HEAP8[G >> 0] = HEAP8[x + (HEAPU8[G >> 0] | 0) >> 0] | 0;
								D = D + 1 | 0
							} while ((D | 0) < (C | 0))
						}
						C = I & -8193;
						HEAP32[u >> 2] = C;
						J = C;
						break
					}
					do
						if (I & 6291456) {
							if ((f | 0) != 0 ? (C = HEAP32[f + 172 >> 2] | 0, (C | 0) != 0) : 0) {
								rc[C & 127](f, 3808);
								break
							}
							C = HEAP32[p >> 2] | 0;
							HEAP32[h >> 2] = 3808;
							Qb(C | 0, 7576, h | 0) | 0;
							ec(10, C | 0) | 0
						}
					while (0);
					if ((HEAP8[w >> 0] | 0) == 3) {
						I = HEAP32[f + 416 >> 2] | 0;
						C = HEAP16[f + 420 >> 1] | 0;
						D = C & 65535;
						x = HEAP8[f + 446 >> 0] | 0;
						do
							if (x << 24 >> 24 != 2) {
								F = x & 255;
								if ((F | 0) == 1) {
									K = HEAP32[l >> 2] | 0;
									A = 85
								} else if ((F | 0) == 3) {
									t =  + (HEAP32[f + 448 >> 2] | 0);
									r = +R( + (1.0e10 / t + .5));
									if (r <= 2147483647.0 & r >= -2147483648.0)
										L = ~~r;
									else
										L = 0;
									r = +R( + (1.0e15 / t /  + (HEAP32[l >> 2] | 0) + .5));
									if (r <= 2147483647.0 & r >= -2147483648.0) {
										M = r;
										N = L;
										A = 86
									} else {
										O = L;
										A = 84
									}
								} else if ((F | 0) == 2) {
									r =  + (HEAP32[j >> 2] | 0);
									t = +R( + (1.0e10 / r + .5));
									if (t <= 2147483647.0 & t >= -2147483648.0)
										P = ~~t;
									else
										P = 0;
									t = +R( + (1.0e15 / r /  + (HEAP32[l >> 2] | 0) + .5));
									if (t <= 2147483647.0 & t >= -2147483648.0) {
										M = t;
										N = P;
										A = 86
									} else {
										O = P;
										A = 84
									}
								} else {
									K = 1e5;
									A = 85
								}
								if ((A | 0) == 84) {
									Q = HEAP16[f + 454 >> 1] | 0;
									S = O;
									T = 0;
									A = 87
								} else if ((A | 0) == 85) {
									V = HEAP16[f + 454 >> 1] | 0;
									W = K;
									A = 96
								} else if ((A | 0) == 86) {
									F = ~~M;
									G = HEAP16[f + 454 >> 1] | 0;
									if ((F + -95e3 | 0) >>> 0 > 1e4) {
										Q = G;
										S = N;
										T = F;
										A = 87
									} else {
										V = G;
										W = N;
										A = 96
									}
								}
								do
									if ((A | 0) == 87) {
										if (Q << 16 >> 16 != 0 & (Q & 65535) < 255)
											X = ~~+R( + (+U( + ( + (Q & 65535) / 255.0),  + ( + (T | 0) * 1.0e-05)) * 255.0 + .5)) & 255;
										else
											X = Q & 255;
										G = HEAP16[f + 456 >> 1] | 0;
										if (G << 16 >> 16 != 0 & (G & 65535) < 255)
											Y = ~~+R( + (+U( + ( + (G & 65535) / 255.0),  + ( + (T | 0) * 1.0e-05)) * 255.0 + .5)) & 255;
										else
											Y = G & 255;
										F = HEAP16[f + 458 >> 1] | 0;
										if (F << 16 >> 16 != 0 & (F & 65535) < 255) {
											Z = Q;
											_ = G;
											$ = F;
											aa = X;
											ba = Y;
											ca = ~~+R( + (+U( + ( + (F & 65535) / 255.0),  + ( + (T | 0) * 1.0e-05)) * 255.0 + .5)) & 255;
											ea = S;
											break
										} else {
											Z = Q;
											_ = G;
											$ = F;
											aa = X;
											ba = Y;
											ca = F & 255;
											ea = S;
											break
										}
									} else if ((A | 0) == 96) {
										F = HEAP16[f + 456 >> 1] | 0;
										G = HEAP16[f + 458 >> 1] | 0;
										Z = V;
										_ = F;
										$ = G;
										aa = V & 255;
										ba = F & 255;
										ca = G & 255;
										ea = W
									}
								while (0);
								if ((ea + -95e3 | 0) >>> 0 <= 1e4) {
									fa = aa;
									ga = ba;
									ha = ca;
									ia = Z & 255;
									ja = _ & 255;
									ka = $ & 255;
									break
								}
								if (Z << 16 >> 16 != 0 & (Z & 65535) < 255)
									la = ~~+R( + (+U( + ( + (Z & 65535) / 255.0),  + ( + (ea | 0) * 1.0e-05)) * 255.0 + .5)) & 255;
								else
									la = Z & 255;
								if (_ << 16 >> 16 != 0 & (_ & 65535) < 255)
									ma = ~~+R( + (+U( + ( + (_ & 65535) / 255.0),  + ( + (ea | 0) * 1.0e-05)) * 255.0 + .5)) & 255;
								else
									ma = _ & 255;
								if ($ << 16 >> 16 != 0 & ($ & 65535) < 255) {
									fa = aa;
									ga = ba;
									ha = ca;
									ia = la;
									ja = ma;
									ka = ~~+R( + (+U( + ( + ($ & 65535) / 255.0),  + ( + (ea | 0) * 1.0e-05)) * 255.0 + .5)) & 255;
									break
								} else {
									fa = aa;
									ga = ba;
									ha = ca;
									ia = la;
									ja = ma;
									ka = $ & 255;
									break
								}
							} else {
								G = HEAPU16[f + 454 >> 1] | 0;
								F = HEAP32[f + 492 >> 2] | 0;
								o = HEAPU16[f + 456 >> 1] | 0;
								v = HEAPU16[f + 458 >> 1] | 0;
								z = HEAP32[f + 504 >> 2] | 0;
								fa = HEAP8[F + G >> 0] | 0;
								ga = HEAP8[F + o >> 0] | 0;
								ha = HEAP8[F + v >> 0] | 0;
								ia = HEAP8[z + G >> 0] | 0;
								ja = HEAP8[z + o >> 0] | 0;
								ka = HEAP8[z + v >> 0] | 0
							}
						while (0);
						if (C << 16 >> 16) {
							x = f + 428 | 0;
							v = f + 528 | 0;
							z = f + 504 | 0;
							o = ia & 255;
							G = f + 500 | 0;
							F = ja & 255;
							y = ka & 255;
							B = f + 492 | 0;
							H = 0;
							do {
								do
									if ((H | 0) < (HEAPU16[x >> 1] | 0)) {
										k = (HEAP32[v >> 2] | 0) + H | 0;
										n = HEAP8[k >> 0] | 0;
										if (n << 24 >> 24 == -1) {
											A = 115;
											break
										}
										m = I + (H * 3 | 0) | 0;
										if (!(n << 24 >> 24)) {
											HEAP8[m >> 0] = fa;
											HEAP8[I + (H * 3 | 0) + 1 >> 0] = ga;
											HEAP8[I + (H * 3 | 0) + 2 >> 0] = ha;
											break
										} else {
											q = HEAP32[z >> 2] | 0;
											s = n & 255;
											n = (da(s ^ 255, o) | 0) + 128 + (da(HEAPU8[q + (HEAPU8[m >> 0] | 0) >> 0] | 0, s) | 0) | 0;
											s = HEAP32[G >> 2] | 0;
											HEAP8[m >> 0] = HEAP8[s + (((n >>> 8 & 255) + n | 0) >>> 8 & 255) >> 0] | 0;
											n = I + (H * 3 | 0) + 1 | 0;
											m = HEAPU8[k >> 0] | 0;
											na = (da(m, HEAPU8[q + (HEAPU8[n >> 0] | 0) >> 0] | 0) | 0) + 128 + (da(m ^ 255, F) | 0) | 0;
											HEAP8[n >> 0] = HEAP8[s + (((na >>> 8 & 255) + na | 0) >>> 8 & 255) >> 0] | 0;
											na = I + (H * 3 | 0) + 2 | 0;
											n = HEAPU8[k >> 0] | 0;
											k = (da(n, HEAPU8[q + (HEAPU8[na >> 0] | 0) >> 0] | 0) | 0) + 128 + (da(n ^ 255, y) | 0) | 0;
											HEAP8[na >> 0] = HEAP8[s + (((k >>> 8 & 255) + k | 0) >>> 8 & 255) >> 0] | 0;
											break
										}
									} else
										A = 115;
								while (0);
								if ((A | 0) == 115) {
									A = 0;
									k = I + (H * 3 | 0) | 0;
									s = HEAP32[B >> 2] | 0;
									HEAP8[k >> 0] = HEAP8[s + (HEAPU8[k >> 0] | 0) >> 0] | 0;
									k = I + (H * 3 | 0) + 1 | 0;
									HEAP8[k >> 0] = HEAP8[s + (HEAPU8[k >> 0] | 0) >> 0] | 0;
									k = I + (H * 3 | 0) + 2 | 0;
									HEAP8[k >> 0] = HEAP8[s + (HEAPU8[k >> 0] | 0) >> 0] | 0
								}
								H = H + 1 | 0
							} while ((H | 0) < (D | 0))
						}
						D = HEAP32[u >> 2] & -8321;
						HEAP32[u >> 2] = D;
						J = D;
						break
					}
					D = f + 446 | 0;
					H = HEAPU8[D >> 0] | 0;
					if ((H | 0) == 1) {
						oa = HEAP32[l >> 2] | 0;
						pa = 1e5
					} else if ((H | 0) == 2) {
						t =  + (HEAP32[j >> 2] | 0);
						r = +R( + (1.0e10 / t + .5));
						if (r <= 2147483647.0 & r >= -2147483648.0)
							qa = ~~r;
						else
							qa = 0;
						r = +R( + (1.0e15 / t /  + (HEAP32[l >> 2] | 0) + .5));
						if (r <= 2147483647.0 & r >= -2147483648.0) {
							oa = qa;
							pa = ~~r
						} else {
							oa = qa;
							pa = 0
						}
					} else if ((H | 0) == 3) {
						r =  + (HEAP32[f + 448 >> 2] | 0);
						t = +R( + (1.0e10 / r + .5));
						if (t <= 2147483647.0 & t >= -2147483648.0)
							ra = ~~t;
						else
							ra = 0;
						t = +R( + (1.0e15 / r /  + (HEAP32[l >> 2] | 0) + .5));
						if (t <= 2147483647.0 & t >= -2147483648.0) {
							oa = ra;
							pa = ~~t
						} else {
							oa = ra;
							pa = 0
						}
					} else
						Eg(f, 3864);
					H = (oa + -95e3 | 0) >>> 0 > 1e4;
					I = (pa + -95e3 | 0) >>> 0 > 1e4;
					if (H) {
						B = HEAP16[f + 460 >> 1] | 0;
						if ((HEAP8[E >> 0] | 0) != 8)
							if ((B + 1 << 16 >> 16 & 65535) > 1)
								sa = ~~+R( + (+U( + ( + (B & 65535) / 65535.0),  + ( + (oa | 0) * 1.0e-05)) * 65535.0 + .5)) & 65535;
							else
								sa = B;
						else {
							if (B << 16 >> 16 != 0 & (B & 65535) < 255)
								ta = ~~+R( + (+U( + ( + (B & 65535) / 255.0),  + ( + (oa | 0) * 1.0e-05)) * 255.0 + .5)) & 255;
							else
								ta = B & 255;
							sa = ta & 255
						}
						HEAP16[f + 470 >> 1] = sa
					}
					if (I) {
						B = f + 460 | 0;
						y = HEAP16[B >> 1] | 0;
						if ((HEAP8[E >> 0] | 0) != 8)
							if ((y + 1 << 16 >> 16 & 65535) > 1)
								ua = ~~+R( + (+U( + ( + (y & 65535) / 65535.0),  + ( + (pa | 0) * 1.0e-05)) * 65535.0 + .5)) & 65535;
							else
								ua = y;
						else {
							if (y << 16 >> 16 != 0 & (y & 65535) < 255)
								va = ~~+R( + (+U( + ( + (y & 65535) / 255.0),  + ( + (pa | 0) * 1.0e-05)) * 255.0 + .5)) & 255;
							else
								va = y & 255;
							ua = va & 255
						}
						HEAP16[B >> 1] = ua
					}
					B = f + 454 | 0;
					y = HEAP16[B >> 1] | 0;
					F = f + 456 | 0;
					G = HEAP16[F >> 1] | 0;
					if ((y << 16 >> 16 == G << 16 >> 16 ? (o = f + 458 | 0, y << 16 >> 16 == (HEAP16[o >> 1] | 0)) : 0) ? y << 16 >> 16 == (HEAP16[f + 460 >> 1] | 0) : 0) {
						z = HEAP16[f + 470 >> 1] | 0;
						HEAP16[f + 468 >> 1] = z;
						HEAP16[f + 466 >> 1] = z;
						HEAP16[f + 464 >> 1] = z;
						HEAP16[o >> 1] = y;
						HEAP16[F >> 1] = y;
						HEAP16[B >> 1] = y
					} else {
						if (H) {
							H = (HEAP8[E >> 0] | 0) == 8;
							do
								if (H) {
									if (y << 16 >> 16 != 0 & (y & 65535) < 255)
										HEAP16[f + 464 >> 1] = ~~+R( + (+U( + ( + (y & 65535) / 255.0),  + ( + (oa | 0) * 1.0e-05)) * 255.0 + .5)) & 255;
									else
										HEAP16[f + 464 >> 1] = y & 255;
									if (G << 16 >> 16 != 0 & (G & 65535) < 255)
										wa = ~~+R( + (+U( + ( + (G & 65535) / 255.0),  + ( + (oa | 0) * 1.0e-05)) * 255.0 + .5)) & 255;
									else
										wa = G & 255;
									HEAP16[f + 466 >> 1] = wa & 255;
									o = HEAP16[f + 458 >> 1] | 0;
									if (!H) {
										xa = o;
										A = 168;
										break
									}
									if (o << 16 >> 16 != 0 & (o & 65535) < 255)
										ya = ~~+R( + (+U( + ( + (o & 65535) / 255.0),  + ( + (oa | 0) * 1.0e-05)) * 255.0 + .5)) & 255;
									else
										ya = o & 255;
									za = ya & 255
								} else {
									if ((y + 1 << 16 >> 16 & 65535) > 1)
										Aa = ~~+R( + (+U( + ( + (y & 65535) / 65535.0),  + ( + (oa | 0) * 1.0e-05)) * 65535.0 + .5)) & 65535;
									else
										Aa = y;
									HEAP16[f + 464 >> 1] = Aa;
									if ((G + 1 << 16 >> 16 & 65535) > 1)
										Ba = ~~+R( + (+U( + ( + (G & 65535) / 65535.0),  + ( + (oa | 0) * 1.0e-05)) * 65535.0 + .5)) & 65535;
									else
										Ba = G;
									HEAP16[f + 466 >> 1] = Ba;
									xa = HEAP16[f + 458 >> 1] | 0;
									A = 168
								}
							while (0);
							do
								if ((A | 0) == 168) {
									if ((xa + 1 << 16 >> 16 & 65535) <= 1) {
										za = xa;
										break
									}
									za = ~~+R( + (+U( + ( + (xa & 65535) / 65535.0),  + ( + (oa | 0) * 1.0e-05)) * 65535.0 + .5)) & 65535
								}
							while (0);
							HEAP16[f + 468 >> 1] = za
						}
						if (I) {
							H = (HEAP8[E >> 0] | 0) == 8;
							do
								if (H) {
									if (y << 16 >> 16 != 0 & (y & 65535) < 255)
										Ca = ~~+R( + (+U( + ( + (y & 65535) / 255.0),  + ( + (pa | 0) * 1.0e-05)) * 255.0 + .5)) & 255;
									else
										Ca = y & 255;
									HEAP16[B >> 1] = Ca;
									if (G << 16 >> 16 != 0 & (G & 65535) < 255)
										Da = ~~+R( + (+U( + ( + (G & 65535) / 255.0),  + ( + (pa | 0) * 1.0e-05)) * 255.0 + .5)) & 255;
									else
										Da = G & 255;
									HEAP16[F >> 1] = Da & 255;
									o = f + 458 | 0;
									z = HEAP16[o >> 1] | 0;
									if (!H) {
										Ea = z;
										Fa = o;
										A = 189;
										break
									}
									if (z << 16 >> 16 != 0 & (z & 65535) < 255)
										Ga = ~~+R( + (+U( + ( + (z & 65535) / 255.0),  + ( + (pa | 0) * 1.0e-05)) * 255.0 + .5)) & 255;
									else
										Ga = z & 255;
									Ha = Ga & 255;
									Ia = o
								} else {
									if ((y + 1 << 16 >> 16 & 65535) > 1)
										Ja = ~~+R( + (+U( + ( + (y & 65535) / 65535.0),  + ( + (pa | 0) * 1.0e-05)) * 65535.0 + .5)) & 65535;
									else
										Ja = y;
									HEAP16[B >> 1] = Ja;
									if ((G + 1 << 16 >> 16 & 65535) > 1)
										Ka = ~~+R( + (+U( + ( + (G & 65535) / 65535.0),  + ( + (pa | 0) * 1.0e-05)) * 65535.0 + .5)) & 65535;
									else
										Ka = G;
									HEAP16[F >> 1] = Ka;
									o = f + 458 | 0;
									Ea = HEAP16[o >> 1] | 0;
									Fa = o;
									A = 189
								}
							while (0);
							do
								if ((A | 0) == 189) {
									if ((Ea + 1 << 16 >> 16 & 65535) <= 1) {
										Ha = Ea;
										Ia = Fa;
										break
									}
									Ha = ~~+R( + (+U( + ( + (Ea & 65535) / 65535.0),  + ( + (pa | 0) * 1.0e-05)) * 65535.0 + .5)) & 65535;
									Ia = Fa
								}
							while (0);
							HEAP16[Ia >> 1] = Ha
						}
					}
					HEAP8[D >> 0] = 1;
					J = HEAP32[u >> 2] | 0
				}
			while (0);
			if ((J & 4104 | 0) != 8) {
				i = g;
				return
			}
			if ((HEAP8[w >> 0] | 0) != 3) {
				i = g;
				return
			}
			w = HEAP16[f + 420 >> 1] | 0;
			Ha = w & 65535;
			Ia = HEAP8[f + 516 >> 0] | 0;
			Fa = 8 - (Ia & 255) | 0;
			HEAP32[u >> 2] = J & -9;
			if (!(Ia << 24 >> 24 == 0 | (Fa | 0) < 1 | w << 16 >> 16 == 0)) {
				Ia = HEAP32[f + 416 >> 2] | 0;
				J = 0;
				do {
					u = Ia + (J * 3 | 0) | 0;
					HEAP8[u >> 0] = (HEAPU8[u >> 0] | 0) >>> Fa;
					J = J + 1 | 0
				} while ((J | 0) < (Ha | 0))
			}
			J = HEAP8[f + 517 >> 0] | 0;
			Fa = 8 - (J & 255) | 0;
			if (!(J << 24 >> 24 == 0 | (Fa | 0) < 1 | w << 16 >> 16 == 0)) {
				J = HEAP32[f + 416 >> 2] | 0;
				Ia = 0;
				do {
					u = J + (Ia * 3 | 0) + 1 | 0;
					HEAP8[u >> 0] = (HEAPU8[u >> 0] | 0) >>> Fa;
					Ia = Ia + 1 | 0
				} while ((Ia | 0) < (Ha | 0))
			}
			Ia = HEAP8[f + 518 >> 0] | 0;
			Fa = 8 - (Ia & 255) | 0;
			if (Ia << 24 >> 24 == 0 | (Fa | 0) < 1 | w << 16 >> 16 == 0) {
				i = g;
				return
			}
			w = HEAP32[f + 416 >> 2] | 0;
			f = 0;
			do {
				Ia = w + (f * 3 | 0) + 2 | 0;
				HEAP8[Ia >> 0] = (HEAPU8[Ia >> 0] | 0) >>> Fa;
				f = f + 1 | 0
			} while ((f | 0) < (Ha | 0));
			i = g;
			return
		}
		function Th(b, e, f, g, h) {
			b = b | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			var j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0;
			j = i;
			k = HEAP32[b >> 2] | 0;
			l = b + 8 | 0;
			if ((HEAP8[l >> 0] | 0) != 3) {
				i = j;
				return
			}
			m = b + 9 | 0;
			n = HEAP8[m >> 0] | 0;
			if ((n & 255) >= 8) {
				if (n << 24 >> 24 != 8) {
					i = j;
					return
				}
			} else {
				o = n & 255;
				if ((o | 0) == 1) {
					n = k + -1 | 0;
					if (k) {
						p = e + n | 0;
						q = 0;
						r = k + 7 & 7 ^ 7;
						s = e + (n >>> 3) | 0;
						while (1) {
							HEAP8[p >> 0] = (HEAPU8[s >> 0] & 1 << r | 0) != 0 & 1;
							n = (r | 0) == 7;
							q = q + 1 | 0;
							if ((q | 0) == (k | 0))
								break;
							else {
								p = p + -1 | 0;
								r = n ? 0 : r + 1 | 0;
								s = n ? s + -1 | 0 : s
							}
						}
					}
				} else if ((o | 0) == 2) {
					s = k + -1 | 0;
					if (k) {
						r = e + s | 0;
						p = 0;
						q = (k << 1) + 6 & 6 ^ 6;
						n = e + (s >>> 2) | 0;
						while (1) {
							HEAP8[r >> 0] = (HEAPU8[n >> 0] | 0) >>> q & 3;
							s = (q | 0) == 6;
							p = p + 1 | 0;
							if ((p | 0) == (k | 0))
								break;
							else {
								r = r + -1 | 0;
								q = s ? 0 : q + 2 | 0;
								n = s ? n + -1 | 0 : n
							}
						}
					}
				} else if ((o | 0) == 4 ? (o = k + -1 | 0, (k | 0) != 0) : 0) {
					n = e + o | 0;
					q = 0;
					r = k << 2 & 4;
					p = e + (o >>> 1) | 0;
					while (1) {
						HEAP8[n >> 0] = (HEAPU8[p >> 0] | 0) >>> r & 15;
						o = (r | 0) == 4;
						q = q + 1 | 0;
						if ((q | 0) == (k | 0))
							break;
						else {
							n = n + -1 | 0;
							r = o ? 0 : r + 4 | 0;
							p = o ? p + -1 | 0 : p
						}
					}
				}
				HEAP8[m >> 0] = 8;
				HEAP8[b + 11 >> 0] = 8;
				HEAP32[b + 4 >> 2] = k
			}
			p = e + (k + -1) | 0;
			if ((h | 0) <= 0) {
				r = k * 3 | 0;
				if (k) {
					n = e + (r + -1) | 0;
					q = 0;
					o = p;
					while (1) {
						HEAP8[n >> 0] = HEAP8[f + ((HEAPU8[o >> 0] | 0) * 3 | 0) + 2 >> 0] | 0;
						HEAP8[n + -1 >> 0] = HEAP8[f + ((HEAPU8[o >> 0] | 0) * 3 | 0) + 1 >> 0] | 0;
						HEAP8[n + -2 >> 0] = HEAP8[f + ((HEAPU8[o >> 0] | 0) * 3 | 0) >> 0] | 0;
						q = q + 1 | 0;
						if ((q | 0) == (k | 0))
							break;
						else {
							n = n + -3 | 0;
							o = o + -1 | 0
						}
					}
				}
				HEAP8[m >> 0] = 8;
				HEAP8[b + 11 >> 0] = 24;
				HEAP32[b + 4 >> 2] = r;
				HEAP8[l >> 0] = 2;
				HEAP8[b + 10 >> 0] = 3;
				i = j;
				return
			}
			r = k << 2;
			if (k) {
				o = e + (r + -1) | 0;
				e = 0;
				n = p;
				while (1) {
					p = HEAPU8[n >> 0] | 0;
					if ((p | 0) < (h | 0))
						t = HEAP8[g + p >> 0] | 0;
					else
						t = -1;
					HEAP8[o >> 0] = t;
					HEAP8[o + -1 >> 0] = HEAP8[f + ((HEAPU8[n >> 0] | 0) * 3 | 0) + 2 >> 0] | 0;
					HEAP8[o + -2 >> 0] = HEAP8[f + ((HEAPU8[n >> 0] | 0) * 3 | 0) + 1 >> 0] | 0;
					HEAP8[o + -3 >> 0] = HEAP8[f + ((HEAPU8[n >> 0] | 0) * 3 | 0) >> 0] | 0;
					e = e + 1 | 0;
					if ((e | 0) == (k | 0))
						break;
					else {
						o = o + -4 | 0;
						n = n + -1 | 0
					}
				}
			}
			HEAP8[m >> 0] = 8;
			HEAP8[b + 11 >> 0] = 32;
			HEAP32[b + 4 >> 2] = r;
			HEAP8[l >> 0] = 6;
			HEAP8[b + 10 >> 0] = 4;
			i = j;
			return
		}
		function Uh(f, g, h) {
			f = f | 0;
			g = g | 0;
			h = h | 0;
			var j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0,
			I = 0,
			J = 0;
			j = i;
			k = HEAP32[f >> 2] | 0;
			l = f + 8 | 0;
			m = HEAP8[l >> 0] | 0;
			if (m << 24 >> 24) {
				if (!(m << 24 >> 24 == 2 & (h | 0) != 0)) {
					i = j;
					return
				}
				m = f + 9 | 0;
				n = HEAP8[m >> 0] | 0;
				if (n << 24 >> 24 == 8) {
					if (k) {
						o = HEAP16[h + 2 >> 1] & 255;
						p = HEAP16[h + 4 >> 1] & 255;
						q = HEAP16[h + 6 >> 1] & 255;
						r = g + ((k << 2) + -1) | 0;
						s = 0;
						t = g + ((HEAP32[f + 4 >> 2] | 0) + -1) | 0;
						while (1) {
							u = t + -2 | 0;
							v = t + -1 | 0;
							if (((HEAP8[u >> 0] | 0) == o << 24 >> 24 ? (HEAP8[v >> 0] | 0) == p << 24 >> 24 : 0) ? (HEAP8[t >> 0] | 0) == q << 24 >> 24 : 0)
								w = 0;
							else
								w = -1;
							HEAP8[r >> 0] = w;
							HEAP8[r + -1 >> 0] = HEAP8[t >> 0] | 0;
							HEAP8[r + -2 >> 0] = HEAP8[v >> 0] | 0;
							HEAP8[r + -3 >> 0] = HEAP8[u >> 0] | 0;
							s = s + 1 | 0;
							if ((s | 0) == (k | 0))
								break;
							else {
								r = r + -4 | 0;
								t = t + -3 | 0
							}
						}
					}
				} else if (n << 24 >> 24 == 16 ? (n = HEAP16[h + 2 >> 1] | 0, t = (n & 65535) >>> 8 & 65535, r = HEAP16[h + 4 >> 1] | 0, s = (r & 65535) >>> 8 & 65535, w = HEAP16[h + 6 >> 1] | 0, q = (w & 65535) >>> 8 & 65535, (k | 0) != 0) : 0) {
					p = n & 255;
					n = r & 255;
					r = w & 255;
					w = g + ((k << 3) + -1) | 0;
					o = 0;
					u = g + ((HEAP32[f + 4 >> 2] | 0) + -1) | 0;
					while (1) {
						v = u + -5 | 0;
						x = u + -4 | 0;
						if ((((((HEAPU8[v >> 0] | 0) == (t | 0) ? (HEAP8[x >> 0] | 0) == p << 24 >> 24 : 0) ? (y = u + -3 | 0, (HEAPU8[y >> 0] | 0) == (s | 0)) : 0) ? (z = u + -2 | 0, (HEAP8[z >> 0] | 0) == n << 24 >> 24) : 0) ? (A = u + -1 | 0, (HEAPU8[A >> 0] | 0) == (q | 0)) : 0) ? (HEAP8[u >> 0] | 0) == r << 24 >> 24 : 0) {
							HEAP8[w >> 0] = 0;
							HEAP8[w + -1 >> 0] = 0;
							B = A;
							C = z;
							D = y
						} else {
							HEAP8[w >> 0] = -1;
							HEAP8[w + -1 >> 0] = -1;
							B = u + -1 | 0;
							C = u + -2 | 0;
							D = u + -3 | 0
						}
						HEAP8[w + -2 >> 0] = HEAP8[u >> 0] | 0;
						HEAP8[w + -3 >> 0] = HEAP8[B >> 0] | 0;
						HEAP8[w + -4 >> 0] = HEAP8[C >> 0] | 0;
						HEAP8[w + -5 >> 0] = HEAP8[D >> 0] | 0;
						HEAP8[w + -6 >> 0] = HEAP8[x >> 0] | 0;
						HEAP8[w + -7 >> 0] = HEAP8[v >> 0] | 0;
						o = o + 1 | 0;
						if ((o | 0) == (k | 0))
							break;
						else {
							w = w + -8 | 0;
							u = u + -6 | 0
						}
					}
				}
				HEAP8[l >> 0] = 6;
				HEAP8[f + 10 >> 0] = 4;
				u = HEAPU8[m >> 0] << 2;
				HEAP8[f + 11 >> 0] = u;
				m = u & 252;
				if (m >>> 0 > 7)
					E = da(m >>> 3, k) | 0;
				else
					E = ((da(m, k) | 0) + 7 | 0) >>> 3;
				HEAP32[f + 4 >> 2] = E;
				i = j;
				return
			}
			E = (h | 0) != 0;
			if (E)
				F = HEAPU16[h + 8 >> 1] | 0;
			else
				F = 0;
			h = f + 9 | 0;
			m = HEAP8[h >> 0] | 0;
			if ((m & 255) < 8) {
				u = m & 255;
				if ((u | 0) == 2) {
					w = (F & 3) * 85 | 0;
					o = k + -1 | 0;
					if (!k)
						G = w;
					else {
						D = g + o | 0;
						C = 0;
						B = (k << 1) + 6 & 6 ^ 6;
						r = g + (o >>> 2) | 0;
						while (1) {
							o = (HEAPU8[r >> 0] | 0) >>> B & 3;
							HEAP8[D >> 0] = o << 2 | o | o << 4 | o << 6;
							o = (B | 0) == 6;
							C = C + 1 | 0;
							if ((C | 0) == (k | 0)) {
								G = w;
								break
							} else {
								D = D + -1 | 0;
								B = o ? 0 : B + 2 | 0;
								r = o ? r + -1 | 0 : r
							}
						}
					}
				} else if ((u | 0) == 4) {
					r = (F & 15) * 17 | 0;
					B = k + -1 | 0;
					if (!k)
						G = r;
					else {
						D = g + B | 0;
						w = 0;
						C = k << 2 & 4;
						o = g + (B >>> 1) | 0;
						while (1) {
							B = (HEAPU8[o >> 0] | 0) >>> C & 15;
							HEAP8[D >> 0] = B << 4 | B;
							B = (C | 0) == 4;
							w = w + 1 | 0;
							if ((w | 0) == (k | 0)) {
								G = r;
								break
							} else {
								D = D + -1 | 0;
								C = B ? 0 : 4;
								o = B ? o + -1 | 0 : o
							}
						}
					}
				} else if ((u | 0) == 1) {
					u = 0 - (F & 1) & 255;
					o = k + -1 | 0;
					if (!k)
						G = u;
					else {
						C = g + o | 0;
						D = 0;
						r = k + 7 & 7 ^ 7;
						w = g + (o >>> 3) | 0;
						while (1) {
							HEAP8[C >> 0] = ((HEAPU8[w >> 0] & 1 << r | 0) != 0) << 31 >> 31;
							o = (r | 0) == 7;
							D = D + 1 | 0;
							if ((D | 0) == (k | 0)) {
								G = u;
								break
							} else {
								C = C + -1 | 0;
								r = o ? 0 : r + 1 | 0;
								w = o ? w + -1 | 0 : w
							}
						}
					}
				} else
					G = F;
				HEAP8[h >> 0] = 8;
				HEAP8[f + 11 >> 0] = 8;
				HEAP32[f + 4 >> 2] = k;
				H = 8;
				I = G
			} else {
				H = m;
				I = F
			}
			if (!E) {
				i = j;
				return
			}
			if (H << 24 >> 24 == 16) {
				E = HEAP32[f + 4 >> 2] | 0;
				if (k) {
					F = I >>> 8 & 255;
					m = I & 255;
					G = g + ((E << 1) + -1) | 0;
					w = 0;
					r = g + (E + -1) | 0;
					while (1) {
						E = r + -1 | 0;
						if ((HEAP8[E >> 0] | 0) == F << 24 >> 24 ? (HEAP8[r >> 0] | 0) == m << 24 >> 24 : 0) {
							HEAP8[G >> 0] = 0;
							HEAP8[G + -1 >> 0] = 0
						} else {
							HEAP8[G >> 0] = -1;
							HEAP8[G + -1 >> 0] = -1
						}
						HEAP8[G + -2 >> 0] = HEAP8[r >> 0] | 0;
						HEAP8[G + -3 >> 0] = HEAP8[E >> 0] | 0;
						w = w + 1 | 0;
						if ((w | 0) == (k | 0))
							break;
						else {
							G = G + -4 | 0;
							r = r + -2 | 0
						}
					}
				}
			} else if (H << 24 >> 24 == 8 ? (k | 0) != 0 : 0) {
				H = I & 255;
				I = g + ((k << 1) + -1) | 0;
				r = 0;
				G = g + (k + -1) | 0;
				while (1) {
					HEAP8[I >> 0] = ((HEAP8[G >> 0] | 0) != H << 24 >> 24) << 31 >> 31;
					HEAP8[I + -1 >> 0] = HEAP8[G >> 0] | 0;
					r = r + 1 | 0;
					if ((r | 0) == (k | 0))
						break;
					else {
						I = I + -2 | 0;
						G = G + -1 | 0
					}
				}
			}
			HEAP8[l >> 0] = 4;
			HEAP8[f + 10 >> 0] = 2;
			l = HEAPU8[h >> 0] << 1;
			HEAP8[f + 11 >> 0] = l;
			h = l & 254;
			if (h >>> 0 > 7)
				J = da(h >>> 3, k) | 0;
			else
				J = ((da(h, k) | 0) + 7 | 0) >>> 3;
			HEAP32[f + 4 >> 2] = J;
			i = j;
			return
		}
		function Vh(b, d, e) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0;
			f = i;
			g = b + 4 | 0;
			h = HEAP32[g >> 2] | 0;
			j = d + h | 0;
			k = b + 10 | 0;
			l = HEAP8[k >> 0] | 0;
			if (l << 24 >> 24 == 4) {
				m = HEAP8[b + 9 >> 0] | 0;
				if (m << 24 >> 24 == 8) {
					if (!e) {
						n = d + 3 | 0;
						o = d + 4 | 0
					} else {
						n = d;
						o = d + 1 | 0
					}
					if (o >>> 0 < j >>> 0) {
						p = (((d + (h + -1 - o) | 0) >>> 2) * 3 | 0) + 3 | 0;
						q = n;
						r = o;
						while (1) {
							HEAP8[q >> 0] = HEAP8[r >> 0] | 0;
							HEAP8[q + 1 >> 0] = HEAP8[r + 1 >> 0] | 0;
							HEAP8[q + 2 >> 0] = HEAP8[r + 2 >> 0] | 0;
							r = r + 4 | 0;
							if (r >>> 0 >= j >>> 0)
								break;
							else
								q = q + 3 | 0
						}
						s = n + p | 0
					} else
						s = n;
					HEAP8[b + 11 >> 0] = 24;
					t = s
				} else if (m << 24 >> 24 == 16) {
					if (!e) {
						u = d + 6 | 0;
						v = d + 8 | 0
					} else {
						u = d;
						v = d + 2 | 0
					}
					if (v >>> 0 < j >>> 0) {
						m = (((d + (h + -1 - v) | 0) >>> 3) * 6 | 0) + 6 | 0;
						s = u;
						n = v;
						while (1) {
							HEAP8[s >> 0] = HEAP8[n >> 0] | 0;
							HEAP8[s + 1 >> 0] = HEAP8[n + 1 >> 0] | 0;
							HEAP8[s + 2 >> 0] = HEAP8[n + 2 >> 0] | 0;
							HEAP8[s + 3 >> 0] = HEAP8[n + 3 >> 0] | 0;
							HEAP8[s + 4 >> 0] = HEAP8[n + 4 >> 0] | 0;
							HEAP8[s + 5 >> 0] = HEAP8[n + 5 >> 0] | 0;
							n = n + 8 | 0;
							if (n >>> 0 >= j >>> 0)
								break;
							else
								s = s + 6 | 0
						}
						w = u + m | 0
					} else
						w = u;
					HEAP8[b + 11 >> 0] = 48;
					t = w
				} else {
					i = f;
					return
				}
				HEAP8[k >> 0] = 3;
				w = b + 8 | 0;
				if ((HEAP8[w >> 0] | 0) == 6) {
					HEAP8[w >> 0] = 2;
					x = t
				} else
					x = t
			} else if (l << 24 >> 24 == 2) {
				l = HEAP8[b + 9 >> 0] | 0;
				if (l << 24 >> 24 == 16) {
					if (!e) {
						y = d + 2 | 0;
						z = d + 4 | 0
					} else {
						y = d;
						z = d + 2 | 0
					}
					if (z >>> 0 < j >>> 0) {
						t = ((d + (h + -1 - z) | 0) >>> 2 << 1) + 2 | 0;
						w = y;
						u = z;
						while (1) {
							HEAP8[w >> 0] = HEAP8[u >> 0] | 0;
							HEAP8[w + 1 >> 0] = HEAP8[u + 1 >> 0] | 0;
							u = u + 4 | 0;
							if (u >>> 0 >= j >>> 0)
								break;
							else
								w = w + 2 | 0
						}
						A = y + t | 0
					} else
						A = y;
					HEAP8[b + 11 >> 0] = 16;
					B = A
				} else if (l << 24 >> 24 == 8) {
					if (!e) {
						C = d + 1 | 0;
						D = d + 2 | 0
					} else {
						C = d;
						D = d + 1 | 0
					}
					if (D >>> 0 < j >>> 0) {
						e = ((d + (h + -1 - D) | 0) >>> 1) + 1 | 0;
						h = C;
						l = D;
						while (1) {
							HEAP8[h >> 0] = HEAP8[l >> 0] | 0;
							l = l + 2 | 0;
							if (l >>> 0 >= j >>> 0)
								break;
							else
								h = h + 1 | 0
						}
						E = C + e | 0
					} else
						E = C;
					HEAP8[b + 11 >> 0] = 8;
					B = E
				} else {
					i = f;
					return
				}
				HEAP8[k >> 0] = 1;
				k = b + 8 | 0;
				if ((HEAP8[k >> 0] | 0) == 4) {
					HEAP8[k >> 0] = 0;
					x = B
				} else
					x = B
			} else {
				i = f;
				return
			}
			HEAP32[g >> 2] = x - d;
			i = f;
			return
		}
		function Wh(f, g, h) {
			f = f | 0;
			g = g | 0;
			h = h | 0;
			var j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0,
			O = 0,
			P = 0,
			Q = 0,
			R = 0,
			S = 0,
			T = 0,
			U = 0,
			V = 0,
			W = 0,
			X = 0,
			Y = 0,
			Z = 0,
			_ = 0;
			j = i;
			k = g + 8 | 0;
			l = HEAPU8[k >> 0] | 0;
			if ((l & 3 | 0) != 2) {
				m = 0;
				i = j;
				return m | 0
			}
			n = HEAPU16[f + 702 >> 1] | 0;
			o = HEAPU16[f + 704 >> 1] | 0;
			p = 32768 - n - o | 0;
			q = HEAP32[g >> 2] | 0;
			r = (l & 4 | 0) != 0;
			l = g + 9 | 0;
			a: do
				if ((HEAP8[l >> 0] | 0) == 8) {
					s = f + 500 | 0;
					if ((HEAP32[s >> 2] | 0) != 0 ? (t = f + 504 | 0, (HEAP32[t >> 2] | 0) != 0) : 0) {
						if (!q) {
							u = 0;
							break
						}
						v = f + 492 | 0;
						w = h;
						x = 0;
						y = 0;
						z = h;
						while (1) {
							A = HEAP8[z >> 0] | 0;
							B = HEAP8[z + 1 >> 0] | 0;
							C = z + 3 | 0;
							D = HEAP8[z + 2 >> 0] | 0;
							E = A & 255;
							if (A << 24 >> 24 == B << 24 >> 24 ? A << 24 >> 24 == D << 24 >> 24 : 0) {
								F = HEAP32[v >> 2] | 0;
								if (!F) {
									G = y;
									H = A
								} else {
									G = y;
									H = HEAP8[F + E >> 0] | 0
								}
							} else {
								F = HEAP32[t >> 2] | 0;
								A = ((da(HEAPU8[F + E >> 0] | 0, n) | 0) + 16384 + (da(HEAPU8[F + (B & 255) >> 0] | 0, o) | 0) + (da(HEAPU8[F + (D & 255) >> 0] | 0, p) | 0) | 0) >>> 15;
								G = y | 1;
								H = HEAP8[(HEAP32[s >> 2] | 0) + A >> 0] | 0
							}
							A = w + 1 | 0;
							HEAP8[w >> 0] = H;
							if (r) {
								HEAP8[A >> 0] = HEAP8[C >> 0] | 0;
								I = w + 2 | 0;
								J = z + 4 | 0
							} else {
								I = A;
								J = C
							}
							x = x + 1 | 0;
							if ((x | 0) == (q | 0)) {
								u = G;
								break a
							} else {
								w = I;
								y = G;
								z = J
							}
						}
					}
					if (!q)
						u = 0;
					else {
						z = h;
						y = 0;
						w = 0;
						x = h;
						while (1) {
							s = HEAP8[x >> 0] | 0;
							t = HEAP8[x + 1 >> 0] | 0;
							v = x + 3 | 0;
							C = HEAP8[x + 2 >> 0] | 0;
							if (s << 24 >> 24 == t << 24 >> 24 ? s << 24 >> 24 == C << 24 >> 24 : 0) {
								K = w;
								L = s
							} else {
								K = w | 1;
								L = ((da(t & 255, o) | 0) + (da(s & 255, n) | 0) + (da(C & 255, p) | 0) | 0) >>> 15 & 255
							}
							C = z + 1 | 0;
							HEAP8[z >> 0] = L;
							if (r) {
								HEAP8[C >> 0] = HEAP8[v >> 0] | 0;
								M = z + 2 | 0;
								N = x + 4 | 0
							} else {
								M = C;
								N = v
							}
							y = y + 1 | 0;
							if ((y | 0) == (q | 0)) {
								u = K;
								break
							} else {
								z = M;
								w = K;
								x = N
							}
						}
					}
				} else {
					x = f + 512 | 0;
					if ((HEAP32[x >> 2] | 0) != 0 ? (w = f + 508 | 0, (HEAP32[w >> 2] | 0) != 0) : 0) {
						if (!q) {
							u = 0;
							break
						}
						z = f + 496 | 0;
						y = f + 484 | 0;
						v = h;
						C = 0;
						s = 0;
						t = h;
						while (1) {
							A = HEAP8[t >> 0] | 0;
							D = A & 255;
							F = HEAP8[t + 1 >> 0] | 0;
							B = F & 255;
							E = D << 8 | B;
							O = HEAPU8[t + 2 >> 0] | 0;
							P = HEAPU8[t + 3 >> 0] | 0;
							Q = HEAPU8[t + 4 >> 0] | 0;
							R = HEAPU8[t + 5 >> 0] | 0;
							S = t + 6 | 0;
							if ((E | 0) == (O << 8 | P | 0) ? (E | 0) == (Q << 8 | R | 0) : 0) {
								E = HEAP32[z >> 2] | 0;
								if (!E) {
									T = s;
									U = F;
									V = A
								} else {
									A = HEAP16[(HEAP32[E + (B >>> (HEAP32[y >> 2] | 0) << 2) >> 2] | 0) + (D << 1) >> 1] | 0;
									T = s;
									U = A & 255;
									V = (A & 65535) >>> 8 & 255
								}
							} else {
								A = HEAP32[y >> 2] | 0;
								E = HEAP32[x >> 2] | 0;
								F = (da(e[(HEAP32[E + (B >>> A << 2) >> 2] | 0) + (D << 1) >> 1] | 0, n) | 0) + 16384 + (da(e[(HEAP32[E + (P >>> A << 2) >> 2] | 0) + (O << 1) >> 1] | 0, o) | 0) + (da(e[(HEAP32[E + (R >>> A << 2) >> 2] | 0) + (Q << 1) >> 1] | 0, p) | 0) | 0;
								Q = HEAP16[(c[(HEAP32[w >> 2] | 0) + ((F >>> 15 & 255) >>> A << 2) >> 2] | 0) + ((F >>> 23 & 255) << 1) >> 1] | 0;
								T = s | 1;
								U = Q & 255;
								V = (Q & 65535) >>> 8 & 255
							}
							HEAP8[v >> 0] = V;
							Q = v + 2 | 0;
							HEAP8[v + 1 >> 0] = U;
							if (r) {
								HEAP8[Q >> 0] = HEAP8[S >> 0] | 0;
								HEAP8[v + 3 >> 0] = HEAP8[t + 7 >> 0] | 0;
								W = v + 4 | 0;
								X = t + 8 | 0
							} else {
								W = Q;
								X = S
							}
							C = C + 1 | 0;
							if ((C | 0) == (q | 0)) {
								u = T;
								break a
							} else {
								v = W;
								s = T;
								t = X
							}
						}
					}
					if (!q)
						u = 0;
					else {
						t = h;
						s = 0;
						v = 0;
						C = h;
						while (1) {
							w = HEAPU8[C >> 0] << 8 | HEAPU8[C + 1 >> 0];
							x = HEAPU8[C + 2 >> 0] << 8 | HEAPU8[C + 3 >> 0];
							y = HEAPU8[C + 4 >> 0] << 8 | HEAPU8[C + 5 >> 0];
							z = C + 6 | 0;
							S = (w | 0) == (x | 0) & (w | 0) == (y | 0) & 1 ^ 1 | v;
							Q = (da(w, n) | 0) + 16384 + (da(x, o) | 0) + (da(y, p) | 0) | 0;
							HEAP8[t >> 0] = Q >>> 23;
							y = t + 2 | 0;
							HEAP8[t + 1 >> 0] = Q >>> 15;
							if (r) {
								HEAP8[y >> 0] = HEAP8[z >> 0] | 0;
								HEAP8[t + 3 >> 0] = HEAP8[C + 7 >> 0] | 0;
								Y = t + 4 | 0;
								Z = C + 8 | 0
							} else {
								Y = y;
								Z = z
							}
							s = s + 1 | 0;
							if ((s | 0) == (q | 0)) {
								u = S;
								break
							} else {
								t = Y;
								v = S;
								C = Z
							}
						}
					}
				}
			while (0);
			Z = g + 10 | 0;
			Y = (HEAPU8[Z >> 0] | 0) + 254 | 0;
			HEAP8[Z >> 0] = Y;
			HEAP8[k >> 0] = HEAPU8[k >> 0] & 253;
			k = da(HEAPU8[l >> 0] | 0, Y & 255) | 0;
			HEAP8[g + 11 >> 0] = k;
			Y = k & 255;
			if (Y >>> 0 > 7)
				_ = da(Y >>> 3, q) | 0;
			else
				_ = ((da(Y, q) | 0) + 7 | 0) >>> 3;
			HEAP32[g + 4 >> 2] = _;
			m = u;
			i = j;
			return m | 0
		}
		function Xh(b, e) {
			b = b | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0;
			f = i;
			g = HEAP32[b >> 2] | 0;
			h = b + 9 | 0;
			j = HEAP8[h >> 0] | 0;
			if ((j & 255) <= 7) {
				i = f;
				return
			}
			k = b + 8 | 0;
			l = HEAP8[k >> 0] | 0;
			if (l & 2) {
				i = f;
				return
			}
			do
				if (!(l << 24 >> 24))
					if (j << 24 >> 24 == 8) {
						m = g + -1 | 0;
						if (!g)
							break;
						n = e + (m + (g << 1)) | 0;
						o = 0;
						p = e + m | 0;
						while (1) {
							HEAP8[n >> 0] = HEAP8[p >> 0] | 0;
							HEAP8[n + -1 >> 0] = HEAP8[p >> 0] | 0;
							HEAP8[n + -2 >> 0] = HEAP8[p >> 0] | 0;
							o = o + 1 | 0;
							if ((o | 0) == (g | 0))
								break;
							else {
								n = n + -3 | 0;
								p = p + -1 | 0
							}
						}
					} else {
						p = (g << 1) + -1 | 0;
						if (!g)
							break;
						n = e + (p + (g << 2)) | 0;
						o = 0;
						m = e + p | 0;
						while (1) {
							HEAP8[n >> 0] = HEAP8[m >> 0] | 0;
							p = m + -1 | 0;
							HEAP8[n + -1 >> 0] = HEAP8[p >> 0] | 0;
							HEAP8[n + -2 >> 0] = HEAP8[m >> 0] | 0;
							HEAP8[n + -3 >> 0] = HEAP8[p >> 0] | 0;
							HEAP8[n + -4 >> 0] = HEAP8[m >> 0] | 0;
							HEAP8[n + -5 >> 0] = HEAP8[p >> 0] | 0;
							o = o + 1 | 0;
							if ((o | 0) == (g | 0))
								break;
							else {
								n = n + -6 | 0;
								m = m + -2 | 0
							}
						}
					}
				else if (l << 24 >> 24 == 4)
					if (j << 24 >> 24 == 8) {
						m = g << 1;
						n = m + -1 | 0;
						if (!g)
							break;
						o = e + (n + m) | 0;
						m = 0;
						p = e + n | 0;
						while (1) {
							n = p + -1 | 0;
							HEAP8[o >> 0] = HEAP8[p >> 0] | 0;
							HEAP8[o + -1 >> 0] = HEAP8[n >> 0] | 0;
							HEAP8[o + -2 >> 0] = HEAP8[n >> 0] | 0;
							HEAP8[o + -3 >> 0] = HEAP8[n >> 0] | 0;
							m = m + 1 | 0;
							if ((m | 0) == (g | 0))
								break;
							else {
								o = o + -4 | 0;
								p = p + -2 | 0
							}
						}
					} else {
						p = g << 2;
						o = p + -1 | 0;
						if (!g)
							break;
						m = e + (o + p) | 0;
						p = 0;
						n = e + o | 0;
						while (1) {
							HEAP8[m >> 0] = HEAP8[n >> 0] | 0;
							o = n + -2 | 0;
							HEAP8[m + -1 >> 0] = HEAP8[n + -1 >> 0] | 0;
							HEAP8[m + -2 >> 0] = HEAP8[o >> 0] | 0;
							q = n + -3 | 0;
							HEAP8[m + -3 >> 0] = HEAP8[q >> 0] | 0;
							HEAP8[m + -4 >> 0] = HEAP8[o >> 0] | 0;
							HEAP8[m + -5 >> 0] = HEAP8[q >> 0] | 0;
							HEAP8[m + -6 >> 0] = HEAP8[o >> 0] | 0;
							HEAP8[m + -7 >> 0] = HEAP8[q >> 0] | 0;
							p = p + 1 | 0;
							if ((p | 0) == (g | 0))
								break;
							else {
								m = m + -8 | 0;
								n = n + -4 | 0
							}
						}
					}
			while (0);
			e = b + 10 | 0;
			j = (HEAPU8[e >> 0] | 0) + 2 | 0;
			HEAP8[e >> 0] = j;
			HEAP8[k >> 0] = HEAPU8[k >> 0] | 0 | 2;
			k = da(HEAPU8[h >> 0] | 0, j & 255) | 0;
			HEAP8[b + 11 >> 0] = k;
			j = k & 255;
			if (j >>> 0 > 7)
				r = da(j >>> 3, g) | 0;
			else
				r = ((da(j, g) | 0) + 7 | 0) >>> 3;
			HEAP32[b + 4 >> 2] = r;
			i = f;
			return
		}
		function Yh(f, g, h) {
			f = f | 0;
			g = g | 0;
			h = h | 0;
			var j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0,
			O = 0,
			P = 0,
			Q = 0,
			R = 0,
			S = 0,
			T = 0,
			U = 0,
			V = 0,
			W = 0,
			X = 0,
			Y = 0,
			Z = 0,
			_ = 0,
			$ = 0,
			aa = 0,
			ba = 0,
			ca = 0;
			j = i;
			k = HEAP32[h + 492 >> 2] | 0;
			l = HEAP32[h + 500 >> 2] | 0;
			m = HEAP32[h + 504 >> 2] | 0;
			n = HEAP32[h + 496 >> 2] | 0;
			o = HEAP32[h + 508 >> 2] | 0;
			p = HEAP32[h + 512 >> 2] | 0;
			q = HEAP32[h + 484 >> 2] | 0;
			r = (HEAP32[h + 212 >> 2] & 8192 | 0) != 0;
			s = HEAP32[f >> 2] | 0;
			t = HEAPU8[f + 8 >> 0] | 0;
			if ((t | 0) == 2)
				if ((HEAP8[f + 9 >> 0] | 0) == 8) {
					u = (s | 0) == 0;
					if (!k) {
						if (u) {
							i = j;
							return
						}
						v = h + 534 | 0;
						w = h + 536 | 0;
						x = h + 538 | 0;
						y = h + 454 | 0;
						z = h + 456 | 0;
						A = h + 458 | 0;
						B = 0;
						C = g;
						while (1) {
							if (((HEAPU8[C >> 0] | 0) == (HEAPU16[v >> 1] | 0) ? (D = C + 1 | 0, (HEAPU8[D >> 0] | 0) == (HEAPU16[w >> 1] | 0)) : 0) ? (E = C + 2 | 0, (HEAPU8[E >> 0] | 0) == (HEAPU16[x >> 1] | 0)) : 0) {
								HEAP8[C >> 0] = HEAP16[y >> 1];
								HEAP8[D >> 0] = HEAP16[z >> 1];
								HEAP8[E >> 0] = HEAP16[A >> 1]
							}
							B = B + 1 | 0;
							if ((B | 0) == (s | 0))
								break;
							else
								C = C + 3 | 0
						}
						i = j;
						return
					}
					if (u) {
						i = j;
						return
					}
					u = h + 534 | 0;
					C = h + 536 | 0;
					B = h + 538 | 0;
					A = h + 454 | 0;
					z = h + 456 | 0;
					y = h + 458 | 0;
					x = 0;
					w = g;
					while (1) {
						v = HEAPU8[w >> 0] | 0;
						E = w + 1 | 0;
						D = HEAP8[E >> 0] | 0;
						if (((v | 0) == (HEAPU16[u >> 1] | 0) ? (D & 255 | 0) == (HEAPU16[C >> 1] | 0) : 0) ? (F = w + 2 | 0, (HEAPU8[F >> 0] | 0) == (HEAPU16[B >> 1] | 0)) : 0) {
							HEAP8[w >> 0] = HEAP16[A >> 1];
							HEAP8[E >> 0] = HEAP16[z >> 1];
							HEAP8[F >> 0] = HEAP16[y >> 1]
						} else {
							HEAP8[w >> 0] = HEAP8[k + v >> 0] | 0;
							HEAP8[w + 1 >> 0] = HEAP8[k + (D & 255) >> 0] | 0;
							D = w + 2 | 0;
							HEAP8[D >> 0] = HEAP8[k + (HEAPU8[D >> 0] | 0) >> 0] | 0
						}
						x = x + 1 | 0;
						if ((x | 0) == (s | 0))
							break;
						else
							w = w + 3 | 0
					}
					i = j;
					return
				} else {
					w = (s | 0) == 0;
					if (!n) {
						if (w) {
							i = j;
							return
						}
						x = h + 534 | 0;
						y = h + 536 | 0;
						z = h + 538 | 0;
						A = h + 454 | 0;
						B = h + 456 | 0;
						C = h + 458 | 0;
						u = 0;
						D = g;
						while (1) {
							v = D + 1 | 0;
							F = D + 2 | 0;
							E = D + 3 | 0;
							G = D + 4 | 0;
							H = D + 5 | 0;
							I = HEAPU8[G >> 0] << 8 | HEAPU8[H >> 0];
							if (((HEAPU8[D >> 0] << 8 | HEAPU8[v >> 0] | 0) == (HEAPU16[x >> 1] | 0) ? (HEAPU8[F >> 0] << 8 | HEAPU8[E >> 0] | 0) == (HEAPU16[y >> 1] | 0) : 0) ? (I | 0) == (HEAPU16[z >> 1] | 0) : 0) {
								HEAP8[D >> 0] = (HEAPU16[A >> 1] | 0) >>> 8;
								HEAP8[v >> 0] = HEAP16[A >> 1];
								HEAP8[F >> 0] = (HEAPU16[B >> 1] | 0) >>> 8;
								HEAP8[E >> 0] = HEAP16[B >> 1];
								HEAP8[G >> 0] = (HEAPU16[C >> 1] | 0) >>> 8;
								HEAP8[H >> 0] = HEAP16[C >> 1]
							}
							u = u + 1 | 0;
							if ((u | 0) == (s | 0))
								break;
							else
								D = D + 6 | 0
						}
						i = j;
						return
					}
					if (w) {
						i = j;
						return
					}
					w = h + 534 | 0;
					D = h + 536 | 0;
					u = h + 538 | 0;
					C = h + 454 | 0;
					B = h + 456 | 0;
					A = h + 458 | 0;
					z = 0;
					y = g;
					while (1) {
						x = HEAPU8[y >> 0] | 0;
						H = y + 1 | 0;
						G = HEAPU8[H >> 0] | 0;
						E = y + 2 | 0;
						F = y + 3 | 0;
						v = y + 4 | 0;
						I = HEAPU8[v >> 0] | 0;
						J = y + 5 | 0;
						K = HEAPU8[J >> 0] | 0;
						L = I << 8 | K;
						M = HEAP8[E >> 0] | 0;
						N = HEAP8[F >> 0] | 0;
						if (((x << 8 | G | 0) == (HEAPU16[w >> 1] | 0) ? ((M & 255) << 8 | N & 255 | 0) == (HEAPU16[D >> 1] | 0) : 0) ? (L | 0) == (HEAPU16[u >> 1] | 0) : 0) {
							HEAP8[y >> 0] = (HEAPU16[C >> 1] | 0) >>> 8;
							HEAP8[H >> 0] = HEAP16[C >> 1];
							HEAP8[E >> 0] = (HEAPU16[B >> 1] | 0) >>> 8;
							HEAP8[F >> 0] = HEAP16[B >> 1];
							HEAP8[v >> 0] = (HEAPU16[A >> 1] | 0) >>> 8;
							O = HEAP16[A >> 1] | 0
						} else {
							L = HEAP16[(HEAP32[n + (G >>> q << 2) >> 2] | 0) + (x << 1) >> 1] | 0;
							HEAP8[y >> 0] = (L & 65535) >>> 8;
							HEAP8[H >> 0] = L;
							L = HEAP16[(HEAP32[n + ((N & 255) >>> q << 2) >> 2] | 0) + ((M & 255) << 1) >> 1] | 0;
							HEAP8[E >> 0] = (L & 65535) >>> 8;
							HEAP8[F >> 0] = L;
							L = HEAP16[(HEAP32[n + (K >>> q << 2) >> 2] | 0) + (I << 1) >> 1] | 0;
							HEAP8[v >> 0] = (L & 65535) >>> 8;
							O = L
						}
						HEAP8[J >> 0] = O;
						z = z + 1 | 0;
						if ((z | 0) == (s | 0))
							break;
						else
							y = y + 6 | 0
					}
					i = j;
					return
				}
			else if ((t | 0) == 6)
				if ((HEAP8[f + 9 >> 0] | 0) == 8) {
					y = (s | 0) == 0;
					if (!((m | 0) != 0 & (l | 0) != 0 & (k | 0) != 0)) {
						if (y) {
							i = j;
							return
						}
						z = h + 454 | 0;
						O = h + 456 | 0;
						A = h + 458 | 0;
						B = 0;
						C = g;
						while (1) {
							u = HEAP8[C + 3 >> 0] | 0;
							if (!(u << 24 >> 24)) {
								HEAP8[C >> 0] = HEAP16[z >> 1];
								HEAP8[C + 1 >> 0] = HEAP16[O >> 1];
								HEAP8[C + 2 >> 0] = HEAP16[A >> 1]
							} else if (u << 24 >> 24 != -1) {
								D = u & 255;
								u = da(HEAPU8[C >> 0] | 0, D) | 0;
								w = D ^ 255;
								J = u + 128 + (da(HEAPU16[z >> 1] | 0, w) | 0) | 0;
								HEAP8[C >> 0] = ((J >>> 8 & 255) + J | 0) >>> 8;
								J = C + 1 | 0;
								u = da(HEAPU8[J >> 0] | 0, D) | 0;
								L = u + 128 + (da(HEAPU16[O >> 1] | 0, w) | 0) | 0;
								HEAP8[J >> 0] = ((L >>> 8 & 255) + L | 0) >>> 8;
								L = C + 2 | 0;
								J = da(HEAPU8[L >> 0] | 0, D) | 0;
								D = J + 128 + (da(HEAPU16[A >> 1] | 0, w) | 0) | 0;
								HEAP8[L >> 0] = ((D >>> 8 & 255) + D | 0) >>> 8
							}
							B = B + 1 | 0;
							if ((B | 0) == (s | 0))
								break;
							else
								C = C + 4 | 0
						}
						i = j;
						return
					}
					if (y) {
						i = j;
						return
					}
					y = h + 464 | 0;
					C = h + 466 | 0;
					B = h + 468 | 0;
					A = h + 454 | 0;
					O = h + 456 | 0;
					z = h + 458 | 0;
					D = 0;
					L = g;
					while (1) {
						w = HEAP8[L + 3 >> 0] | 0;
						if (w << 24 >> 24 == -1) {
							HEAP8[L >> 0] = HEAP8[k + (HEAPU8[L >> 0] | 0) >> 0] | 0;
							J = L + 1 | 0;
							HEAP8[J >> 0] = HEAP8[k + (HEAPU8[J >> 0] | 0) >> 0] | 0;
							J = L + 2 | 0;
							HEAP8[J >> 0] = HEAP8[k + (HEAPU8[J >> 0] | 0) >> 0] | 0
						} else if (!(w << 24 >> 24)) {
							HEAP8[L >> 0] = HEAP16[A >> 1];
							HEAP8[L + 1 >> 0] = HEAP16[O >> 1];
							HEAP8[L + 2 >> 0] = HEAP16[z >> 1]
						} else {
							J = w & 255;
							w = da(HEAPU8[m + (HEAPU8[L >> 0] | 0) >> 0] | 0, J) | 0;
							u = J ^ 255;
							v = w + 128 + (da(HEAPU16[y >> 1] | 0, u) | 0) | 0;
							w = ((v >>> 8 & 255) + v | 0) >>> 8;
							if (r)
								P = w & 255;
							else
								P = HEAP8[l + (w & 255) >> 0] | 0;
							HEAP8[L >> 0] = P;
							w = L + 1 | 0;
							v = da(HEAPU8[m + (HEAPU8[w >> 0] | 0) >> 0] | 0, J) | 0;
							I = v + 128 + (da(HEAPU16[C >> 1] | 0, u) | 0) | 0;
							v = ((I >>> 8 & 255) + I | 0) >>> 8;
							if (r)
								Q = v & 255;
							else
								Q = HEAP8[l + (v & 255) >> 0] | 0;
							HEAP8[w >> 0] = Q;
							w = L + 2 | 0;
							v = da(HEAPU8[m + (HEAPU8[w >> 0] | 0) >> 0] | 0, J) | 0;
							J = v + 128 + (da(HEAPU16[B >> 1] | 0, u) | 0) | 0;
							u = ((J >>> 8 & 255) + J | 0) >>> 8;
							if (r)
								R = u & 255;
							else
								R = HEAP8[l + (u & 255) >> 0] | 0;
							HEAP8[w >> 0] = R
						}
						D = D + 1 | 0;
						if ((D | 0) == (s | 0))
							break;
						else
							L = L + 4 | 0
					}
					i = j;
					return
				} else {
					L = (s | 0) == 0;
					if (!((n | 0) != 0 & (o | 0) != 0 & (p | 0) != 0)) {
						if (L) {
							i = j;
							return
						}
						D = h + 454 | 0;
						R = h + 456 | 0;
						B = h + 458 | 0;
						Q = 0;
						C = g;
						while (1) {
							P = HEAPU8[C + 6 >> 0] << 8 | HEAPU8[C + 7 >> 0];
							if (!P) {
								HEAP8[C >> 0] = (HEAPU16[D >> 1] | 0) >>> 8;
								HEAP8[C + 1 >> 0] = HEAP16[D >> 1];
								HEAP8[C + 2 >> 0] = (HEAPU16[R >> 1] | 0) >>> 8;
								HEAP8[C + 3 >> 0] = HEAP16[R >> 1];
								HEAP8[C + 4 >> 0] = (HEAPU16[B >> 1] | 0) >>> 8;
								HEAP8[C + 5 >> 0] = HEAP16[B >> 1]
							} else if ((P | 0) != 65535) {
								y = C + 1 | 0;
								z = C + 2 | 0;
								O = C + 3 | 0;
								A = HEAPU8[z >> 0] << 8 | HEAPU8[O >> 0];
								w = C + 4 | 0;
								u = C + 5 | 0;
								J = HEAPU8[w >> 0] << 8 | HEAPU8[u >> 0];
								v = da(HEAPU8[C >> 0] << 8 | HEAPU8[y >> 0], P) | 0;
								I = P ^ 65535;
								K = v + 32768 + (da(HEAPU16[D >> 1] | 0, I) | 0) | 0;
								v = (K >>> 16) + K | 0;
								HEAP8[C >> 0] = v >>> 24;
								HEAP8[y >> 0] = v >>> 16;
								v = da(A, P) | 0;
								A = v + 32768 + (da(HEAPU16[R >> 1] | 0, I) | 0) | 0;
								v = (A >>> 16) + A | 0;
								HEAP8[z >> 0] = v >>> 24;
								HEAP8[O >> 0] = v >>> 16;
								v = da(J, P) | 0;
								P = v + 32768 + (da(HEAPU16[B >> 1] | 0, I) | 0) | 0;
								I = (P >>> 16) + P | 0;
								HEAP8[w >> 0] = I >>> 24;
								HEAP8[u >> 0] = I >>> 16
							}
							Q = Q + 1 | 0;
							if ((Q | 0) == (s | 0))
								break;
							else
								C = C + 8 | 0
						}
						i = j;
						return
					}
					if (L) {
						i = j;
						return
					}
					L = h + 464 | 0;
					C = h + 466 | 0;
					Q = h + 468 | 0;
					B = h + 454 | 0;
					R = h + 456 | 0;
					D = h + 458 | 0;
					I = 0;
					u = g;
					while (1) {
						w = HEAPU8[u + 6 >> 0] << 8 | HEAPU8[u + 7 >> 0];
						if ((w | 0) == 65535) {
							P = u + 1 | 0;
							v = HEAP16[(HEAP32[n + ((HEAPU8[P >> 0] | 0) >>> q << 2) >> 2] | 0) + (HEAPU8[u >> 0] << 1) >> 1] | 0;
							HEAP8[u >> 0] = (v & 65535) >>> 8;
							HEAP8[P >> 0] = v;
							v = u + 2 | 0;
							P = u + 3 | 0;
							J = HEAP16[(HEAP32[n + ((HEAPU8[P >> 0] | 0) >>> q << 2) >> 2] | 0) + (HEAPU8[v >> 0] << 1) >> 1] | 0;
							HEAP8[v >> 0] = (J & 65535) >>> 8;
							HEAP8[P >> 0] = J;
							J = u + 4 | 0;
							P = u + 5 | 0;
							v = HEAP16[(HEAP32[n + ((HEAPU8[P >> 0] | 0) >>> q << 2) >> 2] | 0) + (HEAPU8[J >> 0] << 1) >> 1] | 0;
							HEAP8[J >> 0] = (v & 65535) >>> 8;
							HEAP8[P >> 0] = v
						} else if (!w) {
							HEAP8[u >> 0] = (HEAPU16[B >> 1] | 0) >>> 8;
							HEAP8[u + 1 >> 0] = HEAP16[B >> 1];
							HEAP8[u + 2 >> 0] = (HEAPU16[R >> 1] | 0) >>> 8;
							HEAP8[u + 3 >> 0] = HEAP16[R >> 1];
							HEAP8[u + 4 >> 0] = (HEAPU16[D >> 1] | 0) >>> 8;
							HEAP8[u + 5 >> 0] = HEAP16[D >> 1]
						} else {
							v = u + 1 | 0;
							P = da(e[(HEAP32[p + ((HEAPU8[v >> 0] | 0) >>> q << 2) >> 2] | 0) + (HEAPU8[u >> 0] << 1) >> 1] | 0, w) | 0;
							J = w ^ 65535;
							O = P + 32768 + (da(HEAPU16[L >> 1] | 0, J) | 0) | 0;
							P = (O >>> 16) + O | 0;
							O = P >>> 16;
							z = P >>> 24;
							if (r) {
								S = O & 255;
								T = z & 255
							} else {
								P = HEAP16[(HEAP32[o + ((O & 255) >>> q << 2) >> 2] | 0) + (z << 1) >> 1] | 0;
								S = P & 255;
								T = (P & 65535) >>> 8 & 255
							}
							HEAP8[u >> 0] = T;
							HEAP8[v >> 0] = S;
							v = u + 2 | 0;
							P = u + 3 | 0;
							z = da(e[(HEAP32[p + ((HEAPU8[P >> 0] | 0) >>> q << 2) >> 2] | 0) + (HEAPU8[v >> 0] << 1) >> 1] | 0, w) | 0;
							O = z + 32768 + (da(HEAPU16[C >> 1] | 0, J) | 0) | 0;
							z = (O >>> 16) + O | 0;
							O = z >>> 16;
							A = z >>> 24;
							if (r) {
								U = O & 255;
								V = A & 255
							} else {
								z = HEAP16[(HEAP32[o + ((O & 255) >>> q << 2) >> 2] | 0) + (A << 1) >> 1] | 0;
								U = z & 255;
								V = (z & 65535) >>> 8 & 255
							}
							HEAP8[v >> 0] = V;
							HEAP8[P >> 0] = U;
							P = u + 4 | 0;
							v = u + 5 | 0;
							z = da(e[(HEAP32[p + ((HEAPU8[v >> 0] | 0) >>> q << 2) >> 2] | 0) + (HEAPU8[P >> 0] << 1) >> 1] | 0, w) | 0;
							w = z + 32768 + (da(HEAPU16[Q >> 1] | 0, J) | 0) | 0;
							J = (w >>> 16) + w | 0;
							w = J >>> 16;
							z = J >>> 24;
							if (r) {
								W = w & 255;
								X = z & 255
							} else {
								J = HEAP16[(HEAP32[o + ((w & 255) >>> q << 2) >> 2] | 0) + (z << 1) >> 1] | 0;
								W = J & 255;
								X = (J & 65535) >>> 8 & 255
							}
							HEAP8[P >> 0] = X;
							HEAP8[v >> 0] = W
						}
						I = I + 1 | 0;
						if ((I | 0) == (s | 0))
							break;
						else
							u = u + 8 | 0
					}
					i = j;
					return
				}
			else if (!t)
				switch (HEAPU8[f + 9 >> 0] | 0) {
				case 2: {
						u = (s | 0) == 0;
						if (!k) {
							if (u) {
								i = j;
								return
							}
							I = h + 540 | 0;
							W = h + 460 | 0;
							X = 0;
							Q = 6;
							U = g;
							while (1) {
								V = HEAPU8[U >> 0] | 0;
								if ((V >>> Q & 3 | 0) == (HEAPU16[I >> 1] | 0))
									HEAP8[U >> 0] = HEAPU16[W >> 1] << Q | V & 16191 >>> (6 - Q | 0);
								V = (Q | 0) == 0;
								X = X + 1 | 0;
								if ((X | 0) == (s | 0))
									break;
								else {
									Q = V ? 6 : Q + -2 | 0;
									U = V ? U + 1 | 0 : U
								}
							}
							i = j;
							return
						}
						if (u) {
							i = j;
							return
						}
						u = h + 540 | 0;
						U = h + 460 | 0;
						Q = 0;
						X = 6;
						W = g;
						while (1) {
							I = HEAPU8[W >> 0] | 0;
							V = I >>> X & 3;
							if ((V | 0) == (HEAPU16[u >> 1] | 0))
								Y = HEAPU16[U >> 1] << X & 255 | I & 16191 >>> (6 - X | 0);
							else
								Y = (HEAPU8[k + (V << 2 | V | V << 4 | V << 6) >> 0] | 0) >>> 6 << X | I & 16191 >>> (6 - X | 0);
							HEAP8[W >> 0] = Y;
							I = (X | 0) == 0;
							Q = Q + 1 | 0;
							if ((Q | 0) == (s | 0))
								break;
							else {
								X = I ? 6 : X + -2 | 0;
								W = I ? W + 1 | 0 : W
							}
						}
						i = j;
						return
					}
				case 16: {
						W = (s | 0) == 0;
						if (!n) {
							if (W) {
								i = j;
								return
							}
							X = h + 540 | 0;
							Q = h + 460 | 0;
							Y = 0;
							U = g;
							while (1) {
								u = U + 1 | 0;
								if ((HEAPU8[U >> 0] << 8 | HEAPU8[u >> 0] | 0) == (HEAPU16[X >> 1] | 0)) {
									HEAP8[U >> 0] = (HEAPU16[Q >> 1] | 0) >>> 8;
									HEAP8[u >> 0] = HEAP16[Q >> 1]
								}
								Y = Y + 1 | 0;
								if ((Y | 0) == (s | 0))
									break;
								else
									U = U + 2 | 0
							}
							i = j;
							return
						}
						if (W) {
							i = j;
							return
						}
						W = h + 540 | 0;
						U = h + 460 | 0;
						Y = 0;
						Q = g;
						while (1) {
							X = HEAPU8[Q >> 0] | 0;
							u = Q + 1 | 0;
							I = HEAPU8[u >> 0] | 0;
							if ((X << 8 | I | 0) == (HEAPU16[W >> 1] | 0)) {
								HEAP8[Q >> 0] = (HEAPU16[U >> 1] | 0) >>> 8;
								Z = HEAP16[U >> 1] | 0
							} else {
								V = HEAP16[(HEAP32[n + (I >>> q << 2) >> 2] | 0) + (X << 1) >> 1] | 0;
								HEAP8[Q >> 0] = (V & 65535) >>> 8;
								Z = V
							}
							HEAP8[u >> 0] = Z;
							Y = Y + 1 | 0;
							if ((Y | 0) == (s | 0))
								break;
							else
								Q = Q + 2 | 0
						}
						i = j;
						return
					}
				case 8: {
						Q = (s | 0) == 0;
						if (!k) {
							if (Q) {
								i = j;
								return
							}
							Y = h + 540 | 0;
							Z = h + 460 | 0;
							U = 0;
							W = g;
							while (1) {
								if ((HEAPU8[W >> 0] | 0) == (HEAPU16[Y >> 1] | 0))
									HEAP8[W >> 0] = HEAP16[Z >> 1];
								U = U + 1 | 0;
								if ((U | 0) == (s | 0))
									break;
								else
									W = W + 1 | 0
							}
							i = j;
							return
						}
						if (Q) {
							i = j;
							return
						}
						Q = h + 540 | 0;
						W = h + 460 | 0;
						U = 0;
						Z = g;
						while (1) {
							Y = HEAPU8[Z >> 0] | 0;
							if ((Y | 0) == (HEAPU16[Q >> 1] | 0))
								_ = HEAP16[W >> 1] & 255;
							else
								_ = HEAP8[k + Y >> 0] | 0;
							HEAP8[Z >> 0] = _;
							U = U + 1 | 0;
							if ((U | 0) == (s | 0))
								break;
							else
								Z = Z + 1 | 0
						}
						i = j;
						return
					}
				case 4: {
						Z = (s | 0) == 0;
						if (!k) {
							if (Z) {
								i = j;
								return
							}
							U = h + 540 | 0;
							_ = h + 460 | 0;
							W = 0;
							Q = 4;
							Y = g;
							while (1) {
								u = HEAPU8[Y >> 0] | 0;
								if ((u >>> Q & 15 | 0) == (HEAPU16[U >> 1] | 0))
									HEAP8[Y >> 0] = HEAPU16[_ >> 1] << Q | u & 3855 >>> (4 - Q | 0);
								u = (Q | 0) == 0;
								W = W + 1 | 0;
								if ((W | 0) == (s | 0))
									break;
								else {
									Q = u ? 4 : Q + -4 | 0;
									Y = u ? Y + 1 | 0 : Y
								}
							}
							i = j;
							return
						}
						if (Z) {
							i = j;
							return
						}
						Z = h + 540 | 0;
						Y = h + 460 | 0;
						Q = 0;
						W = 4;
						_ = g;
						while (1) {
							U = HEAPU8[_ >> 0] | 0;
							u = U >>> W & 15;
							if ((u | 0) == (HEAPU16[Z >> 1] | 0))
								$ = HEAPU16[Y >> 1] << W & 255 | U & 3855 >>> (4 - W | 0);
							else
								$ = (HEAPU8[k + (u << 4 | u) >> 0] | 0) >>> 4 << W | U & 3855 >>> (4 - W | 0);
							HEAP8[_ >> 0] = $;
							U = (W | 0) == 0;
							Q = Q + 1 | 0;
							if ((Q | 0) == (s | 0))
								break;
							else {
								W = U ? 4 : W + -4 | 0;
								_ = U ? _ + 1 | 0 : _
							}
						}
						i = j;
						return
					}
				case 1: {
						if (!s) {
							i = j;
							return
						}
						_ = h + 540 | 0;
						W = h + 460 | 0;
						Q = 0;
						$ = 7;
						Y = g;
						while (1) {
							Z = HEAPU8[Y >> 0] | 0;
							if ((Z >>> $ & 1 | 0) == (HEAPU16[_ >> 1] | 0))
								HEAP8[Y >> 0] = HEAPU16[W >> 1] << $ | Z & 32639 >>> (7 - $ | 0);
							Z = ($ | 0) == 0;
							Q = Q + 1 | 0;
							if ((Q | 0) == (s | 0))
								break;
							else {
								$ = Z ? 7 : $ + -1 | 0;
								Y = Z ? Y + 1 | 0 : Y
							}
						}
						i = j;
						return
					}
				default: {
						i = j;
						return
					}
				}
			else if ((t | 0) == 4) {
				if ((HEAP8[f + 9 >> 0] | 0) == 8) {
					f = (s | 0) == 0;
					if (!((m | 0) != 0 & (l | 0) != 0 & (k | 0) != 0)) {
						if (f) {
							i = j;
							return
						}
						t = h + 460 | 0;
						Y = 0;
						$ = g;
						while (1) {
							Q = HEAP8[$ + 1 >> 0] | 0;
							if (!(Q << 24 >> 24))
								a[$ >> 0] = HEAP16[t >> 1];
							else if (Q << 24 >> 24 != -1) {
								W = Q & 255;
								Q = da(d[$ >> 0] | 0, W) | 0;
								_ = Q + 128 + (da(HEAPU16[t >> 1] | 0, W ^ 255) | 0) | 0;
								a[$ >> 0] = ((_ >>> 8 & 255) + _ | 0) >>> 8
							}
							Y = Y + 1 | 0;
							if ((Y | 0) == (s | 0))
								break;
							else
								$ = $ + 2 | 0
						}
						i = j;
						return
					}
					if (f) {
						i = j;
						return
					}
					f = h + 470 | 0;
					$ = h + 460 | 0;
					Y = 0;
					t = g;
					while (1) {
						_ = HEAP8[t + 1 >> 0] | 0;
						W = _ & 255;
						if (!(_ << 24 >> 24))
							HEAP8[t >> 0] = HEAP16[$ >> 1];
						else if (_ << 24 >> 24 == -1)
							HEAP8[t >> 0] = HEAP8[k + (HEAPU8[t >> 0] | 0) >> 0] | 0;
						else {
							_ = da(HEAPU8[m + (HEAPU8[t >> 0] | 0) >> 0] | 0, W) | 0;
							Q = _ + 128 + (da(HEAPU16[f >> 1] | 0, W ^ 255) | 0) | 0;
							W = ((Q >>> 8 & 255) + Q | 0) >>> 8;
							if (r)
								aa = W & 255;
							else
								aa = HEAP8[l + (W & 255) >> 0] | 0;
							HEAP8[t >> 0] = aa
						}
						Y = Y + 1 | 0;
						if ((Y | 0) == (s | 0))
							break;
						else
							t = t + 2 | 0
					}
					i = j;
					return
				}
				t = (s | 0) == 0;
				if (!((n | 0) != 0 & (o | 0) != 0 & (p | 0) != 0)) {
					if (t) {
						i = j;
						return
					}
					Y = h + 460 | 0;
					aa = 0;
					l = g;
					while (1) {
						f = HEAPU8[l + 2 >> 0] << 8 | HEAPU8[l + 3 >> 0];
						if (!f) {
							HEAP8[l >> 0] = (HEAPU16[Y >> 1] | 0) >>> 8;
							HEAP8[l + 1 >> 0] = HEAP16[Y >> 1]
						} else if ((f | 0) != 65535) {
							m = l + 1 | 0;
							k = da(HEAPU8[l >> 0] << 8 | HEAPU8[m >> 0], f) | 0;
							$ = (da(HEAPU16[Y >> 1] | 0, f ^ 65535) | 0) + 32768 + k | 0;
							k = ($ >>> 16) + $ | 0;
							HEAP8[l >> 0] = k >>> 24;
							HEAP8[m >> 0] = k >>> 16
						}
						aa = aa + 1 | 0;
						if ((aa | 0) == (s | 0))
							break;
						else
							l = l + 4 | 0
					}
					i = j;
					return
				}
				if (t) {
					i = j;
					return
				}
				t = h + 470 | 0;
				l = h + 460 | 0;
				h = 0;
				aa = g;
				while (1) {
					g = HEAPU8[aa + 2 >> 0] << 8 | HEAPU8[aa + 3 >> 0];
					if (!g) {
						HEAP8[aa >> 0] = (HEAPU16[l >> 1] | 0) >>> 8;
						HEAP8[aa + 1 >> 0] = HEAP16[l >> 1]
					} else if ((g | 0) == 65535) {
						Y = aa + 1 | 0;
						k = HEAP16[(HEAP32[n + ((HEAPU8[Y >> 0] | 0) >>> q << 2) >> 2] | 0) + (HEAPU8[aa >> 0] << 1) >> 1] | 0;
						HEAP8[aa >> 0] = (k & 65535) >>> 8;
						HEAP8[Y >> 0] = k
					} else {
						k = aa + 1 | 0;
						Y = da(e[(HEAP32[p + ((HEAPU8[k >> 0] | 0) >>> q << 2) >> 2] | 0) + (HEAPU8[aa >> 0] << 1) >> 1] | 0, g) | 0;
						m = Y + 32768 + (da(HEAPU16[t >> 1] | 0, g ^ 65535) | 0) | 0;
						g = (m >>> 16) + m | 0;
						m = g >>> 16;
						if (r) {
							ba = m & 255;
							ca = g >>> 24 & 255
						} else {
							Y = HEAP16[(HEAP32[o + ((m & 255) >>> q << 2) >> 2] | 0) + (g >>> 24 << 1) >> 1] | 0;
							ba = Y & 255;
							ca = (Y & 65535) >>> 8 & 255
						}
						HEAP8[aa >> 0] = ca;
						HEAP8[k >> 0] = ba
					}
					h = h + 1 | 0;
					if ((h | 0) == (s | 0))
						break;
					else
						aa = aa + 4 | 0
				}
				i = j;
				return
			} else {
				i = j;
				return
			}
		}
		function Zh(e, f, g) {
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0,
			I = 0,
			J = 0,
			K = 0;
			h = i;
			j = HEAP32[g + 492 >> 2] | 0;
			k = HEAP32[g + 496 >> 2] | 0;
			l = HEAP32[g + 484 >> 2] | 0;
			g = HEAP32[e >> 2] | 0;
			m = e + 9 | 0;
			n = HEAP8[m >> 0] | 0;
			if (!((n & 255) < 9 & (j | 0) != 0) ? !(n << 24 >> 24 == 16 & (k | 0) != 0) : 0) {
				i = h;
				return
			}
			o = HEAPU8[e + 8 >> 0] | 0;
			if ((o | 0) == 6) {
				e = (g | 0) == 0;
				if (n << 24 >> 24 == 8) {
					if (e) {
						i = h;
						return
					} else {
						p = 0;
						q = f
					}
					while (1) {
						HEAP8[q >> 0] = HEAP8[j + (HEAPU8[q >> 0] | 0) >> 0] | 0;
						r = q + 1 | 0;
						HEAP8[r >> 0] = HEAP8[j + (HEAPU8[r >> 0] | 0) >> 0] | 0;
						r = q + 2 | 0;
						HEAP8[r >> 0] = HEAP8[j + (HEAPU8[r >> 0] | 0) >> 0] | 0;
						p = p + 1 | 0;
						if ((p | 0) == (g | 0))
							break;
						else
							q = q + 4 | 0
					}
					i = h;
					return
				} else {
					if (e) {
						i = h;
						return
					} else {
						s = 0;
						t = f
					}
					while (1) {
						e = t + 1 | 0;
						q = HEAP16[(HEAP32[k + ((HEAPU8[e >> 0] | 0) >>> l << 2) >> 2] | 0) + ((HEAPU8[t >> 0] | 0) << 1) >> 1] | 0;
						HEAP8[t >> 0] = (q & 65535) >>> 8;
						HEAP8[e >> 0] = q;
						q = t + 2 | 0;
						e = t + 3 | 0;
						p = HEAP16[(HEAP32[k + ((HEAPU8[e >> 0] | 0) >>> l << 2) >> 2] | 0) + ((HEAPU8[q >> 0] | 0) << 1) >> 1] | 0;
						HEAP8[q >> 0] = (p & 65535) >>> 8;
						HEAP8[e >> 0] = p;
						p = t + 4 | 0;
						e = t + 5 | 0;
						q = HEAP16[(HEAP32[k + ((HEAPU8[e >> 0] | 0) >>> l << 2) >> 2] | 0) + ((HEAPU8[p >> 0] | 0) << 1) >> 1] | 0;
						HEAP8[p >> 0] = (q & 65535) >>> 8;
						HEAP8[e >> 0] = q;
						s = s + 1 | 0;
						if ((s | 0) == (g | 0))
							break;
						else
							t = t + 8 | 0
					}
					i = h;
					return
				}
			} else if ((o | 0) == 2) {
				t = (g | 0) == 0;
				if (n << 24 >> 24 == 8) {
					if (t) {
						i = h;
						return
					} else {
						u = 0;
						v = f
					}
					while (1) {
						HEAP8[v >> 0] = HEAP8[j + (HEAPU8[v >> 0] | 0) >> 0] | 0;
						s = v + 1 | 0;
						HEAP8[s >> 0] = HEAP8[j + (HEAPU8[s >> 0] | 0) >> 0] | 0;
						s = v + 2 | 0;
						HEAP8[s >> 0] = HEAP8[j + (HEAPU8[s >> 0] | 0) >> 0] | 0;
						u = u + 1 | 0;
						if ((u | 0) == (g | 0))
							break;
						else
							v = v + 3 | 0
					}
					i = h;
					return
				} else {
					if (t) {
						i = h;
						return
					} else {
						w = 0;
						x = f
					}
					while (1) {
						t = x + 1 | 0;
						v = HEAP16[(HEAP32[k + ((HEAPU8[t >> 0] | 0) >>> l << 2) >> 2] | 0) + ((HEAPU8[x >> 0] | 0) << 1) >> 1] | 0;
						HEAP8[x >> 0] = (v & 65535) >>> 8;
						HEAP8[t >> 0] = v;
						v = x + 2 | 0;
						t = x + 3 | 0;
						u = HEAP16[(HEAP32[k + ((HEAPU8[t >> 0] | 0) >>> l << 2) >> 2] | 0) + ((HEAPU8[v >> 0] | 0) << 1) >> 1] | 0;
						HEAP8[v >> 0] = (u & 65535) >>> 8;
						HEAP8[t >> 0] = u;
						u = x + 4 | 0;
						t = x + 5 | 0;
						v = HEAP16[(HEAP32[k + ((HEAPU8[t >> 0] | 0) >>> l << 2) >> 2] | 0) + ((HEAPU8[u >> 0] | 0) << 1) >> 1] | 0;
						HEAP8[u >> 0] = (v & 65535) >>> 8;
						HEAP8[t >> 0] = v;
						w = w + 1 | 0;
						if ((w | 0) == (g | 0))
							break;
						else
							x = x + 6 | 0
					}
					i = h;
					return
				}
			} else if ((o | 0) == 4) {
				x = (g | 0) == 0;
				if (n << 24 >> 24 == 8) {
					if (x) {
						i = h;
						return
					} else {
						y = 0;
						z = f
					}
					while (1) {
						HEAP8[z >> 0] = HEAP8[j + (HEAPU8[z >> 0] | 0) >> 0] | 0;
						y = y + 1 | 0;
						if ((y | 0) == (g | 0))
							break;
						else
							z = z + 2 | 0
					}
					i = h;
					return
				} else {
					if (x) {
						i = h;
						return
					} else {
						A = 0;
						B = f
					}
					while (1) {
						x = B + 1 | 0;
						z = HEAP16[(HEAP32[k + ((HEAPU8[x >> 0] | 0) >>> l << 2) >> 2] | 0) + ((HEAPU8[B >> 0] | 0) << 1) >> 1] | 0;
						HEAP8[B >> 0] = (z & 65535) >>> 8;
						HEAP8[x >> 0] = z;
						A = A + 1 | 0;
						if ((A | 0) == (g | 0))
							break;
						else
							B = B + 4 | 0
					}
					i = h;
					return
				}
			} else if (!o) {
				if (n << 24 >> 24 == 2) {
					if (!g) {
						i = h;
						return
					} else {
						C = 0;
						D = f
					}
					while (1) {
						o = HEAPU8[D >> 0] | 0;
						B = o & 192;
						A = o & 48;
						z = o & 12;
						x = o & 3;
						HEAP8[D >> 0] = (HEAPU8[j + (A << 2 | A | A >>> 2 | A >>> 4) >> 0] | 0) >>> 2 & 48 | (HEAPU8[j + (o >>> 6 | B | B >>> 2 | B >>> 4) >> 0] | 0) & 192 | (HEAPU8[j + (z << 2 | z | z << 4 | z >>> 2) >> 0] | 0) >>> 4 & 12 | (HEAPU8[j + (x << 4 | x | x << 6 | x << 2) >> 0] | 0) >>> 6;
						C = C + 4 | 0;
						if (C >>> 0 >= g >>> 0)
							break;
						else
							D = D + 1 | 0
					}
					E = HEAP8[m >> 0] | 0
				} else
					E = n;
				if (E << 24 >> 24 == 4) {
					if (!g) {
						i = h;
						return
					} else {
						F = 0;
						G = f
					}
					while (1) {
						n = HEAPU8[G >> 0] | 0;
						m = n & 15;
						HEAP8[G >> 0] = (HEAPU8[j + (m << 4 | m) >> 0] | 0) >>> 4 | (HEAPU8[j + (n & 240 | n >>> 4) >> 0] | 0) & 240;
						F = F + 2 | 0;
						if (F >>> 0 >= g >>> 0)
							break;
						else
							G = G + 1 | 0
					}
					i = h;
					return
				} else if (E << 24 >> 24 == 16) {
					if (!g) {
						i = h;
						return
					} else {
						H = 0;
						I = f
					}
					while (1) {
						G = I + 1 | 0;
						F = HEAP16[(HEAP32[k + ((HEAPU8[G >> 0] | 0) >>> l << 2) >> 2] | 0) + ((HEAPU8[I >> 0] | 0) << 1) >> 1] | 0;
						HEAP8[I >> 0] = (F & 65535) >>> 8;
						HEAP8[G >> 0] = F;
						H = H + 1 | 0;
						if ((H | 0) == (g | 0))
							break;
						else
							I = I + 2 | 0
					}
					i = h;
					return
				} else if (E << 24 >> 24 == 8) {
					if (!g) {
						i = h;
						return
					} else {
						J = 0;
						K = f
					}
					while (1) {
						HEAP8[K >> 0] = HEAP8[j + (HEAPU8[K >> 0] | 0) >> 0] | 0;
						J = J + 1 | 0;
						if ((J | 0) == (g | 0))
							break;
						else
							K = K + 1 | 0
					}
					i = h;
					return
				} else {
					i = h;
					return
				}
			} else {
				i = h;
				return
			}
		}
		function _h(e, f, g) {
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0;
			h = i;
			i = i + 16 | 0;
			j = h;
			k = HEAP32[e >> 2] | 0;
			l = HEAPU8[e + 8 >> 0] | 0;
			do
				if (l & 4) {
					m = HEAP8[e + 9 >> 0] | 0;
					if (m << 24 >> 24 == 16) {
						n = HEAP32[g + 508 >> 2] | 0;
						o = HEAP32[g + 484 >> 2] | 0;
						if (!n) {
							q = 12;
							break
						}
						r = l << 1 & 4;
						s = r + 4 | 0;
						if (!k) {
							i = h;
							return
						}
						t = f + (r | 2) | 0;
						r = k;
						while (1) {
							u = t + 1 | 0;
							v = HEAP16[(HEAP32[n + ((HEAPU8[u >> 0] | 0) >>> o << 2) >> 2] | 0) + ((HEAPU8[t >> 0] | 0) << 1) >> 1] | 0;
							HEAP8[t >> 0] = (v & 65535) >>> 8;
							HEAP8[u >> 0] = v;
							r = r + -1 | 0;
							if (!r)
								break;
							else
								t = t + s | 0
						}
						i = h;
						return
					} else if (m << 24 >> 24 == 8) {
						s = HEAP32[g + 500 >> 2] | 0;
						if (!s) {
							q = 12;
							break
						}
						t = l & 2;
						r = t + 2 | 0;
						if (!k) {
							i = h;
							return
						}
						o = f + (t | 1) | 0;
						t = k;
						while (1) {
							HEAP8[o >> 0] = HEAP8[s + (HEAPU8[o >> 0] | 0) >> 0] | 0;
							t = t + -1 | 0;
							if (!t)
								break;
							else
								o = o + r | 0
						}
						i = h;
						return
					} else {
						q = 11;
						break
					}
				} else
					q = 11;
			while (0);
			if ((q | 0) == 11 ? (g | 0) != 0 : 0)
				q = 12;
			if ((q | 0) == 12 ? (q = HEAP32[g + 172 >> 2] | 0, (q | 0) != 0) : 0) {
				rc[q & 127](g, 4016);
				i = h;
				return
			}
			g = HEAP32[p >> 2] | 0;
			HEAP32[j >> 2] = 4016;
			Qb(g | 0, 7576, j | 0) | 0;
			ec(10, g | 0) | 0;
			i = h;
			return
		}
		function $h(b, e, f, g) {
			b = b | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0;
			h = i;
			j = HEAP32[b >> 2] | 0;
			k = b + 9 | 0;
			if ((HEAP8[k >> 0] | 0) != 8) {
				i = h;
				return
			}
			l = b + 8 | 0;
			m = HEAP8[l >> 0] | 0;
			n = (f | 0) != 0;
			if (m << 24 >> 24 == 2 & n) {
				if (!j)
					o = 8;
				else {
					p = e;
					q = 0;
					r = e;
					while (1) {
						HEAP8[p >> 0] = HEAP8[f + ((HEAPU8[r + 1 >> 0] | 0) >>> 3 << 5 | (HEAPU8[r >> 0] | 0) >>> 3 << 10 | (HEAPU8[r + 2 >> 0] | 0) >>> 3) >> 0] | 0;
						q = q + 1 | 0;
						if ((q | 0) == (j | 0))
							break;
						else {
							p = p + 1 | 0;
							r = r + 3 | 0
						}
					}
					o = HEAP8[k >> 0] | 0
				}
				HEAP8[l >> 0] = 3;
				HEAP8[b + 10 >> 0] = 1;
				HEAP8[b + 11 >> 0] = o;
				r = o & 255;
				if ((o & 255) > 7)
					s = da(r >>> 3, j) | 0;
				else
					s = ((da(r, j) | 0) + 7 | 0) >>> 3;
				HEAP32[b + 4 >> 2] = s;
				i = h;
				return
			}
			if (!(m << 24 >> 24 == 6 & n)) {
				if ((g | 0) == 0 | m << 24 >> 24 != 3 | (j | 0) == 0) {
					i = h;
					return
				} else {
					t = 0;
					u = e
				}
				while (1) {
					HEAP8[u >> 0] = HEAP8[g + (HEAPU8[u >> 0] | 0) >> 0] | 0;
					t = t + 1 | 0;
					if ((t | 0) == (j | 0))
						break;
					else
						u = u + 1 | 0
				}
				i = h;
				return
			}
			if (!j)
				v = 8;
			else {
				u = e;
				t = 0;
				g = e;
				while (1) {
					HEAP8[u >> 0] = HEAP8[f + ((HEAPU8[g + 1 >> 0] | 0) >>> 3 << 5 | (HEAPU8[g >> 0] | 0) >>> 3 << 10 | (HEAPU8[g + 2 >> 0] | 0) >>> 3) >> 0] | 0;
					t = t + 1 | 0;
					if ((t | 0) == (j | 0))
						break;
					else {
						u = u + 1 | 0;
						g = g + 4 | 0
					}
				}
				v = HEAP8[k >> 0] | 0
			}
			HEAP8[l >> 0] = 3;
			HEAP8[b + 10 >> 0] = 1;
			HEAP8[b + 11 >> 0] = v;
			l = v & 255;
			if ((v & 255) > 7)
				w = da(l >>> 3, j) | 0;
			else
				w = ((da(l, j) | 0) + 7 | 0) >>> 3;
			HEAP32[b + 4 >> 2] = w;
			i = h;
			return
		}
		function ai(b, e, f) {
			b = b | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0;
			g = i;
			i = i + 16 | 0;
			h = g;
			j = HEAP8[b + 8 >> 0] | 0;
			k = j & 255;
			if (j << 24 >> 24 == 3) {
				i = g;
				return
			}
			j = HEAPU8[b + 9 >> 0] | 0;
			if (!(k & 2)) {
				HEAP32[h >> 2] = j - (HEAPU8[f + 3 >> 0] | 0);
				l = 1
			} else {
				HEAP32[h >> 2] = j - (HEAPU8[f >> 0] | 0);
				HEAP32[h + 4 >> 2] = j - (HEAPU8[f + 1 >> 0] | 0);
				HEAP32[h + 8 >> 2] = j - (HEAPU8[f + 2 >> 0] | 0);
				l = 3
			}
			if (!(k & 4))
				m = l;
			else {
				HEAP32[h + (l << 2) >> 2] = j - (HEAPU8[f + 4 >> 0] | 0);
				m = l + 1 | 0
			}
			l = 0;
			f = 0;
			while (1) {
				k = h + (l << 2) | 0;
				n = HEAP32[k >> 2] | 0;
				if ((n | 0) > 0 & (n | 0) < (j | 0))
					o = 1;
				else {
					HEAP32[k >> 2] = 0;
					o = f
				}
				l = l + 1 | 0;
				if ((l | 0) >= (m | 0))
					break;
				else
					f = o
			}
			if (!o) {
				i = g;
				return
			}
			if ((j | 0) == 2) {
				o = HEAP32[b + 4 >> 2] | 0;
				f = e + o | 0;
				if ((o | 0) > 0)
					p = e;
				else {
					i = g;
					return
				}
				do {
					HEAP8[p >> 0] = (HEAPU8[p >> 0] | 0) >>> 1 & 85;
					p = p + 1 | 0
				} while (p >>> 0 < f >>> 0);
				i = g;
				return
			} else if ((j | 0) == 8) {
				f = HEAP32[b + 4 >> 2] | 0;
				p = e + f | 0;
				if ((f | 0) > 0) {
					q = e;
					r = 0
				} else {
					i = g;
					return
				}
				while (1) {
					f = r + 1 | 0;
					HEAP8[q >> 0] = (HEAPU8[q >> 0] | 0) >>> (HEAP32[h + (r << 2) >> 2] | 0);
					q = q + 1 | 0;
					if (q >>> 0 >= p >>> 0)
						break;
					else
						r = (f | 0) >= (m | 0) ? 0 : f
				}
				i = g;
				return
			} else if ((j | 0) == 16) {
				r = HEAP32[b + 4 >> 2] | 0;
				p = e + r | 0;
				if ((r | 0) > 0) {
					s = e;
					t = 0
				} else {
					i = g;
					return
				}
				while (1) {
					r = s + 1 | 0;
					q = ((HEAPU8[s >> 0] | 0) << 8 | (HEAPU8[r >> 0] | 0)) >>> (HEAP32[h + (t << 2) >> 2] | 0);
					f = t + 1 | 0;
					HEAP8[s >> 0] = q >>> 8;
					s = s + 2 | 0;
					HEAP8[r >> 0] = q;
					if (s >>> 0 >= p >>> 0)
						break;
					else
						t = (f | 0) >= (m | 0) ? 0 : f
				}
				i = g;
				return
			} else if ((j | 0) == 4) {
				j = HEAP32[b + 4 >> 2] | 0;
				b = e + j | 0;
				m = HEAP32[h >> 2] | 0;
				h = 15 >>> m;
				t = h << 4 | h;
				if ((j | 0) > 0)
					u = e;
				else {
					i = g;
					return
				}
				do {
					HEAP8[u >> 0] = (HEAPU8[u >> 0] | 0) >>> m & t;
					u = u + 1 | 0
				} while (u >>> 0 < b >>> 0);
				i = g;
				return
			} else {
				i = g;
				return
			}
		}
		function bi(b, e) {
			b = b | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0;
			f = i;
			g = b + 9 | 0;
			h = HEAP8[g >> 0] | 0;
			if ((h & 255) >= 8) {
				i = f;
				return
			}
			j = h & 255;
			h = HEAP32[b >> 2] | 0;
			if ((j | 0) == 4) {
				k = h + -1 | 0;
				if (h) {
					l = e + k | 0;
					m = 0;
					n = h << 2 & 4;
					o = e + (k >>> 1) | 0;
					while (1) {
						HEAP8[l >> 0] = (HEAPU8[o >> 0] | 0) >>> n & 15;
						k = (n | 0) == 4;
						m = m + 1 | 0;
						if ((m | 0) == (h | 0))
							break;
						else {
							l = l + -1 | 0;
							n = k ? 0 : 4;
							o = k ? o + -1 | 0 : o
						}
					}
				}
			} else if ((j | 0) == 2) {
				o = h + -1 | 0;
				if (h) {
					n = e + o | 0;
					l = 0;
					m = (h << 1) + 6 & 6 ^ 6;
					k = e + (o >>> 2) | 0;
					while (1) {
						HEAP8[n >> 0] = (HEAPU8[k >> 0] | 0) >>> m & 3;
						o = (m | 0) == 6;
						l = l + 1 | 0;
						if ((l | 0) == (h | 0))
							break;
						else {
							n = n + -1 | 0;
							m = o ? 0 : m + 2 | 0;
							k = o ? k + -1 | 0 : k
						}
					}
				}
			} else if ((j | 0) == 1 ? (j = h + -1 | 0, (h | 0) != 0) : 0) {
				k = e + j | 0;
				m = 0;
				n = h + 7 & 7 ^ 7;
				l = e + (j >>> 3) | 0;
				while (1) {
					HEAP8[k >> 0] = (HEAPU8[l >> 0] | 0) >>> n & 1;
					j = (n | 0) == 7;
					m = m + 1 | 0;
					if ((m | 0) == (h | 0))
						break;
					else {
						k = k + -1 | 0;
						n = j ? 0 : n + 1 | 0;
						l = j ? l + -1 | 0 : l
					}
				}
			}
			HEAP8[g >> 0] = 8;
			g = HEAPU8[b + 10 >> 0] | 0;
			HEAP8[b + 11 >> 0] = g << 3;
			HEAP32[b + 4 >> 2] = da(g, h) | 0;
			i = f;
			return
		}
		function ci(e, f) {
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0;
			g = i;
			h = HEAP16[e + 420 >> 1] | 0;
			j = HEAPU8[f + 9 >> 0] | 0;
			if ((h & 65535 | 0) >= (1 << j | 0) | h << 16 >> 16 == 0) {
				i = g;
				return
			}
			h = (da(HEAP32[f >> 2] | 0, 0 - (HEAPU8[f + 11 >> 0] | 0) | 0) | 0) & 7;
			k = HEAP32[e + 384 >> 2] | 0;
			l = HEAP32[f + 4 >> 2] | 0;
			f = k + l | 0;
			if ((j | 0) == 1) {
				if ((l | 0) <= 0) {
					i = g;
					return
				}
				m = e + 424 | 0;
				n = h;
				o = f;
				while (1) {
					if ((HEAPU8[o >> 0] | 0) >>> n)
						HEAP32[m >> 2] = 1;
					o = o + -1 | 0;
					if (o >>> 0 <= k >>> 0)
						break;
					else
						n = 0
				}
				i = g;
				return
			} else if ((j | 0) == 4) {
				if ((l | 0) <= 0) {
					i = g;
					return
				}
				n = e + 424 | 0;
				o = HEAP32[n >> 2] | 0;
				m = h;
				p = f;
				while (1) {
					q = HEAP8[p >> 0] | 0;
					r = (q & 255) >>> m & 15;
					if ((r | 0) > (o | 0)) {
						HEAP32[n >> 2] = r;
						s = HEAP8[p >> 0] | 0;
						t = r
					} else {
						s = q;
						t = o
					}
					q = (s & 255) >>> m >>> 4 & 15;
					if ((q | 0) > (t | 0)) {
						HEAP32[n >> 2] = q;
						u = q
					} else
						u = t;
					p = p + -1 | 0;
					if (p >>> 0 <= k >>> 0)
						break;
					else {
						o = u;
						m = 0
					}
				}
				i = g;
				return
			} else if ((j | 0) == 2) {
				if ((l | 0) <= 0) {
					i = g;
					return
				}
				m = e + 424 | 0;
				u = HEAP32[m >> 2] | 0;
				o = h;
				h = f;
				while (1) {
					p = HEAP8[h >> 0] | 0;
					t = (p & 255) >>> o & 3;
					if ((t | 0) > (u | 0)) {
						HEAP32[m >> 2] = t;
						v = HEAP8[h >> 0] | 0;
						w = t
					} else {
						v = p;
						w = u
					}
					p = (v & 255) >>> o >>> 2 & 3;
					if ((p | 0) > (w | 0)) {
						HEAP32[m >> 2] = p;
						x = HEAP8[h >> 0] | 0;
						y = p
					} else {
						x = v;
						y = w
					}
					p = (x & 255) >>> o >>> 4 & 3;
					if ((p | 0) > (y | 0)) {
						HEAP32[m >> 2] = p;
						z = HEAP8[h >> 0] | 0;
						A = p
					} else {
						z = x;
						A = y
					}
					p = (z & 255) >>> o >>> 6 & 3;
					if ((p | 0) > (A | 0)) {
						HEAP32[m >> 2] = p;
						B = p
					} else
						B = A;
					h = h + -1 | 0;
					if (h >>> 0 <= k >>> 0)
						break;
					else {
						u = B;
						o = 0
					}
				}
				i = g;
				return
			} else if ((j | 0) == 8) {
				if ((l | 0) <= 0) {
					i = g;
					return
				}
				l = e + 424 | 0;
				e = HEAP32[l >> 2] | 0;
				j = f;
				while (1) {
					f = HEAPU8[j >> 0] | 0;
					if ((f | 0) > (e | 0)) {
						HEAP32[l >> 2] = f;
						C = f
					} else
						C = e;
					j = j + -1 | 0;
					if (j >>> 0 <= k >>> 0)
						break;
					else
						e = C
				}
				i = g;
				return
			} else {
				i = g;
				return
			}
		}
		function di(b, d, e, f) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0;
			g = i;
			h = HEAP32[b >> 2] | 0;
			j = e >>> 8 & 255;
			k = e & 255;
			e = HEAP8[b + 8 >> 0] | 0;
			if (!(e << 24 >> 24)) {
				l = HEAP8[b + 9 >> 0] | 0;
				if (l << 24 >> 24 == 16) {
					m = d + (h << 1) | 0;
					n = h << 2;
					o = d + n | 0;
					if (!(f & 128)) {
						if (h) {
							p = o;
							q = 0;
							r = m;
							do {
								HEAP8[p + -1 >> 0] = HEAP8[r + -1 >> 0] | 0;
								r = r + -2 | 0;
								HEAP8[p + -2 >> 0] = HEAP8[r >> 0] | 0;
								HEAP8[p + -3 >> 0] = j;
								p = p + -4 | 0;
								HEAP8[p >> 0] = k;
								q = q + 1 | 0
							} while ((q | 0) != (h | 0))
						}
						HEAP8[b + 10 >> 0] = 2;
						HEAP8[b + 11 >> 0] = 32;
						HEAP32[b + 4 >> 2] = n;
						i = g;
						return
					} else {
						HEAP8[d + (n + -1) >> 0] = j;
						HEAP8[d + (n + -2) >> 0] = k;
						if (h >>> 0 > 1) {
							q = o;
							o = 1;
							p = m;
							do {
								HEAP8[q + -3 >> 0] = HEAP8[p + -1 >> 0] | 0;
								p = p + -2 | 0;
								m = q;
								q = q + -4 | 0;
								HEAP8[q >> 0] = HEAP8[p >> 0] | 0;
								o = o + 1 | 0;
								HEAP8[m + -5 >> 0] = j;
								HEAP8[m + -6 >> 0] = k
							} while ((o | 0) != (h | 0))
						}
						HEAP8[b + 10 >> 0] = 2;
						HEAP8[b + 11 >> 0] = 32;
						HEAP32[b + 4 >> 2] = n;
						i = g;
						return
					}
				} else if (l << 24 >> 24 == 8) {
					l = d + h | 0;
					n = h << 1;
					o = d + n | 0;
					if (!(f & 128)) {
						if (h) {
							p = o;
							q = 0;
							m = l;
							do {
								m = m + -1 | 0;
								HEAP8[p + -1 >> 0] = HEAP8[m >> 0] | 0;
								p = p + -2 | 0;
								HEAP8[p >> 0] = k;
								q = q + 1 | 0
							} while ((q | 0) != (h | 0))
						}
						HEAP8[b + 10 >> 0] = 2;
						HEAP8[b + 11 >> 0] = 16;
						HEAP32[b + 4 >> 2] = n;
						i = g;
						return
					} else {
						HEAP8[d + (n + -1) >> 0] = k;
						if (h >>> 0 > 1) {
							q = o;
							o = 1;
							p = l;
							do {
								p = p + -1 | 0;
								l = q;
								q = q + -2 | 0;
								HEAP8[q >> 0] = HEAP8[p >> 0] | 0;
								o = o + 1 | 0;
								HEAP8[l + -3 >> 0] = k
							} while ((o | 0) != (h | 0))
						}
						HEAP8[b + 10 >> 0] = 2;
						HEAP8[b + 11 >> 0] = 16;
						HEAP32[b + 4 >> 2] = n;
						i = g;
						return
					}
				} else {
					i = g;
					return
				}
			} else if (e << 24 >> 24 == 2) {
				e = HEAP8[b + 9 >> 0] | 0;
				if (e << 24 >> 24 == 8) {
					n = h * 3 | 0;
					o = d + n | 0;
					p = n + h | 0;
					n = d + p | 0;
					if (!(f & 128)) {
						if (h) {
							q = n;
							l = 0;
							m = o;
							do {
								HEAP8[q + -1 >> 0] = HEAP8[m + -1 >> 0] | 0;
								HEAP8[q + -2 >> 0] = HEAP8[m + -2 >> 0] | 0;
								m = m + -3 | 0;
								HEAP8[q + -3 >> 0] = HEAP8[m >> 0] | 0;
								q = q + -4 | 0;
								HEAP8[q >> 0] = k;
								l = l + 1 | 0
							} while ((l | 0) != (h | 0))
						}
						HEAP8[b + 10 >> 0] = 4;
						HEAP8[b + 11 >> 0] = 32;
						HEAP32[b + 4 >> 2] = h << 2;
						i = g;
						return
					} else {
						HEAP8[d + (p + -1) >> 0] = k;
						if (h >>> 0 > 1) {
							p = n;
							n = 1;
							l = o;
							do {
								HEAP8[p + -2 >> 0] = HEAP8[l + -1 >> 0] | 0;
								HEAP8[p + -3 >> 0] = HEAP8[l + -2 >> 0] | 0;
								l = l + -3 | 0;
								o = p;
								p = p + -4 | 0;
								HEAP8[p >> 0] = HEAP8[l >> 0] | 0;
								n = n + 1 | 0;
								HEAP8[o + -5 >> 0] = k
							} while ((n | 0) != (h | 0))
						}
						HEAP8[b + 10 >> 0] = 4;
						HEAP8[b + 11 >> 0] = 32;
						HEAP32[b + 4 >> 2] = h << 2;
						i = g;
						return
					}
				} else if (e << 24 >> 24 == 16) {
					e = h * 6 | 0;
					n = d + e | 0;
					l = e + (h << 1) | 0;
					e = d + l | 0;
					if (!(f & 128)) {
						if (h) {
							f = e;
							p = 0;
							o = n;
							do {
								HEAP8[f + -1 >> 0] = HEAP8[o + -1 >> 0] | 0;
								HEAP8[f + -2 >> 0] = HEAP8[o + -2 >> 0] | 0;
								HEAP8[f + -3 >> 0] = HEAP8[o + -3 >> 0] | 0;
								HEAP8[f + -4 >> 0] = HEAP8[o + -4 >> 0] | 0;
								HEAP8[f + -5 >> 0] = HEAP8[o + -5 >> 0] | 0;
								o = o + -6 | 0;
								HEAP8[f + -6 >> 0] = HEAP8[o >> 0] | 0;
								HEAP8[f + -7 >> 0] = j;
								f = f + -8 | 0;
								HEAP8[f >> 0] = k;
								p = p + 1 | 0
							} while ((p | 0) != (h | 0))
						}
						HEAP8[b + 10 >> 0] = 4;
						HEAP8[b + 11 >> 0] = 64;
						HEAP32[b + 4 >> 2] = h << 3;
						i = g;
						return
					} else {
						HEAP8[d + (l + -1) >> 0] = j;
						HEAP8[d + (l + -2) >> 0] = k;
						if (h >>> 0 > 1) {
							l = e;
							e = 1;
							d = n;
							do {
								HEAP8[l + -3 >> 0] = HEAP8[d + -1 >> 0] | 0;
								HEAP8[l + -4 >> 0] = HEAP8[d + -2 >> 0] | 0;
								HEAP8[l + -5 >> 0] = HEAP8[d + -3 >> 0] | 0;
								HEAP8[l + -6 >> 0] = HEAP8[d + -4 >> 0] | 0;
								HEAP8[l + -7 >> 0] = HEAP8[d + -5 >> 0] | 0;
								d = d + -6 | 0;
								n = l;
								l = l + -8 | 0;
								HEAP8[l >> 0] = HEAP8[d >> 0] | 0;
								e = e + 1 | 0;
								HEAP8[n + -9 >> 0] = j;
								HEAP8[n + -10 >> 0] = k
							} while ((e | 0) != (h | 0))
						}
						HEAP8[b + 10 >> 0] = 4;
						HEAP8[b + 11 >> 0] = 64;
						HEAP32[b + 4 >> 2] = h << 3;
						i = g;
						return
					}
				} else {
					i = g;
					return
				}
			} else {
				i = g;
				return
			}
		}
		function ei(b, e) {
			b = b | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0;
			f = i;
			g = HEAP32[b >> 2] | 0;
			h = HEAP8[b + 8 >> 0] | 0;
			if (h << 24 >> 24 == 6) {
				j = e + (HEAP32[b + 4 >> 2] | 0) | 0;
				k = (g | 0) == 0;
				if ((HEAP8[b + 9 >> 0] | 0) == 8) {
					if (k) {
						i = f;
						return
					} else {
						l = 0;
						m = j
					}
					while (1) {
						n = m + -1 | 0;
						HEAP8[n >> 0] = HEAPU8[n >> 0] ^ 255;
						l = l + 1 | 0;
						if ((l | 0) == (g | 0))
							break;
						else
							m = m + -4 | 0
					}
					i = f;
					return
				} else {
					if (k) {
						i = f;
						return
					} else {
						o = 0;
						p = j
					}
					while (1) {
						j = p + -1 | 0;
						HEAP8[j >> 0] = HEAPU8[j >> 0] ^ 255;
						j = p + -2 | 0;
						HEAP8[j >> 0] = HEAPU8[j >> 0] ^ 255;
						o = o + 1 | 0;
						if ((o | 0) == (g | 0))
							break;
						else
							p = p + -8 | 0
					}
					i = f;
					return
				}
			} else if (h << 24 >> 24 == 4) {
				h = e + (HEAP32[b + 4 >> 2] | 0) | 0;
				e = (g | 0) == 0;
				if ((HEAP8[b + 9 >> 0] | 0) == 8) {
					if (e) {
						i = f;
						return
					} else {
						q = h;
						r = 0
					}
					while (1) {
						b = q + -1 | 0;
						HEAP8[b >> 0] = HEAPU8[b >> 0] ^ 255;
						r = r + 1 | 0;
						if ((r | 0) == (g | 0))
							break;
						else
							q = q + -2 | 0
					}
					i = f;
					return
				} else {
					if (e) {
						i = f;
						return
					} else {
						s = 0;
						t = h
					}
					while (1) {
						h = t + -1 | 0;
						HEAP8[h >> 0] = HEAPU8[h >> 0] ^ 255;
						h = t + -2 | 0;
						HEAP8[h >> 0] = HEAPU8[h >> 0] ^ 255;
						s = s + 1 | 0;
						if ((s | 0) == (g | 0))
							break;
						else
							t = t + -4 | 0
					}
					i = f;
					return
				}
			} else {
				i = f;
				return
			}
		}
		function fi(b, d) {
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0;
			e = i;
			f = HEAP32[b >> 2] | 0;
			g = HEAP8[b + 8 >> 0] | 0;
			if (g << 24 >> 24 == 4) {
				h = d + (HEAP32[b + 4 >> 2] | 0) | 0;
				j = (f | 0) == 0;
				if ((HEAP8[b + 9 >> 0] | 0) == 8) {
					if (j) {
						i = e;
						return
					} else {
						k = h;
						l = 0
					}
					do {
						m = k + -1 | 0;
						n = HEAP8[m >> 0] | 0;
						k = k + -2 | 0;
						HEAP8[m >> 0] = HEAP8[k >> 0] | 0;
						HEAP8[k >> 0] = n;
						l = l + 1 | 0
					} while ((l | 0) != (f | 0));
					i = e;
					return
				} else {
					if (j) {
						i = e;
						return
					} else {
						o = h;
						p = 0
					}
					do {
						h = o + -1 | 0;
						j = HEAP8[h >> 0] | 0;
						l = o + -2 | 0;
						k = HEAP8[l >> 0] | 0;
						n = o + -3 | 0;
						HEAP8[h >> 0] = HEAP8[n >> 0] | 0;
						o = o + -4 | 0;
						HEAP8[l >> 0] = HEAP8[o >> 0] | 0;
						HEAP8[n >> 0] = j;
						HEAP8[o >> 0] = k;
						p = p + 1 | 0
					} while ((p | 0) != (f | 0));
					i = e;
					return
				}
			} else if (g << 24 >> 24 == 6) {
				g = d + (HEAP32[b + 4 >> 2] | 0) | 0;
				d = (f | 0) == 0;
				if ((HEAP8[b + 9 >> 0] | 0) == 8) {
					if (d) {
						i = e;
						return
					} else {
						q = 0;
						r = g
					}
					do {
						b = r + -1 | 0;
						p = HEAP8[b >> 0] | 0;
						o = r + -2 | 0;
						HEAP8[b >> 0] = HEAP8[o >> 0] | 0;
						b = r + -3 | 0;
						HEAP8[o >> 0] = HEAP8[b >> 0] | 0;
						r = r + -4 | 0;
						HEAP8[b >> 0] = HEAP8[r >> 0] | 0;
						HEAP8[r >> 0] = p;
						q = q + 1 | 0
					} while ((q | 0) != (f | 0));
					i = e;
					return
				} else {
					if (d) {
						i = e;
						return
					} else {
						s = 0;
						t = g
					}
					do {
						g = t + -1 | 0;
						d = HEAP8[g >> 0] | 0;
						q = t + -2 | 0;
						r = HEAP8[q >> 0] | 0;
						p = t + -3 | 0;
						HEAP8[g >> 0] = HEAP8[p >> 0] | 0;
						g = t + -4 | 0;
						HEAP8[q >> 0] = HEAP8[g >> 0] | 0;
						q = t + -5 | 0;
						HEAP8[p >> 0] = HEAP8[q >> 0] | 0;
						p = t + -6 | 0;
						HEAP8[g >> 0] = HEAP8[p >> 0] | 0;
						g = t + -7 | 0;
						HEAP8[q >> 0] = HEAP8[g >> 0] | 0;
						t = t + -8 | 0;
						HEAP8[p >> 0] = HEAP8[t >> 0] | 0;
						HEAP8[g >> 0] = d;
						HEAP8[t >> 0] = r;
						s = s + 1 | 0
					} while ((s | 0) != (f | 0));
					i = e;
					return
				}
			} else {
				i = e;
				return
			}
		}
		function gi(b, e, f, g, h, j, k, l, m) {
			b = b | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			k = k | 0;
			l = l | 0;
			m = m | 0;
			var n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0;
			n = i;
			if ((b | 0) == 0 | (e | 0) == 0) {
				i = n;
				return
			}
			HEAP32[e >> 2] = f;
			HEAP32[e + 4 >> 2] = g;
			o = e + 24 | 0;
			HEAP8[o >> 0] = h;
			p = e + 25 | 0;
			HEAP8[p >> 0] = j;
			HEAP8[e + 26 >> 0] = l;
			HEAP8[e + 27 >> 0] = m;
			HEAP8[e + 28 >> 0] = k;
			Vg(b, f, g, h & 255, j & 255, k & 255, l & 255, m & 255);
			m = HEAP8[p >> 0] | 0;
			if (m << 24 >> 24 != 3) {
				p = (m & 2) == 0 ? 1 : 3;
				HEAP8[e + 29 >> 0] = p;
				if (!(m & 4))
					q = p;
				else {
					m = p + 1 << 24 >> 24;
					HEAP8[e + 29 >> 0] = m;
					q = m
				}
			} else {
				HEAP8[e + 29 >> 0] = 1;
				q = 1
			}
			m = da(HEAPU8[o >> 0] | 0, q & 255) | 0;
			HEAP8[e + 30 >> 0] = m;
			q = m & 255;
			if (q >>> 0 > 7)
				r = da(q >>> 3, f) | 0;
			else
				r = ((da(q, f) | 0) + 7 | 0) >>> 3;
			HEAP32[e + 12 >> 2] = r;
			i = n;
			return
		}
		function hi(d, e, f, g) {
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			q = 0,
			r = 0;
			h = i;
			i = i + 16 | 0;
			j = h;
			if ((d | 0) == 0 | (e | 0) == 0) {
				i = h;
				return
			}
			if (g >>> 0 > 256) {
				if ((HEAP8[e + 25 >> 0] | 0) == 3)
					Eg(d, 6064);
				k = HEAP32[d + 172 >> 2] | 0;
				if (!k) {
					l = HEAP32[p >> 2] | 0;
					HEAP32[j >> 2] = 6064;
					Qb(l | 0, 7576, j | 0) | 0;
					ec(10, l | 0) | 0;
					i = h;
					return
				} else {
					rc[k & 127](d, 6064);
					i = h;
					return
				}
			}
			k = (g | 0) > 0;
			do
				if (!(k & (f | 0) == 0)) {
					if ((g | 0) == 0 ? (HEAP32[d + 708 >> 2] & 1 | 0) == 0 : 0)
						break;
					l = e + 232 | 0;
					j = HEAP32[l >> 2] | 0;
					if (!(j & 4096))
						m = j;
					else {
						j = e + 16 | 0;
						n = HEAP32[j >> 2] | 0;
						do
							if (n) {
								o = HEAP32[d + 724 >> 2] | 0;
								if (!o) {
									wx(n);
									break
								} else {
									rc[o & 127](d, n);
									break
								}
							}
						while (0);
						HEAP32[j >> 2] = 0;
						n = e + 8 | 0;
						HEAP32[n >> 2] = HEAP32[n >> 2] & -9;
						HEAP16[e + 20 >> 1] = 0;
						m = HEAP32[l >> 2] | 0
					}
					HEAP32[l >> 2] = m & -4097;
					n = HEAP32[d + 720 >> 2] | 0;
					if (!n)
						q = vx(768) | 0;
					else
						q = Cc[n & 31](d, 768) | 0;
					if (!q)
						Eg(d, 3264);
					sy(q | 0, 0, 768) | 0;
					n = d + 416 | 0;
					HEAP32[n >> 2] = q;
					if (k) {
						qy(q | 0, f | 0, g * 3 | 0) | 0;
						r = HEAP32[n >> 2] | 0
					} else
						r = q;
					HEAP32[e + 16 >> 2] = r;
					n = g & 65535;
					HEAP16[d + 420 >> 1] = n;
					HEAP16[e + 20 >> 1] = n;
					n = e + 232 | 0;
					HEAP32[n >> 2] = HEAP32[n >> 2] | 4096;
					n = e + 8 | 0;
					HEAP32[n >> 2] = HEAP32[n >> 2] | 8;
					i = h;
					return
				}
			while (0);
			Ng(d, 6088, 2);
			i = h;
			return
		}
		function ii(b, d, e, f) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0;
			g = i;
			i = i + 16 | 0;
			h = g;
			if ((b | 0) == 0 | (d | 0) == 0 | (f | 0) < 1 | (e | 0) == 0) {
				i = g;
				return
			}
			j = d + 244 | 0;
			k = HEAP32[j >> 2] | 0;
			l = d + 248 | 0;
			m = HEAP32[l >> 2] | 0;
			if ((m | 0) < 0)
				Eg(b, 3232);
			n = (m | 0) > 0;
			if ((k | 0) == 0 & n)
				Eg(b, 3232);
			if (((2147483647 - m | 0) >= (f | 0) ? (o = m + f | 0, o >>> 0 <= 268435455) : 0) ? (q = o << 4, (q | 0) != 0) : 0) {
				o = HEAP32[b + 720 >> 2] | 0;
				if (!o)
					r = vx(q) | 0;
				else
					r = Cc[o & 31](b, q) | 0;
				if (r) {
					q = m << 4;
					if (n)
						qy(r | 0, k | 0, q | 0) | 0;
					sy(r + q | 0, 0, f << 4 | 0) | 0;
					q = HEAP32[j >> 2] | 0;
					do
						if (q) {
							k = HEAP32[b + 724 >> 2] | 0;
							if (!k) {
								wx(q);
								break
							} else {
								rc[k & 127](b, q);
								break
							}
						}
					while (0);
					HEAP32[j >> 2] = r;
					j = d + 232 | 0;
					HEAP32[j >> 2] = HEAP32[j >> 2] | 32;
					j = b + 212 | 0;
					q = b + 172 | 0;
					k = HEAP32[p >> 2] | 0;
					n = d + 8 | 0;
					d = b + 720 | 0;
					m = e;
					e = f;
					f = r + (HEAP32[l >> 2] << 4) | 0;
					a: while (1) {
						r = HEAP32[m >> 2] | 0;
						if ((r | 0) != 0 ? (o = m + 8 | 0, (HEAP32[o >> 2] | 0) != 0) : 0) {
							HEAP8[f + 4 >> 0] = HEAP8[m + 4 >> 0] | 0;
							s = (py(r | 0) | 0) + 1 | 0;
							if (!s) {
								t = 28;
								break
							}
							r = HEAP32[d >> 2] | 0;
							if (!r)
								u = vx(s) | 0;
							else
								u = Cc[r & 31](b, s) | 0;
							HEAP32[f >> 2] = u;
							if (!u)
								break;
							qy(u | 0, HEAP32[m >> 2] | 0, s | 0) | 0;
							s = m + 12 | 0;
							r = HEAP32[s >> 2] | 0;
							if ((r | 0) < 1) {
								t = 34;
								break
							}
							if (r >>> 0 > 429496729) {
								t = 40;
								break
							}
							v = r * 10 | 0;
							if (!v) {
								t = 40;
								break
							}
							r = HEAP32[d >> 2] | 0;
							if (!r)
								w = vx(v) | 0;
							else
								w = Cc[r & 31](b, v) | 0;
							HEAP32[f + 8 >> 2] = w;
							if (!w) {
								t = 42;
								break
							}
							HEAP32[f + 12 >> 2] = HEAP32[s >> 2];
							qy(w | 0, HEAP32[o >> 2] | 0, (HEAP32[s >> 2] | 0) * 10 | 0) | 0;
							HEAP32[n >> 2] = HEAP32[n >> 2] | 8192;
							HEAP32[l >> 2] = (HEAP32[l >> 2] | 0) + 1;
							x = f + 16 | 0
						} else
							t = 22;
						do
							if ((t | 0) == 22) {
								t = 0;
								if (!(HEAP32[j >> 2] & 4194304)) {
									t = 26;
									break a
								}
								s = HEAP32[q >> 2] | 0;
								if (!s) {
									HEAP32[h >> 2] = 6280;
									Qb(k | 0, 7576, h | 0) | 0;
									ec(10, k | 0) | 0;
									x = f;
									break
								} else {
									rc[s & 127](b, 6280);
									x = f;
									break
								}
							}
						while (0);
						s = e + -1 | 0;
						if (!s) {
							t = 50;
							break
						} else {
							m = m + 16 | 0;
							e = s;
							f = x
						}
					}
					if ((t | 0) == 26)
						Eg(b, 6280);
					else if ((t | 0) == 28)
						HEAP32[f >> 2] = 0;
					else if ((t | 0) == 34)
						Eg(b, 3200);
					else if ((t | 0) == 40) {
						HEAP32[f + 8 >> 2] = 0;
						t = 42
					} else if ((t | 0) == 50) {
						i = g;
						return
					}
					do
						if ((t | 0) == 42 ? (x = HEAP32[f >> 2] | 0, (x | 0) != 0) : 0) {
							m = HEAP32[b + 724 >> 2] | 0;
							if (!m) {
								wx(x);
								break
							} else {
								rc[m & 127](b, x);
								break
							}
						}
					while (0);
					if ((e | 0) <= 0) {
						i = g;
						return
					}
					Ng(b, 6312, 1);
					i = g;
					return
				}
			}
			Ng(b, 6256, 1);
			i = g;
			return
		}
		function ji(f, g, h, j, k) {
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			k = k | 0;
			var l = 0,
			m = 0,
			n = 0,
			o = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0;
			l = i;
			i = i + 16 | 0;
			m = l;
			if ((f | 0) == 0 | (g | 0) == 0) {
				i = l;
				return
			}
			if (h) {
				n = g + 232 | 0;
				o = HEAP32[n >> 2] | 0;
				if (!(o & 8192))
					q = o;
				else {
					o = g + 156 | 0;
					r = HEAP32[o >> 2] | 0;
					do
						if (r) {
							s = HEAP32[f + 724 >> 2] | 0;
							if (!s) {
								wx(r);
								break
							} else {
								rc[s & 127](f, r);
								break
							}
						}
					while (0);
					HEAP32[o >> 2] = 0;
					o = g + 8 | 0;
					HEAP32[o >> 2] = HEAP32[o >> 2] & -17;
					q = HEAP32[n >> 2] | 0
				}
				HEAP32[n >> 2] = q & -8193;
				q = HEAP32[f + 720 >> 2] | 0;
				if (!q)
					t = vx(256) | 0;
				else
					t = Cc[q & 31](f, 256) | 0;
				if (!t)
					Eg(f, 3264);
				HEAP32[g + 156 >> 2] = t;
				HEAP32[f + 528 >> 2] = t;
				if ((j + -1 | 0) >>> 0 < 256)
					qy(t | 0, h | 0, j | 0) | 0
			}
			if (!k) {
				HEAP16[g + 22 >> 1] = j;
				if (!j) {
					i = l;
					return
				}
			} else {
				h = 1 << (HEAPU8[g + 24 >> 0] | 0);
				t = HEAP8[g + 25 >> 0] | 0;
				if (!(t << 24 >> 24)) {
					if ((HEAPU16[k + 8 >> 1] | 0 | 0) > (h | 0))
						u = 22
				} else if (t << 24 >> 24 == 2)
					if (!(((HEAPU16[k + 2 >> 1] | 0 | 0) <= (h | 0) ? (HEAPU16[k + 4 >> 1] | 0 | 0) <= (h | 0) : 0) ? (HEAPU16[k + 6 >> 1] | 0 | 0) <= (h | 0) : 0))
						u = 22;
				do
					if ((u | 0) == 22) {
						h = HEAP32[f + 172 >> 2] | 0;
						if (!h) {
							t = HEAP32[p >> 2] | 0;
							HEAP32[m >> 2] = 6200;
							Qb(t | 0, 7576, m | 0) | 0;
							ec(10, t | 0) | 0;
							break
						} else {
							rc[h & 127](f, 6200);
							break
						}
					}
				while (0);
				f = g + 160 | 0;
				HEAP16[f + 0 >> 1] = HEAP16[k + 0 >> 1] | 0;
				HEAP16[f + 2 >> 1] = HEAP16[k + 2 >> 1] | 0;
				HEAP16[f + 4 >> 1] = HEAP16[k + 4 >> 1] | 0;
				HEAP16[f + 6 >> 1] = HEAP16[k + 6 >> 1] | 0;
				HEAP16[f + 8 >> 1] = HEAP16[k + 8 >> 1] | 0;
				HEAP16[g + 22 >> 1] = (j | 0) == 0 ? 1 : j & 65535
			}
			j = g + 8 | 0;
			HEAP32[j >> 2] = HEAP32[j >> 2] | 16;
			j = g + 232 | 0;
			HEAP32[j >> 2] = HEAP32[j >> 2] | 8192;
			i = l;
			return
		}
		function ki(a, d, f) {
			a = a | 0;
			d = d | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			q = 0;
			g = i;
			i = i + 16 | 0;
			h = g;
			if ((a | 0) == 0 | (d | 0) == 0) {
				i = g;
				return
			}
			j = d + 20 | 0;
			if (((HEAP16[j >> 1] | 0) + -1 << 16 >> 16 & 65535) > 255) {
				k = HEAP32[a + 172 >> 2] | 0;
				if (!k) {
					l = HEAP32[p >> 2] | 0;
					HEAP32[h >> 2] = 5592;
					Qb(l | 0, 7576, h | 0) | 0;
					ec(10, l | 0) | 0;
					i = g;
					return
				} else {
					rc[k & 127](a, 5592);
					i = g;
					return
				}
			}
			k = d + 232 | 0;
			l = HEAP32[k >> 2] | 0;
			if (!(l & 8))
				m = l;
			else {
				l = d + 204 | 0;
				n = HEAP32[l >> 2] | 0;
				do
					if (n) {
						o = HEAP32[a + 724 >> 2] | 0;
						if (!o) {
							wx(n);
							break
						} else {
							rc[o & 127](a, n);
							break
						}
					}
				while (0);
				HEAP32[l >> 2] = 0;
				l = d + 8 | 0;
				HEAP32[l >> 2] = HEAP32[l >> 2] & -65;
				m = HEAP32[k >> 2] | 0
			}
			HEAP32[k >> 2] = m & -9;
			m = HEAP32[a + 720 >> 2] | 0;
			if (!m)
				q = vx(512) | 0;
			else
				q = Cc[m & 31](a, 512) | 0;
			if (q) {
				HEAP32[d + 204 >> 2] = q;
				HEAP32[k >> 2] = HEAP32[k >> 2] | 8;
				if (HEAP16[j >> 1] | 0) {
					k = 0;
					do {
						HEAP16[q + (k << 1) >> 1] = HEAP16[f + (k << 1) >> 1] | 0;
						k = k + 1 | 0
					} while ((k | 0) < (HEAPU16[j >> 1] | 0))
				}
				j = d + 8 | 0;
				HEAP32[j >> 2] = HEAP32[j >> 2] | 64;
				i = g;
				return
			}
			j = a + 172 | 0;
			k = HEAP32[j >> 2] | 0;
			if (!k) {
				f = HEAP32[p >> 2] | 0;
				HEAP32[h >> 2] = 3264;
				Qb(f | 0, 7576, h | 0) | 0;
				ec(10, f | 0) | 0
			} else
				rc[k & 127](a, 3264);
			HEAP32[d + 204 >> 2] = 0;
			d = HEAP32[j >> 2] | 0;
			if (!d) {
				j = HEAP32[p >> 2] | 0;
				HEAP32[h >> 2] = 5640;
				Qb(j | 0, 7576, h | 0) | 0;
				ec(10, j | 0) | 0;
				i = g;
				return
			} else {
				rc[d & 127](a, 5640);
				i = g;
				return
			}
		}
		function li(b, d, e, f, g, h, j, k, l) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			k = k | 0;
			l = l | 0;
			var m = 0,
			n = 0,
			o = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0;
			m = i;
			i = i + 16 | 0;
			n = m;
			o = m + 4 | 0;
			if ((b | 0) == 0 | (d | 0) == 0 | (e | 0) == 0 | (k | 0) == 0) {
				i = m;
				return
			}
			q = (j | 0) > 0;
			if (q & (l | 0) == 0) {
				i = m;
				return
			}
			r = (py(e | 0) | 0) + 1 | 0;
			if (h >>> 0 > 3)
				Eg(b, 5680);
			if (j >>> 0 > 255)
				Eg(b, 5712);
			a: do
				if (q) {
					s = 0;
					while (1) {
						t = HEAP32[l + (s << 2) >> 2] | 0;
						if (!t) {
							u = 15;
							break
						}
						v = py(t | 0) | 0;
						HEAP32[n >> 2] = 0;
						HEAP32[o >> 2] = 0;
						if (!(Wg(t, v, n, o) | 0)) {
							u = 15;
							break
						}
						w = HEAP32[o >> 2] | 0;
						if ((w | 0) != (v | 0) ? (HEAP8[t + w >> 0] | 0) != 0 : 0) {
							u = 15;
							break
						}
						s = s + 1 | 0;
						if (!(HEAP32[n >> 2] | 0)) {
							u = 15;
							break
						}
						if ((s | 0) >= (j | 0))
							break a
					}
					if ((u | 0) == 15)
						Eg(b, 5744)
				}
			while (0);
			if (r) {
				o = b + 720 | 0;
				s = HEAP32[o >> 2] | 0;
				if (!s)
					x = vx(r) | 0;
				else
					x = Cc[s & 31](b, r) | 0;
				if (x) {
					HEAP32[d + 208 >> 2] = x;
					qy(x | 0, e | 0, r | 0) | 0;
					HEAP32[d + 212 >> 2] = f;
					HEAP32[d + 216 >> 2] = g;
					HEAP8[d + 228 >> 0] = h;
					HEAP8[d + 229 >> 0] = j;
					h = (py(k | 0) | 0) + 1 | 0;
					if (h) {
						g = HEAP32[o >> 2] | 0;
						if (!g)
							y = vx(h) | 0;
						else
							y = Cc[g & 31](b, h) | 0;
						if (y) {
							HEAP32[d + 220 >> 2] = y;
							qy(y | 0, k | 0, h | 0) | 0;
							h = (j << 2) + 4 | 0;
							if (h) {
								k = HEAP32[o >> 2] | 0;
								if (!k)
									z = vx(h) | 0;
								else
									z = Cc[k & 31](b, h) | 0;
								if (z) {
									k = d + 224 | 0;
									HEAP32[k >> 2] = z;
									sy(z | 0, 0, h | 0) | 0;
									b: do
										if (q) {
											h = b + 172 | 0;
											z = HEAP32[p >> 2] | 0;
											y = 0;
											while (1) {
												g = l + (y << 2) | 0;
												f = (py(HEAP32[g >> 2] | 0) | 0) + 1 | 0;
												if (f) {
													r = HEAP32[o >> 2] | 0;
													if (!r)
														A = vx(f) | 0;
													else
														A = Cc[r & 31](b, f) | 0;
													if (A)
														B = A;
													else
														u = 56
												} else
													u = 56;
												do
													if ((u | 0) == 56) {
														u = 0;
														r = HEAP32[h >> 2] | 0;
														if (!r) {
															HEAP32[n >> 2] = 3264;
															Qb(z | 0, 7576, n | 0) | 0;
															ec(10, z | 0) | 0;
															B = 0;
															break
														} else {
															rc[r & 127](b, 3264);
															B = 0;
															break
														}
													}
												while (0);
												c[(HEAP32[k >> 2] | 0) + (y << 2) >> 2] = B;
												r = HEAP32[(HEAP32[k >> 2] | 0) + (y << 2) >> 2] | 0;
												if (!r)
													break;
												qy(r | 0, HEAP32[g >> 2] | 0, f | 0) | 0;
												y = y + 1 | 0;
												if ((y | 0) >= (j | 0))
													break b
											}
											y = HEAP32[h >> 2] | 0;
											if (!y) {
												HEAP32[n >> 2] = 5904;
												Qb(z | 0, 7576, n | 0) | 0;
												ec(10, z | 0) | 0;
												i = m;
												return
											} else {
												rc[y & 127](b, 5904);
												i = m;
												return
											}
										}
									while (0);
									j = d + 8 | 0;
									HEAP32[j >> 2] = HEAP32[j >> 2] | 1024;
									j = d + 232 | 0;
									HEAP32[j >> 2] = HEAP32[j >> 2] | 128;
									i = m;
									return
								}
							}
							j = b + 172 | 0;
							k = HEAP32[j >> 2] | 0;
							if (!k) {
								B = HEAP32[p >> 2] | 0;
								HEAP32[n >> 2] = 3264;
								Qb(B | 0, 7576, n | 0) | 0;
								ec(10, B | 0) | 0
							} else
								rc[k & 127](b, 3264);
							HEAP32[d + 224 >> 2] = 0;
							k = HEAP32[j >> 2] | 0;
							if (!k) {
								j = HEAP32[p >> 2] | 0;
								HEAP32[n >> 2] = 5864;
								Qb(j | 0, 7576, n | 0) | 0;
								ec(10, j | 0) | 0;
								i = m;
								return
							} else {
								rc[k & 127](b, 5864);
								i = m;
								return
							}
						}
					}
					k = b + 172 | 0;
					j = HEAP32[k >> 2] | 0;
					if (!j) {
						B = HEAP32[p >> 2] | 0;
						HEAP32[n >> 2] = 3264;
						Qb(B | 0, 7576, n | 0) | 0;
						ec(10, B | 0) | 0
					} else
						rc[j & 127](b, 3264);
					HEAP32[d + 220 >> 2] = 0;
					j = HEAP32[k >> 2] | 0;
					if (!j) {
						k = HEAP32[p >> 2] | 0;
						HEAP32[n >> 2] = 5824;
						Qb(k | 0, 7576, n | 0) | 0;
						ec(10, k | 0) | 0;
						i = m;
						return
					} else {
						rc[j & 127](b, 5824);
						i = m;
						return
					}
				}
			}
			j = b + 172 | 0;
			k = HEAP32[j >> 2] | 0;
			if (!k) {
				B = HEAP32[p >> 2] | 0;
				HEAP32[n >> 2] = 3264;
				Qb(B | 0, 7576, n | 0) | 0;
				ec(10, B | 0) | 0
			} else
				rc[k & 127](b, 3264);
			HEAP32[d + 208 >> 2] = 0;
			d = HEAP32[j >> 2] | 0;
			if (!d) {
				j = HEAP32[p >> 2] | 0;
				HEAP32[n >> 2] = 5784;
				Qb(j | 0, 7576, n | 0) | 0;
				ec(10, j | 0) | 0;
				i = m;
				return
			} else {
				rc[d & 127](b, 5784);
				i = m;
				return
			}
		}
		function mi(b, d, e, f, g) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			q = 0;
			h = i;
			i = i + 16 | 0;
			j = h;
			k = h + 4 | 0;
			if ((b | 0) == 0 | (d | 0) == 0) {
				i = h;
				return
			}
			if ((e + -1 | 0) >>> 0 > 1)
				Eg(b, 5944);
			if (!f)
				Eg(b, 5968);
			l = py(f | 0) | 0;
			if (!l)
				Eg(b, 5968);
			if ((HEAP8[f >> 0] | 0) == 45)
				Eg(b, 5968);
			HEAP32[j >> 2] = 0;
			HEAP32[k >> 2] = 0;
			if (!(Wg(f, l, j, k) | 0))
				Eg(b, 5968);
			m = HEAP32[k >> 2] | 0;
			if ((m | 0) != (l | 0) ? (HEAP8[f + m >> 0] | 0) != 0 : 0)
				Eg(b, 5968);
			if (!(HEAP32[j >> 2] | 0))
				Eg(b, 5968);
			if (!g)
				Eg(b, 5992);
			m = py(g | 0) | 0;
			if (!m)
				Eg(b, 5992);
			if ((HEAP8[g >> 0] | 0) == 45)
				Eg(b, 5992);
			HEAP32[j >> 2] = 0;
			HEAP32[k >> 2] = 0;
			if (!(Wg(g, m, j, k) | 0))
				Eg(b, 5992);
			n = HEAP32[k >> 2] | 0;
			if ((n | 0) != (m | 0) ? (HEAP8[g + n >> 0] | 0) != 0 : 0)
				Eg(b, 5992);
			if (!(HEAP32[j >> 2] | 0))
				Eg(b, 5992);
			HEAP8[d + 252 >> 0] = e;
			e = l + 1 | 0;
			if (e) {
				l = b + 720 | 0;
				n = HEAP32[l >> 2] | 0;
				if (!n)
					o = vx(e) | 0;
				else
					o = Cc[n & 31](b, e) | 0;
				if (o) {
					n = d + 256 | 0;
					HEAP32[n >> 2] = o;
					qy(o | 0, f | 0, e | 0) | 0;
					e = m + 1 | 0;
					do
						if (e) {
							m = HEAP32[l >> 2] | 0;
							if (!m)
								q = vx(e) | 0;
							else
								q = Cc[m & 31](b, e) | 0;
							if (!q)
								break;
							HEAP32[d + 260 >> 2] = q;
							qy(q | 0, g | 0, e | 0) | 0;
							m = d + 8 | 0;
							HEAP32[m >> 2] = HEAP32[m >> 2] | 16384;
							m = d + 232 | 0;
							HEAP32[m >> 2] = HEAP32[m >> 2] | 256;
							i = h;
							return
						}
					while (0);
					e = b + 172 | 0;
					g = HEAP32[e >> 2] | 0;
					if (!g) {
						q = HEAP32[p >> 2] | 0;
						HEAP32[j >> 2] = 3264;
						Qb(q | 0, 7576, j | 0) | 0;
						ec(10, q | 0) | 0
					} else
						rc[g & 127](b, 3264);
					HEAP32[d + 260 >> 2] = 0;
					g = HEAP32[n >> 2] | 0;
					do
						if (g) {
							q = HEAP32[b + 724 >> 2] | 0;
							if (!q) {
								wx(g);
								break
							} else {
								rc[q & 127](b, g);
								break
							}
						}
					while (0);
					HEAP32[n >> 2] = 0;
					n = HEAP32[e >> 2] | 0;
					if (!n) {
						e = HEAP32[p >> 2] | 0;
						HEAP32[j >> 2] = 6016;
						Qb(e | 0, 7576, j | 0) | 0;
						ec(10, e | 0) | 0;
						i = h;
						return
					} else {
						rc[n & 127](b, 6016);
						i = h;
						return
					}
				}
			}
			n = b + 172 | 0;
			e = HEAP32[n >> 2] | 0;
			if (!e) {
				g = HEAP32[p >> 2] | 0;
				HEAP32[j >> 2] = 3264;
				Qb(g | 0, 7576, j | 0) | 0;
				ec(10, g | 0) | 0
			} else
				rc[e & 127](b, 3264);
			HEAP32[d + 256 >> 2] = 0;
			d = HEAP32[n >> 2] | 0;
			if (!d) {
				n = HEAP32[p >> 2] | 0;
				HEAP32[j >> 2] = 6016;
				Qb(n | 0, 7576, j | 0) | 0;
				ec(10, n | 0) | 0;
				i = h;
				return
			} else {
				rc[d & 127](b, 6016);
				i = h;
				return
			}
		}
		function ni(b, d, e, f) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0;
			g = i;
			if ((b | 0) == 0 | (d | 0) == 0 | (f | 0) < 1 | (e | 0) == 0) {
				h = 0;
				i = g;
				return h | 0
			}
			j = d + 132 | 0;
			k = d + 128 | 0;
			l = HEAP32[k >> 2] | 0;
			do
				if (((HEAP32[j >> 2] | 0) - l | 0) < (f | 0)) {
					m = 2147483647 - l | 0;
					if ((m | 0) >= (f | 0)) {
						n = l + f | 0;
						if ((n | 0) < 2147483639)
							o = n + 8 & -8;
						else
							o = 2147483647;
						n = d + 136 | 0;
						p = HEAP32[n >> 2] | 0;
						q = o - l | 0;
						if ((q | 0) < 1 | (l | 0) < 0)
							Eg(b, 3232);
						r = (l | 0) > 0;
						if ((p | 0) == 0 & r)
							Eg(b, 3232);
						if (!((m | 0) < (q | 0) | o >>> 0 > 153391689) ? (m = o * 28 | 0, (m | 0) != 0) : 0) {
							s = HEAP32[b + 720 >> 2] | 0;
							if (!s)
								t = vx(m) | 0;
							else
								t = Cc[s & 31](b, m) | 0;
							if (t) {
								m = l * 28 | 0;
								if (r)
									qy(t | 0, p | 0, m | 0) | 0;
								sy(t + m | 0, 0, q * 28 | 0) | 0;
								q = HEAP32[n >> 2] | 0;
								do
									if (q) {
										m = HEAP32[b + 724 >> 2] | 0;
										if (!m) {
											wx(q);
											break
										} else {
											rc[m & 127](b, q);
											break
										}
									}
								while (0);
								HEAP32[n >> 2] = t;
								q = d + 232 | 0;
								HEAP32[q >> 2] = HEAP32[q >> 2] | 16384;
								HEAP32[j >> 2] = o;
								break
							}
						}
					}
					Ng(b, 6104, 1);
					h = 1;
					i = g;
					return h | 0
				}
			while (0);
			if ((f | 0) <= 0) {
				h = 0;
				i = g;
				return h | 0
			}
			o = d + 136 | 0;
			d = b + 720 | 0;
			j = 0;
			a: while (1) {
				u = HEAP32[k >> 2] | 0;
				v = HEAP32[o >> 2] | 0;
				t = v + (u * 28 | 0) | 0;
				l = e + (j * 28 | 0) + 4 | 0;
				q = HEAP32[l >> 2] | 0;
				do
					if (q) {
						m = e + (j * 28 | 0) | 0;
						p = HEAP32[m >> 2] | 0;
						if ((p + 1 | 0) >>> 0 > 3) {
							Ng(b, 6128, 1);
							break
						}
						r = py(q | 0) | 0;
						if ((p | 0) >= 1) {
							s = HEAP32[e + (j * 28 | 0) + 20 >> 2] | 0;
							if (!s)
								w = 0;
							else
								w = py(s | 0) | 0;
							s = HEAP32[e + (j * 28 | 0) + 24 >> 2] | 0;
							if (!s) {
								x = 0;
								y = w
							} else {
								x = py(s | 0) | 0;
								y = w
							}
						} else {
							x = 0;
							y = 0
						}
						s = e + (j * 28 | 0) + 8 | 0;
						z = HEAP32[s >> 2] | 0;
						if ((z | 0) != 0 ? (HEAP8[z >> 0] | 0) != 0 : 0) {
							A = py(z | 0) | 0;
							HEAP32[t >> 2] = p;
							B = A
						} else
							C = 35;
						do
							if ((C | 0) == 35) {
								C = 0;
								if ((p | 0) > 0) {
									HEAP32[t >> 2] = 1;
									B = 0;
									break
								} else {
									HEAP32[t >> 2] = -1;
									B = 0;
									break
								}
							}
						while (0);
						p = r + 4 + y + x + B | 0;
						if (!p) {
							C = 40;
							break a
						}
						A = HEAP32[d >> 2] | 0;
						if (!A)
							D = vx(p) | 0;
						else
							D = Cc[A & 31](b, p) | 0;
						p = v + (u * 28 | 0) + 4 | 0;
						HEAP32[p >> 2] = D;
						if (!D)
							break a;
						qy(D | 0, HEAP32[l >> 2] | 0, r | 0) | 0;
						a[(HEAP32[p >> 2] | 0) + r >> 0] = 0;
						if ((HEAP32[m >> 2] | 0) > 0) {
							A = (HEAP32[p >> 2] | 0) + (r + 1) | 0;
							z = v + (u * 28 | 0) + 20 | 0;
							HEAP32[z >> 2] = A;
							qy(A | 0, HEAP32[e + (j * 28 | 0) + 20 >> 2] | 0, y | 0) | 0;
							a[(HEAP32[z >> 2] | 0) + y >> 0] = 0;
							A = (HEAP32[z >> 2] | 0) + (y + 1) | 0;
							z = v + (u * 28 | 0) + 24 | 0;
							HEAP32[z >> 2] = A;
							qy(A | 0, HEAP32[e + (j * 28 | 0) + 24 >> 2] | 0, x | 0) | 0;
							a[(HEAP32[z >> 2] | 0) + x >> 0] = 0;
							A = (HEAP32[z >> 2] | 0) + (x + 1) | 0;
							HEAP32[v + (u * 28 | 0) + 8 >> 2] = A;
							E = A
						} else {
							HEAP32[v + (u * 28 | 0) + 20 >> 2] = 0;
							HEAP32[v + (u * 28 | 0) + 24 >> 2] = 0;
							A = (HEAP32[p >> 2] | 0) + (r + 1) | 0;
							HEAP32[v + (u * 28 | 0) + 8 >> 2] = A;
							E = A
						}
						if (!B)
							F = E;
						else {
							qy(E | 0, HEAP32[s >> 2] | 0, B | 0) | 0;
							F = HEAP32[v + (u * 28 | 0) + 8 >> 2] | 0
						}
						HEAP8[F + B >> 0] = 0;
						A = v + (u * 28 | 0) + 12 | 0;
						if ((HEAP32[t >> 2] | 0) > 0) {
							HEAP32[A >> 2] = 0;
							HEAP32[v + (u * 28 | 0) + 16 >> 2] = B
						} else {
							HEAP32[A >> 2] = B;
							HEAP32[v + (u * 28 | 0) + 16 >> 2] = 0
						}
						HEAP32[k >> 2] = (HEAP32[k >> 2] | 0) + 1
					}
				while (0);
				j = j + 1 | 0;
				if ((j | 0) >= (f | 0)) {
					h = 0;
					C = 56;
					break
				}
			}
			if ((C | 0) == 40)
				HEAP32[v + (u * 28 | 0) + 4 >> 2] = 0;
			else if ((C | 0) == 56) {
				i = g;
				return h | 0
			}
			Ng(b, 6168, 1);
			h = 1;
			i = g;
			return h | 0
		}
		function oi(b, e, f, g) {
			b = b | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0;
			h = i;
			i = i + 16 | 0;
			j = h;
			if ((b | 0) == 0 | (e | 0) == 0 | (g | 0) < 1 | (f | 0) == 0) {
				i = h;
				return
			}
			k = e + 236 | 0;
			l = HEAP32[k >> 2] | 0;
			m = e + 240 | 0;
			n = HEAP32[m >> 2] | 0;
			if ((n | 0) < 0)
				Eg(b, 3232);
			o = (n | 0) > 0;
			if ((l | 0) == 0 & o)
				Eg(b, 3232);
			if (((2147483647 - n | 0) >= (g | 0) ? (q = n + g | 0, q >>> 0 <= 214748364) : 0) ? (r = q * 20 | 0, (r | 0) != 0) : 0) {
				q = HEAP32[b + 720 >> 2] | 0;
				if (!q)
					s = vx(r) | 0;
				else
					s = Cc[q & 31](b, r) | 0;
				if (s) {
					r = n * 20 | 0;
					if (o)
						qy(s | 0, l | 0, r | 0) | 0;
					sy(s + r | 0, 0, g * 20 | 0) | 0;
					r = HEAP32[k >> 2] | 0;
					do
						if (r) {
							l = HEAP32[b + 724 >> 2] | 0;
							if (!l) {
								wx(r);
								break
							} else {
								rc[l & 127](b, r);
								break
							}
						}
					while (0);
					HEAP32[k >> 2] = s;
					k = e + 232 | 0;
					HEAP32[k >> 2] = HEAP32[k >> 2] | 512;
					if ((g | 0) <= 0) {
						i = h;
						return
					}
					k = b + 208 | 0;
					e = b + 212 | 0;
					r = b + 172 | 0;
					l = HEAP32[p >> 2] | 0;
					o = b + 720 | 0;
					n = g;
					g = f;
					f = s + ((HEAP32[m >> 2] | 0) * 20 | 0) | 0;
					while (1) {
						s = HEAPU8[g >> 0] | HEAPU8[g + 1 >> 0] << 8 | HEAPU8[g + 2 >> 0] << 16 | HEAPU8[g + 3 >> 0] << 24;
						HEAP8[f >> 0] = s;
						HEAP8[f + 1 >> 0] = s >> 8;
						HEAP8[f + 2 >> 0] = s >> 16;
						HEAP8[f + 3 >> 0] = s >> 24;
						HEAP8[f + 4 >> 0] = 0;
						s = (HEAPU8[g + 16 >> 0] | 0) & 11;
						if (!s) {
							if (HEAP32[k >> 2] & 32768) {
								t = 29;
								break
							}
							if (!(HEAP32[e >> 2] & 2097152)) {
								t = 27;
								break
							}
							q = HEAP32[r >> 2] | 0;
							if (!q) {
								HEAP32[j >> 2] = 7304;
								Qb(l | 0, 7576, j | 0) | 0;
								ec(10, l | 0) | 0
							} else
								rc[q & 127](b, 7304);
							q = HEAP32[k >> 2] & 11;
							if (!q) {
								t = 29;
								break
							} else
								u = q
						} else
							u = s;
						while (1) {
							s = u & 0 - u;
							if ((u | 0) == (s | 0))
								break;
							else
								u = s ^ u
						}
						HEAP8[f + 16 >> 0] = u;
						s = g + 12 | 0;
						q = HEAP32[s >> 2] | 0;
						do
							if (q) {
								v = HEAP32[o >> 2] | 0;
								if (!v)
									w = vx(q) | 0;
								else
									w = Cc[v & 31](b, q) | 0;
								HEAP32[f + 8 >> 2] = w;
								if (!w) {
									Ng(b, 6360, 1);
									x = f;
									break
								} else {
									qy(w | 0, HEAP32[g + 8 >> 2] | 0, HEAP32[s >> 2] | 0) | 0;
									HEAP32[f + 12 >> 2] = HEAP32[s >> 2];
									t = 39;
									break
								}
							} else {
								HEAP32[f + 8 >> 2] = 0;
								HEAP32[f + 12 >> 2] = 0;
								t = 39
							}
						while (0);
						if ((t | 0) == 39) {
							t = 0;
							HEAP32[m >> 2] = (HEAP32[m >> 2] | 0) + 1;
							x = f + 20 | 0
						}
						n = n + -1 | 0;
						if ((n | 0) <= 0) {
							t = 41;
							break
						} else {
							g = g + 20 | 0;
							f = x
						}
					}
					if ((t | 0) == 27)
						Eg(b, 7304);
					else if ((t | 0) == 29)
						Eg(b, 7360);
					else if ((t | 0) == 41) {
						i = h;
						return
					}
				}
			}
			Ng(b, 6336, 1);
			i = h;
			return
		}
		function pi(b) {
			b = b | 0;
			var e = 0,
			f = 0;
			e = i;
			if (!b) {
				i = e;
				return
			}
			if ((HEAPU8[b + 436 >> 0] | 0) >= 8) {
				i = e;
				return
			}
			f = b + 216 | 0;
			HEAP32[f >> 2] = HEAP32[f >> 2] | 4;
			HEAP8[b + 437 >> 0] = 8;
			i = e;
			return
		}
		function qi(e, f, g) {
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0,
			k = 0,
			l = 0;
			h = i;
			i = i + 16 | 0;
			j = h;
			if (!e) {
				i = h;
				return
			}
			do
				if (!(HEAP32[e + 208 >> 2] & 32768)) {
					k = HEAPU8[e + 435 >> 0] | 0;
					if ((k | 0) == 2) {
						HEAP8[e + 440 >> 0] = 4;
						break
					} else if (!k) {
						if ((HEAPU8[e + 436 >> 0] | 0) > 7) {
							HEAP8[e + 440 >> 0] = 2;
							break
						}
						if (!(HEAP32[e + 212 >> 2] & 4194304))
							Eg(e, 6392);
						k = HEAP32[e + 172 >> 2] | 0;
						if (!k) {
							l = HEAP32[p >> 2] | 0;
							HEAP32[j >> 2] = 6392;
							Qb(l | 0, 7576, j | 0) | 0;
							ec(10, l | 0) | 0;
							i = h;
							return
						} else {
							rc[k & 127](e, 6392);
							i = h;
							return
						}
					} else {
						if (!(HEAP32[e + 212 >> 2] & 4194304))
							Eg(e, 6448);
						k = HEAP32[e + 172 >> 2] | 0;
						if (!k) {
							l = HEAP32[p >> 2] | 0;
							HEAP32[j >> 2] = 6448;
							Qb(l | 0, 7576, j | 0) | 0;
							ec(10, l | 0) | 0;
							i = h;
							return
						} else {
							rc[k & 127](e, 6448);
							i = h;
							return
						}
					}
				} else
					HEAP16[e + 444 >> 1] = f;
			while (0);
			f = e + 216 | 0;
			HEAP32[f >> 2] = HEAP32[f >> 2] | 32768;
			f = e + 212 | 0;
			e = HEAP32[f >> 2] | 0;
			if ((g | 0) == 1) {
				HEAP32[f >> 2] = e | 128;
				i = h;
				return
			} else {
				HEAP32[f >> 2] = e & -129;
				i = h;
				return
			}
		}
		function ri(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0.0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0.0,
			N = 0,
			O = 0.0,
			P = 0,
			Q = 0,
			S = 0,
			T = 0,
			U = 0,
			V = 0,
			W = 0,
			X = 0,
			Y = 0,
			Z = 0,
			_ = 0;
			d = i;
			i = i + 32 | 0;
			e = d;
			f = HEAP32[b >> 2] | 0;
			if (f >>> 0 > 1e5) {
				g = 1;
				i = d;
				return g | 0
			}
			h = b + 4 | 0;
			j = HEAP32[h >> 2] | 0;
			if ((j | 0) < 0 | (j | 0) > (1e5 - f | 0)) {
				g = 1;
				i = d;
				return g | 0
			}
			k = b + 8 | 0;
			l = HEAP32[k >> 2] | 0;
			if (l >>> 0 > 1e5) {
				g = 1;
				i = d;
				return g | 0
			}
			m = b + 12 | 0;
			n = HEAP32[m >> 2] | 0;
			if ((n | 0) < 0 | (n | 0) > (1e5 - l | 0)) {
				g = 1;
				i = d;
				return g | 0
			}
			o = b + 16 | 0;
			p = HEAP32[o >> 2] | 0;
			if (p >>> 0 > 1e5) {
				g = 1;
				i = d;
				return g | 0
			}
			q = b + 20 | 0;
			r = HEAP32[q >> 2] | 0;
			if ((r | 0) < 0 | (r | 0) > (1e5 - p | 0)) {
				g = 1;
				i = d;
				return g | 0
			}
			s = b + 24 | 0;
			t = HEAP32[s >> 2] | 0;
			if (t >>> 0 > 1e5) {
				g = 1;
				i = d;
				return g | 0
			}
			u = b + 28 | 0;
			v = HEAP32[u >> 2] | 0;
			if ((v | 0) < 0 | (v | 0) > (1e5 - t | 0)) {
				g = 1;
				i = d;
				return g | 0
			}
			w = (l | 0) == (p | 0);
			x = (j | 0) == (r | 0);
			do
				if (!(w | x)) {
					y = +R( + ( + (l - p | 0) *  + (j - r | 0) / 7.0 + .5));
					if (y <= 2147483647.0 & y >= -2147483648.0) {
						z = ~~y;
						break
					} else {
						g = 2;
						i = d;
						return g | 0
					}
				} else
					z = 0;
			while (0);
			A = (n | 0) == (r | 0);
			B = (f | 0) == (p | 0);
			do
				if (!(A | B)) {
					y = +R( + ( + (f - p | 0) *  + (n - r | 0) / 7.0 + .5));
					if (y <= 2147483647.0 & y >= -2147483648.0) {
						C = ~~y;
						break
					} else {
						g = 2;
						i = d;
						return g | 0
					}
				} else
					C = 0;
			while (0);
			D = z - C | 0;
			E = (v | 0) == (r | 0);
			do
				if (!(w | E)) {
					y = +R( + ( + (l - p | 0) *  + (v - r | 0) / 7.0 + .5));
					if (y <= 2147483647.0 & y >= -2147483648.0) {
						F = ~~y;
						break
					} else {
						g = 2;
						i = d;
						return g | 0
					}
				} else
					F = 0;
			while (0);
			l = (t | 0) == (p | 0);
			do
				if (!(A | l)) {
					y = +R( + ( + (n - r | 0) *  + (t - p | 0) / 7.0 + .5));
					if (y <= 2147483647.0 & y >= -2147483648.0) {
						G = ~~y;
						break
					} else {
						g = 2;
						i = d;
						return g | 0
					}
				} else
					G = 0;
			while (0);
			if ((F | 0) == (G | 0)) {
				g = 1;
				i = d;
				return g | 0
			}
			n = (v | 0) == 0 | (z | 0) == (C | 0);
			do
				if (!n) {
					y = +R( + ( + (v | 0) *  + (D | 0) /  + (F - G | 0) + .5));
					if (y <= 2147483647.0 & y >= -2147483648.0) {
						H = ~~y;
						break
					} else {
						g = 1;
						i = d;
						return g | 0
					}
				} else
					H = 0;
			while (0);
			if ((H | 0) <= (v | 0)) {
				g = 1;
				i = d;
				return g | 0
			}
			do
				if (!(x | l)) {
					y = +R( + ( + (j - r | 0) *  + (t - p | 0) / 7.0 + .5));
					if (y <= 2147483647.0 & y >= -2147483648.0) {
						I = ~~y;
						break
					} else {
						g = 2;
						i = d;
						return g | 0
					}
				} else
					I = 0;
			while (0);
			do
				if (!(B | E)) {
					y = +R( + ( + (f - p | 0) *  + (v - r | 0) / 7.0 + .5));
					if (y <= 2147483647.0 & y >= -2147483648.0) {
						J = ~~y;
						break
					} else {
						g = 2;
						i = d;
						return g | 0
					}
				} else
					J = 0;
			while (0);
			if ((I | 0) == (J | 0)) {
				g = 1;
				i = d;
				return g | 0
			}
			do
				if (!n) {
					y = +R( + ( + (v | 0) *  + (D | 0) /  + (I - J | 0) + .5));
					if (y <= 2147483647.0 & y >= -2147483648.0) {
						K = ~~y;
						break
					} else {
						g = 1;
						i = d;
						return g | 0
					}
				} else
					K = 0;
			while (0);
			if ((K | 0) <= (v | 0)) {
				g = 1;
				i = d;
				return g | 0
			}
			y = +R( + (1.0e10 /  + (v | 0) + .5));
			if (y <= 2147483647.0 & y >= -2147483648.0)
				L = ~~y;
			else
				L = 0;
			y =  + (H | 0);
			M = +R( + (1.0e10 / y + .5));
			if (M <= 2147483647.0 & M >= -2147483648.0)
				N = ~~M;
			else
				N = 0;
			v = L - N | 0;
			M =  + (K | 0);
			O = +R( + (1.0e10 / M + .5));
			if (O <= 2147483647.0 & O >= -2147483648.0)
				P = ~~O;
			else
				P = 0;
			N = v - P | 0;
			if ((N | 0) < 1) {
				g = 1;
				i = d;
				return g | 0
			}
			if (!H) {
				g = 1;
				i = d;
				return g | 0
			}
			do
				if (f) {
					O = +R( + ( + (f | 0) * 1.0e5 / y + .5));
					if (O <= 2147483647.0 & O >= -2147483648.0) {
						Q = ~~O;
						break
					} else {
						g = 1;
						i = d;
						return g | 0
					}
				} else
					Q = 0;
			while (0);
			HEAP32[a >> 2] = Q;
			Q = a + 4 | 0;
			f = HEAP32[h >> 2] | 0;
			do
				if (f) {
					O = +R( + ( + (f | 0) * 1.0e5 / y + .5));
					if (O <= 2147483647.0 & O >= -2147483648.0) {
						S = ~~O;
						break
					} else {
						g = 1;
						i = d;
						return g | 0
					}
				} else
					S = 0;
			while (0);
			HEAP32[Q >> 2] = S;
			S = a + 8 | 0;
			Q = 1e5 - (HEAP32[b >> 2] | 0) | 0;
			f = HEAP32[h >> 2] | 0;
			do
				if ((Q | 0) != (f | 0)) {
					O = +R( + ( + (Q - f | 0) * 1.0e5 / y + .5));
					if (O <= 2147483647.0 & O >= -2147483648.0) {
						T = ~~O;
						break
					} else {
						g = 1;
						i = d;
						return g | 0
					}
				} else
					T = 0;
			while (0);
			HEAP32[S >> 2] = T;
			T = a + 12 | 0;
			S = HEAP32[k >> 2] | 0;
			if (!K) {
				g = 1;
				i = d;
				return g | 0
			}
			do
				if (S) {
					y = +R( + ( + (S | 0) * 1.0e5 / M + .5));
					if (y <= 2147483647.0 & y >= -2147483648.0) {
						U = ~~y;
						break
					} else {
						g = 1;
						i = d;
						return g | 0
					}
				} else
					U = 0;
			while (0);
			HEAP32[T >> 2] = U;
			U = a + 16 | 0;
			T = HEAP32[m >> 2] | 0;
			do
				if (T) {
					y = +R( + ( + (T | 0) * 1.0e5 / M + .5));
					if (y <= 2147483647.0 & y >= -2147483648.0) {
						V = ~~y;
						break
					} else {
						g = 1;
						i = d;
						return g | 0
					}
				} else
					V = 0;
			while (0);
			HEAP32[U >> 2] = V;
			V = a + 20 | 0;
			U = 1e5 - (HEAP32[k >> 2] | 0) | 0;
			T = HEAP32[m >> 2] | 0;
			do
				if ((U | 0) != (T | 0)) {
					y = +R( + ( + (U - T | 0) * 1.0e5 / M + .5));
					if (y <= 2147483647.0 & y >= -2147483648.0) {
						W = ~~y;
						break
					} else {
						g = 1;
						i = d;
						return g | 0
					}
				} else
					W = 0;
			while (0);
			HEAP32[V >> 2] = W;
			W = a + 24 | 0;
			V = HEAP32[o >> 2] | 0;
			T = (v | 0) == (P | 0);
			do
				if (!((V | 0) == 0 | T)) {
					M = +R( + ( + (N | 0) *  + (V | 0) / 1.0e5 + .5));
					if (M <= 2147483647.0 & M >= -2147483648.0) {
						X = ~~M;
						break
					} else {
						g = 1;
						i = d;
						return g | 0
					}
				} else
					X = 0;
			while (0);
			HEAP32[W >> 2] = X;
			X = a + 28 | 0;
			W = HEAP32[q >> 2] | 0;
			do
				if (!((W | 0) == 0 | T)) {
					M = +R( + ( + (N | 0) *  + (W | 0) / 1.0e5 + .5));
					if (M <= 2147483647.0 & M >= -2147483648.0) {
						Y = ~~M;
						break
					} else {
						g = 1;
						i = d;
						return g | 0
					}
				} else
					Y = 0;
			while (0);
			HEAP32[X >> 2] = Y;
			Y = a + 32 | 0;
			X = 1e5 - (HEAP32[o >> 2] | 0) | 0;
			W = HEAP32[q >> 2] | 0;
			do
				if (!((X | 0) == (W | 0) | T)) {
					M = +R( + ( + (N | 0) *  + (X - W | 0) / 1.0e5 + .5));
					if (M <= 2147483647.0 & M >= -2147483648.0) {
						Z = ~~M;
						break
					} else {
						g = 1;
						i = d;
						return g | 0
					}
				} else
					Z = 0;
			while (0);
			HEAP32[Y >> 2] = Z;
			Z = ti(e, a) | 0;
			if (Z) {
				g = Z;
				i = d;
				return g | 0
			}
			Z = HEAP32[s >> 2] | 0;
			s = HEAP32[e + 24 >> 2] | 0;
			do
				if ((Z | 0) < (s + -5 | 0) | (Z | 0) > (s + 5 | 0))
					_ = 1;
				else {
					a = HEAP32[u >> 2] | 0;
					Y = HEAP32[e + 28 >> 2] | 0;
					if ((a | 0) < (Y + -5 | 0) | (a | 0) > (Y + 5 | 0)) {
						_ = 1;
						break
					}
					Y = HEAP32[b >> 2] | 0;
					a = HEAP32[e >> 2] | 0;
					if ((Y | 0) < (a + -5 | 0) | (Y | 0) > (a + 5 | 0)) {
						_ = 1;
						break
					}
					a = HEAP32[h >> 2] | 0;
					Y = HEAP32[e + 4 >> 2] | 0;
					if ((a | 0) < (Y + -5 | 0) | (a | 0) > (Y + 5 | 0)) {
						_ = 1;
						break
					}
					Y = HEAP32[k >> 2] | 0;
					a = HEAP32[e + 8 >> 2] | 0;
					if ((Y | 0) < (a + -5 | 0) | (Y | 0) > (a + 5 | 0)) {
						_ = 1;
						break
					}
					a = HEAP32[m >> 2] | 0;
					Y = HEAP32[e + 12 >> 2] | 0;
					if ((a | 0) < (Y + -5 | 0) | (a | 0) > (Y + 5 | 0)) {
						_ = 1;
						break
					}
					Y = HEAP32[o >> 2] | 0;
					a = HEAP32[e + 16 >> 2] | 0;
					if ((Y | 0) < (a + -5 | 0) | (Y | 0) > (a + 5 | 0)) {
						_ = 1;
						break
					}
					a = HEAP32[q >> 2] | 0;
					Y = HEAP32[e + 20 >> 2] | 0;
					if ((a | 0) < (Y + -5 | 0)) {
						_ = 1;
						break
					}
					_ = (a | 0) > (Y + 5 | 0)
				}
			while (0);
			g = _ & 1;
			i = d;
			return g | 0
		}
		function si(a, b, d) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0;
			e = i;
			f = HEAP32[a + 24 >> 2] | 0;
			g = HEAP32[b + 24 >> 2] | 0;
			if (((((((!((f | 0) < (g - d | 0) | (f | 0) > (g + d | 0)) ? (g = HEAP32[a + 28 >> 2] | 0, f = HEAP32[b + 28 >> 2] | 0, !((g | 0) < (f - d | 0) | (g | 0) > (f + d | 0))) : 0) ? (f = HEAP32[a >> 2] | 0, g = HEAP32[b >> 2] | 0, !((f | 0) < (g - d | 0) | (f | 0) > (g + d | 0))) : 0) ? (g = HEAP32[a + 4 >> 2] | 0, f = HEAP32[b + 4 >> 2] | 0, !((g | 0) < (f - d | 0) | (g | 0) > (f + d | 0))) : 0) ? (f = HEAP32[a + 8 >> 2] | 0, g = HEAP32[b + 8 >> 2] | 0, !((f | 0) < (g - d | 0) | (f | 0) > (g + d | 0))) : 0) ? (g = HEAP32[a + 12 >> 2] | 0, f = HEAP32[b + 12 >> 2] | 0, !((g | 0) < (f - d | 0) | (g | 0) > (f + d | 0))) : 0) ? (f = HEAP32[a + 16 >> 2] | 0, g = HEAP32[b + 16 >> 2] | 0, !((f | 0) < (g - d | 0) | (f | 0) > (g + d | 0))) : 0) ? (g = HEAP32[a + 20 >> 2] | 0, a = HEAP32[b + 20 >> 2] | 0, (g | 0) >= (a - d | 0)) : 0)
				h = (g | 0) <= (a + d | 0);
			else
				h = 0;
			i = e;
			return h & 1 | 0
		}
		function ti(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0.0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0;
			d = i;
			e = HEAP32[b >> 2] | 0;
			f = b + 4 | 0;
			g = (HEAP32[f >> 2] | 0) + e + (HEAP32[b + 8 >> 2] | 0) | 0;
			if (!g) {
				h = 1;
				i = d;
				return h | 0
			}
			do
				if (e) {
					j = +R( + ( + (e | 0) * 1.0e5 /  + (g | 0) + .5));
					if (j <= 2147483647.0 & j >= -2147483648.0) {
						k = ~~j;
						break
					} else {
						h = 1;
						i = d;
						return h | 0
					}
				} else
					k = 0;
			while (0);
			HEAP32[a >> 2] = k;
			k = a + 4 | 0;
			e = HEAP32[f >> 2] | 0;
			do
				if (e) {
					j = +R( + ( + (e | 0) * 1.0e5 /  + (g | 0) + .5));
					if (j <= 2147483647.0 & j >= -2147483648.0) {
						l = ~~j;
						break
					} else {
						h = 1;
						i = d;
						return h | 0
					}
				} else
					l = 0;
			while (0);
			HEAP32[k >> 2] = l;
			l = HEAP32[b >> 2] | 0;
			k = HEAP32[f >> 2] | 0;
			f = b + 12 | 0;
			e = HEAP32[f >> 2] | 0;
			m = b + 16 | 0;
			n = (HEAP32[m >> 2] | 0) + e + (HEAP32[b + 20 >> 2] | 0) | 0;
			o = a + 8 | 0;
			if (!n) {
				h = 1;
				i = d;
				return h | 0
			}
			do
				if (e) {
					j = +R( + ( + (e | 0) * 1.0e5 /  + (n | 0) + .5));
					if (j <= 2147483647.0 & j >= -2147483648.0) {
						p = ~~j;
						break
					} else {
						h = 1;
						i = d;
						return h | 0
					}
				} else
					p = 0;
			while (0);
			HEAP32[o >> 2] = p;
			p = a + 12 | 0;
			o = HEAP32[m >> 2] | 0;
			do
				if (o) {
					j = +R( + ( + (o | 0) * 1.0e5 /  + (n | 0) + .5));
					if (j <= 2147483647.0 & j >= -2147483648.0) {
						q = ~~j;
						break
					} else {
						h = 1;
						i = d;
						return h | 0
					}
				} else
					q = 0;
			while (0);
			HEAP32[p >> 2] = q;
			q = n + g | 0;
			g = (HEAP32[f >> 2] | 0) + l | 0;
			l = (HEAP32[m >> 2] | 0) + k | 0;
			k = b + 24 | 0;
			m = HEAP32[k >> 2] | 0;
			f = b + 28 | 0;
			n = (HEAP32[f >> 2] | 0) + m + (HEAP32[b + 32 >> 2] | 0) | 0;
			b = a + 16 | 0;
			if (!n) {
				h = 1;
				i = d;
				return h | 0
			}
			do
				if (m) {
					j = +R( + ( + (m | 0) * 1.0e5 /  + (n | 0) + .5));
					if (j <= 2147483647.0 & j >= -2147483648.0) {
						r = ~~j;
						break
					} else {
						h = 1;
						i = d;
						return h | 0
					}
				} else
					r = 0;
			while (0);
			HEAP32[b >> 2] = r;
			r = a + 20 | 0;
			b = HEAP32[f >> 2] | 0;
			do
				if (b) {
					j = +R( + ( + (b | 0) * 1.0e5 /  + (n | 0) + .5));
					if (j <= 2147483647.0 & j >= -2147483648.0) {
						s = ~~j;
						break
					} else {
						h = 1;
						i = d;
						return h | 0
					}
				} else
					s = 0;
			while (0);
			HEAP32[r >> 2] = s;
			s = q + n | 0;
			n = g + (HEAP32[k >> 2] | 0) | 0;
			k = HEAP32[f >> 2] | 0;
			f = a + 24 | 0;
			if (!s) {
				h = 1;
				i = d;
				return h | 0
			}
			do
				if (n) {
					j = +R( + ( + (n | 0) * 1.0e5 /  + (s | 0) + .5));
					if (j <= 2147483647.0 & j >= -2147483648.0) {
						t = ~~j;
						break
					} else {
						h = 1;
						i = d;
						return h | 0
					}
				} else
					t = 0;
			while (0);
			HEAP32[f >> 2] = t;
			t = l + k | 0;
			k = a + 28 | 0;
			if (!t) {
				HEAP32[k >> 2] = 0;
				h = 0;
				i = d;
				return h | 0
			}
			j = +R( + ( + (t | 0) * 1.0e5 /  + (s | 0) + .5));
			if (!(j <= 2147483647.0 & j >= -2147483648.0)) {
				h = 1;
				i = d;
				return h | 0
			}
			HEAP32[k >> 2] = ~~j;
			h = 0;
			i = d;
			return h | 0
		}
		function ui(c, d, f, g, h) {
			c = c | 0;
			d = d | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			var j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0;
			j = i;
			i = i + 224 | 0;
			k = j + 24 | 0;
			l = j;
			m = (d | 0) != 0;
			if (m) {
				n = d + 74 | 0;
				HEAP16[n >> 1] = HEAPU16[n >> 1] | 0 | 32768
			}
			HEAP8[k >> 0] = 112;
			HEAP8[k + 1 >> 0] = 114;
			HEAP8[k + 2 >> 0] = 111;
			HEAP8[k + 3 >> 0] = 102;
			HEAP8[k + 4 >> 0] = 105;
			HEAP8[k + 5 >> 0] = 108;
			HEAP8[k + 6 >> 0] = 101;
			HEAP8[k + 7 >> 0] = 32;
			HEAP8[k + 8 >> 0] = 39;
			HEAP8[k + 9 >> 0] = 0;
			if ((f | 0) != 0 ? (n = HEAP8[f >> 0] | 0, n << 24 >> 24 != 0) : 0) {
				d = 9;
				o = f;
				f = n;
				do {
					o = o + 1 | 0;
					n = d;
					d = d + 1 | 0;
					HEAP8[k + n >> 0] = f;
					f = HEAP8[o >> 0] | 0
				} while (f << 24 >> 24 != 0 & d >>> 0 < 87);
				HEAP8[k + d >> 0] = 0;
				if (d >>> 0 < 196)
					if (d >>> 0 < 195) {
						p = d;
						q = 9
					} else {
						r = 195;
						q = 12
					}
				else
					s = d
			} else {
				HEAP8[k + 9 >> 0] = 0;
				p = 9;
				q = 9
			}
			if ((q | 0) == 9) {
				d = p + -195 | 0;
				f = d >>> 0 > 4294967293 ? d : -3;
				d = 8008 + (0 - f) | 0;
				o = p;
				n = 8008;
				t = 39;
				while (1) {
					u = n + 1 | 0;
					HEAP8[k + o >> 0] = t;
					if ((u | 0) == (d | 0))
						break;
					else {
						o = o + 1 | 0;
						n = u;
						t = HEAP8[u >> 0] | 0
					}
				}
				r = p - f | 0;
				q = 12
			}
			if ((q | 0) == 12) {
				HEAP8[k + r >> 0] = 0;
				s = r
			}
			r = g >>> 24;
			if ((((r | 0) == 32 | (r + -48 | 0) >>> 0 < 10 | (r + -65 | 0) >>> 0 < 26 | (r + -97 | 0) >>> 0 < 26 ? (q = g >>> 16, f = q & 255, (f | 0) == 32 | (f + -48 | 0) >>> 0 < 10 | (f + -65 | 0) >>> 0 < 26 | (f + -97 | 0) >>> 0 < 26) : 0) ? (p = g >>> 8, t = p & 255, (t | 0) == 32 | (t + -48 | 0) >>> 0 < 10 | (t + -65 | 0) >>> 0 < 26 | (t + -97 | 0) >>> 0 < 26) : 0) ? (n = g & 255, (n | 0) == 32 | (n + -48 | 0) >>> 0 < 10 | (n + -65 | 0) >>> 0 < 26 | (n + -97 | 0) >>> 0 < 26) : 0) {
				HEAP8[k + s >> 0] = 39;
				HEAP8[k + (s + 1) >> 0] = (r + -32 | 0) >>> 0 < 95 ? r & 255 : 63;
				HEAP8[k + (s + 2) >> 0] = (f + -32 | 0) >>> 0 < 95 ? q & 255 : 63;
				HEAP8[k + (s + 3) >> 0] = (t + -32 | 0) >>> 0 < 95 ? p & 255 : 63;
				HEAP8[k + (s + 4) >> 0] = (n + -32 | 0) >>> 0 < 95 ? g & 255 : 63;
				HEAP8[k + (s + 5) >> 0] = 39;
				HEAP8[k + (s + 6) >> 0] = 58;
				HEAP8[k + (s + 7) >> 0] = 32;
				v = s + 8 | 0
			} else {
				n = l + 23 | 0;
				HEAP8[n >> 0] = 0;
				p = g;
				g = n;
				n = 0;
				t = 0;
				while (1) {
					if (!((p | 0) != 0 | (t | 0) < 1)) {
						w = g;
						x = n;
						break
					}
					q = HEAP8[3176 + (p & 15) >> 0] | 0;
					f = g + -1 | 0;
					HEAP8[f >> 0] = q;
					if (f >>> 0 > l >>> 0) {
						p = p >>> 4;
						g = f;
						n = q;
						t = t + 1 | 0
					} else {
						w = f;
						x = q;
						break
					}
				}
				if (s >>> 0 >= 196) {
					y = m ? 2 : 1;
					Ng(c, k, y);
					i = j;
					return
				}
				if (x << 24 >> 24 != 0 & s >>> 0 < 195) {
					t = s;
					n = w;
					w = x;
					do {
						n = n + 1 | 0;
						x = t;
						t = t + 1 | 0;
						HEAP8[k + x >> 0] = w;
						w = HEAP8[n >> 0] | 0
					} while (w << 24 >> 24 != 0 & t >>> 0 < 195);
					HEAP8[k + t >> 0] = 0;
					if (t >>> 0 < 196)
						z = t;
					else {
						y = m ? 2 : 1;
						Ng(c, k, y);
						i = j;
						return
					}
				} else {
					HEAP8[k + s >> 0] = 0;
					z = s
				}
				if (z >>> 0 < 195) {
					s = z + -195 | 0;
					t = s >>> 0 > 4294967293 ? s : -3;
					s = 8016 + (0 - t) | 0;
					w = z;
					n = 8016;
					x = 104;
					while (1) {
						g = n + 1 | 0;
						HEAP8[k + w >> 0] = x;
						if ((g | 0) == (s | 0))
							break;
						else {
							w = w + 1 | 0;
							n = g;
							x = HEAP8[g >> 0] | 0
						}
					}
					A = z - t | 0
				} else
					A = 195;
				HEAP8[k + A >> 0] = 0;
				v = A
			}
			if (v >>> 0 >= 196) {
				y = m ? 2 : 1;
				Ng(c, k, y);
				i = j;
				return
			}
			if ((h | 0) != 0 ? (A = HEAP8[h >> 0] | 0, A << 24 >> 24 != 0 & v >>> 0 < 195) : 0) {
				t = v;
				z = h;
				h = A;
				while (1) {
					z = z + 1 | 0;
					A = t + 1 | 0;
					HEAP8[k + t >> 0] = h;
					h = HEAP8[z >> 0] | 0;
					if (!(h << 24 >> 24 != 0 & A >>> 0 < 195)) {
						B = A;
						break
					} else
						t = A
				}
			} else
				B = v;
			HEAP8[k + B >> 0] = 0;
			y = m ? 2 : 1;
			Ng(c, k, y);
			i = j;
			return
		}
		function vi(a, d, e, f) {
			a = a | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0.0,
			u = 0.0,
			v = 0,
			w = 0,
			x = 0,
			y = 0;
			g = i;
			h = 8 - e | 0;
			j = 1 << h;
			k = (1 << 16 - e) + -1 | 0;
			l = 1 << 15 - e;
			m = j << 2;
			n = (a | 0) == 0;
			do
				if (!n) {
					if (!m)
						Eg(a, 3264);
					o = a + 720 | 0;
					p = HEAP32[o >> 2] | 0;
					if (!p)
						q = vx(m) | 0;
					else
						q = Cc[p & 31](a, m) | 0;
					if (!q)
						Eg(a, 3264);
					else {
						sy(q | 0, 0, m | 0) | 0;
						r = q;
						s = o;
						break
					}
				} else {
					r = 0;
					s = a + 720 | 0
				}
			while (0);
			HEAP32[d >> 2] = r;
			d = (f + -95e3 | 0) >>> 0 > 1e4;
			q = (e | 0) == 0;
			t =  + (k >>> 0);
			u =  + (f | 0) * 1.0e-05;
			f = 0;
			while (1) {
				if (!n) {
					e = HEAP32[s >> 2] | 0;
					if (!e)
						v = vx(512) | 0;
					else
						v = Cc[e & 31](a, 512) | 0;
					if (!v) {
						w = 16;
						break
					} else
						x = v
				} else
					x = 0;
				HEAP32[r + (f << 2) >> 2] = x;
				if (d) {
					e = 0;
					do {
						HEAP16[x + (e << 1) >> 1] = ~~+R( + (+U( + ( + (((e << h) + f | 0) >>> 0) / t), +u) * 65535.0 + .5));
						e = e + 1 | 0
					} while ((e | 0) != 256)
				} else {
					e = 0;
					do {
						m = (e << h) + f | 0;
						if (q)
							y = m;
						else
							y = (((m * 65535 | 0) + l | 0) >>> 0) / (k >>> 0) | 0;
						HEAP16[x + (e << 1) >> 1] = y;
						e = e + 1 | 0
					} while ((e | 0) != 256)
				}
				f = f + 1 | 0;
				if (f >>> 0 >= j >>> 0) {
					w = 23;
					break
				}
			}
			if ((w | 0) == 16)
				Eg(a, 3264);
			else if ((w | 0) == 23) {
				i = g;
				return
			}
		}
		function wi(b, c, d) {
			b = b | 0;
			c = c | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0;
			e = i;
			f = b >>> 24;
			if ((f + -65 | 0) >>> 0 > 57 | (f + -91 | 0) >>> 0 < 6) {
				HEAP8[c >> 0] = 91;
				HEAP8[c + 1 >> 0] = HEAP8[7640 + (b >>> 28) >> 0] | 0;
				HEAP8[c + 2 >> 0] = HEAP8[7640 + (f & 15) >> 0] | 0;
				HEAP8[c + 3 >> 0] = 93;
				g = 4
			} else {
				HEAP8[c >> 0] = f;
				g = 1
			}
			f = b >>> 16;
			h = f & 255;
			if ((h + -65 | 0) >>> 0 > 57 | (h + -91 | 0) >>> 0 < 6) {
				HEAP8[c + g >> 0] = 91;
				HEAP8[c + (g + 1) >> 0] = HEAP8[7640 + (b >>> 20 & 15) >> 0] | 0;
				HEAP8[c + (g | 2) >> 0] = HEAP8[7640 + (f & 15) >> 0] | 0;
				HEAP8[c + (g + 3) >> 0] = 93;
				j = g + 4 | 0
			} else {
				HEAP8[c + g >> 0] = f;
				j = g + 1 | 0
			}
			g = b >>> 8;
			f = g & 255;
			if ((f + -65 | 0) >>> 0 > 57 | (f + -91 | 0) >>> 0 < 6) {
				HEAP8[c + j >> 0] = 91;
				HEAP8[c + (j + 1) >> 0] = HEAP8[7640 + (b >>> 12 & 15) >> 0] | 0;
				HEAP8[c + (j + 2) >> 0] = HEAP8[7640 + (g & 15) >> 0] | 0;
				HEAP8[c + (j + 3) >> 0] = 93;
				k = j + 4 | 0
			} else {
				HEAP8[c + j >> 0] = g;
				k = j + 1 | 0
			}
			j = b & 255;
			if ((j + -65 | 0) >>> 0 > 57 | (j + -91 | 0) >>> 0 < 6) {
				HEAP8[c + k >> 0] = 91;
				HEAP8[c + (k + 1) >> 0] = HEAP8[7640 + (b >>> 4 & 15) >> 0] | 0;
				HEAP8[c + (k + 2) >> 0] = HEAP8[7640 + (b & 15) >> 0] | 0;
				HEAP8[c + (k + 3) >> 0] = 93;
				l = k + 4 | 0
			} else {
				HEAP8[c + k >> 0] = b;
				l = k + 1 | 0
			}
			if (!d) {
				HEAP8[c + l >> 0] = 0;
				i = e;
				return
			}
			HEAP8[c + l >> 0] = 58;
			HEAP8[c + (l + 1) >> 0] = 32;
			k = 0;
			b = l + 2 | 0;
			while (1) {
				l = HEAP8[d + k >> 0] | 0;
				if (!(l << 24 >> 24)) {
					m = b;
					break
				}
				k = k + 1 | 0;
				j = b + 1 | 0;
				HEAP8[c + b >> 0] = l;
				if ((k | 0) >= 195) {
					m = j;
					break
				} else
					b = j
			}
			HEAP8[c + m >> 0] = 0;
			i = e;
			return
		}
		function xi(b, d) {
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0;
			e = i;
			i = i + 16 | 0;
			f = e;
			g = b + 772 | 0;
			h = HEAP32[g >> 2] | 0;
			if (h) {
				j = HEAP32[b + 724 >> 2] | 0;
				if (!j)
					wx(h);
				else
					rc[j & 127](b, h);
				HEAP32[g >> 2] = 0
			}
			h = HEAP32[b + 760 >> 2] | 0;
			if (!((h | 0) == -1 | (h | 0) == 0) ? h >>> 0 < d >>> 0 : 0) {
				k = 0;
				l = 19
			} else
				l = 8;
			do
				if ((l | 0) == 8) {
					h = HEAP32[b + 376 >> 2] | 0;
					HEAP8[b + 764 >> 0] = h >>> 24;
					HEAP8[b + 765 >> 0] = h >>> 16;
					HEAP8[b + 766 >> 0] = h >>> 8;
					HEAP8[b + 767 >> 0] = h;
					HEAP8[b + 768 >> 0] = 0;
					HEAP32[b + 776 >> 2] = d;
					HEAP8[b + 780 >> 0] = HEAP32[b + 208 >> 2];
					if (!d) {
						HEAP32[g >> 2] = 0;
						break
					}
					do
						if (b) {
							h = HEAP32[b + 720 >> 2] | 0;
							if (!h)
								m = vx(d) | 0;
							else
								m = Cc[h & 31](b, d) | 0;
							if (!m) {
								h = HEAP32[b + 172 >> 2] | 0;
								if (!h) {
									j = HEAP32[p >> 2] | 0;
									HEAP32[f >> 2] = 3264;
									Qb(j | 0, 7576, f | 0) | 0;
									ec(10, j | 0) | 0;
									n = 0;
									break
								} else {
									rc[h & 127](b, 3264);
									n = 0;
									break
								}
							} else
								n = m
						} else
							n = 0;
					while (0);
					HEAP32[g >> 2] = n;
					k = n;
					l = 19
				}
			while (0);
			do
				if ((l | 0) == 19) {
					n = (d | 0) != 0;
					if ((k | 0) == 0 & n) {
						xh(b, d) | 0;
						if (!(HEAP32[b + 212 >> 2] & 1048576))
							_g(b, 7408);
						Zg(b, 7408);
						o = 0;
						i = e;
						return o | 0
					}
					if (!((b | 0) == 0 | n ^ 1)) {
						n = HEAP32[b + 184 >> 2] | 0;
						if (!n)
							Eg(b, 3688);
						vc[n & 31](b, k, d);
						n = HEAP32[b + 212 >> 2] | 0;
						if (!(HEAP32[b + 376 >> 2] & 536870912)) {
							if (n & 2048)
								break
						} else if ((n & 768 | 0) == 768)
							break;
						n = b + 412 | 0;
						g = k;
						m = d;
						f = HEAP32[n >> 2] | 0;
						while (1) {
							h = (m | 0) == 0 ? -1 : m;
							f = sk(f, g, h) | 0;
							if ((m | 0) == (h | 0))
								break;
							else {
								g = g + h | 0;
								m = m - h | 0
							}
						}
						HEAP32[n >> 2] = f
					}
				}
			while (0);
			xh(b, 0) | 0;
			o = 1;
			i = e;
			return o | 0
		}
		function yi(b, d) {
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0;
			e = i;
			i = i + 64 | 0;
			f = e;
			g = b + 220 | 0;
			h = HEAP32[g >> 2] | 0;
			if (h) {
				HEAP8[f >> 0] = h >>> 24;
				HEAP8[f + 1 >> 0] = h >>> 16;
				HEAP8[f + 2 >> 0] = h >>> 8;
				HEAP8[f + 3 >> 0] = h;
				HEAP8[f + 4 >> 0] = 32;
				HEAP8[f + 5 >> 0] = 117;
				HEAP8[f + 6 >> 0] = 115;
				HEAP8[f + 7 >> 0] = 105;
				HEAP8[f + 8 >> 0] = 110;
				HEAP8[f + 9 >> 0] = 103;
				HEAP8[f + 10 >> 0] = 32;
				HEAP8[f + 11 >> 0] = 122;
				HEAP8[f + 12 >> 0] = 115;
				HEAP8[f + 13 >> 0] = 116;
				HEAP8[f + 14 >> 0] = 114;
				HEAP8[f + 15 >> 0] = 101;
				HEAP8[f + 16 >> 0] = 97;
				HEAP8[f + 17 >> 0] = 109;
				HEAP8[f + 18 >> 0] = 0;
				Zg(b, f);
				HEAP32[g >> 2] = 0
			}
			f = b + 224 | 0;
			HEAP32[f >> 2] = 0;
			HEAP32[b + 228 >> 2] = 0;
			HEAP32[b + 236 >> 2] = 0;
			HEAP32[b + 240 >> 2] = 0;
			h = b + 212 | 0;
			if (!(HEAP32[h >> 2] & 2)) {
				j = wk(f, 7296, 56) | 0;
				if (!j) {
					HEAP32[h >> 2] = HEAP32[h >> 2] | 2;
					k = 7
				} else {
					l = j;
					k = 8
				}
			} else {
				j = tk(f) | 0;
				if (!j)
					k = 7;
				else {
					l = j;
					k = 8
				}
			}
			a: do
				if ((k | 0) == 7) {
					HEAP32[g >> 2] = d;
					m = 0
				} else if ((k | 0) == 8) {
					j = b + 248 | 0;
					if (!(HEAP32[j >> 2] | 0))
						do
							switch (l | 0) {
							case -6: {
									HEAP32[j >> 2] = 1456;
									m = -6;
									break a;
									break
								}
							case 1: {
									HEAP32[j >> 2] = 1296;
									m = 1;
									break a;
									break
								}
							case -1: {
									HEAP32[j >> 2] = 1352;
									m = -1;
									break a;
									break
								}
							case -3: {
									HEAP32[j >> 2] = 1392;
									m = -3;
									break a;
									break
								}
							case -7: {
									HEAP32[j >> 2] = 1488;
									m = -7;
									break a;
									break
								}
							case 2: {
									HEAP32[j >> 2] = 1328;
									m = 2;
									break a;
									break
								}
							case -5: {
									HEAP32[j >> 2] = 1440;
									m = -5;
									break a;
									break
								}
							case -2: {
									HEAP32[j >> 2] = 1368;
									m = -2;
									break a;
									break
								}
							case -4: {
									HEAP32[j >> 2] = 1416;
									m = -4;
									break a;
									break
								}
							default: {
									HEAP32[j >> 2] = 1264;
									m = l;
									break a
								}
							}
						while (0);
					else
						m = l
				}
			while (0);
			i = e;
			return m | 0
		}
		function zi(a, b, d, e, f, g) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0;
			h = i;
			j = a + 376 | 0;
			if ((HEAP32[a + 220 >> 2] | 0) != (HEAP32[j >> 2] | 0)) {
				HEAP32[a + 248 >> 2] = 7448;
				i = h;
				return
			}
			k = a + 224 | 0;
			HEAP32[a + 236 >> 2] = e;
			e = a + 240 | 0;
			HEAP32[e >> 2] = 0;
			l = a + 228 | 0;
			m = a + 184 | 0;
			n = a + 212 | 0;
			o = a + 412 | 0;
			p = (g | 0) != 0 ? 4 : 2;
			g = 1024;
			a: while (1) {
				if (!(HEAP32[l >> 2] | 0)) {
					q = HEAP32[d >> 2] | 0;
					r = g >>> 0 > q >>> 0 ? q : g;
					HEAP32[d >> 2] = q - r;
					do
						if (r) {
							q = HEAP32[m >> 2] | 0;
							if (!q) {
								s = 6;
								break a
							}
							vc[q & 31](a, b, r);
							q = HEAP32[n >> 2] | 0;
							if (!(HEAP32[j >> 2] & 536870912)) {
								if (q & 2048)
									break
							} else if ((q & 768 | 0) == 768)
								break;
							q = b;
							t = r;
							u = HEAP32[o >> 2] | 0;
							while (1) {
								v = (t | 0) == 0 ? -1 : t;
								u = sk(u, q, v) | 0;
								if ((t | 0) == (v | 0))
									break;
								else {
									q = q + v | 0;
									t = t - v | 0
								}
							}
							HEAP32[o >> 2] = u
						}
					while (0);
					HEAP32[k >> 2] = b;
					HEAP32[l >> 2] = r;
					w = r
				} else
					w = g;
				if (!(HEAP32[e >> 2] | 0)) {
					t = HEAP32[f >> 2] | 0;
					HEAP32[f >> 2] = 0;
					HEAP32[e >> 2] = t
				}
				x = xk(k, (HEAP32[d >> 2] | 0) == 0 ? p : 0) | 0;
				if (x) {
					s = 17;
					break
				}
				if (HEAP32[f >> 2] | 0) {
					g = w;
					continue
				}
				if (!(HEAP32[e >> 2] | 0)) {
					y = 0;
					z = 0;
					A = 0;
					break
				} else
					g = w
			}
			if ((s | 0) == 6)
				Eg(a, 3688);
			else if ((s | 0) == 17) {
				y = x;
				z = HEAP32[e >> 2] | 0;
				A = HEAP32[f >> 2] | 0
			}
			HEAP32[f >> 2] = A + z;
			HEAP32[e >> 2] = 0;
			e = a + 248 | 0;
			if (HEAP32[e >> 2] | 0) {
				i = h;
				return
			}
			do
				switch (y | 0) {
				case -3: {
						HEAP32[e >> 2] = 1392;
						i = h;
						return
					}
				case -4: {
						HEAP32[e >> 2] = 1416;
						i = h;
						return
					}
				case -6: {
						HEAP32[e >> 2] = 1456;
						i = h;
						return
					}
				case -1: {
						HEAP32[e >> 2] = 1352;
						i = h;
						return
					}
				case -5: {
						HEAP32[e >> 2] = 1440;
						i = h;
						return
					}
				case 1: {
						HEAP32[e >> 2] = 1296;
						i = h;
						return
					}
				case -7: {
						HEAP32[e >> 2] = 1488;
						i = h;
						return
					}
				case 2: {
						HEAP32[e >> 2] = 1328;
						i = h;
						return
					}
				case -2: {
						HEAP32[e >> 2] = 1368;
						i = h;
						return
					}
				default: {
						HEAP32[e >> 2] = 1264;
						i = h;
						return
					}
				}
			while (0)
		}
		function Ai(b, d, e, f) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0;
			g = i;
			i = i + 16 | 0;
			h = g;
			j = HEAP32[b + 760 >> 2] | 0;
			if (!((j | 0) == -1 | (j | 0) == 0)) {
				k = e + 1 | 0;
				if (j >>> 0 < k >>> 0) {
					l = b + 248 | 0;
					if (HEAP32[l >> 2] | 0) {
						m = -4;
						i = g;
						return m | 0
					}
					HEAP32[l >> 2] = 1416;
					m = -4;
					i = g;
					return m | 0
				} else {
					n = k;
					o = j
				}
			} else {
				n = e + 1 | 0;
				o = -1
			}
			j = o - n | 0;
			if (j >>> 0 < (HEAP32[f >> 2] | 0) >>> 0)
				HEAP32[f >> 2] = j;
			j = b + 376 | 0;
			n = yi(b, HEAP32[j >> 2] | 0) | 0;
			if ((n | 0) == 1) {
				m = -7;
				i = g;
				return m | 0
			} else if (!n) {
				o = d - e | 0;
				HEAP32[h >> 2] = o;
				d = b + 788 | 0;
				k = Gi(b, HEAP32[j >> 2] | 0, (HEAP32[d >> 2] | 0) + e | 0, h, 0, f) | 0;
				do
					if ((k | 0) == 1) {
						if (tk(b + 224 | 0) | 0) {
							l = b + 248 | 0;
							if (HEAP32[l >> 2] | 0) {
								p = -7;
								break
							}
							HEAP32[l >> 2] = 1296;
							p = -7;
							break
						}
						l = HEAP32[f >> 2] | 0;
						q = e + 1 + l | 0;
						if (q) {
							r = (b | 0) == 0;
							if (!r ? (s = HEAP32[b + 720 >> 2] | 0, (s | 0) != 0) : 0)
								t = Cc[s & 31](b, q) | 0;
							else
								t = vx(q) | 0;
							if (t) {
								s = Gi(b, HEAP32[j >> 2] | 0, (HEAP32[d >> 2] | 0) + e | 0, h, t + e | 0, f) | 0;
								if (!s) {
									u = -7;
									v = t
								} else if ((s | 0) == 1)
									if ((l | 0) == (HEAP32[f >> 2] | 0)) {
										HEAP8[t + (l + e) >> 0] = 0;
										if (e)
											qy(t | 0, HEAP32[d >> 2] | 0, e | 0) | 0;
										l = HEAP32[d >> 2] | 0;
										HEAP32[d >> 2] = t;
										HEAP32[b + 792 >> 2] = q;
										u = 1;
										v = l
									} else {
										u = -7;
										v = t
									}
								else {
									u = s;
									v = t
								}
								do
									if (!(r | (v | 0) == 0)) {
										s = HEAP32[b + 724 >> 2] | 0;
										if (!s) {
											wx(v);
											break
										} else {
											rc[s & 127](b, v);
											break
										}
									}
								while (0);
								if ((u | 0) != 1 ? 1 : (o | 0) == (HEAP32[h >> 2] | 0)) {
									p = u;
									break
								}
								if (!(HEAP32[b + 212 >> 2] & 1048576))
									_g(b, 4296);
								else {
									Zg(b, 4296);
									p = 1;
									break
								}
							}
						}
						r = b + 248 | 0;
						if (!(HEAP32[r >> 2] | 0)) {
							HEAP32[r >> 2] = 1416;
							p = -4
						} else
							p = -4
					} else
						p = (k | 0) == 0 ? -7 : k;
				while (0);
				HEAP32[b + 220 >> 2] = 0;
				m = p;
				i = g;
				return m | 0
			} else {
				m = n;
				i = g;
				return m | 0
			}
			return 0
		}
		function Bi(b, e, f) {
			b = b | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0;
			f = i;
			g = HEAP32[b + 4 >> 2] | 0;
			h = ((HEAPU8[b + 11 >> 0] | 0) + 7 | 0) >>> 3;
			if (h >>> 0 >= g >>> 0) {
				i = f;
				return
			}
			b = 0 - h | 0;
			j = h;
			k = e + h | 0;
			while (1) {
				HEAP8[k >> 0] = (HEAPU8[k + b >> 0] | 0) + (HEAPU8[k >> 0] | 0);
				j = j + 1 | 0;
				if ((j | 0) == (g | 0))
					break;
				else
					k = k + 1 | 0
			}
			i = f;
			return
		}
		function Ci(b, e, f) {
			b = b | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0;
			g = i;
			h = HEAP32[b + 4 >> 2] | 0;
			if (!h) {
				i = g;
				return
			} else {
				j = 0;
				k = f;
				l = e
			}
			while (1) {
				HEAP8[l >> 0] = (HEAPU8[k >> 0] | 0) + (HEAPU8[l >> 0] | 0);
				j = j + 1 | 0;
				if ((j | 0) == (h | 0))
					break;
				else {
					k = k + 1 | 0;
					l = l + 1 | 0
				}
			}
			i = g;
			return
		}
		function Di(b, e, f) {
			b = b | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0;
			g = i;
			h = ((HEAPU8[b + 11 >> 0] | 0) + 7 | 0) >>> 3;
			j = HEAP32[b + 4 >> 2] | 0;
			if (!h) {
				k = f;
				l = e
			} else {
				b = e + h | 0;
				m = 0;
				n = f;
				o = e;
				while (1) {
					HEAP8[o >> 0] = ((HEAPU8[n >> 0] | 0) >>> 1 & 255) + (HEAPU8[o >> 0] | 0);
					m = m + 1 | 0;
					if (m >>> 0 >= h >>> 0)
						break;
					else {
						n = n + 1 | 0;
						o = o + 1 | 0
					}
				}
				k = f + h | 0;
				l = b
			}
			if ((j | 0) == (h | 0)) {
				i = g;
				return
			}
			b = 0 - h | 0;
			f = j - h | 0;
			h = 0;
			j = k;
			k = l;
			while (1) {
				HEAP8[k >> 0] = (((HEAPU8[k + b >> 0] | 0) + (HEAPU8[j >> 0] | 0) | 0) >>> 1) + (HEAPU8[k >> 0] | 0);
				h = h + 1 | 0;
				if ((h | 0) == (f | 0))
					break;
				else {
					j = j + 1 | 0;
					k = k + 1 | 0
				}
			}
			i = g;
			return
		}
		function Ei(b, e, f) {
			b = b | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0;
			g = i;
			h = HEAP32[b + 4 >> 2] | 0;
			b = e + h | 0;
			j = HEAPU8[f >> 0] | 0;
			k = (HEAPU8[e >> 0] | 0) + j | 0;
			HEAP8[e >> 0] = k;
			if ((h | 0) <= 1) {
				i = g;
				return
			}
			h = e + 1 | 0;
			e = k;
			k = j;
			j = f;
			do {
				j = j + 1 | 0;
				f = e & 255;
				l = k;
				k = HEAPU8[j >> 0] | 0;
				m = k - l | 0;
				n = f - l | 0;
				o = (m | 0) < 0 ? 0 - m | 0 : m;
				p = (n | 0) < 0 ? 0 - n | 0 : n;
				q = m + n | 0;
				n = (p | 0) < (o | 0);
				e = ((((q | 0) < 0 ? 0 - q | 0 : q) | 0) < ((n ? p : o) | 0) ? l : n ? k : f) + (HEAPU8[h >> 0] | 0) | 0;
				HEAP8[h >> 0] = e;
				h = h + 1 | 0
			} while (h >>> 0 < b >>> 0);
			i = g;
			return
		}
		function Fi(b, e, f) {
			b = b | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0;
			g = i;
			h = ((HEAPU8[b + 11 >> 0] | 0) + 7 | 0) >>> 3;
			j = e + h | 0;
			if (!h) {
				k = e;
				l = f
			} else {
				m = e + 1 | 0;
				n = (j >>> 0 > m >>> 0 ? j : m) - e | 0;
				m = f;
				o = e;
				while (1) {
					p = o;
					o = o + 1 | 0;
					HEAP8[p >> 0] = (HEAPU8[m >> 0] | 0) + (HEAPU8[p >> 0] | 0);
					if (o >>> 0 >= j >>> 0)
						break;
					else
						m = m + 1 | 0
				}
				k = o;
				l = f + n | 0
			}
			n = e + (HEAP32[b + 4 >> 2] | 0) | 0;
			if (k >>> 0 >= n >>> 0) {
				i = g;
				return
			}
			b = 0 - h | 0;
			h = l;
			l = k;
			while (1) {
				k = HEAPU8[h + b >> 0] | 0;
				e = HEAPU8[l + b >> 0] | 0;
				f = HEAPU8[h >> 0] | 0;
				o = f - k | 0;
				m = e - k | 0;
				j = (o | 0) < 0 ? 0 - o | 0 : o;
				p = (m | 0) < 0 ? 0 - m | 0 : m;
				q = o + m | 0;
				m = (p | 0) < (j | 0);
				HEAP8[l >> 0] = ((((q | 0) < 0 ? 0 - q | 0 : q) | 0) < ((m ? p : j) | 0) ? k : m ? f : e) + (HEAPU8[l >> 0] | 0);
				l = l + 1 | 0;
				if ((l | 0) == (n | 0))
					break;
				else
					h = h + 1 | 0
			}
			i = g;
			return
		}
		function Gi(a, b, d, e, f, g) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0;
			h = i;
			i = i + 1024 | 0;
			j = h;
			a: do
				if ((HEAP32[a + 220 >> 2] | 0) == (b | 0)) {
					k = HEAP32[g >> 2] | 0;
					l = HEAP32[e >> 2] | 0;
					m = a + 224 | 0;
					HEAP32[m >> 2] = d;
					n = a + 228 | 0;
					HEAP32[n >> 2] = 0;
					o = a + 240 | 0;
					HEAP32[o >> 2] = 0;
					p = (f | 0) == 0;
					q = a + 236 | 0;
					if (!p)
						HEAP32[q >> 2] = f;
					r = 0;
					s = 0;
					t = l;
					l = k;
					while (1) {
						HEAP32[n >> 2] = r + t;
						k = s + l | 0;
						if (p) {
							HEAP32[q >> 2] = j;
							u = 1024
						} else
							u = -1;
						v = k >>> 0 < u >>> 0 ? k : u;
						HEAP32[o >> 2] = v;
						w = k - v | 0;
						x = xk(m, (k | 0) == (v | 0) ? 4 : 0) | 0;
						if (x)
							break;
						r = HEAP32[n >> 2] | 0;
						s = HEAP32[o >> 2] | 0;
						t = 0;
						l = w
					}
					if (p)
						HEAP32[q >> 2] = 0;
					l = HEAP32[n >> 2] | 0;
					t = (HEAP32[o >> 2] | 0) + w | 0;
					if (t)
						HEAP32[g >> 2] = (HEAP32[g >> 2] | 0) - t;
					if (l)
						HEAP32[e >> 2] = (HEAP32[e >> 2] | 0) - l;
					l = a + 248 | 0;
					if (!(HEAP32[l >> 2] | 0))
						do
							switch (x | 0) {
							case -4: {
									HEAP32[l >> 2] = 1416;
									y = -4;
									break a;
									break
								}
							case -6: {
									HEAP32[l >> 2] = 1456;
									y = -6;
									break a;
									break
								}
							case 2: {
									HEAP32[l >> 2] = 1328;
									y = 2;
									break a;
									break
								}
							case -1: {
									HEAP32[l >> 2] = 1352;
									y = -1;
									break a;
									break
								}
							case -2: {
									HEAP32[l >> 2] = 1368;
									y = -2;
									break a;
									break
								}
							case -5: {
									HEAP32[l >> 2] = 1440;
									y = -5;
									break a;
									break
								}
							case -7: {
									HEAP32[l >> 2] = 1488;
									y = -7;
									break a;
									break
								}
							case -3: {
									HEAP32[l >> 2] = 1392;
									y = -3;
									break a;
									break
								}
							case 1: {
									HEAP32[l >> 2] = 1296;
									y = 1;
									break a;
									break
								}
							default: {
									HEAP32[l >> 2] = 1264;
									y = x;
									break a
								}
							}
						while (0);
					else
						y = x
				} else {
					HEAP32[a + 248 >> 2] = 7448;
					y = -2
				}
			while (0);
			i = h;
			return y | 0
		}
		function Hi(d, e, f, g, h, j, k) {
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			k = k | 0;
			var l = 0,
			m = 0,
			n = 0,
			o = 0;
			l = i;
			i = i + 32 | 0;
			m = l;
			HEAP32[d >> 2] = 1;
			n = d + 4 | 0;
			Wi(n, f);
			Dj(d + 76 | 0, g);
			HEAP32[d + 112 >> 2] = 0;
			HEAP32[d + 116 >> 2] = 0;
			HEAP8[d + 120 >> 0] = k & 1;
			k = d + 124 | 0;
			HEAP32[k >> 2] = 0;
			HEAP32[d >> 2] = 1;
			g = m + 8 | 0;
			HEAP32[m >> 2] = 43112;
			HEAP32[m + 4 >> 2] = 43112;
			HEAP32[g >> 2] = 43113;
			HEAP32[m + 16 >> 2] = 0;
			HEAP16[m + 20 >> 1] = 0;
			if (Mi(e, m, k) | 0)
				o = Ni(n, m, k, h, j) | 0;
			else
				o = 0;
			j = HEAP32[m >> 2] | 0;
			if (!((j | 0) == 0 ? 1 : ((HEAP32[g >> 2] | 0) - j | 0) < 2))
				ll(j);
			if (!o) {
				if (!(HEAP32[k >> 2] | 0)) {
					i = l;
					return
				}
				Ui(n, 0) | 0;
				i = l;
				return
			}
			if ((HEAP32[n >> 2] | 0) == -1) {
				i = l;
				return
			}
			if (!(HEAP8[d + 32 >> 0] | 0)) {
				i = l;
				return
			}
			HEAP32[d >> 2] = 2;
			i = l;
			return
		}
		function Ii(a) {
			a = a | 0;
			var b = 0,
			d = 0,
			e = 0,
			f = 0;
			b = i;
			d = a + 116 | 0;
			e = HEAP32[d >> 2] | 0;
			if (e)
				ll(e);
			HEAP32[d >> 2] = 0;
			d = HEAP32[a + 92 >> 2] | 0;
			if (((d | 0) != 0 ? (e = d + 4 | 0, f = (HEAP32[e >> 2] | 0) + -1 | 0, HEAP32[e >> 2] = f, (f | 0) == 0) : 0) ? (lc[c[(HEAP32[d >> 2] | 0) + 8 >> 2] & 255](d), f = d + 8 | 0, e = (HEAP32[f >> 2] | 0) + -1 | 0, HEAP32[f >> 2] = e, (e | 0) == 0) : 0)
				lc[c[(HEAP32[d >> 2] | 0) + 12 >> 2] & 255](d);
			d = HEAP32[a + 80 >> 2] | 0;
			if (((d | 0) != 0 ? (e = d + 4 | 0, f = (HEAP32[e >> 2] | 0) + -1 | 0, HEAP32[e >> 2] = f, (f | 0) == 0) : 0) ? (lc[c[(HEAP32[d >> 2] | 0) + 8 >> 2] & 255](d), f = d + 8 | 0, e = (HEAP32[f >> 2] | 0) + -1 | 0, HEAP32[f >> 2] = e, (e | 0) == 0) : 0)
				lc[c[(HEAP32[d >> 2] | 0) + 12 >> 2] & 255](d);
			Xi(a + 4 | 0);
			i = b;
			return
		}
		function Ji(a, b, d) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0;
			e = i;
			HEAP32[2034] = (HEAP32[2034] | 0) + 1;
			f = a + 4 | 0;
			a = Vi(f, 0) | 0;
			if ((a | 0) < (d | 0))
				g = Si(f, b, a, 0) | 0;
			else
				g = Si(f, b, d, 0) | 0;
			HEAP32[2038] = (HEAP32[2038] | 0) + g;
			i = e;
			return g | 0
		}
		function Ki(b, d, e) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0;
			f = i;
			if (!(HEAP32[b >> 2] | 0)) {
				g = -1;
				i = f;
				return g | 0
			}
			if (!(HEAP8[b + 120 >> 0] | 0)) {
				h = b + 4 | 0;
				j = Ti(h, d, e, b + 124 | 0) | 0;
				HEAP32[2040] = (HEAP32[2040] | 0) + j;
				if ((j | 0) == (e | 0)) {
					g = e;
					i = f;
					return g | 0
				}
				Ui(h, 0) | 0;
				Kj(b + 76 | 0);
				HEAP32[b >> 2] = 0;
				g = j;
				i = f;
				return g | 0
			} else {
				j = b + 76 | 0;
				if (((HEAP32[j >> 2] | 0) - (HEAP32[b + 108 >> 2] | 0) | 0) <= (e | 0)) {
					g = -1;
					i = f;
					return g | 0
				}
				Hj(j, d, e);
				g = e;
				i = f;
				return g | 0
			}
			return 0
		}
		function Li(a) {
			a = a | 0;
			var b = 0,
			d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0;
			b = i;
			if (!(HEAP32[a >> 2] | 0)) {
				i = b;
				return
			}
			d = a + 76 | 0;
			e = Gj(d) | 0;
			if ((e | 0) <= 0) {
				i = b;
				return
			}
			f = Ek() | 0;
			g = Cy(f | 0, H | 0, 1e6, 0) | 0;
			f = H;
			h = a + 112 | 0;
			if ((HEAP32[h >> 2] | 0) >>> 0 < e >>> 0) {
				HEAP32[h >> 2] = e;
				h = jl(e) | 0;
				j = a + 116 | 0;
				k = HEAP32[j >> 2] | 0;
				if (k)
					ll(k);
				HEAP32[j >> 2] = h;
				l = h
			} else
				l = HEAP32[a + 116 >> 2] | 0;
			Jj(d, l, e);
			l = a + 4 | 0;
			h = a + 124 | 0;
			j = Ti(l, HEAP32[a + 116 >> 2] | 0, e, h) | 0;
			if ((j | 0) == 0 ? (HEAP32[h >> 2] | 0) != 0 : 0) {
				Ui(l, 0) | 0;
				Kj(d);
				HEAP32[a >> 2] = 0
			}
			HEAP32[2036] = (HEAP32[2036] | 0) + 1;
			HEAP32[2040] = (HEAP32[2040] | 0) + j;
			j = Ek() | 0;
			a = Cy(j | 0, H | 0, 1e6, 0) | 0;
			j = ly(a | 0, H | 0, g | 0, f | 0) | 0;
			f = 8168;
			g = ky(j | 0, H | 0, HEAP32[f >> 2] | 0, HEAP32[f + 4 >> 2] | 0) | 0;
			f = 8168;
			HEAP32[f >> 2] = g;
			HEAP32[f + 4 >> 2] = H;
			i = b;
			return
		}
		function Mi(d, e, f) {
			d = d | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0;
			g = i;
			i = i + 512 | 0;
			h = g;
			j = rw(d, 58) | 0;
			do
				if (j) {
					uy(h | 0, d | 0) | 0;
					HEAP8[h + (j - d) >> 0] = 0;
					k = Yx(j + 1 | 0) | 0;
					if ((k + -1 | 0) >>> 0 < 65535) {
						l = h;
						m = k & 65535;
						break
					}
					if (!f) {
						l = h;
						m = 0
					} else {
						HEAP32[f >> 2] = 99;
						n = 0;
						i = g;
						return n | 0
					}
				} else {
					l = d;
					m = 0
				}
			while (0);
			d = l;
			while (1)
				if (!(HEAP8[d >> 0] | 0))
					break;
				else
					d = d + 1 | 0;
			f = d - l | 0;
			d = e + 4 | 0;
			h = HEAP32[e >> 2] | 0;
			j = (HEAP32[d >> 2] | 0) - h | 0;
			if (f >>> 0 <= j >>> 0) {
				ry(h | 0, l | 0, f | 0) | 0;
				k = (HEAP32[e >> 2] | 0) + f | 0;
				o = HEAP32[d >> 2] | 0;
				if ((k | 0) != (o | 0)) {
					HEAP8[k >> 0] = HEAP8[o >> 0] | 0;
					HEAP32[d >> 2] = (HEAP32[d >> 2] | 0) + (k - o)
				}
			} else {
				ry(h | 0, l | 0, j | 0) | 0;
				Ud(e, l + ((HEAP32[d >> 2] | 0) - (HEAP32[e >> 2] | 0)) | 0, l + f | 0) | 0
			}
			HEAP32[e + 16 >> 2] = 0;
			HEAP16[e + 20 >> 1] = m;
			n = 1;
			i = g;
			return n | 0
		}
		function Ni(d, f, g, h, j) {
			d = d | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			var k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0;
			j = i;
			i = i + 336 | 0;
			h = j;
			k = j + 328 | 0;
			l = j + 320 | 0;
			m = j + 312 | 0;
			n = j + 40 | 0;
			o = j + 32 | 0;
			p = j + 24 | 0;
			q = j + 16 | 0;
			r = j + 8 | 0;
			s = (g | 0) == 0;
			if ((HEAP32[d >> 2] | 0) != -1) {
				if (s) {
					t = 0;
					i = j;
					return t | 0
				}
				HEAP32[g >> 2] = 114;
				t = 0;
				i = j;
				return t | 0
			}
			if (!s)
				HEAP32[g >> 2] = 0;
			g = d + 4 | 0;
			do
				if ((g | 0) != (f | 0)) {
					s = HEAP32[f >> 2] | 0;
					u = HEAP32[f + 4 >> 2] | 0;
					v = u - s | 0;
					w = d + 8 | 0;
					x = HEAP32[g >> 2] | 0;
					y = (HEAP32[w >> 2] | 0) - x | 0;
					if (v >>> 0 > y >>> 0) {
						ry(x | 0, s | 0, y | 0) | 0;
						Ud(g, s + ((HEAP32[w >> 2] | 0) - (HEAP32[g >> 2] | 0)) | 0, u) | 0;
						z = g;
						break
					}
					ry(x | 0, s | 0, v | 0) | 0;
					s = (HEAP32[g >> 2] | 0) + v | 0;
					v = HEAP32[w >> 2] | 0;
					if ((s | 0) != (v | 0)) {
						HEAP8[s >> 0] = HEAP8[v >> 0] | 0;
						HEAP32[w >> 2] = (HEAP32[w >> 2] | 0) + (s - v);
						z = g
					} else
						z = g
				} else
					z = g;
			while (0);
			g = d + 20 | 0;
			v = f + 16 | 0;
			HEAP32[g + 0 >> 2] = HEAP32[v + 0 >> 2];
			HEAP16[g + 4 >> 1] = HEAP16[v + 4 >> 1] | 0;
			v = n + 13 | 0;
			HEAP32[n + 4 >> 2] = v;
			HEAP32[n >> 2] = v;
			HEAP32[n + 8 >> 2] = n + 269;
			HEAP8[v >> 0] = 0;
			v = HEAPU16[d + 24 >> 1] | 0;
			HEAP32[h >> 2] = HEAP32[z >> 2];
			HEAP32[h + 4 >> 2] = v;
			Sf(n, 8176, h) | 0;
			v = HEAP32[n >> 2] | 0;
			HEAP32[o >> 2] = 17;
			HEAP32[o + 4 >> 2] = 0;
			HEAP32[p >> 2] = 175;
			HEAP32[p + 4 >> 2] = 0;
			HEAP32[q >> 2] = 176;
			HEAP32[q + 4 >> 2] = 0;
			HEAP32[r >> 2] = 177;
			HEAP32[r + 4 >> 2] = 0;
			HEAP32[m + 0 >> 2] = HEAP32[o + 0 >> 2];
			HEAP32[m + 4 >> 2] = HEAP32[o + 4 >> 2];
			HEAP32[l + 0 >> 2] = HEAP32[p + 0 >> 2];
			HEAP32[l + 4 >> 2] = HEAP32[p + 4 >> 2];
			HEAP32[k + 0 >> 2] = HEAP32[q + 0 >> 2];
			HEAP32[k + 4 >> 2] = HEAP32[q + 4 >> 2];
			HEAP32[h + 0 >> 2] = HEAP32[r + 0 >> 2];
			HEAP32[h + 4 >> 2] = HEAP32[r + 4 >> 2];
			r = nb(v | 0, m | 0, l | 0, k | 0, h | 0, d | 0) | 0;
			HEAP32[d >> 2] = r;
			HEAP8[d + 28 >> 0] = 0;
			t = (r | 0) != -1;
			i = j;
			return t | 0
		}
		function Oi(a, b, c) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			var d = 0;
			d = i;
			Hj(a + 36 | 0, b, c);
			i = d;
			return
		}
		function Pi(b) {
			b = b | 0;
			HEAP8[b + 28 >> 0] = 1;
			return
		}
		function Qi(d) {
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0;
			e = i;
			HEAP8[d + 28 >> 0] = 0;
			f = d + 4 | 0;
			g = HEAP32[f >> 2] | 0;
			h = d + 8 | 0;
			if ((g | 0) != (HEAP32[h >> 2] | 0)) {
				HEAP8[g >> 0] = 0;
				HEAP32[h >> 2] = HEAP32[f >> 2]
			}
			HEAP16[d + 24 >> 1] = 0;
			f = HEAP32[d >> 2] | 0;
			if ((f | 0) == -1) {
				i = e;
				return
			}
			Na(f | 0);
			HEAP32[d >> 2] = -1;
			i = e;
			return
		}
		function Ri(d) {
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0;
			e = i;
			HEAP8[d + 28 >> 0] = 0;
			f = d + 4 | 0;
			g = HEAP32[f >> 2] | 0;
			h = d + 8 | 0;
			if ((g | 0) != (HEAP32[h >> 2] | 0)) {
				HEAP8[g >> 0] = 0;
				HEAP32[h >> 2] = HEAP32[f >> 2]
			}
			HEAP16[d + 24 >> 1] = 0;
			f = HEAP32[d >> 2] | 0;
			if ((f | 0) == -1) {
				i = e;
				return
			}
			Na(f | 0);
			HEAP32[d >> 2] = -1;
			i = e;
			return
		}
		function Si(b, d, e, f) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0;
			g = i;
			h = (f | 0) == 0;
			if (!(HEAP8[b + 28 >> 0] | 0)) {
				if (h) {
					j = -1;
					i = g;
					return j | 0
				}
				HEAP32[f >> 2] = 107;
				j = -1;
				i = g;
				return j | 0
			} else {
				if (!h)
					HEAP32[f >> 2] = 0;
				f = b + 36 | 0;
				b = Gj(f) | 0;
				h = b >>> 0 < e >>> 0 ? b : e;
				Jj(f, d, h);
				j = h;
				i = g;
				return j | 0
			}
			return 0
		}
		function Ti(b, d, e, f) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0;
			g = i;
			h = (f | 0) == 0;
			do
				if (!(HEAP8[b + 28 >> 0] | 0))
					if (h)
						j = -1;
					else {
						HEAP32[f >> 2] = 107;
						j = -1
					}
				else {
					if (!h)
						HEAP32[f >> 2] = 0;
					k = HEAP32[b >> 2] | 0;
					if ((k | 0) == -1) {
						if (h) {
							j = -1;
							break
						}
						HEAP32[f >> 2] = 107;
						j = -1;
						break
					} else {
						l = Ta(k | 0, d | 0, e | 0) | 0;
						k = (l | 0) != -1;
						if (k | h) {
							j = k ? l : 0;
							break
						}
						HEAP32[f >> 2] = HEAP32[(bc() | 0) >> 2];
						j = 0;
						break
					}
				}
			while (0);
			i = g;
			return j | 0
		}
		function Ui(d, e) {
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0;
			f = i;
			g = d + 4 | 0;
			h = HEAP32[g >> 2] | 0;
			j = d + 8 | 0;
			if ((h | 0) != (HEAP32[j >> 2] | 0)) {
				HEAP8[h >> 0] = 0;
				HEAP32[j >> 2] = HEAP32[g >> 2]
			}
			HEAP16[d + 24 >> 1] = 0;
			g = (e | 0) == 0;
			if (!g)
				HEAP32[e >> 2] = 0;
			j = HEAP32[d >> 2] | 0;
			if ((j | 0) != -1) {
				Na(j | 0);
				HEAP32[d >> 2] = -1;
				k = 1;
				i = f;
				return k | 0
			}
			if (g) {
				k = 0;
				i = f;
				return k | 0
			}
			HEAP32[e >> 2] = 107;
			k = 0;
			i = f;
			return k | 0
		}
		function Vi(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0;
			d = i;
			e = (b | 0) == 0;
			if (!e)
				HEAP32[b >> 2] = 0;
			if ((HEAP32[a >> 2] | 0) == -1)
				if (e)
					f = 0;
				else {
					HEAP32[b >> 2] = 107;
					f = 0
				}
			else
				f = Gj(a + 36 | 0) | 0;
			i = d;
			return f | 0
		}
		function Wi(d, e) {
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0;
			f = i;
			HEAP32[d >> 2] = -1;
			HEAP32[d + 4 >> 2] = 43112;
			HEAP32[d + 8 >> 2] = 43112;
			HEAP32[d + 12 >> 2] = 43113;
			HEAP32[d + 20 >> 2] = 0;
			HEAP16[d + 24 >> 1] = 0;
			HEAP8[d + 29 >> 0] = 1;
			g = d + 32 | 0;
			HEAP32[g >> 2] = e;
			e = d + 36 | 0;
			Ej(e);
			HEAP8[d + 28 >> 0] = 0;
			Fj(e, HEAP32[g >> 2] | 0);
			i = f;
			return
		}
		function Xi(d) {
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0;
			e = i;
			f = HEAP32[d >> 2] | 0;
			do
				if ((f | 0) != -1) {
					g = d + 4 | 0;
					h = HEAP32[g >> 2] | 0;
					j = d + 8 | 0;
					if ((h | 0) != (HEAP32[j >> 2] | 0)) {
						HEAP8[h >> 0] = 0;
						HEAP32[j >> 2] = HEAP32[g >> 2];
						g = HEAP32[d >> 2] | 0;
						HEAP16[d + 24 >> 1] = 0;
						if ((g | 0) == -1)
							break;
						else
							k = g
					} else {
						HEAP16[d + 24 >> 1] = 0;
						k = f
					}
					Na(k | 0);
					HEAP32[d >> 2] = -1
				}
			while (0);
			k = HEAP32[d + 52 >> 2] | 0;
			if (((k | 0) != 0 ? (f = k + 4 | 0, g = (HEAP32[f >> 2] | 0) + -1 | 0, HEAP32[f >> 2] = g, (g | 0) == 0) : 0) ? (lc[c[(HEAP32[k >> 2] | 0) + 8 >> 2] & 255](k), g = k + 8 | 0, f = (HEAP32[g >> 2] | 0) + -1 | 0, HEAP32[g >> 2] = f, (f | 0) == 0) : 0)
				lc[c[(HEAP32[k >> 2] | 0) + 12 >> 2] & 255](k);
			k = HEAP32[d + 40 >> 2] | 0;
			if (((k | 0) != 0 ? (f = k + 4 | 0, g = (HEAP32[f >> 2] | 0) + -1 | 0, HEAP32[f >> 2] = g, (g | 0) == 0) : 0) ? (lc[c[(HEAP32[k >> 2] | 0) + 8 >> 2] & 255](k), g = k + 8 | 0, f = (HEAP32[g >> 2] | 0) + -1 | 0, HEAP32[g >> 2] = f, (f | 0) == 0) : 0)
				lc[c[(HEAP32[k >> 2] | 0) + 12 >> 2] & 255](k);
			k = HEAP32[d + 4 >> 2] | 0;
			if ((k | 0) == 0 ? 1 : ((HEAP32[d + 12 >> 2] | 0) - k | 0) < 2) {
				i = e;
				return
			}
			ll(k);
			i = e;
			return
		}
		function Yi(a) {
			a = a | 0;
			return 8184 + (a * 12 | 0) | 0
		}
		function Zi(a) {
			a = a | 0;
			return 8408 + (a << 3) | 0
		}
		function _i(a) {
			a = a | 0;
			return 8488 + (a << 3) | 0
		}
		function $i(a, b, d, e, f) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0;
			g = i;
			i = i + 192 | 0;
			h = g;
			j = a + 208 | 0;
			k = HEAP32[a + 216 >> 2] | 0;
			l = HEAP32[a + 212 >> 2] | 0;
			m = l + (((b >>> 0) % (k >>> 0) | 0) << 2) | 0;
			n = HEAP32[m >> 2] | 0;
			if (!n) {
				o = 0;
				i = g;
				return o | 0
			} else
				p = n;
			while (1) {
				if ((HEAP32[p >> 2] | 0) == (b | 0))
					break;
				n = HEAP32[p + 192 >> 2] | 0;
				if (!n) {
					o = 0;
					q = 28;
					break
				} else
					p = n
			}
			if ((q | 0) == 28) {
				i = g;
				return o | 0
			}
			if ((p | 0) == (HEAP32[l + (k << 2) >> 2] | 0)) {
				o = 0;
				i = g;
				return o | 0
			}
			lj(h, p + 8 | 0);
			k = h + 168 | 0;
			l = p + 176 | 0;
			HEAP32[k >> 2] = HEAP32[l >> 2];
			q = h + 172 | 0;
			b = p + 180 | 0;
			HEAP32[q >> 2] = HEAP32[b >> 2];
			HEAP32[l >> 2] = 0;
			HEAP32[b >> 2] = 0;
			b = h + 176 | 0;
			l = p + 184 | 0;
			HEAP32[b >> 2] = HEAP32[l >> 2];
			n = h + 180 | 0;
			r = p + 188 | 0;
			HEAP32[n >> 2] = HEAP32[r >> 2];
			HEAP32[l >> 2] = 0;
			HEAP32[r >> 2] = 0;
			if (!(HEAP32[p + 192 >> 2] | 0)) {
				r = m;
				do
					r = r + 4 | 0;
				while ((HEAP32[r >> 2] | 0) == 0)
			}
			r = HEAP32[m >> 2] | 0;
			l = HEAP32[r + 192 >> 2] | 0;
			if ((r | 0) == (p | 0))
				HEAP32[m >> 2] = l;
			else {
				m = r;
				r = l;
				while (1) {
					s = HEAP32[r + 192 >> 2] | 0;
					if ((r | 0) == (p | 0))
						break;
					else {
						l = r;
						r = s;
						m = l
					}
				}
				HEAP32[m + 192 >> 2] = s
			}
			jj(j, p);
			p = a + 220 | 0;
			HEAP32[p >> 2] = (HEAP32[p >> 2] | 0) + -1;
			kj(d, h) | 0;
			d = HEAP32[k >> 2] | 0;
			p = HEAP32[q >> 2] | 0;
			HEAP32[k >> 2] = 0;
			HEAP32[q >> 2] = 0;
			q = HEAP32[e >> 2] | 0;
			HEAP32[e >> 2] = d;
			HEAP32[e + 4 >> 2] = p;
			if (((q | 0) != 0 ? (p = q + 4 | 0, e = (HEAP32[p >> 2] | 0) + -1 | 0, HEAP32[p >> 2] = e, (e | 0) == 0) : 0) ? (lc[c[(HEAP32[q >> 2] | 0) + 8 >> 2] & 255](q), e = q + 8 | 0, p = (HEAP32[e >> 2] | 0) + -1 | 0, HEAP32[e >> 2] = p, (p | 0) == 0) : 0)
				lc[c[(HEAP32[q >> 2] | 0) + 12 >> 2] & 255](q);
			q = HEAP32[b >> 2] | 0;
			p = HEAP32[n >> 2] | 0;
			HEAP32[b >> 2] = 0;
			HEAP32[n >> 2] = 0;
			n = HEAP32[f >> 2] | 0;
			HEAP32[f >> 2] = q;
			HEAP32[f + 4 >> 2] = p;
			if (((n | 0) != 0 ? (p = n + 4 | 0, f = (HEAP32[p >> 2] | 0) + -1 | 0, HEAP32[p >> 2] = f, (f | 0) == 0) : 0) ? (lc[c[(HEAP32[n >> 2] | 0) + 8 >> 2] & 255](n), f = n + 8 | 0, p = (HEAP32[f >> 2] | 0) + -1 | 0, HEAP32[f >> 2] = p, (p | 0) == 0) : 0)
				lc[c[(HEAP32[n >> 2] | 0) + 12 >> 2] & 255](n);
			n = HEAP32[b >> 2] | 0;
			if (((n | 0) != 0 ? (b = n + 4 | 0, p = (HEAP32[b >> 2] | 0) + -1 | 0, HEAP32[b >> 2] = p, (p | 0) == 0) : 0) ? (lc[c[(HEAP32[n >> 2] | 0) + 8 >> 2] & 255](n), p = n + 8 | 0, b = (HEAP32[p >> 2] | 0) + -1 | 0, HEAP32[p >> 2] = b, (b | 0) == 0) : 0)
				lc[c[(HEAP32[n >> 2] | 0) + 12 >> 2] & 255](n);
			n = HEAP32[k >> 2] | 0;
			if (((n | 0) != 0 ? (k = n + 4 | 0, b = (HEAP32[k >> 2] | 0) + -1 | 0, HEAP32[k >> 2] = b, (b | 0) == 0) : 0) ? (lc[c[(HEAP32[n >> 2] | 0) + 8 >> 2] & 255](n), b = n + 8 | 0, k = (HEAP32[b >> 2] | 0) + -1 | 0, HEAP32[b >> 2] = k, (k | 0) == 0) : 0)
				lc[c[(HEAP32[n >> 2] | 0) + 12 >> 2] & 255](n);
			ij(h);
			o = 1;
			i = g;
			return o | 0
		}
		function aj(b, d, e) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0;
			f = i;
			i = i + 192 | 0;
			g = f + 184 | 0;
			h = f;
			j = f + 176 | 0;
			k = f + 168 | 0;
			HEAP32[h >> 2] = -1;
			l = h + 24 | 0;
			HEAP32[h + 20 >> 2] = l;
			HEAP32[h + 8 >> 2] = l;
			HEAP32[h + 4 >> 2] = l;
			HEAP32[h + 12 >> 2] = h + 48;
			HEAP8[l >> 0] = 0;
			HEAP32[h + 48 >> 2] = 0;
			HEAP32[h + 52 >> 2] = 0;
			HEAP8[h + 56 >> 0] = 0;
			HEAP32[h + 80 >> 2] = 0;
			HEAP32[h + 104 >> 2] = 0;
			HEAP32[h + 128 >> 2] = 0;
			HEAP32[h + 152 >> 2] = 0;
			HEAP32[h + 160 >> 2] = 0;
			HEAP32[j >> 2] = 0;
			l = j + 4 | 0;
			HEAP32[l >> 2] = 0;
			HEAP32[k >> 2] = 0;
			HEAP32[k + 4 >> 2] = 0;
			do
				if ($i(b, d, h, j, k) | 0 ? (m = HEAP32[l >> 2] | 0, (m | 0) != 0) : 0) {
					HEAP32[g >> 2] = e;
					n = HEAP32[m + 72 >> 2] | 0;
					if (!n) {
						m = ub(4) | 0;
						HEAP32[m >> 2] = 504;
						fc(m | 0, 480, 16)
					} else {
						vc[c[(HEAP32[n >> 2] | 0) + 24 >> 2] & 31](n, h, g);
						break
					}
				}
			while (0);
			g = HEAP32[k >> 2] | 0;
			if (((g | 0) != 0 ? (k = g + 4 | 0, e = (HEAP32[k >> 2] | 0) + -1 | 0, HEAP32[k >> 2] = e, (e | 0) == 0) : 0) ? (lc[c[(HEAP32[g >> 2] | 0) + 8 >> 2] & 255](g), e = g + 8 | 0, k = (HEAP32[e >> 2] | 0) + -1 | 0, HEAP32[e >> 2] = k, (k | 0) == 0) : 0)
				lc[c[(HEAP32[g >> 2] | 0) + 12 >> 2] & 255](g);
			g = HEAP32[j >> 2] | 0;
			if (!g) {
				ij(h);
				i = f;
				return
			}
			j = g + 4 | 0;
			k = (HEAP32[j >> 2] | 0) + -1 | 0;
			HEAP32[j >> 2] = k;
			if (k) {
				ij(h);
				i = f;
				return
			}
			lc[c[(HEAP32[g >> 2] | 0) + 8 >> 2] & 255](g);
			k = g + 8 | 0;
			j = (HEAP32[k >> 2] | 0) + -1 | 0;
			HEAP32[k >> 2] = j;
			if (j) {
				ij(h);
				i = f;
				return
			}
			lc[c[(HEAP32[g >> 2] | 0) + 12 >> 2] & 255](g);
			ij(h);
			i = f;
			return
		}
		function bj(b, d, e, f, g) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0;
			h = i;
			i = i + 208 | 0;
			j = h + 192 | 0;
			k = h + 188 | 0;
			l = h + 184 | 0;
			m = h;
			n = h + 176 | 0;
			o = h + 168 | 0;
			HEAP32[m >> 2] = -1;
			p = m + 24 | 0;
			HEAP32[m + 20 >> 2] = p;
			HEAP32[m + 8 >> 2] = p;
			HEAP32[m + 4 >> 2] = p;
			HEAP32[m + 12 >> 2] = m + 48;
			HEAP8[p >> 0] = 0;
			HEAP32[m + 48 >> 2] = 0;
			HEAP32[m + 52 >> 2] = 0;
			HEAP8[m + 56 >> 0] = 0;
			HEAP32[m + 80 >> 2] = 0;
			HEAP32[m + 104 >> 2] = 0;
			HEAP32[m + 128 >> 2] = 0;
			HEAP32[m + 152 >> 2] = 0;
			HEAP32[m + 160 >> 2] = 0;
			HEAP32[n >> 2] = 0;
			p = n + 4 | 0;
			HEAP32[p >> 2] = 0;
			HEAP32[o >> 2] = 0;
			HEAP32[o + 4 >> 2] = 0;
			do
				if ($i(b, d, m, n, o) | 0 ? (q = HEAP32[p >> 2] | 0, (q | 0) != 0) : 0) {
					HEAP32[j >> 2] = e;
					HEAP32[k >> 2] = f;
					HEAP32[l >> 2] = g;
					r = HEAP32[q + 48 >> 2] | 0;
					if (!r) {
						q = ub(4) | 0;
						HEAP32[q >> 2] = 504;
						fc(q | 0, 480, 16)
					} else {
						oc[c[(HEAP32[r >> 2] | 0) + 24 >> 2] & 3](r, m, j, k, l);
						break
					}
				}
			while (0);
			l = HEAP32[o >> 2] | 0;
			if (((l | 0) != 0 ? (o = l + 4 | 0, k = (HEAP32[o >> 2] | 0) + -1 | 0, HEAP32[o >> 2] = k, (k | 0) == 0) : 0) ? (lc[c[(HEAP32[l >> 2] | 0) + 8 >> 2] & 255](l), k = l + 8 | 0, o = (HEAP32[k >> 2] | 0) + -1 | 0, HEAP32[k >> 2] = o, (o | 0) == 0) : 0)
				lc[c[(HEAP32[l >> 2] | 0) + 12 >> 2] & 255](l);
			l = HEAP32[n >> 2] | 0;
			if (!l) {
				ij(m);
				i = h;
				return
			}
			n = l + 4 | 0;
			o = (HEAP32[n >> 2] | 0) + -1 | 0;
			HEAP32[n >> 2] = o;
			if (o) {
				ij(m);
				i = h;
				return
			}
			lc[c[(HEAP32[l >> 2] | 0) + 8 >> 2] & 255](l);
			o = l + 8 | 0;
			n = (HEAP32[o >> 2] | 0) + -1 | 0;
			HEAP32[o >> 2] = n;
			if (n) {
				ij(m);
				i = h;
				return
			}
			lc[c[(HEAP32[l >> 2] | 0) + 12 >> 2] & 255](l);
			ij(m);
			i = h;
			return
		}
		function cj(b, d, e, f, g) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0;
			h = i;
			i = i + 208 | 0;
			j = h + 192 | 0;
			k = h + 188 | 0;
			l = h + 184 | 0;
			m = h;
			n = h + 176 | 0;
			o = h + 168 | 0;
			HEAP32[m >> 2] = -1;
			p = m + 24 | 0;
			HEAP32[m + 20 >> 2] = p;
			HEAP32[m + 8 >> 2] = p;
			HEAP32[m + 4 >> 2] = p;
			HEAP32[m + 12 >> 2] = m + 48;
			HEAP8[p >> 0] = 0;
			HEAP32[m + 48 >> 2] = 0;
			HEAP32[m + 52 >> 2] = 0;
			HEAP8[m + 56 >> 0] = 0;
			HEAP32[m + 80 >> 2] = 0;
			HEAP32[m + 104 >> 2] = 0;
			HEAP32[m + 128 >> 2] = 0;
			HEAP32[m + 152 >> 2] = 0;
			HEAP32[m + 160 >> 2] = 0;
			HEAP32[n >> 2] = 0;
			HEAP32[n + 4 >> 2] = 0;
			HEAP32[o >> 2] = 0;
			p = o + 4 | 0;
			HEAP32[p >> 2] = 0;
			do
				if ($i(b, d, m, n, o) | 0 ? (q = HEAP32[p >> 2] | 0, (q | 0) != 0) : 0) {
					HEAP32[j >> 2] = e;
					HEAP32[k >> 2] = f;
					HEAP32[l >> 2] = g;
					r = HEAP32[q + 96 >> 2] | 0;
					if (!r) {
						q = ub(4) | 0;
						HEAP32[q >> 2] = 504;
						fc(q | 0, 480, 16)
					} else {
						oc[c[(HEAP32[r >> 2] | 0) + 24 >> 2] & 3](r, m, j, k, l);
						break
					}
				}
			while (0);
			l = HEAP32[o >> 2] | 0;
			if (((l | 0) != 0 ? (o = l + 4 | 0, k = (HEAP32[o >> 2] | 0) + -1 | 0, HEAP32[o >> 2] = k, (k | 0) == 0) : 0) ? (lc[c[(HEAP32[l >> 2] | 0) + 8 >> 2] & 255](l), k = l + 8 | 0, o = (HEAP32[k >> 2] | 0) + -1 | 0, HEAP32[k >> 2] = o, (o | 0) == 0) : 0)
				lc[c[(HEAP32[l >> 2] | 0) + 12 >> 2] & 255](l);
			l = HEAP32[n >> 2] | 0;
			if (!l) {
				ij(m);
				i = h;
				return
			}
			n = l + 4 | 0;
			o = (HEAP32[n >> 2] | 0) + -1 | 0;
			HEAP32[n >> 2] = o;
			if (o) {
				ij(m);
				i = h;
				return
			}
			lc[c[(HEAP32[l >> 2] | 0) + 8 >> 2] & 255](l);
			o = l + 8 | 0;
			n = (HEAP32[o >> 2] | 0) + -1 | 0;
			HEAP32[o >> 2] = n;
			if (n) {
				ij(m);
				i = h;
				return
			}
			lc[c[(HEAP32[l >> 2] | 0) + 12 >> 2] & 255](l);
			ij(m);
			i = h;
			return
		}
		function dj(b, d) {
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0;
			e = i;
			i = i + 192 | 0;
			f = e;
			g = e + 176 | 0;
			h = e + 168 | 0;
			HEAP32[f >> 2] = -1;
			j = f + 24 | 0;
			HEAP32[f + 20 >> 2] = j;
			HEAP32[f + 8 >> 2] = j;
			HEAP32[f + 4 >> 2] = j;
			HEAP32[f + 12 >> 2] = f + 48;
			HEAP8[j >> 0] = 0;
			HEAP32[f + 48 >> 2] = 0;
			HEAP32[f + 52 >> 2] = 0;
			HEAP8[f + 56 >> 0] = 0;
			HEAP32[f + 80 >> 2] = 0;
			HEAP32[f + 104 >> 2] = 0;
			HEAP32[f + 128 >> 2] = 0;
			HEAP32[f + 152 >> 2] = 0;
			HEAP32[f + 160 >> 2] = 0;
			HEAP32[g >> 2] = 0;
			j = g + 4 | 0;
			HEAP32[j >> 2] = 0;
			HEAP32[h >> 2] = 0;
			HEAP32[h + 4 >> 2] = 0;
			do
				if ($i(b, d, f, g, h) | 0 ? (k = HEAP32[j >> 2] | 0, (k | 0) != 0) : 0) {
					l = HEAP32[k + 24 >> 2] | 0;
					if (!l) {
						k = ub(4) | 0;
						HEAP32[k >> 2] = 504;
						fc(k | 0, 480, 16)
					} else {
						rc[c[(HEAP32[l >> 2] | 0) + 24 >> 2] & 127](l, f);
						break
					}
				}
			while (0);
			j = HEAP32[h >> 2] | 0;
			if (((j | 0) != 0 ? (h = j + 4 | 0, d = (HEAP32[h >> 2] | 0) + -1 | 0, HEAP32[h >> 2] = d, (d | 0) == 0) : 0) ? (lc[c[(HEAP32[j >> 2] | 0) + 8 >> 2] & 255](j), d = j + 8 | 0, h = (HEAP32[d >> 2] | 0) + -1 | 0, HEAP32[d >> 2] = h, (h | 0) == 0) : 0)
				lc[c[(HEAP32[j >> 2] | 0) + 12 >> 2] & 255](j);
			j = HEAP32[g >> 2] | 0;
			if (!j) {
				ij(f);
				i = e;
				return
			}
			g = j + 4 | 0;
			h = (HEAP32[g >> 2] | 0) + -1 | 0;
			HEAP32[g >> 2] = h;
			if (h) {
				ij(f);
				i = e;
				return
			}
			lc[c[(HEAP32[j >> 2] | 0) + 8 >> 2] & 255](j);
			h = j + 8 | 0;
			g = (HEAP32[h >> 2] | 0) + -1 | 0;
			HEAP32[h >> 2] = g;
			if (g) {
				ij(f);
				i = e;
				return
			}
			lc[c[(HEAP32[j >> 2] | 0) + 12 >> 2] & 255](j);
			ij(f);
			i = e;
			return
		}
		function ej(b, e, f, g) {
			b = b | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0,
			O = 0,
			P = 0;
			h = i;
			i = i + 240 | 0;
			j = h + 168 | 0;
			k = h + 216 | 0;
			l = h;
			m = h + 200 | 0;
			n = h + 192 | 0;
			o = h + 184 | 0;
			p = j;
			HEAP32[p >> 2] = 0;
			HEAP32[p + 4 >> 2] = 0;
			HEAP32[j >> 2] = j;
			p = j + 4 | 0;
			HEAP32[p >> 2] = j;
			Nj(k, g, f);
			f = k + 4 | 0;
			g = HEAP32[f >> 2] | 0;
			q = k + 8 | 0;
			r = HEAP32[q >> 2] | 0;
			s = (HEAP32[g + 4 >> 2] | 0) + r | 0;
			t = r + 4 | 0;
			HEAP32[q >> 2] = t;
			r = jy(HEAPU8[s >> 0] | HEAPU8[s + 1 >> 0] << 8 | HEAPU8[s + 2 >> 0] << 16 | HEAPU8[s + 3 >> 0] << 24 | 0) | 0;
			a: do
				if ((r | 0) > 0) {
					s = l + 20 | 0;
					u = l + 4 | 0;
					v = l + 8 | 0;
					w = l + 16 | 0;
					x = l + 44 | 0;
					y = l + 44 | 0;
					z = m + 4 | 0;
					A = m + 8 | 0;
					B = l + 48 | 0;
					C = t;
					D = g;
					E = 1;
					while (1) {
						HEAP32[w >> 2] = s;
						HEAP32[u >> 2] = s;
						HEAP32[l >> 2] = s;
						HEAP32[v >> 2] = x;
						HEAP8[s >> 0] = 0;
						HEAP32[y + 0 >> 2] = 0;
						HEAP32[y + 4 >> 2] = 0;
						HEAP32[y + 8 >> 2] = 0;
						HEAP32[y + 12 >> 2] = 0;
						HEAP32[m >> 2] = 43112;
						HEAP32[z >> 2] = 43112;
						HEAP32[A >> 2] = 43113;
						F = C + 1 | 0;
						HEAP32[q >> 2] = F;
						G = HEAP32[D + 4 >> 2] | 0;
						do
							if (!(HEAP8[G + C >> 0] | 0)) {
								H = G + F | 0;
								I = py(H | 0) | 0;
								if (!I) {
									J = C + 2 | 0;
									HEAP32[q >> 2] = J;
									K = J;
									L = 43113;
									M = 43112;
									break
								} else {
									ol(H, I, m) | 0;
									H = I + 1 + (HEAP32[q >> 2] | 0) | 0;
									HEAP32[q >> 2] = H;
									K = H;
									L = HEAP32[A >> 2] | 0;
									M = HEAP32[m >> 2] | 0;
									break
								}
							} else {
								K = F;
								L = 43113;
								M = 43112
							}
						while (0);
						if ((L - M | 0) < 2 | (M | 0) == 0)
							N = K;
						else {
							ll(M);
							N = HEAP32[q >> 2] | 0
						}
						F = HEAP32[(HEAP32[f >> 2] | 0) + 4 >> 2] | 0;
						G = F + N | 0;
						H = N + 4 | 0;
						HEAP32[q >> 2] = H;
						I = B;
						HEAP32[I >> 2] = jy(HEAPU8[G >> 0] | HEAPU8[G + 1 >> 0] << 8 | HEAPU8[G + 2 >> 0] << 16 | HEAPU8[G + 3 >> 0] << 24 | 0) | 0;
						HEAP32[I + 4 >> 2] = 0;
						HEAP32[q >> 2] = N + 12;
						I = F + H | 0;
						H = I;
						F = I + 4 | 0;
						I = Lb(HEAPU8[H >> 0] | HEAPU8[H + 1 >> 0] << 8 | HEAPU8[H + 2 >> 0] << 16 | HEAPU8[H + 3 >> 0] << 24 | 0, HEAPU8[F >> 0] | HEAPU8[F + 1 >> 0] << 8 | HEAPU8[F + 2 >> 0] << 16 | HEAPU8[F + 3 >> 0] << 24 | 0) | 0;
						HEAP32[y >> 2] = I;
						I = ml(72, 0, 0, 0, 0, 0) | 0;
						F = I + 8 | 0;
						H = I + 28 | 0;
						HEAP32[I + 24 >> 2] = H;
						HEAP32[I + 12 >> 2] = H;
						HEAP32[F >> 2] = H;
						G = I + 52 | 0;
						HEAP32[I + 16 >> 2] = G;
						HEAP8[H >> 0] = 0;
						Rf(F, HEAP32[l >> 2] | 0, HEAP32[u >> 2] | 0) | 0;
						HEAP32[G + 0 >> 2] = HEAP32[y + 0 >> 2];
						HEAP32[G + 4 >> 2] = HEAP32[y + 4 >> 2];
						HEAP32[G + 8 >> 2] = HEAP32[y + 8 >> 2];
						HEAP32[G + 12 >> 2] = HEAP32[y + 12 >> 2];
						HEAP32[I >> 2] = j;
						HEAP32[I + 4 >> 2] = HEAP32[p >> 2];
						HEAP32[HEAP32[p >> 2] >> 2] = I;
						HEAP32[p >> 2] = I;
						I = HEAP32[l >> 2] | 0;
						if (!(((I | 0) == 0 ? 1 : ((HEAP32[v >> 2] | 0) - I | 0) < 2) | (HEAP32[w >> 2] | 0) == (I | 0)))
							ll(I);
						if ((E | 0) >= (r | 0))
							break a;
						C = HEAP32[q >> 2] | 0;
						D = HEAP32[f >> 2] | 0;
						E = E + 1 | 0
					}
				}
			while (0);
			HEAP32[l >> 2] = -1;
			f = l + 24 | 0;
			HEAP32[l + 20 >> 2] = f;
			HEAP32[l + 8 >> 2] = f;
			HEAP32[l + 4 >> 2] = f;
			HEAP32[l + 12 >> 2] = l + 48;
			HEAP8[f >> 0] = 0;
			HEAP32[l + 48 >> 2] = 0;
			HEAP32[l + 52 >> 2] = 0;
			HEAP8[l + 56 >> 0] = 0;
			HEAP32[l + 80 >> 2] = 0;
			HEAP32[l + 104 >> 2] = 0;
			HEAP32[l + 128 >> 2] = 0;
			HEAP32[l + 152 >> 2] = 0;
			HEAP32[l + 160 >> 2] = 0;
			HEAP32[n >> 2] = 0;
			f = n + 4 | 0;
			HEAP32[f >> 2] = 0;
			HEAP32[o >> 2] = 0;
			HEAP32[o + 4 >> 2] = 0;
			do
				if ($i(b, e, l, n, o) | 0 ? (q = HEAP32[f >> 2] | 0, (q | 0) != 0) : 0) {
					r = HEAP32[q + 120 >> 2] | 0;
					if (!r) {
						q = ub(4) | 0;
						HEAP32[q >> 2] = 504;
						fc(q | 0, 480, 16)
					} else {
						vc[c[(HEAP32[r >> 2] | 0) + 24 >> 2] & 31](r, l, j);
						break
					}
				}
			while (0);
			f = HEAP32[o >> 2] | 0;
			if (((f | 0) != 0 ? (o = f + 4 | 0, e = (HEAP32[o >> 2] | 0) + -1 | 0, HEAP32[o >> 2] = e, (e | 0) == 0) : 0) ? (lc[c[(HEAP32[f >> 2] | 0) + 8 >> 2] & 255](f), e = f + 8 | 0, o = (HEAP32[e >> 2] | 0) + -1 | 0, HEAP32[e >> 2] = o, (o | 0) == 0) : 0)
				lc[c[(HEAP32[f >> 2] | 0) + 12 >> 2] & 255](f);
			f = HEAP32[n >> 2] | 0;
			if (((f | 0) != 0 ? (n = f + 4 | 0, o = (HEAP32[n >> 2] | 0) + -1 | 0, HEAP32[n >> 2] = o, (o | 0) == 0) : 0) ? (lc[c[(HEAP32[f >> 2] | 0) + 8 >> 2] & 255](f), o = f + 8 | 0, n = (HEAP32[o >> 2] | 0) + -1 | 0, HEAP32[o >> 2] = n, (n | 0) == 0) : 0)
				lc[c[(HEAP32[f >> 2] | 0) + 12 >> 2] & 255](f);
			ij(l);
			l = HEAP32[k + 12 >> 2] | 0;
			if (((l | 0) != 0 ? (f = l + 4 | 0, n = (HEAP32[f >> 2] | 0) + -1 | 0, HEAP32[f >> 2] = n, (n | 0) == 0) : 0) ? (lc[c[(HEAP32[l >> 2] | 0) + 8 >> 2] & 255](l), n = l + 8 | 0, f = (HEAP32[n >> 2] | 0) + -1 | 0, HEAP32[n >> 2] = f, (f | 0) == 0) : 0)
				lc[c[(HEAP32[l >> 2] | 0) + 12 >> 2] & 255](l);
			l = HEAP32[k >> 2] | 0;
			if (((l | 0) != 0 ? (k = l + 4 | 0, f = (HEAP32[k >> 2] | 0) + -1 | 0, HEAP32[k >> 2] = f, (f | 0) == 0) : 0) ? (lc[c[(HEAP32[l >> 2] | 0) + 8 >> 2] & 255](l), f = l + 8 | 0, k = (HEAP32[f >> 2] | 0) + -1 | 0, HEAP32[f >> 2] = k, (k | 0) == 0) : 0)
				lc[c[(HEAP32[l >> 2] | 0) + 12 >> 2] & 255](l);
			l = HEAP32[j >> 2] | 0;
			if ((l | 0) == (j | 0)) {
				i = h;
				return
			} else
				O = l;
			do {
				l = O;
				O = HEAP32[O >> 2] | 0;
				k = HEAP32[l + 8 >> 2] | 0;
				if ((k | 0) == 0 ? 1 : ((HEAP32[l + 16 >> 2] | 0) - k | 0) < 2) {
					if (l)
						P = 40
				} else if ((HEAP32[l + 24 >> 2] | 0) == (k | 0))
					P = 40;
				else {
					ll(k);
					P = 40
				}
				if ((P | 0) == 40) {
					P = 0;
					ll(l)
				}
			} while ((O | 0) != (j | 0));
			i = h;
			return
		}
		function fj() {
			var b = 0,
			d = 0;
			b = i;
			if (HEAP8[8616] | 0) {
				i = b;
				return
			}
			Yj(8608);
			Sa(163, 8608, o | 0) | 0;
			d = 8616;
			HEAP32[d >> 2] = 1;
			HEAP32[d + 4 >> 2] = 0;
			i = b;
			return
		}
		function gj() {
			var b = 0,
			d = 0;
			b = i;
			if (HEAP8[8648] | 0) {
				i = b;
				return
			};
			HEAP32[2156] = 0;
			HEAP32[2157] = 0;
			HEAP32[2158] = 0;
			HEAP32[2159] = 0;
			HEAP32[2160] = 0;
			HEAP32[2161] = 0;
			mj(8624, 100, 8);
			Sa(178, 8624, o | 0) | 0;
			d = 8648;
			HEAP32[d >> 2] = 1;
			HEAP32[d + 4 >> 2] = 0;
			i = b;
			return
		}
		function hj() {
			var a = 0,
			b = 0;
			a = i;
			b = 8584;
			HEAP32[b >> 2] = 0;
			HEAP32[b + 4 >> 2] = 0;
			HEAP32[2146] = 8584;
			HEAP32[2147] = 8584;
			Sa(179, 8584, o | 0) | 0;
			i = a;
			return
		}
		function ij(a) {
			a = a | 0;
			var b = 0,
			d = 0,
			e = 0;
			b = i;
			d = HEAP32[a + 152 >> 2] | 0;
			if ((d | 0) != (a + 136 | 0)) {
				if (d)
					lc[c[(HEAP32[d >> 2] | 0) + 20 >> 2] & 255](d)
			} else
				lc[c[(HEAP32[d >> 2] | 0) + 16 >> 2] & 255](d);
			d = HEAP32[a + 128 >> 2] | 0;
			if ((d | 0) != (a + 112 | 0)) {
				if (d)
					lc[c[(HEAP32[d >> 2] | 0) + 20 >> 2] & 255](d)
			} else
				lc[c[(HEAP32[d >> 2] | 0) + 16 >> 2] & 255](d);
			d = HEAP32[a + 104 >> 2] | 0;
			if ((d | 0) != (a + 88 | 0)) {
				if (d)
					lc[c[(HEAP32[d >> 2] | 0) + 20 >> 2] & 255](d)
			} else
				lc[c[(HEAP32[d >> 2] | 0) + 16 >> 2] & 255](d);
			d = HEAP32[a + 80 >> 2] | 0;
			if ((d | 0) != (a + 64 | 0)) {
				if (d)
					lc[c[(HEAP32[d >> 2] | 0) + 20 >> 2] & 255](d)
			} else
				lc[c[(HEAP32[d >> 2] | 0) + 16 >> 2] & 255](d);
			d = a + 52 | 0;
			e = HEAP32[d >> 2] | 0;
			if (e)
				ll(e);
			HEAP32[d >> 2] = 0;
			d = HEAP32[a + 4 >> 2] | 0;
			if ((d | 0) == 0 ? 1 : ((HEAP32[a + 12 >> 2] | 0) - d | 0) < 2) {
				i = b;
				return
			}
			if ((HEAP32[a + 20 >> 2] | 0) == (d | 0)) {
				i = b;
				return
			}
			ll(d);
			i = b;
			return
		}
		function jj(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0;
			a = i;
			d = HEAP32[b + 184 >> 2] | 0;
			if (((d | 0) != 0 ? (e = d + 4 | 0, f = (HEAP32[e >> 2] | 0) + -1 | 0, HEAP32[e >> 2] = f, (f | 0) == 0) : 0) ? (lc[c[(HEAP32[d >> 2] | 0) + 8 >> 2] & 255](d), f = d + 8 | 0, e = (HEAP32[f >> 2] | 0) + -1 | 0, HEAP32[f >> 2] = e, (e | 0) == 0) : 0)
				lc[c[(HEAP32[d >> 2] | 0) + 12 >> 2] & 255](d);
			d = HEAP32[b + 176 >> 2] | 0;
			if (((d | 0) != 0 ? (e = d + 4 | 0, f = (HEAP32[e >> 2] | 0) + -1 | 0, HEAP32[e >> 2] = f, (f | 0) == 0) : 0) ? (lc[c[(HEAP32[d >> 2] | 0) + 8 >> 2] & 255](d), f = d + 8 | 0, e = (HEAP32[f >> 2] | 0) + -1 | 0, HEAP32[f >> 2] = e, (e | 0) == 0) : 0)
				lc[c[(HEAP32[d >> 2] | 0) + 12 >> 2] & 255](d);
			ij(b + 8 | 0);
			if (!b) {
				i = a;
				return
			}
			ll(b);
			i = a;
			return
		}
		function kj(b, d) {
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0;
			e = i;
			HEAP32[b >> 2] = HEAP32[d >> 2];
			f = b + 4 | 0;
			g = (b | 0) == (d | 0);
			if (!g) {
				h = HEAP32[f >> 2] | 0;
				j = b + 8 | 0;
				if ((h | 0) != (HEAP32[j >> 2] | 0)) {
					HEAP8[h >> 0] = 0;
					HEAP32[j >> 2] = HEAP32[f >> 2]
				}
				Rf(f, HEAP32[d + 4 >> 2] | 0, HEAP32[d + 8 >> 2] | 0) | 0;
				if (!g) {
					g = b + 48 | 0;
					f = d + 48 | 0;
					j = HEAP32[g >> 2] | 0;
					HEAP32[g >> 2] = HEAP32[f >> 2];
					HEAP32[f >> 2] = j;
					j = b + 52 | 0;
					f = d + 52 | 0;
					g = HEAP32[j >> 2] | 0;
					HEAP32[j >> 2] = HEAP32[f >> 2];
					HEAP32[f >> 2] = g
				}
			}
			HEAP8[b + 56 >> 0] = HEAP8[d + 56 >> 0] | 0;
			g = b + 64 | 0;
			f = d + 64 | 0;
			j = b + 80 | 0;
			h = HEAP32[j >> 2] | 0;
			if ((h | 0) != (g | 0)) {
				if (h)
					lc[c[(HEAP32[h >> 2] | 0) + 20 >> 2] & 255](h)
			} else
				lc[c[(HEAP32[h >> 2] | 0) + 16 >> 2] & 255](h);
			HEAP32[j >> 2] = 0;
			h = d + 80 | 0;
			k = HEAP32[h >> 2] | 0;
			do
				if (k)
					if ((k | 0) == (f | 0)) {
						HEAP32[j >> 2] = g;
						l = HEAP32[h >> 2] | 0;
						rc[c[(HEAP32[l >> 2] | 0) + 12 >> 2] & 127](l, g);
						break
					} else {
						HEAP32[j >> 2] = k;
						HEAP32[h >> 2] = 0;
						break
					}
				else
					HEAP32[j >> 2] = 0;
			while (0);
			j = b + 88 | 0;
			h = d + 88 | 0;
			k = b + 104 | 0;
			g = HEAP32[k >> 2] | 0;
			if ((g | 0) != (j | 0)) {
				if (g)
					lc[c[(HEAP32[g >> 2] | 0) + 20 >> 2] & 255](g)
			} else
				lc[c[(HEAP32[g >> 2] | 0) + 16 >> 2] & 255](g);
			HEAP32[k >> 2] = 0;
			g = d + 104 | 0;
			f = HEAP32[g >> 2] | 0;
			do
				if (f)
					if ((f | 0) == (h | 0)) {
						HEAP32[k >> 2] = j;
						l = HEAP32[g >> 2] | 0;
						rc[c[(HEAP32[l >> 2] | 0) + 12 >> 2] & 127](l, j);
						break
					} else {
						HEAP32[k >> 2] = f;
						HEAP32[g >> 2] = 0;
						break
					}
				else
					HEAP32[k >> 2] = 0;
			while (0);
			k = b + 112 | 0;
			g = d + 112 | 0;
			f = b + 128 | 0;
			j = HEAP32[f >> 2] | 0;
			if ((j | 0) != (k | 0)) {
				if (j)
					lc[c[(HEAP32[j >> 2] | 0) + 20 >> 2] & 255](j)
			} else
				lc[c[(HEAP32[j >> 2] | 0) + 16 >> 2] & 255](j);
			HEAP32[f >> 2] = 0;
			j = d + 128 | 0;
			h = HEAP32[j >> 2] | 0;
			do
				if (h)
					if ((h | 0) == (g | 0)) {
						HEAP32[f >> 2] = k;
						l = HEAP32[j >> 2] | 0;
						rc[c[(HEAP32[l >> 2] | 0) + 12 >> 2] & 127](l, k);
						break
					} else {
						HEAP32[f >> 2] = h;
						HEAP32[j >> 2] = 0;
						break
					}
				else
					HEAP32[f >> 2] = 0;
			while (0);
			f = b + 136 | 0;
			j = d + 136 | 0;
			h = b + 152 | 0;
			k = HEAP32[h >> 2] | 0;
			if ((k | 0) != (f | 0)) {
				if (k)
					lc[c[(HEAP32[k >> 2] | 0) + 20 >> 2] & 255](k)
			} else
				lc[c[(HEAP32[k >> 2] | 0) + 16 >> 2] & 255](k);
			HEAP32[h >> 2] = 0;
			k = d + 152 | 0;
			g = HEAP32[k >> 2] | 0;
			if (!g) {
				HEAP32[h >> 2] = 0;
				m = d + 160 | 0;
				n = HEAP32[m >> 2] | 0;
				o = b + 160 | 0;
				HEAP32[o >> 2] = n;
				i = e;
				return b | 0
			}
			if ((g | 0) == (j | 0)) {
				HEAP32[h >> 2] = f;
				j = HEAP32[k >> 2] | 0;
				rc[c[(HEAP32[j >> 2] | 0) + 12 >> 2] & 127](j, f);
				m = d + 160 | 0;
				n = HEAP32[m >> 2] | 0;
				o = b + 160 | 0;
				HEAP32[o >> 2] = n;
				i = e;
				return b | 0
			} else {
				HEAP32[h >> 2] = g;
				HEAP32[k >> 2] = 0;
				m = d + 160 | 0;
				n = HEAP32[m >> 2] | 0;
				o = b + 160 | 0;
				HEAP32[o >> 2] = n;
				i = e;
				return b | 0
			}
			return 0
		}
		function lj(b, d) {
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0;
			e = i;
			HEAP32[b >> 2] = HEAP32[d >> 2];
			f = b + 4 | 0;
			g = b + 24 | 0;
			HEAP32[b + 20 >> 2] = g;
			HEAP32[b + 8 >> 2] = g;
			HEAP32[f >> 2] = g;
			HEAP32[b + 12 >> 2] = b + 48;
			HEAP8[g >> 0] = 0;
			Rf(f, HEAP32[d + 4 >> 2] | 0, HEAP32[d + 8 >> 2] | 0) | 0;
			HEAP32[b >> 2] = HEAP32[d >> 2];
			f = b + 48 | 0;
			HEAP32[f >> 2] = 0;
			g = b + 52 | 0;
			HEAP32[g >> 2] = 0;
			h = d + 48 | 0;
			HEAP32[f >> 2] = HEAP32[h >> 2];
			f = d + 52 | 0;
			HEAP32[g >> 2] = HEAP32[f >> 2];
			HEAP32[h >> 2] = 0;
			HEAP32[f >> 2] = 0;
			HEAP8[b + 56 >> 0] = HEAP8[d + 56 >> 0] | 0;
			f = b + 64 | 0;
			h = d + 80 | 0;
			g = HEAP32[h >> 2] | 0;
			do
				if (g)
					if ((g | 0) == (d + 64 | 0)) {
						HEAP32[b + 80 >> 2] = f;
						j = HEAP32[h >> 2] | 0;
						rc[c[(HEAP32[j >> 2] | 0) + 12 >> 2] & 127](j, f);
						break
					} else {
						HEAP32[b + 80 >> 2] = g;
						HEAP32[h >> 2] = 0;
						break
					}
				else
					HEAP32[b + 80 >> 2] = 0;
			while (0);
			h = b + 88 | 0;
			g = d + 104 | 0;
			f = HEAP32[g >> 2] | 0;
			do
				if (f)
					if ((f | 0) == (d + 88 | 0)) {
						HEAP32[b + 104 >> 2] = h;
						j = HEAP32[g >> 2] | 0;
						rc[c[(HEAP32[j >> 2] | 0) + 12 >> 2] & 127](j, h);
						break
					} else {
						HEAP32[b + 104 >> 2] = f;
						HEAP32[g >> 2] = 0;
						break
					}
				else
					HEAP32[b + 104 >> 2] = 0;
			while (0);
			g = b + 112 | 0;
			f = d + 128 | 0;
			h = HEAP32[f >> 2] | 0;
			do
				if (h)
					if ((h | 0) == (d + 112 | 0)) {
						HEAP32[b + 128 >> 2] = g;
						j = HEAP32[f >> 2] | 0;
						rc[c[(HEAP32[j >> 2] | 0) + 12 >> 2] & 127](j, g);
						break
					} else {
						HEAP32[b + 128 >> 2] = h;
						HEAP32[f >> 2] = 0;
						break
					}
				else
					HEAP32[b + 128 >> 2] = 0;
			while (0);
			f = b + 136 | 0;
			h = d + 152 | 0;
			g = HEAP32[h >> 2] | 0;
			if (!g) {
				HEAP32[b + 152 >> 2] = 0;
				k = d + 160 | 0;
				l = HEAP32[k >> 2] | 0;
				m = b + 160 | 0;
				HEAP32[m >> 2] = l;
				i = e;
				return
			}
			if ((g | 0) == (d + 136 | 0)) {
				HEAP32[b + 152 >> 2] = f;
				j = HEAP32[h >> 2] | 0;
				rc[c[(HEAP32[j >> 2] | 0) + 12 >> 2] & 127](j, f);
				k = d + 160 | 0;
				l = HEAP32[k >> 2] | 0;
				m = b + 160 | 0;
				HEAP32[m >> 2] = l;
				i = e;
				return
			} else {
				HEAP32[b + 152 >> 2] = g;
				HEAP32[h >> 2] = 0;
				k = d + 160 | 0;
				l = HEAP32[k >> 2] | 0;
				m = b + 160 | 0;
				HEAP32[m >> 2] = l;
				i = e;
				return
			}
		}
		function mj(a, b, d) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0;
			e = i;
			f = a + 16 | 0;
			if ((HEAP32[f >> 2] | 0) > 0) {
				g = a + 8 | 0;
				h = 0;
				do {
					pj((HEAP32[a >> 2] | 0) + ((c[(HEAP32[g >> 2] | 0) + (h << 2) >> 2] | 0) * 160 | 0) + 24 | 0);
					h = h + 1 | 0
				} while ((h | 0) < (HEAP32[f >> 2] | 0))
			}
			h = a + 20 | 0;
			g = HEAP32[h >> 2] | 0;
			if ((g | 0) > 0) {
				j = HEAP32[a + 8 >> 2] | 0;
				k = 0;
				do {
					HEAP32[j + (k << 2) >> 2] = k;
					k = k + 1 | 0;
					l = HEAP32[h >> 2] | 0
				} while ((k | 0) < (l | 0));
				m = l
			} else
				m = g;
			HEAP32[f >> 2] = 0;
			if ((b | 0) < 1 | (m | 0) == (b | 0))
				n = m;
			else {
				m = a + 12 | 0;
				g = HEAP32[m >> 2] | 0;
				if (g)
					ll(g);
				HEAP32[m >> 2] = 0;
				g = a + 8 | 0;
				k = HEAP32[g >> 2] | 0;
				if (k)
					ll(k);
				HEAP32[g >> 2] = 0;
				k = a + 4 | 0;
				j = HEAP32[k >> 2] | 0;
				if (j)
					ll(j);
				j = jl((b * 160 | 0) + d | 0) | 0;
				HEAP32[k >> 2] = j;
				k = d + -1 + j | 0;
				HEAP32[a >> 2] = k - ((k >>> 0) % (d >>> 0) | 0);
				d = b >>> 0 > 1073741823 ? -1 : b << 2;
				HEAP32[g >> 2] = jl(d) | 0;
				HEAP32[m >> 2] = jl(d) | 0;
				HEAP32[h >> 2] = b;
				n = b
			}
			if ((n | 0) <= 0) {
				HEAP32[f >> 2] = 0;
				i = e;
				return
			}
			n = HEAP32[a + 8 >> 2] | 0;
			a = 0;
			do {
				HEAP32[n + (a << 2) >> 2] = a;
				a = a + 1 | 0
			} while ((a | 0) < (HEAP32[h >> 2] | 0));
			HEAP32[f >> 2] = 0;
			i = e;
			return
		}
		function nj(a) {
			a = a | 0;
			var b = 0,
			d = 0,
			e = 0,
			f = 0,
			g = 0;
			b = i;
			d = a + 16 | 0;
			if ((HEAP32[d >> 2] | 0) > 0) {
				e = a + 8 | 0;
				f = 0;
				do {
					pj((HEAP32[a >> 2] | 0) + ((c[(HEAP32[e >> 2] | 0) + (f << 2) >> 2] | 0) * 160 | 0) + 24 | 0);
					f = f + 1 | 0
				} while ((f | 0) < (HEAP32[d >> 2] | 0))
			}
			f = a + 20 | 0;
			if ((HEAP32[f >> 2] | 0) > 0) {
				e = HEAP32[a + 8 >> 2] | 0;
				g = 0;
				do {
					HEAP32[e + (g << 2) >> 2] = g;
					g = g + 1 | 0
				} while ((g | 0) < (HEAP32[f >> 2] | 0))
			}
			HEAP32[d >> 2] = 0;
			d = a + 12 | 0;
			f = HEAP32[d >> 2] | 0;
			if (f)
				ll(f);
			HEAP32[d >> 2] = 0;
			d = a + 8 | 0;
			f = HEAP32[d >> 2] | 0;
			if (f)
				ll(f);
			HEAP32[d >> 2] = 0;
			d = a + 4 | 0;
			a = HEAP32[d >> 2] | 0;
			if (!a) {
				HEAP32[d >> 2] = 0;
				i = b;
				return
			}
			ll(a);
			HEAP32[d >> 2] = 0;
			i = b;
			return
		}
		function oj(a) {
			a = a | 0;
			var b = 0,
			d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0;
			b = i;
			d = HEAP32[a >> 2] | 0;
			if ((d | 0) == (a | 0)) {
				i = b;
				return
			} else
				e = d;
			do {
				d = e;
				e = HEAP32[e >> 2] | 0;
				f = HEAP32[d + 8 >> 2] | 0;
				if ((f | 0) != 0 ? (g = f + 8 | 0, h = (HEAP32[g >> 2] | 0) + -1 | 0, HEAP32[g >> 2] = h, (h | 0) == 0) : 0)
					lc[c[(HEAP32[f >> 2] | 0) + 12 >> 2] & 255](f);
				if (d)
					ll(d)
			} while ((e | 0) != (a | 0));
			i = b;
			return
		}
		function pj(a) {
			a = a | 0;
			var b = 0,
			d = 0,
			e = 0;
			b = i;
			HEAP32[2150] = (HEAP32[2150] | 0) + -1;
			d = HEAP32[a + 120 >> 2] | 0;
			if ((d | 0) != (a + 104 | 0)) {
				if (d)
					lc[c[(HEAP32[d >> 2] | 0) + 20 >> 2] & 255](d)
			} else
				lc[c[(HEAP32[d >> 2] | 0) + 16 >> 2] & 255](d);
			d = HEAP32[a + 96 >> 2] | 0;
			if ((d | 0) != (a + 80 | 0)) {
				if (d)
					lc[c[(HEAP32[d >> 2] | 0) + 20 >> 2] & 255](d)
			} else
				lc[c[(HEAP32[d >> 2] | 0) + 16 >> 2] & 255](d);
			d = HEAP32[a + 72 >> 2] | 0;
			if ((d | 0) != (a + 56 | 0)) {
				if (d)
					lc[c[(HEAP32[d >> 2] | 0) + 20 >> 2] & 255](d)
			} else
				lc[c[(HEAP32[d >> 2] | 0) + 16 >> 2] & 255](d);
			d = HEAP32[a + 48 >> 2] | 0;
			if ((d | 0) != (a + 32 | 0)) {
				if (d)
					lc[c[(HEAP32[d >> 2] | 0) + 20 >> 2] & 255](d)
			} else
				lc[c[(HEAP32[d >> 2] | 0) + 16 >> 2] & 255](d);
			d = HEAP32[a + 24 >> 2] | 0;
			if ((d | 0) != (a + 8 | 0)) {
				if (d)
					lc[c[(HEAP32[d >> 2] | 0) + 20 >> 2] & 255](d)
			} else
				lc[c[(HEAP32[d >> 2] | 0) + 16 >> 2] & 255](d);
			d = HEAP32[a >> 2] | 0;
			if (!d) {
				i = b;
				return
			}
			a = d + 8 | 0;
			e = (HEAP32[a >> 2] | 0) + -1 | 0;
			HEAP32[a >> 2] = e;
			if (e) {
				i = b;
				return
			}
			lc[c[(HEAP32[d >> 2] | 0) + 12 >> 2] & 255](d);
			i = b;
			return
		}
		function qj() {
			var b = 0;
			b = i;
			HEAP32[2168] = 8676;
			HEAP32[2165] = 8676;
			HEAP32[2164] = 8676;
			HEAP32[2166] = 8700;
			HEAP8[8676] = 0;
			Sa(180, 8656, o | 0) | 0;
			HEAP32[2180] = 8724;
			HEAP32[2177] = 8724;
			HEAP32[2176] = 8724;
			HEAP32[2178] = 8748;
			HEAP8[8724] = 0;
			Sa(180, 8704, o | 0) | 0;
			HEAP32[2192] = 8772;
			HEAP32[2189] = 8772;
			HEAP32[2188] = 8772;
			HEAP32[2190] = 8796;
			HEAP8[8772] = 0;
			Sa(180, 8752, o | 0) | 0;
			HEAP32[2204] = 8820;
			HEAP32[2201] = 8820;
			HEAP32[2200] = 8820;
			HEAP32[2202] = 8844;
			HEAP8[8820] = 0;
			Sa(180, 8800, o | 0) | 0;
			HEAP32[2213] = 0;
			HEAP32[2214] = 0;
			HEAP32[2215] = 0;
			HEAP32[2216] = 0;
			HEAP32[2213] = 8852;
			HEAP32[2214] = 8852;
			HEAP32[2215] = 0;
			HEAP8[8864] = 0;
			HEAP32[2217] = 0;
			Sa(181, 8848, o | 0) | 0;
			i = b;
			return
		}
		function rj(a) {
			a = a | 0;
			var b = 0,
			d = 0;
			b = i;
			d = HEAP32[a >> 2] | 0;
			if ((d | 0) == 0 ? 1 : ((HEAP32[a + 8 >> 2] | 0) - d | 0) < 2) {
				i = b;
				return
			}
			if ((HEAP32[a + 16 >> 2] | 0) == (d | 0)) {
				i = b;
				return
			}
			ll(d);
			i = b;
			return
		}
		function sj(a) {
			a = a | 0;
			var b = 0;
			b = i;
			tj(a, HEAP32[a + 12 >> 2] | 0);
			i = b;
			return
		}
		function tj(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0,
			e = 0;
			d = i;
			if (!b) {
				i = d;
				return
			} else
				e = b;
			do {
				tj(a, HEAP32[e >> 2] | 0);
				b = e;
				e = HEAP32[e + 4 >> 2] | 0;
				ll(b)
			} while ((e | 0) != 0);
			i = d;
			return
		}
		function uj(a, b, d) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0;
			e = i;
			f = a + 44 | 0;
			g = a + 48 | 0;
			if (!(HEAP32[g >> 2] | 0)) {
				h = zx(4, 28) | 0;
				if (!h) {
					j = 0;
					k = 0
				} else {
					l = h + 20 | 0;
					HEAP32[l >> 2] = 0;
					m = h + 24 | 0;
					HEAP32[m >> 2] = 0;
					if (d) {
						HEAP32[l >> 2] = d;
						HEAP32[m >> 2] = jl(d) | 0
					}
					HEAP32[h + 8 >> 2] = 1;
					HEAP32[h >> 2] = 1048;
					HEAP32[h + 12 >> 2] = 1;
					HEAP32[h + 16 >> 2] = l;
					HEAP32[h + 4 >> 2] = 2;
					j = h;
					k = l
				}
				l = HEAP32[f >> 2] | 0;
				HEAP32[f >> 2] = j;
				HEAP32[g >> 2] = k;
				if (((l | 0) != 0 ? (k = l + 4 | 0, h = (HEAP32[k >> 2] | 0) + -1 | 0, HEAP32[k >> 2] = h, (h | 0) == 0) : 0) ? (lc[c[(HEAP32[l >> 2] | 0) + 8 >> 2] & 255](l), h = l + 8 | 0, k = (HEAP32[h >> 2] | 0) + -1 | 0, HEAP32[h >> 2] = k, (k | 0) == 0) : 0)
					lc[c[(HEAP32[l >> 2] | 0) + 12 >> 2] & 255](l);
				n = a + 52 | 0;
				o = j;
				p = HEAP32[(HEAP32[g >> 2] | 0) + 4 >> 2] | 0
			} else {
				j = a + 52 | 0;
				a = (HEAP32[j >> 2] | 0) + d | 0;
				l = zx(4, 28) | 0;
				if (!l) {
					q = 0;
					r = 0
				} else {
					k = l + 20 | 0;
					HEAP32[k >> 2] = 0;
					h = l + 24 | 0;
					HEAP32[h >> 2] = 0;
					if (a) {
						HEAP32[k >> 2] = a;
						HEAP32[h >> 2] = jl(a) | 0
					}
					HEAP32[l + 4 >> 2] = 1;
					HEAP32[l + 8 >> 2] = 1;
					HEAP32[l >> 2] = 1048;
					HEAP32[l + 12 >> 2] = 1;
					HEAP32[l + 16 >> 2] = k;
					q = k;
					r = l
				}
				qy(HEAP32[q + 4 >> 2] | 0, HEAP32[(HEAP32[g >> 2] | 0) + 4 >> 2] | 0, HEAP32[j >> 2] | 0) | 0;
				if (r) {
					l = r + 4 | 0;
					HEAP32[l >> 2] = (HEAP32[l >> 2] | 0) + 1
				}
				l = HEAP32[f >> 2] | 0;
				HEAP32[f >> 2] = r;
				HEAP32[g >> 2] = q;
				if (((l | 0) != 0 ? (q = l + 4 | 0, f = (HEAP32[q >> 2] | 0) + -1 | 0, HEAP32[q >> 2] = f, (f | 0) == 0) : 0) ? (lc[c[(HEAP32[l >> 2] | 0) + 8 >> 2] & 255](l), f = l + 8 | 0, q = (HEAP32[f >> 2] | 0) + -1 | 0, HEAP32[f >> 2] = q, (q | 0) == 0) : 0)
					lc[c[(HEAP32[l >> 2] | 0) + 12 >> 2] & 255](l);
				n = j;
				o = r;
				p = (c[(HEAP32[g >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[j >> 2] | 0) | 0
			}
			qy(p | 0, b | 0, d | 0) | 0;
			HEAP32[n >> 2] = (HEAP32[n >> 2] | 0) + d;
			if (!o) {
				i = e;
				return d | 0
			}
			n = o + 4 | 0;
			b = (HEAP32[n >> 2] | 0) + -1 | 0;
			HEAP32[n >> 2] = b;
			if (b) {
				i = e;
				return d | 0
			}
			lc[c[(HEAP32[o >> 2] | 0) + 8 >> 2] & 255](o);
			b = o + 8 | 0;
			n = (HEAP32[b >> 2] | 0) + -1 | 0;
			HEAP32[b >> 2] = n;
			if (n) {
				i = e;
				return d | 0
			}
			lc[c[(HEAP32[o >> 2] | 0) + 12 >> 2] & 255](o);
			i = e;
			return d | 0
		}
		function vj(b) {
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0;
			d = i;
			e = b + 56 | 0;
			f = HEAP32[e >> 2] | 0;
			if ((f | 0) <= 0) {
				i = d;
				return
			}
			g = b + 48 | 0;
			if (!(HEAP32[g >> 2] | 0)) {
				i = d;
				return
			}
			h = b + 52 | 0;
			j = (HEAP32[h >> 2] | 0) + f | 0;
			f = zx(4, 28) | 0;
			if (!f) {
				k = 0;
				l = 0
			} else {
				m = f + 20 | 0;
				HEAP32[m >> 2] = 0;
				n = f + 24 | 0;
				HEAP32[n >> 2] = 0;
				if (j) {
					HEAP32[m >> 2] = j;
					HEAP32[n >> 2] = jl(j) | 0
				}
				HEAP32[f + 4 >> 2] = 1;
				HEAP32[f + 8 >> 2] = 1;
				HEAP32[f >> 2] = 1048;
				HEAP32[f + 12 >> 2] = 1;
				HEAP32[f + 16 >> 2] = m;
				k = m;
				l = f
			}
			f = k + 4 | 0;
			qy(HEAP32[f >> 2] | 0, HEAP32[(HEAP32[g >> 2] | 0) + 4 >> 2] | 0, HEAP32[h >> 2] | 0) | 0;
			if ((HEAP32[e >> 2] | 0) > 0) {
				m = 0;
				do {
					a[(HEAP32[f >> 2] | 0) + ((HEAP32[h >> 2] | 0) + m) >> 0] = 0;
					m = m + 1 | 0
				} while ((m | 0) < (HEAP32[e >> 2] | 0))
			}
			m = (l | 0) == 0;
			if (!m) {
				f = l + 4 | 0;
				HEAP32[f >> 2] = (HEAP32[f >> 2] | 0) + 1
			}
			f = b + 44 | 0;
			b = HEAP32[f >> 2] | 0;
			HEAP32[f >> 2] = l;
			HEAP32[g >> 2] = k;
			if (((b | 0) != 0 ? (k = b + 4 | 0, g = (HEAP32[k >> 2] | 0) + -1 | 0, HEAP32[k >> 2] = g, (g | 0) == 0) : 0) ? (lc[c[(HEAP32[b >> 2] | 0) + 8 >> 2] & 255](b), g = b + 8 | 0, k = (HEAP32[g >> 2] | 0) + -1 | 0, HEAP32[g >> 2] = k, (k | 0) == 0) : 0)
				lc[c[(HEAP32[b >> 2] | 0) + 12 >> 2] & 255](b);
			HEAP32[h >> 2] = (HEAP32[h >> 2] | 0) + (HEAP32[e >> 2] | 0);
			if (m) {
				i = d;
				return
			}
			m = l + 4 | 0;
			e = (HEAP32[m >> 2] | 0) + -1 | 0;
			HEAP32[m >> 2] = e;
			if (e) {
				i = d;
				return
			}
			lc[c[(HEAP32[l >> 2] | 0) + 8 >> 2] & 255](l);
			e = l + 8 | 0;
			m = (HEAP32[e >> 2] | 0) + -1 | 0;
			HEAP32[e >> 2] = m;
			if (m) {
				i = d;
				return
			}
			lc[c[(HEAP32[l >> 2] | 0) + 12 >> 2] & 255](l);
			i = d;
			return
		}
		function wj(a, b) {
			a = a | 0;
			b = b | 0;
			HEAP32[a >> 2] = 0;
			HEAP32[a + 4 >> 2] = 0;
			HEAP32[a + 12 >> 2] = 43112;
			HEAP32[a + 16 >> 2] = 43112;
			HEAP32[a + 20 >> 2] = 43113;
			HEAP32[a + 28 >> 2] = 43112;
			HEAP32[a + 32 >> 2] = 43112;
			HEAP32[a + 36 >> 2] = 43113;
			HEAP32[a + 44 >> 2] = 0;
			HEAP32[a + 48 >> 2] = 0;
			HEAP32[a + 52 >> 2] = 0;
			HEAP32[a + 56 >> 2] = b;
			HEAP32[a + 60 >> 2] = 43112;
			HEAP32[a + 64 >> 2] = 43112;
			HEAP32[a + 68 >> 2] = 43113;
			HEAP32[a + 76 >> 2] = 0;
			HEAP32[a + 80 >> 2] = 0;
			HEAP32[a + 84 >> 2] = 1e4;
			HEAP32[a + 88 >> 2] = -1;
			HEAP32[a + 92 >> 2] = 0;
			HEAP32[a + 8 >> 2] = 0;
			return
		}
		function xj(b, d, e) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0;
			f = i;
			i = i + 16 | 0;
			g = f;
			HEAP32[g >> 2] = 256;
			h = b + 60 | 0;
			j = b + 64 | 0;
			k = HEAP32[j >> 2] | 0;
			l = HEAP32[h >> 2] | 0;
			m = k;
			n = l;
			o = m - n | 0;
			if (o >>> 0 > 256) {
				p = l + 256 | 0;
				if ((p | 0) != (k | 0)) {
					HEAP8[p >> 0] = HEAP8[k >> 0] | 0;
					HEAP32[j >> 2] = (HEAP32[j >> 2] | 0) + (p - m)
				}
			} else if (o >>> 0 < 256) {
				m = 256 - o | 0;
				p = (HEAP32[b + 68 >> 2] | 0) - n | 0;
				n = p + -1 | 0;
				if (n >>> 0 < 256 ? (k = n >>> 0 > 8 ? n << 1 : 8, n = k >>> 0 < 256 ? 256 : k, k = o >>> 0 > n >>> 0 ? o : n, k >>> 0 >= p >>> 0) : 0)
					pg(h, k);
				if ((o | 0) != 256) {
					o = m + -1 | 0;
					if (o)
						sy((HEAP32[j >> 2] | 0) + 1 | 0, 0, o | 0) | 0;
					HEAP8[HEAP32[j >> 2] >> 0] = 0;
					o = (HEAP32[j >> 2] | 0) + m | 0;
					HEAP32[j >> 2] = o;
					HEAP8[o >> 0] = 0
				}
			}
			o = b + 88 | 0;
			if (!(Pa(HEAP32[o >> 2] | 0, 8880, HEAP32[h >> 2] | 0, g | 0) | 0)) {
				q = b + 8 | 0;
				HEAP32[q >> 2] = 1;
				HEAP32[o >> 2] = -1;
				r = b + 92 | 0;
				HEAP32[r >> 2] = 200;
				uj(b, d, e) | 0;
				vj(b);
				i = f;
				return
			}
			HEAP32[j >> 2] = (HEAP32[h >> 2] | 0) + (HEAP32[g >> 2] | 0);
			q = b + 8 | 0;
			HEAP32[q >> 2] = 1;
			HEAP32[o >> 2] = -1;
			r = b + 92 | 0;
			HEAP32[r >> 2] = 200;
			uj(b, d, e) | 0;
			vj(b);
			i = f;
			return
		}
		function yj(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0;
			d = i;
			e = a + 8 | 0;
			if (HEAP32[e >> 2] | 0) {
				i = d;
				return
			}
			HEAP32[e >> 2] = 3;
			e = a + 88 | 0;
			HEAP32[e >> 2] = 0;
			f = yb(b | 0, 8896, 8904, a | 0, 1, 8, 9, 10) | 0;
			HEAP32[e >> 2] = f;
			Ib(f | 0, HEAP32[a + 84 >> 2] | 0, a | 0, 64);
			i = d;
			return
		}
		function zj(a, b, c, d) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			d = d | 0;
			a = i;
			xj(b, c, d);
			i = a;
			return
		}
		function Aj(a, b, d, e) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			HEAP32[b + 92 >> 2] = d;
			HEAP32[b + 8 >> 2] = 2;
			HEAP32[b + 88 >> 2] = -1;
			return
		}
		function Bj(a, b, d, e) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			HEAP32[b + 76 >> 2] = d;
			HEAP32[b + 80 >> 2] = e;
			return
		}
		function Cj(a, b) {
			a = a | 0;
			b = b | 0;
			HEAP32[b + 8 >> 2] = 2;
			HEAP32[b + 88 >> 2] = -1;
			return
		}
		function Dj(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0;
			d = i;
			HEAP32[a >> 2] = b;
			e = a + 4 | 0;
			f = zx(4, 28) | 0;
			if (!f) {
				HEAP32[e >> 2] = 0;
				HEAP32[a + 8 >> 2] = 0
			} else {
				g = f + 20 | 0;
				HEAP32[g >> 2] = 0;
				h = f + 24 | 0;
				HEAP32[h >> 2] = 0;
				if (b) {
					HEAP32[g >> 2] = b;
					HEAP32[h >> 2] = jl(b) | 0
				}
				HEAP32[f + 4 >> 2] = 1;
				HEAP32[f + 8 >> 2] = 1;
				HEAP32[f >> 2] = 1048;
				HEAP32[f + 12 >> 2] = 1;
				HEAP32[f + 16 >> 2] = g;
				HEAP32[e >> 2] = f;
				HEAP32[a + 8 >> 2] = g
			}
			g = a + 12 | 0;
			HEAP32[g + 0 >> 2] = 0;
			HEAP32[g + 4 >> 2] = 0;
			HEAP32[g + 8 >> 2] = 0;
			HEAP32[g + 12 >> 2] = 0;
			HEAP32[g + 16 >> 2] = 0;
			HEAP32[g + 20 >> 2] = 0;
			i = d;
			return
		}
		function Ej(a) {
			a = a | 0;
			var b = 0,
			d = 0;
			b = i;
			d = a + 0 | 0;
			a = d + 36 | 0;
			do {
				HEAP32[d >> 2] = 0;
				d = d + 4 | 0
			} while ((d | 0) < (a | 0));
			i = b;
			return
		}
		function Fj(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0;
			d = i;
			if (HEAP32[a >> 2] | 0) {
				i = d;
				return
			}
			e = zx(4, 28) | 0;
			if (!e) {
				f = 0;
				g = 0
			} else {
				h = e + 20 | 0;
				HEAP32[h >> 2] = 0;
				j = e + 24 | 0;
				HEAP32[j >> 2] = 0;
				if (b) {
					HEAP32[h >> 2] = b;
					HEAP32[j >> 2] = jl(b) | 0
				}
				HEAP32[e + 4 >> 2] = 1;
				HEAP32[e + 8 >> 2] = 1;
				HEAP32[e >> 2] = 1048;
				HEAP32[e + 12 >> 2] = 1;
				HEAP32[e + 16 >> 2] = h;
				f = e;
				g = h
			}
			HEAP32[a + 12 >> 2] = 0;
			h = a + 4 | 0;
			e = HEAP32[h >> 2] | 0;
			HEAP32[h >> 2] = f;
			HEAP32[a + 8 >> 2] = g;
			g = a + 16 | 0;
			f = HEAP32[g >> 2] | 0;
			HEAP32[g >> 2] = 0;
			HEAP32[a + 20 >> 2] = 0;
			if (((f | 0) != 0 ? (g = f + 4 | 0, h = (HEAP32[g >> 2] | 0) + -1 | 0, HEAP32[g >> 2] = h, (h | 0) == 0) : 0) ? (lc[c[(HEAP32[f >> 2] | 0) + 8 >> 2] & 255](f), h = f + 8 | 0, g = (HEAP32[h >> 2] | 0) + -1 | 0, HEAP32[h >> 2] = g, (g | 0) == 0) : 0)
				lc[c[(HEAP32[f >> 2] | 0) + 12 >> 2] & 255](f);
			if (((e | 0) != 0 ? (f = e + 4 | 0, g = (HEAP32[f >> 2] | 0) + -1 | 0, HEAP32[f >> 2] = g, (g | 0) == 0) : 0) ? (lc[c[(HEAP32[e >> 2] | 0) + 8 >> 2] & 255](e), g = e + 8 | 0, f = (HEAP32[g >> 2] | 0) + -1 | 0, HEAP32[g >> 2] = f, (f | 0) == 0) : 0)
				lc[c[(HEAP32[e >> 2] | 0) + 12 >> 2] & 255](e);
			HEAP32[a >> 2] = b;
			i = d;
			return
		}
		function Gj(a) {
			a = a | 0;
			return HEAP32[a + 32 >> 2] | 0
		}
		function Hj(a, b, d) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0;
			e = i;
			f = a + 28 | 0;
			g = HEAP32[f >> 2] | 0;
			if (g >>> 0 < (HEAP32[a + 24 >> 2] | 0) >>> 0) {
				if (!d)
					h = g;
				else {
					if (!b)
						j = a + 12 | 0;
					else {
						k = a + 12 | 0;
						qy((c[(HEAP32[a + 8 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[k >> 2] | 0) | 0, b | 0, d | 0) | 0;
						j = k
					}
					HEAP32[j >> 2] = (HEAP32[j >> 2] | 0) + d;
					h = HEAP32[f >> 2] | 0
				}
				HEAP32[f >> 2] = h + d;
				l = a + 32 | 0;
				m = HEAP32[l >> 2] | 0;
				n = m + d | 0;
				HEAP32[l >> 2] = n;
				i = e;
				return
			}
			h = HEAP32[a >> 2] | 0;
			if ((g + d | 0) >>> 0 <= h >>> 0) {
				if (!d)
					o = g;
				else {
					if (!b)
						p = a + 12 | 0;
					else {
						j = a + 12 | 0;
						qy((c[(HEAP32[a + 8 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[j >> 2] | 0) | 0, b | 0, d | 0) | 0;
						p = j
					}
					HEAP32[p >> 2] = (HEAP32[p >> 2] | 0) + d;
					o = HEAP32[f >> 2] | 0
				}
				HEAP32[f >> 2] = o + d;
				l = a + 32 | 0;
				m = HEAP32[l >> 2] | 0;
				n = m + d | 0;
				HEAP32[l >> 2] = n;
				i = e;
				return
			}
			if (h >>> 0 > g >>> 0) {
				o = h - g | 0;
				if ((h | 0) == (g | 0)) {
					q = g;
					r = g
				} else {
					if (!b) {
						s = a + 12 | 0;
						t = h
					} else {
						p = a + 12 | 0;
						qy((c[(HEAP32[a + 8 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[p >> 2] | 0) | 0, b | 0, o | 0) | 0;
						s = p;
						t = HEAP32[a >> 2] | 0
					}
					HEAP32[s >> 2] = (HEAP32[s >> 2] | 0) + o;
					q = HEAP32[f >> 2] | 0;
					r = t
				}
			} else {
				q = g;
				r = h
			}
			h = a + 12 | 0;
			HEAP32[h >> 2] = 0;
			g = r - q | 0;
			t = d - g | 0;
			if ((g | 0) == (d | 0)) {
				u = r;
				v = q
			} else {
				if (!b) {
					w = r;
					x = q;
					y = 0
				} else {
					qy(c[(HEAP32[a + 8 >> 2] | 0) + 4 >> 2] | 0, b + g | 0, t | 0) | 0;
					w = HEAP32[a >> 2] | 0;
					x = HEAP32[f >> 2] | 0;
					y = HEAP32[h >> 2] | 0
				}
				HEAP32[h >> 2] = y + t;
				u = w;
				v = x
			}
			HEAP32[f >> 2] = d - u + v;
			l = a + 32 | 0;
			m = HEAP32[l >> 2] | 0;
			n = m + d | 0;
			HEAP32[l >> 2] = n;
			i = e;
			return
		}
		function Ij(a, b, d, e) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0;
			f = i;
			if (!e) {
				i = f;
				return
			}
			if (!b)
				g = a + 8 | 0;
			else {
				h = a + 8 | 0;
				qy((c[(HEAP32[a + 4 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[h >> 2] | 0) | 0, b + d | 0, e | 0) | 0;
				g = h
			}
			HEAP32[g >> 2] = (HEAP32[g >> 2] | 0) + e;
			i = f;
			return
		}
		function Jj(a, b, d) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0;
			e = i;
			f = a + 24 | 0;
			g = HEAP32[f >> 2] | 0;
			h = HEAP32[a + 28 >> 2] | 0;
			do
				if (g >>> 0 <= h >>> 0) {
					if ((g | 0) == (h | 0) ? (HEAP32[a + 32 >> 2] | 0) != 0 : 0)
						break;
					j = HEAP32[a + 8 >> 2] | 0;
					if (!j)
						k = 0;
					else
						k = HEAP32[j + 4 >> 2] | 0;
					qy(b | 0, k + g | 0, d | 0) | 0;
					HEAP32[f >> 2] = (HEAP32[f >> 2] | 0) + d;
					l = a + 32 | 0;
					m = HEAP32[l >> 2] | 0;
					n = m - d | 0;
					HEAP32[l >> 2] = n;
					i = e;
					return
				}
			while (0);
			k = HEAP32[a >> 2] | 0;
			if ((g + d | 0) >>> 0 <= k >>> 0) {
				h = HEAP32[a + 8 >> 2] | 0;
				if (!h)
					o = 0;
				else
					o = HEAP32[h + 4 >> 2] | 0;
				qy(b | 0, o + g | 0, d | 0) | 0;
				HEAP32[f >> 2] = (HEAP32[f >> 2] | 0) + d;
				l = a + 32 | 0;
				m = HEAP32[l >> 2] | 0;
				n = m - d | 0;
				HEAP32[l >> 2] = n;
				i = e;
				return
			}
			o = a + 8 | 0;
			if (k >>> 0 > g >>> 0) {
				h = HEAP32[o >> 2] | 0;
				if (!h)
					p = 0;
				else
					p = HEAP32[h + 4 >> 2] | 0;
				qy(b | 0, p + g | 0, k - g | 0) | 0;
				q = HEAP32[f >> 2] | 0;
				r = HEAP32[a >> 2] | 0
			} else {
				q = g;
				r = k
			}
			k = HEAP32[o >> 2] | 0;
			if (!k)
				s = 0;
			else
				s = HEAP32[k + 4 >> 2] | 0;
			qy(b + (r - q) | 0, s | 0, d - r + q | 0) | 0;
			HEAP32[f >> 2] = d - (HEAP32[a >> 2] | 0) + (HEAP32[f >> 2] | 0);
			l = a + 32 | 0;
			m = HEAP32[l >> 2] | 0;
			n = m - d | 0;
			HEAP32[l >> 2] = n;
			i = e;
			return
		}
		function Kj(a) {
			a = a | 0;
			HEAP32[a + 28 >> 2] = 0;
			HEAP32[a + 24 >> 2] = 0;
			HEAP32[a + 32 >> 2] = 0;
			HEAP32[a + 12 >> 2] = 0;
			return
		}
		function Lj(a) {
			a = a | 0;
			HEAP32[a + 0 >> 2] = 0;
			HEAP32[a + 4 >> 2] = 0;
			HEAP32[a + 8 >> 2] = 0;
			HEAP32[a + 12 >> 2] = 0;
			HEAP32[a + 16 >> 2] = 0;
			return
		}
		function Mj(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0,
			g = 0;
			d = i;
			e = zx(4, 28) | 0;
			if (!e) {
				HEAP32[a >> 2] = 0;
				HEAP32[a + 4 >> 2] = 0
			} else {
				f = e + 20 | 0;
				HEAP32[f >> 2] = 0;
				g = e + 24 | 0;
				HEAP32[g >> 2] = 0;
				if (b) {
					HEAP32[f >> 2] = b;
					HEAP32[g >> 2] = jl(b) | 0
				}
				HEAP32[e + 4 >> 2] = 1;
				HEAP32[e + 8 >> 2] = 1;
				HEAP32[e >> 2] = 1048;
				HEAP32[e + 12 >> 2] = 1;
				HEAP32[e + 16 >> 2] = f;
				HEAP32[a >> 2] = e;
				HEAP32[a + 4 >> 2] = f
			}
			HEAP32[a + 8 >> 2] = 0;
			HEAP32[a + 12 >> 2] = 0;
			HEAP32[a + 16 >> 2] = 0;
			i = d;
			return
		}
		function Nj(a, b, d) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0;
			e = i;
			f = zx(4, 28) | 0;
			if (!f) {
				HEAP32[a >> 2] = 0;
				HEAP32[a + 4 >> 2] = 0;
				g = 0
			} else {
				h = f + 20 | 0;
				HEAP32[h >> 2] = 0;
				j = f + 24 | 0;
				HEAP32[j >> 2] = 0;
				if (b) {
					HEAP32[h >> 2] = b;
					HEAP32[j >> 2] = jl(b) | 0
				}
				HEAP32[f + 4 >> 2] = 1;
				HEAP32[f + 8 >> 2] = 1;
				HEAP32[f >> 2] = 1048;
				HEAP32[f + 12 >> 2] = 1;
				HEAP32[f + 16 >> 2] = h;
				HEAP32[a >> 2] = f;
				HEAP32[a + 4 >> 2] = h;
				g = h
			}
			HEAP32[a + 8 >> 2] = 0;
			HEAP32[a + 12 >> 2] = 0;
			HEAP32[a + 16 >> 2] = 0;
			qy(HEAP32[g + 4 >> 2] | 0, d | 0, b | 0) | 0;
			i = e;
			return
		}
		function Oj(b, d, e, f) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0;
			g = i;
			h = HEAP32[b + 4 >> 2] | 0;
			j = b + 8 | 0;
			if (f) {
				f = HEAP32[j >> 2] | 0;
				HEAP32[j >> 2] = f + 1;
				b = h + 4 | 0;
				a[(HEAP32[b >> 2] | 0) + f >> 0] = 0;
				k = b
			} else
				k = h + 4 | 0;
			qy((HEAP32[k >> 2] | 0) + (HEAP32[j >> 2] | 0) | 0, d | 0, e | 0) | 0;
			d = (HEAP32[j >> 2] | 0) + e | 0;
			HEAP32[j >> 2] = d + 1;
			a[(HEAP32[k >> 2] | 0) + d >> 0] = 0;
			i = g;
			return
		}
		function Pj(a, b, d) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0;
			e = i;
			if (!d) {
				i = e;
				return
			}
			f = HEAP32[b + 4 >> 2] | 0;
			if (!f)
				g = 0;
			else
				g = HEAP32[f + 4 >> 2] | 0;
			f = a + 8 | 0;
			qy(g | 0, (c[(HEAP32[a + 4 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[f >> 2] | 0) | 0, d | 0) | 0;
			HEAP32[f >> 2] = (HEAP32[f >> 2] | 0) + d;
			f = b + 8 | 0;
			HEAP32[f >> 2] = (HEAP32[f >> 2] | 0) + d;
			i = e;
			return
		}
		function Qj(a, b, d, e) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0;
			f = i;
			if (!e) {
				i = f;
				return
			}
			g = a + 8 | 0;
			qy(b + d | 0, (c[(HEAP32[a + 4 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[g >> 2] | 0) | 0, e | 0) | 0;
			HEAP32[g >> 2] = (HEAP32[g >> 2] | 0) + e;
			i = f;
			return
		}
		function Rj(a) {
			a = a | 0;
			var b = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0,
			O = 0,
			P = 0,
			Q = 0,
			R = 0,
			S = 0,
			T = 0,
			U = 0,
			V = 0,
			W = 0,
			X = 0,
			Y = 0,
			Z = 0,
			_ = 0,
			$ = 0,
			aa = 0,
			ba = 0,
			ca = 0,
			da = 0,
			ea = 0,
			fa = 0,
			ga = 0,
			ha = 0,
			ia = 0,
			ja = 0,
			ka = 0,
			la = 0,
			ma = 0,
			na = 0,
			oa = 0,
			pa = 0,
			qa = 0,
			ra = 0,
			sa = 0,
			ta = 0,
			ua = 0,
			va = 0,
			wa = 0,
			xa = 0,
			ya = 0,
			za = 0,
			Aa = 0,
			Ba = 0,
			Ca = 0,
			Da = 0,
			Ea = 0,
			Fa = 0,
			Ga = 0,
			Ha = 0,
			Ia = 0,
			Ja = 0,
			Ka = 0,
			La = 0,
			Ma = 0,
			Na = 0,
			Oa = 0,
			Pa = 0,
			Qa = 0,
			Ra = 0,
			Sa = 0,
			Ta = 0,
			Ua = 0,
			Va = 0,
			Wa = 0,
			Xa = 0,
			Ya = 0,
			Za = 0,
			_a = 0,
			$a = 0,
			ab = 0,
			bb = 0,
			cb = 0,
			db = 0,
			eb = 0,
			fb = 0,
			gb = 0,
			hb = 0,
			ib = 0,
			jb = 0,
			kb = 0,
			lb = 0,
			mb = 0,
			nb = 0,
			ob = 0,
			pb = 0,
			qb = 0,
			rb = 0,
			sb = 0,
			tb = 0,
			ub = 0,
			vb = 0,
			wb = 0,
			xb = 0,
			yb = 0,
			zb = 0,
			Ab = 0,
			Bb = 0,
			Cb = 0,
			Db = 0,
			Eb = 0,
			Fb = 0,
			Gb = 0,
			Hb = 0,
			Ib = 0,
			Jb = 0,
			Kb = 0,
			Lb = 0,
			Mb = 0,
			Nb = 0,
			Ob = 0,
			Pb = 0,
			Qb = 0,
			Rb = 0,
			Sb = 0,
			Tb = 0,
			Ub = 0,
			Vb = 0,
			Wb = 0,
			Xb = 0,
			Yb = 0,
			Zb = 0,
			_b = 0,
			$b = 0;
			b = i;
			i = i + 64 | 0;
			e = b;
			f = a + 32 | 0;
			g = 0;
			while (1) {
				h = ty(HEAPU8[f >> 0] | 0 | 0, 0, 56) | 0;
				j = H;
				k = ty(HEAPU8[f + 1 >> 0] | 0 | 0, 0, 48) | 0;
				l = H | j;
				j = ty(HEAPU8[f + 2 >> 0] | 0 | 0, 0, 40) | 0;
				m = l | H | (HEAPU8[f + 3 >> 0] | 0);
				l = ty(HEAPU8[f + 4 >> 0] | 0 | 0, 0, 24) | 0;
				n = m | H;
				m = ty(HEAPU8[f + 5 >> 0] | 0 | 0, 0, 16) | 0;
				o = n | H;
				n = ty(HEAPU8[f + 6 >> 0] | 0 | 0, 0, 8) | 0;
				p = e + (g << 3) | 0;
				HEAP32[p >> 2] = (k | h | j | l | m) ^ n ^ (HEAPU8[f + 7 >> 0] | 0);
				HEAP32[p + 4 >> 2] = o ^ H;
				g = g + 1 | 0;
				if ((g | 0) == 8)
					break;
				else
					f = f + 8 | 0
			}
			f = e;
			g = a + 104 | 0;
			o = g;
			p = HEAP32[o >> 2] | 0;
			n = HEAP32[o + 4 >> 2] | 0;
			o = p ^ HEAP32[f >> 2];
			m = n ^ HEAP32[f + 4 >> 2];
			f = e + 8 | 0;
			l = f;
			j = a + 112 | 0;
			h = j;
			k = HEAP32[h >> 2] | 0;
			q = HEAP32[h + 4 >> 2] | 0;
			h = k ^ HEAP32[l >> 2];
			r = q ^ HEAP32[l + 4 >> 2];
			l = e + 16 | 0;
			s = l;
			t = a + 120 | 0;
			u = t;
			v = HEAP32[u >> 2] | 0;
			w = HEAP32[u + 4 >> 2] | 0;
			u = v ^ HEAP32[s >> 2];
			x = w ^ HEAP32[s + 4 >> 2];
			s = e + 24 | 0;
			y = s;
			z = a + 128 | 0;
			A = z;
			B = HEAP32[A >> 2] | 0;
			C = HEAP32[A + 4 >> 2] | 0;
			A = B ^ HEAP32[y >> 2];
			D = C ^ HEAP32[y + 4 >> 2];
			y = e + 32 | 0;
			E = y;
			F = a + 136 | 0;
			G = F;
			I = HEAP32[G >> 2] | 0;
			J = HEAP32[G + 4 >> 2] | 0;
			G = I ^ HEAP32[E >> 2];
			K = J ^ HEAP32[E + 4 >> 2];
			E = e + 40 | 0;
			L = E;
			M = a + 144 | 0;
			N = M;
			O = HEAP32[N >> 2] | 0;
			P = HEAP32[N + 4 >> 2] | 0;
			N = O ^ HEAP32[L >> 2];
			Q = P ^ HEAP32[L + 4 >> 2];
			L = e + 48 | 0;
			R = L;
			S = a + 152 | 0;
			T = S;
			U = HEAP32[T >> 2] | 0;
			V = HEAP32[T + 4 >> 2] | 0;
			T = U ^ HEAP32[R >> 2];
			W = V ^ HEAP32[R + 4 >> 2];
			R = e + 56 | 0;
			X = R;
			Y = a + 160 | 0;
			a = Y;
			Z = HEAP32[a >> 2] | 0;
			_ = HEAP32[a + 4 >> 2] | 0;
			a = Z ^ HEAP32[X >> 2];
			$ = _ ^ HEAP32[X + 4 >> 2];
			X = ny(k | 0, q | 0, 8) | 0;
			aa = ny(k | 0, q | 0, 16) | 0;
			ba = ny(k | 0, q | 0, 24) | 0;
			ca = ny(k | 0, q | 0, 40) | 0;
			da = ny(k | 0, q | 0, 48) | 0;
			ea = ny(k | 0, q | 0, 56) | 0;
			fa = ny(p | 0, n | 0, 8) | 0;
			ga = ny(p | 0, n | 0, 16) | 0;
			ha = ny(p | 0, n | 0, 24) | 0;
			ia = ny(p | 0, n | 0, 40) | 0;
			ja = ny(p | 0, n | 0, 48) | 0;
			ka = ny(p | 0, n | 0, 56) | 0;
			la = ny(v | 0, w | 0, 8) | 0;
			ma = ny(v | 0, w | 0, 16) | 0;
			na = ny(v | 0, w | 0, 24) | 0;
			oa = ny(v | 0, w | 0, 40) | 0;
			pa = ny(v | 0, w | 0, 48) | 0;
			qa = ny(v | 0, w | 0, 56) | 0;
			ra = ny(B | 0, C | 0, 8) | 0;
			sa = ny(B | 0, C | 0, 16) | 0;
			ta = ny(B | 0, C | 0, 24) | 0;
			ua = ny(B | 0, C | 0, 40) | 0;
			va = ny(B | 0, C | 0, 48) | 0;
			wa = ny(B | 0, C | 0, 56) | 0;
			xa = ny(I | 0, J | 0, 8) | 0;
			ya = ny(I | 0, J | 0, 16) | 0;
			za = ny(I | 0, J | 0, 24) | 0;
			Aa = ny(I | 0, J | 0, 40) | 0;
			Ba = ny(I | 0, J | 0, 48) | 0;
			Ca = ny(I | 0, J | 0, 56) | 0;
			Da = ny(O | 0, P | 0, 8) | 0;
			Ea = ny(O | 0, P | 0, 16) | 0;
			Fa = ny(O | 0, P | 0, 24) | 0;
			Ga = ny(O | 0, P | 0, 40) | 0;
			Ha = ny(O | 0, P | 0, 48) | 0;
			Ia = ny(O | 0, P | 0, 56) | 0;
			Ja = ny(U | 0, V | 0, 8) | 0;
			Ka = ny(U | 0, V | 0, 16) | 0;
			La = ny(U | 0, V | 0, 24) | 0;
			Ma = ny(U | 0, V | 0, 40) | 0;
			Na = ny(U | 0, V | 0, 48) | 0;
			Oa = ny(U | 0, V | 0, 56) | 0;
			Pa = ny(Z | 0, _ | 0, 8) | 0;
			Qa = ny(Z | 0, _ | 0, 16) | 0;
			Ra = ny(Z | 0, _ | 0, 24) | 0;
			Sa = ny(Z | 0, _ | 0, 40) | 0;
			Ta = ny(Z | 0, _ | 0, 48) | 0;
			Ua = ny(Z | 0, _ | 0, 56) | 0;
			Va = ny(o | 0, m | 0, 8) | 0;
			Wa = ny(o | 0, m | 0, 16) | 0;
			Xa = ny(o | 0, m | 0, 24) | 0;
			Ya = ny(o | 0, m | 0, 40) | 0;
			Za = ny(o | 0, m | 0, 48) | 0;
			_a = ny(o | 0, m | 0, 56) | 0;
			$a = ny(h | 0, r | 0, 8) | 0;
			ab = ny(h | 0, r | 0, 16) | 0;
			bb = ny(h | 0, r | 0, 24) | 0;
			cb = ny(h | 0, r | 0, 40) | 0;
			db = ny(h | 0, r | 0, 48) | 0;
			eb = ny(h | 0, r | 0, 56) | 0;
			fb = ny(u | 0, x | 0, 8) | 0;
			gb = ny(u | 0, x | 0, 16) | 0;
			hb = ny(u | 0, x | 0, 24) | 0;
			ib = ny(u | 0, x | 0, 40) | 0;
			jb = ny(u | 0, x | 0, 48) | 0;
			kb = ny(u | 0, x | 0, 56) | 0;
			lb = ny(A | 0, D | 0, 8) | 0;
			mb = ny(A | 0, D | 0, 16) | 0;
			nb = ny(A | 0, D | 0, 24) | 0;
			ob = ny(A | 0, D | 0, 40) | 0;
			pb = ny(A | 0, D | 0, 48) | 0;
			qb = ny(A | 0, D | 0, 56) | 0;
			rb = ny(G | 0, K | 0, 8) | 0;
			sb = ny(G | 0, K | 0, 16) | 0;
			tb = ny(G | 0, K | 0, 24) | 0;
			ub = ny(G | 0, K | 0, 40) | 0;
			vb = ny(G | 0, K | 0, 48) | 0;
			wb = ny(G | 0, K | 0, 56) | 0;
			xb = ny(N | 0, Q | 0, 8) | 0;
			yb = ny(N | 0, Q | 0, 16) | 0;
			zb = ny(N | 0, Q | 0, 24) | 0;
			Ab = ny(N | 0, Q | 0, 40) | 0;
			Bb = ny(N | 0, Q | 0, 48) | 0;
			Cb = ny(N | 0, Q | 0, 56) | 0;
			Db = ny(T | 0, W | 0, 8) | 0;
			Eb = ny(T | 0, W | 0, 16) | 0;
			Fb = ny(T | 0, W | 0, 24) | 0;
			Gb = ny(T | 0, W | 0, 40) | 0;
			Hb = ny(T | 0, W | 0, 48) | 0;
			Ib = ny(T | 0, W | 0, 56) | 0;
			Jb = ny(a | 0, $ | 0, 8) | 0;
			Kb = ny(a | 0, $ | 0, 16) | 0;
			Lb = ny(a | 0, $ | 0, 24) | 0;
			Mb = ny(a | 0, $ | 0, 40) | 0;
			Nb = ny(a | 0, $ | 0, 48) | 0;
			Ob = ny(a | 0, $ | 0, 56) | 0;
			Pb = p;
			p = ga;
			ga = ha;
			ha = n;
			n = ia;
			ia = ja;
			ja = ka;
			ka = fa;
			fa = k;
			k = aa;
			aa = ba;
			ba = q;
			q = ca;
			ca = da;
			da = ea;
			ea = X;
			X = v;
			v = ma;
			ma = na;
			na = w;
			w = oa;
			oa = pa;
			pa = qa;
			qa = la;
			la = B;
			B = sa;
			sa = ta;
			ta = C;
			C = ua;
			ua = va;
			va = wa;
			wa = ra;
			ra = I;
			I = ya;
			ya = za;
			za = J;
			J = Aa;
			Aa = Ba;
			Ba = Ca;
			Ca = xa;
			xa = O;
			O = Ea;
			Ea = Fa;
			Fa = P;
			P = Ga;
			Ga = Ha;
			Ha = Ia;
			Ia = Da;
			Da = U;
			U = Ka;
			Ka = La;
			La = V;
			V = Ma;
			Ma = Na;
			Na = Oa;
			Oa = Ja;
			Ja = Z;
			Z = Qa;
			Qa = Ra;
			Ra = _;
			_ = Sa;
			Sa = Pa;
			Pa = Ta;
			Ta = Ua;
			Ua = 1;
			Qb = o;
			o = Wa;
			Wa = Xa;
			Xa = m;
			m = Ya;
			Ya = Za;
			Za = _a;
			_a = Va;
			Va = h;
			h = ab;
			ab = bb;
			bb = r;
			r = cb;
			cb = db;
			db = eb;
			eb = $a;
			$a = u;
			u = gb;
			gb = hb;
			hb = x;
			x = ib;
			ib = jb;
			jb = kb;
			kb = fb;
			fb = A;
			A = mb;
			mb = nb;
			nb = D;
			D = ob;
			ob = pb;
			pb = qb;
			qb = lb;
			lb = G;
			G = sb;
			sb = tb;
			tb = K;
			K = ub;
			ub = vb;
			vb = wb;
			wb = rb;
			rb = N;
			N = yb;
			yb = zb;
			zb = Q;
			Q = Ab;
			Ab = Bb;
			Bb = Cb;
			Cb = xb;
			xb = T;
			T = Eb;
			Eb = Fb;
			Fb = W;
			W = Gb;
			Gb = Hb;
			Hb = Ib;
			Ib = Db;
			Db = a;
			a = Kb;
			Kb = Lb;
			Lb = $;
			$ = Mb;
			Mb = Nb;
			Nb = Ob;
			Ob = Jb;
			do {
				Jb = 8912 + (ja << 3) | 0;
				Rb = 10960 + ((Pa & 255) << 3) | 0;
				Sb = 13008 + ((V & 255) << 3) | 0;
				Tb = 15056 + ((Fa & 255) << 3) | 0;
				Ub = 17104 + ((ya & 255) << 3) | 0;
				Vb = 19152 + ((B & 255) << 3) | 0;
				Wb = 21200 + ((qa & 255) << 3) | 0;
				Xb = 23248 + ((fa & 255) << 3) | 0;
				Yb = 25296 + (Ua << 3) | 0;
				Zb = Pb;
				Pb = HEAP32[Rb >> 2] ^ HEAP32[Jb >> 2] ^ HEAP32[Sb >> 2] ^ HEAP32[Tb >> 2] ^ HEAP32[Ub >> 2] ^ HEAP32[Vb >> 2] ^ HEAP32[Wb >> 2] ^ HEAP32[Xb >> 2] ^ HEAP32[Yb >> 2];
				_b = ha;
				ha = HEAP32[Rb + 4 >> 2] ^ HEAP32[Jb + 4 >> 2] ^ HEAP32[Sb + 4 >> 2] ^ HEAP32[Tb + 4 >> 2] ^ HEAP32[Ub + 4 >> 2] ^ HEAP32[Vb + 4 >> 2] ^ HEAP32[Wb + 4 >> 2] ^ HEAP32[Xb + 4 >> 2] ^ HEAP32[Yb + 4 >> 2];
				Yb = 8912 + (da << 3) | 0;
				Xb = 10960 + ((ia & 255) << 3) | 0;
				Wb = 13008 + ((_ & 255) << 3) | 0;
				Vb = 15056 + ((La & 255) << 3) | 0;
				Ub = 17104 + ((Ea & 255) << 3) | 0;
				Tb = 19152 + ((I & 255) << 3) | 0;
				Sb = 21200 + ((wa & 255) << 3) | 0;
				Jb = 23248 + ((X & 255) << 3) | 0;
				fa = HEAP32[Xb >> 2] ^ HEAP32[Yb >> 2] ^ HEAP32[Wb >> 2] ^ HEAP32[Vb >> 2] ^ HEAP32[Ub >> 2] ^ HEAP32[Tb >> 2] ^ HEAP32[Sb >> 2] ^ HEAP32[Jb >> 2];
				Rb = ba;
				ba = HEAP32[Xb + 4 >> 2] ^ HEAP32[Yb + 4 >> 2] ^ HEAP32[Wb + 4 >> 2] ^ HEAP32[Vb + 4 >> 2] ^ HEAP32[Ub + 4 >> 2] ^ HEAP32[Tb + 4 >> 2] ^ HEAP32[Sb + 4 >> 2] ^ HEAP32[Jb + 4 >> 2];
				Jb = 8912 + (pa << 3) | 0;
				Sb = 10960 + ((ca & 255) << 3) | 0;
				Tb = 13008 + ((n & 255) << 3) | 0;
				Ub = 15056 + ((Ra & 255) << 3) | 0;
				Vb = 17104 + ((Ka & 255) << 3) | 0;
				Wb = 19152 + ((O & 255) << 3) | 0;
				Yb = 21200 + ((Ca & 255) << 3) | 0;
				Xb = 23248 + ((la & 255) << 3) | 0;
				X = HEAP32[Sb >> 2] ^ HEAP32[Jb >> 2] ^ HEAP32[Tb >> 2] ^ HEAP32[Ub >> 2] ^ HEAP32[Vb >> 2] ^ HEAP32[Wb >> 2] ^ HEAP32[Yb >> 2] ^ HEAP32[Xb >> 2];
				$b = na;
				na = HEAP32[Sb + 4 >> 2] ^ HEAP32[Jb + 4 >> 2] ^ HEAP32[Tb + 4 >> 2] ^ HEAP32[Ub + 4 >> 2] ^ HEAP32[Vb + 4 >> 2] ^ HEAP32[Wb + 4 >> 2] ^ HEAP32[Yb + 4 >> 2] ^ HEAP32[Xb + 4 >> 2];
				Xb = 8912 + (va << 3) | 0;
				Yb = 10960 + ((oa & 255) << 3) | 0;
				Wb = 13008 + ((q & 255) << 3) | 0;
				Vb = 15056 + ((_b & 255) << 3) | 0;
				_b = 17104 + ((Qa & 255) << 3) | 0;
				Ub = 19152 + ((U & 255) << 3) | 0;
				Tb = 21200 + ((Ia & 255) << 3) | 0;
				Jb = 23248 + ((ra & 255) << 3) | 0;
				la = HEAP32[Yb >> 2] ^ HEAP32[Xb >> 2] ^ HEAP32[Wb >> 2] ^ HEAP32[Vb >> 2] ^ HEAP32[_b >> 2] ^ HEAP32[Ub >> 2] ^ HEAP32[Tb >> 2] ^ HEAP32[Jb >> 2];
				Sb = ta;
				ta = HEAP32[Yb + 4 >> 2] ^ HEAP32[Xb + 4 >> 2] ^ HEAP32[Wb + 4 >> 2] ^ HEAP32[Vb + 4 >> 2] ^ HEAP32[_b + 4 >> 2] ^ HEAP32[Ub + 4 >> 2] ^ HEAP32[Tb + 4 >> 2] ^ HEAP32[Jb + 4 >> 2];
				Jb = 8912 + (Ba << 3) | 0;
				Tb = 10960 + ((ua & 255) << 3) | 0;
				Ub = 13008 + ((w & 255) << 3) | 0;
				_b = 15056 + ((Rb & 255) << 3) | 0;
				Rb = 17104 + ((ga & 255) << 3) | 0;
				Vb = 19152 + ((Z & 255) << 3) | 0;
				Wb = 21200 + ((Oa & 255) << 3) | 0;
				Xb = 23248 + ((xa & 255) << 3) | 0;
				ra = HEAP32[Tb >> 2] ^ HEAP32[Jb >> 2] ^ HEAP32[Ub >> 2] ^ HEAP32[_b >> 2] ^ HEAP32[Rb >> 2] ^ HEAP32[Vb >> 2] ^ HEAP32[Wb >> 2] ^ HEAP32[Xb >> 2];
				Yb = za;
				za = HEAP32[Tb + 4 >> 2] ^ HEAP32[Jb + 4 >> 2] ^ HEAP32[Ub + 4 >> 2] ^ HEAP32[_b + 4 >> 2] ^ HEAP32[Rb + 4 >> 2] ^ HEAP32[Vb + 4 >> 2] ^ HEAP32[Wb + 4 >> 2] ^ HEAP32[Xb + 4 >> 2];
				Xb = 8912 + (Ha << 3) | 0;
				Wb = 10960 + ((Aa & 255) << 3) | 0;
				Vb = 13008 + ((C & 255) << 3) | 0;
				Rb = 15056 + (($b & 255) << 3) | 0;
				$b = 17104 + ((aa & 255) << 3) | 0;
				_b = 19152 + ((p & 255) << 3) | 0;
				Ub = 21200 + ((Sa & 255) << 3) | 0;
				Jb = 23248 + ((Da & 255) << 3) | 0;
				xa = HEAP32[Wb >> 2] ^ HEAP32[Xb >> 2] ^ HEAP32[Vb >> 2] ^ HEAP32[Rb >> 2] ^ HEAP32[$b >> 2] ^ HEAP32[_b >> 2] ^ HEAP32[Ub >> 2] ^ HEAP32[Jb >> 2];
				Fa = HEAP32[Wb + 4 >> 2] ^ HEAP32[Xb + 4 >> 2] ^ HEAP32[Vb + 4 >> 2] ^ HEAP32[Rb + 4 >> 2] ^ HEAP32[$b + 4 >> 2] ^ HEAP32[_b + 4 >> 2] ^ HEAP32[Ub + 4 >> 2] ^ HEAP32[Jb + 4 >> 2];
				Jb = 8912 + (Na << 3) | 0;
				Ub = 10960 + ((Ga & 255) << 3) | 0;
				_b = 13008 + ((J & 255) << 3) | 0;
				$b = 15056 + ((Sb & 255) << 3) | 0;
				Sb = 17104 + ((ma & 255) << 3) | 0;
				Rb = 19152 + ((k & 255) << 3) | 0;
				Vb = 21200 + ((ka & 255) << 3) | 0;
				Xb = 23248 + ((Ja & 255) << 3) | 0;
				Da = HEAP32[Ub >> 2] ^ HEAP32[Jb >> 2] ^ HEAP32[_b >> 2] ^ HEAP32[$b >> 2] ^ HEAP32[Sb >> 2] ^ HEAP32[Rb >> 2] ^ HEAP32[Vb >> 2] ^ HEAP32[Xb >> 2];
				La = HEAP32[Ub + 4 >> 2] ^ HEAP32[Jb + 4 >> 2] ^ HEAP32[_b + 4 >> 2] ^ HEAP32[$b + 4 >> 2] ^ HEAP32[Sb + 4 >> 2] ^ HEAP32[Rb + 4 >> 2] ^ HEAP32[Vb + 4 >> 2] ^ HEAP32[Xb + 4 >> 2];
				Xb = 8912 + (Ta << 3) | 0;
				Vb = 10960 + ((Ma & 255) << 3) | 0;
				Rb = 13008 + ((P & 255) << 3) | 0;
				Sb = 15056 + ((Yb & 255) << 3) | 0;
				Yb = 17104 + ((sa & 255) << 3) | 0;
				$b = 19152 + ((v & 255) << 3) | 0;
				_b = 21200 + ((ea & 255) << 3) | 0;
				Jb = 23248 + ((Zb & 255) << 3) | 0;
				Ja = HEAP32[Vb >> 2] ^ HEAP32[Xb >> 2] ^ HEAP32[Rb >> 2] ^ HEAP32[Sb >> 2] ^ HEAP32[Yb >> 2] ^ HEAP32[$b >> 2] ^ HEAP32[_b >> 2] ^ HEAP32[Jb >> 2];
				Ra = HEAP32[Vb + 4 >> 2] ^ HEAP32[Xb + 4 >> 2] ^ HEAP32[Rb + 4 >> 2] ^ HEAP32[Sb + 4 >> 2] ^ HEAP32[Yb + 4 >> 2] ^ HEAP32[$b + 4 >> 2] ^ HEAP32[_b + 4 >> 2] ^ HEAP32[Jb + 4 >> 2];
				Jb = 8912 + (Za << 3) | 0;
				_b = 10960 + ((Mb & 255) << 3) | 0;
				$b = 13008 + ((W & 255) << 3) | 0;
				Yb = 15056 + ((zb & 255) << 3) | 0;
				Sb = 17104 + ((sb & 255) << 3) | 0;
				Rb = 19152 + ((A & 255) << 3) | 0;
				Xb = 21200 + ((kb & 255) << 3) | 0;
				Vb = 23248 + ((Va & 255) << 3) | 0;
				Zb = Qb;
				Qb = HEAP32[Jb >> 2] ^ Pb ^ HEAP32[_b >> 2] ^ HEAP32[$b >> 2] ^ HEAP32[Yb >> 2] ^ HEAP32[Sb >> 2] ^ HEAP32[Rb >> 2] ^ HEAP32[Xb >> 2] ^ HEAP32[Vb >> 2];
				Ub = Xa;
				Xa = HEAP32[Jb + 4 >> 2] ^ ha ^ HEAP32[_b + 4 >> 2] ^ HEAP32[$b + 4 >> 2] ^ HEAP32[Yb + 4 >> 2] ^ HEAP32[Sb + 4 >> 2] ^ HEAP32[Rb + 4 >> 2] ^ HEAP32[Xb + 4 >> 2] ^ HEAP32[Vb + 4 >> 2];
				Vb = 8912 + (db << 3) | 0;
				Xb = 10960 + ((Ya & 255) << 3) | 0;
				Rb = 13008 + (($ & 255) << 3) | 0;
				Sb = 15056 + ((Fb & 255) << 3) | 0;
				Yb = 17104 + ((yb & 255) << 3) | 0;
				$b = 19152 + ((G & 255) << 3) | 0;
				_b = 21200 + ((qb & 255) << 3) | 0;
				Jb = 23248 + (($a & 255) << 3) | 0;
				Va = HEAP32[Vb >> 2] ^ fa ^ HEAP32[Xb >> 2] ^ HEAP32[Rb >> 2] ^ HEAP32[Sb >> 2] ^ HEAP32[Yb >> 2] ^ HEAP32[$b >> 2] ^ HEAP32[_b >> 2] ^ HEAP32[Jb >> 2];
				Wb = bb;
				bb = HEAP32[Vb + 4 >> 2] ^ ba ^ HEAP32[Xb + 4 >> 2] ^ HEAP32[Rb + 4 >> 2] ^ HEAP32[Sb + 4 >> 2] ^ HEAP32[Yb + 4 >> 2] ^ HEAP32[$b + 4 >> 2] ^ HEAP32[_b + 4 >> 2] ^ HEAP32[Jb + 4 >> 2];
				Jb = 8912 + (jb << 3) | 0;
				_b = 10960 + ((cb & 255) << 3) | 0;
				$b = 13008 + ((m & 255) << 3) | 0;
				Yb = 15056 + ((Lb & 255) << 3) | 0;
				Sb = 17104 + ((Eb & 255) << 3) | 0;
				Rb = 19152 + ((N & 255) << 3) | 0;
				Xb = 21200 + ((wb & 255) << 3) | 0;
				Vb = 23248 + ((fb & 255) << 3) | 0;
				$a = HEAP32[Jb >> 2] ^ X ^ HEAP32[_b >> 2] ^ HEAP32[$b >> 2] ^ HEAP32[Yb >> 2] ^ HEAP32[Sb >> 2] ^ HEAP32[Rb >> 2] ^ HEAP32[Xb >> 2] ^ HEAP32[Vb >> 2];
				Tb = hb;
				hb = HEAP32[Jb + 4 >> 2] ^ na ^ HEAP32[_b + 4 >> 2] ^ HEAP32[$b + 4 >> 2] ^ HEAP32[Yb + 4 >> 2] ^ HEAP32[Sb + 4 >> 2] ^ HEAP32[Rb + 4 >> 2] ^ HEAP32[Xb + 4 >> 2] ^ HEAP32[Vb + 4 >> 2];
				Vb = 8912 + (pb << 3) | 0;
				Xb = 10960 + ((ib & 255) << 3) | 0;
				Rb = 13008 + ((r & 255) << 3) | 0;
				Sb = 15056 + ((Ub & 255) << 3) | 0;
				Ub = 17104 + ((Kb & 255) << 3) | 0;
				Yb = 19152 + ((T & 255) << 3) | 0;
				$b = 21200 + ((Cb & 255) << 3) | 0;
				_b = 23248 + ((lb & 255) << 3) | 0;
				fb = HEAP32[Vb >> 2] ^ la ^ HEAP32[Xb >> 2] ^ HEAP32[Rb >> 2] ^ HEAP32[Sb >> 2] ^ HEAP32[Ub >> 2] ^ HEAP32[Yb >> 2] ^ HEAP32[$b >> 2] ^ HEAP32[_b >> 2];
				Jb = nb;
				nb = HEAP32[Vb + 4 >> 2] ^ ta ^ HEAP32[Xb + 4 >> 2] ^ HEAP32[Rb + 4 >> 2] ^ HEAP32[Sb + 4 >> 2] ^ HEAP32[Ub + 4 >> 2] ^ HEAP32[Yb + 4 >> 2] ^ HEAP32[$b + 4 >> 2] ^ HEAP32[_b + 4 >> 2];
				_b = 8912 + (vb << 3) | 0;
				$b = 10960 + ((ob & 255) << 3) | 0;
				Yb = 13008 + ((x & 255) << 3) | 0;
				Ub = 15056 + ((Wb & 255) << 3) | 0;
				Wb = 17104 + ((Wa & 255) << 3) | 0;
				Sb = 19152 + ((a & 255) << 3) | 0;
				Rb = 21200 + ((Ib & 255) << 3) | 0;
				Xb = 23248 + ((rb & 255) << 3) | 0;
				lb = HEAP32[_b >> 2] ^ ra ^ HEAP32[$b >> 2] ^ HEAP32[Yb >> 2] ^ HEAP32[Ub >> 2] ^ HEAP32[Wb >> 2] ^ HEAP32[Sb >> 2] ^ HEAP32[Rb >> 2] ^ HEAP32[Xb >> 2];
				Vb = tb;
				tb = HEAP32[_b + 4 >> 2] ^ za ^ HEAP32[$b + 4 >> 2] ^ HEAP32[Yb + 4 >> 2] ^ HEAP32[Ub + 4 >> 2] ^ HEAP32[Wb + 4 >> 2] ^ HEAP32[Sb + 4 >> 2] ^ HEAP32[Rb + 4 >> 2] ^ HEAP32[Xb + 4 >> 2];
				Xb = 8912 + (Bb << 3) | 0;
				Rb = 10960 + ((ub & 255) << 3) | 0;
				Sb = 13008 + ((D & 255) << 3) | 0;
				Wb = 15056 + ((Tb & 255) << 3) | 0;
				Tb = 17104 + ((ab & 255) << 3) | 0;
				Ub = 19152 + ((o & 255) << 3) | 0;
				Yb = 21200 + ((Ob & 255) << 3) | 0;
				$b = 23248 + ((xb & 255) << 3) | 0;
				rb = HEAP32[Xb >> 2] ^ xa ^ HEAP32[Rb >> 2] ^ HEAP32[Sb >> 2] ^ HEAP32[Wb >> 2] ^ HEAP32[Tb >> 2] ^ HEAP32[Ub >> 2] ^ HEAP32[Yb >> 2] ^ HEAP32[$b >> 2];
				zb = HEAP32[Xb + 4 >> 2] ^ Fa ^ HEAP32[Rb + 4 >> 2] ^ HEAP32[Sb + 4 >> 2] ^ HEAP32[Wb + 4 >> 2] ^ HEAP32[Tb + 4 >> 2] ^ HEAP32[Ub + 4 >> 2] ^ HEAP32[Yb + 4 >> 2] ^ HEAP32[$b + 4 >> 2];
				$b = 8912 + (Hb << 3) | 0;
				Yb = 10960 + ((Ab & 255) << 3) | 0;
				Ub = 13008 + ((K & 255) << 3) | 0;
				Tb = 15056 + ((Jb & 255) << 3) | 0;
				Jb = 17104 + ((gb & 255) << 3) | 0;
				Wb = 19152 + ((h & 255) << 3) | 0;
				Sb = 21200 + ((_a & 255) << 3) | 0;
				Rb = 23248 + ((Db & 255) << 3) | 0;
				xb = HEAP32[$b >> 2] ^ Da ^ HEAP32[Yb >> 2] ^ HEAP32[Ub >> 2] ^ HEAP32[Tb >> 2] ^ HEAP32[Jb >> 2] ^ HEAP32[Wb >> 2] ^ HEAP32[Sb >> 2] ^ HEAP32[Rb >> 2];
				Fb = HEAP32[$b + 4 >> 2] ^ La ^ HEAP32[Yb + 4 >> 2] ^ HEAP32[Ub + 4 >> 2] ^ HEAP32[Tb + 4 >> 2] ^ HEAP32[Jb + 4 >> 2] ^ HEAP32[Wb + 4 >> 2] ^ HEAP32[Sb + 4 >> 2] ^ HEAP32[Rb + 4 >> 2];
				Rb = 8912 + (Nb << 3) | 0;
				Sb = 10960 + ((Gb & 255) << 3) | 0;
				Wb = 13008 + ((Q & 255) << 3) | 0;
				Jb = 15056 + ((Vb & 255) << 3) | 0;
				Vb = 17104 + ((mb & 255) << 3) | 0;
				Tb = 19152 + ((u & 255) << 3) | 0;
				Ub = 21200 + ((eb & 255) << 3) | 0;
				Yb = 23248 + ((Zb & 255) << 3) | 0;
				Db = HEAP32[Rb >> 2] ^ Ja ^ HEAP32[Sb >> 2] ^ HEAP32[Wb >> 2] ^ HEAP32[Jb >> 2] ^ HEAP32[Vb >> 2] ^ HEAP32[Tb >> 2] ^ HEAP32[Ub >> 2] ^ HEAP32[Yb >> 2];
				Lb = HEAP32[Rb + 4 >> 2] ^ Ra ^ HEAP32[Sb + 4 >> 2] ^ HEAP32[Wb + 4 >> 2] ^ HEAP32[Jb + 4 >> 2] ^ HEAP32[Vb + 4 >> 2] ^ HEAP32[Tb + 4 >> 2] ^ HEAP32[Ub + 4 >> 2] ^ HEAP32[Yb + 4 >> 2];
				Ua = Ua + 1 | 0;
				ea = ny(fa | 0, ba | 0, 8) | 0;
				k = ny(fa | 0, ba | 0, 16) | 0;
				aa = ny(fa | 0, ba | 0, 24) | 0;
				q = ny(fa | 0, ba | 0, 40) | 0;
				ca = ny(fa | 0, ba | 0, 48) | 0;
				da = ny(fa | 0, ba | 0, 56) | 0;
				ka = ny(Pb | 0, ha | 0, 8) | 0;
				p = ny(Pb | 0, ha | 0, 16) | 0;
				ga = ny(Pb | 0, ha | 0, 24) | 0;
				n = ny(Pb | 0, ha | 0, 40) | 0;
				ia = ny(Pb | 0, ha | 0, 48) | 0;
				ja = ny(Pb | 0, ha | 0, 56) | 0;
				qa = ny(X | 0, na | 0, 8) | 0;
				v = ny(X | 0, na | 0, 16) | 0;
				ma = ny(X | 0, na | 0, 24) | 0;
				w = ny(X | 0, na | 0, 40) | 0;
				oa = ny(X | 0, na | 0, 48) | 0;
				pa = ny(X | 0, na | 0, 56) | 0;
				wa = ny(la | 0, ta | 0, 8) | 0;
				B = ny(la | 0, ta | 0, 16) | 0;
				sa = ny(la | 0, ta | 0, 24) | 0;
				C = ny(la | 0, ta | 0, 40) | 0;
				ua = ny(la | 0, ta | 0, 48) | 0;
				va = ny(la | 0, ta | 0, 56) | 0;
				Ca = ny(ra | 0, za | 0, 8) | 0;
				I = ny(ra | 0, za | 0, 16) | 0;
				ya = ny(ra | 0, za | 0, 24) | 0;
				J = ny(ra | 0, za | 0, 40) | 0;
				Aa = ny(ra | 0, za | 0, 48) | 0;
				Ba = ny(ra | 0, za | 0, 56) | 0;
				Ia = ny(xa | 0, Fa | 0, 8) | 0;
				O = ny(xa | 0, Fa | 0, 16) | 0;
				Ea = ny(xa | 0, Fa | 0, 24) | 0;
				P = ny(xa | 0, Fa | 0, 40) | 0;
				Ga = ny(xa | 0, Fa | 0, 48) | 0;
				Ha = ny(xa | 0, Fa | 0, 56) | 0;
				Oa = ny(Da | 0, La | 0, 8) | 0;
				U = ny(Da | 0, La | 0, 16) | 0;
				Ka = ny(Da | 0, La | 0, 24) | 0;
				V = ny(Da | 0, La | 0, 40) | 0;
				Ma = ny(Da | 0, La | 0, 48) | 0;
				Na = ny(Da | 0, La | 0, 56) | 0;
				Sa = ny(Ja | 0, Ra | 0, 8) | 0;
				Z = ny(Ja | 0, Ra | 0, 16) | 0;
				Qa = ny(Ja | 0, Ra | 0, 24) | 0;
				_ = ny(Ja | 0, Ra | 0, 40) | 0;
				Pa = ny(Ja | 0, Ra | 0, 48) | 0;
				Ta = ny(Ja | 0, Ra | 0, 56) | 0;
				_a = ny(Qb | 0, Xa | 0, 8) | 0;
				o = ny(Qb | 0, Xa | 0, 16) | 0;
				Wa = ny(Qb | 0, Xa | 0, 24) | 0;
				m = ny(Qb | 0, Xa | 0, 40) | 0;
				Ya = ny(Qb | 0, Xa | 0, 48) | 0;
				Za = ny(Qb | 0, Xa | 0, 56) | 0;
				eb = ny(Va | 0, bb | 0, 8) | 0;
				h = ny(Va | 0, bb | 0, 16) | 0;
				ab = ny(Va | 0, bb | 0, 24) | 0;
				r = ny(Va | 0, bb | 0, 40) | 0;
				cb = ny(Va | 0, bb | 0, 48) | 0;
				db = ny(Va | 0, bb | 0, 56) | 0;
				kb = ny($a | 0, hb | 0, 8) | 0;
				u = ny($a | 0, hb | 0, 16) | 0;
				gb = ny($a | 0, hb | 0, 24) | 0;
				x = ny($a | 0, hb | 0, 40) | 0;
				ib = ny($a | 0, hb | 0, 48) | 0;
				jb = ny($a | 0, hb | 0, 56) | 0;
				qb = ny(fb | 0, nb | 0, 8) | 0;
				A = ny(fb | 0, nb | 0, 16) | 0;
				mb = ny(fb | 0, nb | 0, 24) | 0;
				D = ny(fb | 0, nb | 0, 40) | 0;
				ob = ny(fb | 0, nb | 0, 48) | 0;
				pb = ny(fb | 0, nb | 0, 56) | 0;
				wb = ny(lb | 0, tb | 0, 8) | 0;
				G = ny(lb | 0, tb | 0, 16) | 0;
				sb = ny(lb | 0, tb | 0, 24) | 0;
				K = ny(lb | 0, tb | 0, 40) | 0;
				ub = ny(lb | 0, tb | 0, 48) | 0;
				vb = ny(lb | 0, tb | 0, 56) | 0;
				Cb = ny(rb | 0, zb | 0, 8) | 0;
				N = ny(rb | 0, zb | 0, 16) | 0;
				yb = ny(rb | 0, zb | 0, 24) | 0;
				Q = ny(rb | 0, zb | 0, 40) | 0;
				Ab = ny(rb | 0, zb | 0, 48) | 0;
				Bb = ny(rb | 0, zb | 0, 56) | 0;
				Ib = ny(xb | 0, Fb | 0, 8) | 0;
				T = ny(xb | 0, Fb | 0, 16) | 0;
				Eb = ny(xb | 0, Fb | 0, 24) | 0;
				W = ny(xb | 0, Fb | 0, 40) | 0;
				Gb = ny(xb | 0, Fb | 0, 48) | 0;
				Hb = ny(xb | 0, Fb | 0, 56) | 0;
				Ob = ny(Db | 0, Lb | 0, 8) | 0;
				a = ny(Db | 0, Lb | 0, 16) | 0;
				Kb = ny(Db | 0, Lb | 0, 24) | 0;
				$ = ny(Db | 0, Lb | 0, 40) | 0;
				Mb = ny(Db | 0, Lb | 0, 48) | 0;
				Nb = ny(Db | 0, Lb | 0, 56) | 0
			} while ((Ua | 0) != 11);
			Ua = e;
			e = g;
			Nb = HEAP32[Ua + 4 >> 2] ^ Xa ^ HEAP32[e + 4 >> 2];
			Xa = g;
			HEAP32[Xa >> 2] = HEAP32[Ua >> 2] ^ Qb ^ HEAP32[e >> 2];
			HEAP32[Xa + 4 >> 2] = Nb;
			Nb = f;
			f = j;
			Xa = HEAP32[Nb + 4 >> 2] ^ bb ^ HEAP32[f + 4 >> 2];
			bb = j;
			HEAP32[bb >> 2] = HEAP32[Nb >> 2] ^ Va ^ HEAP32[f >> 2];
			HEAP32[bb + 4 >> 2] = Xa;
			Xa = l;
			l = t;
			bb = HEAP32[Xa + 4 >> 2] ^ hb ^ HEAP32[l + 4 >> 2];
			hb = t;
			HEAP32[hb >> 2] = HEAP32[Xa >> 2] ^ $a ^ HEAP32[l >> 2];
			HEAP32[hb + 4 >> 2] = bb;
			bb = s;
			s = z;
			hb = HEAP32[bb + 4 >> 2] ^ nb ^ HEAP32[s + 4 >> 2];
			nb = z;
			HEAP32[nb >> 2] = HEAP32[bb >> 2] ^ fb ^ HEAP32[s >> 2];
			HEAP32[nb + 4 >> 2] = hb;
			hb = y;
			y = F;
			nb = HEAP32[hb + 4 >> 2] ^ tb ^ HEAP32[y + 4 >> 2];
			tb = F;
			HEAP32[tb >> 2] = HEAP32[hb >> 2] ^ lb ^ HEAP32[y >> 2];
			HEAP32[tb + 4 >> 2] = nb;
			nb = E;
			E = M;
			tb = HEAP32[nb + 4 >> 2] ^ zb ^ HEAP32[E + 4 >> 2];
			zb = M;
			HEAP32[zb >> 2] = HEAP32[nb >> 2] ^ rb ^ HEAP32[E >> 2];
			HEAP32[zb + 4 >> 2] = tb;
			tb = L;
			L = S;
			zb = HEAP32[tb + 4 >> 2] ^ Fb ^ HEAP32[L + 4 >> 2];
			Fb = S;
			HEAP32[Fb >> 2] = HEAP32[tb >> 2] ^ xb ^ HEAP32[L >> 2];
			HEAP32[Fb + 4 >> 2] = zb;
			zb = R;
			R = Y;
			Fb = HEAP32[zb + 4 >> 2] ^ Lb ^ HEAP32[R + 4 >> 2];
			Lb = Y;
			HEAP32[Lb >> 2] = HEAP32[zb >> 2] ^ Db ^ HEAP32[R >> 2];
			HEAP32[Lb + 4 >> 2] = Fb;
			i = b;
			return
		}
		function Sj(b, d) {
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0;
			b = i;
			e = d + 96 | 0;
			f = d + 0 | 0;
			d = f + 33 | 0;
			do {
				HEAP8[f >> 0] = 0;
				f = f + 1 | 0
			} while ((f | 0) < (d | 0));
			f = e + 0 | 0;
			d = f + 72 | 0;
			do {
				HEAP32[f >> 2] = 0;
				f = f + 4 | 0
			} while ((f | 0) < (d | 0));
			i = b;
			return
		}
		function Tj(b, e, f, g) {
			b = b | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			I = 0,
			J = 0,
			K = 0;
			b = i;
			h = 0 - f & 7;
			j = g + 96 | 0;
			k = HEAP32[j >> 2] | 0;
			l = k & 7;
			m = g + 100 | 0;
			n = HEAP32[m >> 2] | 0;
			o = f;
			p = 0;
			q = 0;
			r = 31;
			while (1) {
				if (!((q | 0) != 0 | ((o | 0) != 0 | (p | 0) != 0)))
					break;
				s = g + r | 0;
				t = (o & 255) + q + (HEAPU8[s >> 0] | 0) | 0;
				HEAP8[s >> 0] = t;
				o = ny(o | 0, p | 0, 8) | 0;
				if ((r | 0) <= 0)
					break;
				else {
					p = H;
					q = t >>> 8;
					r = r + -1 | 0
				}
			}
			if (f >>> 0 > 8) {
				r = 8 - h | 0;
				q = 8 - l | 0;
				p = (f + -9 | 0) >>> 3;
				o = f + -8 - (p << 3) | 0;
				t = f;
				s = HEAP8[g + n + 32 >> 0] | 0;
				u = k;
				v = n;
				w = 0;
				while (1) {
					x = w;
					w = w + 1 | 0;
					y = (HEAPU8[e + x >> 0] | 0) << h & 255 | (HEAPU8[e + w >> 0] | 0) >>> r;
					HEAP8[g + v + 32 >> 0] = y >>> l | s & 255;
					x = u + q | 0;
					if ((x | 0) == 512) {
						Rj(g);
						z = 0;
						A = 0
					} else {
						z = x;
						A = v + 1 | 0
					}
					s = y << q & 255;
					HEAP8[g + A + 32 >> 0] = s;
					u = z + l | 0;
					t = t + -8 | 0;
					if (t >>> 0 <= 8)
						break;
					else
						v = A
				}
				B = o;
				C = u;
				D = A;
				E = p + 1 | 0
			} else {
				B = f;
				C = k;
				D = n;
				E = 0
			}
			if (!B)
				F = 0;
			else {
				n = (HEAPU8[e + E >> 0] | 0) << h & 255;
				h = g + D + 32 | 0;
				HEAP8[h >> 0] = n >>> l | (HEAPU8[h >> 0] | 0);
				F = n
			}
			if ((B + l | 0) >>> 0 < 8) {
				G = C + B | 0;
				I = D;
				HEAP32[j >> 2] = G;
				HEAP32[m >> 2] = I;
				i = b;
				return
			}
			n = 8 - l | 0;
			l = C + n | 0;
			if ((l | 0) == 512) {
				Rj(g);
				J = 0;
				K = 0
			} else {
				J = l;
				K = D + 1 | 0
			}
			HEAP8[g + K + 32 >> 0] = F << n;
			G = B - n + J | 0;
			I = K;
			HEAP32[j >> 2] = G;
			HEAP32[m >> 2] = I;
			i = b;
			return
		}
		function Uj(b, e, f) {
			b = b | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0;
			b = i;
			g = e + 96 | 0;
			h = HEAP32[g >> 2] | 0;
			j = e + 100 | 0;
			k = HEAP32[j >> 2] | 0;
			l = e + k + 32 | 0;
			HEAP8[l >> 0] = HEAPU8[l >> 0] | 0 | 128 >>> (h & 7);
			l = k + 1 | 0;
			if (l >>> 0 <= 32) {
				if (l >>> 0 < 32) {
					m = l;
					n = 6
				}
			} else {
				if (l >>> 0 < 64)
					sy(e + l + 32 | 0, 0, 63 - k | 0) | 0;
				Rj(e);
				m = 0;
				n = 6
			}
			if ((n | 0) == 6)
				sy(e + m + 32 | 0, 0, 32 - m | 0) | 0;
			m = e + 64 | 0;
			n = e + 0 | 0;
			k = m + 32 | 0;
			do {
				HEAP8[m >> 0] = HEAP8[n >> 0] | 0;
				m = m + 1 | 0;
				n = n + 1 | 0
			} while ((m | 0) < (k | 0));
			Rj(e);
			n = f;
			f = 0;
			while (1) {
				m = e + (f << 3) + 104 | 0;
				k = m;
				l = ny(HEAP32[k >> 2] | 0, HEAP32[k + 4 >> 2] | 0, 56) | 0;
				HEAP8[n >> 0] = l;
				l = m;
				k = ny(HEAP32[l >> 2] | 0, HEAP32[l + 4 >> 2] | 0, 48) | 0;
				HEAP8[n + 1 >> 0] = k;
				k = m;
				l = ny(HEAP32[k >> 2] | 0, HEAP32[k + 4 >> 2] | 0, 40) | 0;
				HEAP8[n + 2 >> 0] = l;
				HEAP8[n + 3 >> 0] = HEAP32[m + 4 >> 2];
				l = m;
				k = ny(HEAP32[l >> 2] | 0, HEAP32[l + 4 >> 2] | 0, 24) | 0;
				HEAP8[n + 4 >> 0] = k;
				k = m;
				l = ny(HEAP32[k >> 2] | 0, HEAP32[k + 4 >> 2] | 0, 16) | 0;
				HEAP8[n + 5 >> 0] = l;
				l = m;
				k = ny(HEAP32[l >> 2] | 0, HEAP32[l + 4 >> 2] | 0, 8) | 0;
				HEAP8[n + 6 >> 0] = k;
				HEAP8[n + 7 >> 0] = HEAP32[m >> 2];
				f = f + 1 | 0;
				if ((f | 0) == 8)
					break;
				else
					n = n + 8 | 0
			}
			HEAP32[g >> 2] = h;
			HEAP32[j >> 2] = 32;
			i = b;
			return
		}
		function Vj(a) {
			a = a | 0;
			return (HEAP32[a >> 2] | 0) != 0 | 0
		}
		function Wj(a) {
			a = a | 0;
			return HEAP32[a >> 2] | 0
		}
		function Xj(a) {
			a = a | 0;
			var b = 0;
			b = i;
			Oa(HEAP32[a >> 2] | 0);
			HEAP32[a >> 2] = 0;
			i = b;
			return
		}
		function Yj(a) {
			a = a | 0;
			return
		}
		function Zj(a) {
			a = a | 0;
			return
		}
		function _j(a) {
			a = a | 0;
			return
		}
		function $j(a) {
			a = a | 0;
			return
		}
		function ak(a) {
			a = a | 0;
			return
		}
		function bk(a) {
			a = a | 0;
			return
		}
		function ck(a) {
			a = a | 0;
			HEAP32[a + 36 >> 2] = 0;
			HEAP32[a + 76 >> 2] = 1;
			HEAP32[a + 72 >> 2] = 0;
			HEAP32[a + 88 >> 2] = 0;
			HEAP32[a + 44 >> 2] = 0;
			HEAP32[a + 48 >> 2] = 0;
			HEAP32[a + 80 >> 2] = 1;
			return
		}
		function dk(e, f, g, h, j, k) {
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			k = k | 0;
			var l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0,
			O = 0,
			P = 0,
			Q = 0,
			R = 0,
			S = 0,
			T = 0,
			U = 0,
			V = 0,
			W = 0,
			X = 0,
			Y = 0,
			Z = 0,
			_ = 0,
			$ = 0,
			aa = 0,
			ba = 0,
			ca = 0,
			da = 0,
			ea = 0,
			fa = 0;
			l = i;
			m = HEAP32[h >> 2] | 0;
			HEAP32[h >> 2] = 0;
			n = e + 72 | 0;
			o = HEAP32[n >> 2] | 0;
			if ((o | 0) != 0 & o >>> 0 < 274) {
				p = HEAP32[e + 20 >> 2] | 0;
				q = e + 36 | 0;
				r = HEAP32[q >> 2] | 0;
				s = HEAP32[e + 40 >> 2] | 0;
				t = HEAP32[e + 56 >> 2] | 0;
				u = f - r | 0;
				v = u >>> 0 < o >>> 0 ? u : o;
				u = e + 48 | 0;
				if (!(HEAP32[u >> 2] | 0)) {
					w = HEAP32[e + 12 >> 2] | 0;
					x = HEAP32[e + 44 >> 2] | 0;
					if ((w - x | 0) >>> 0 > v >>> 0)
						y = x;
					else {
						HEAP32[u >> 2] = w;
						y = x
					}
				} else
					y = HEAP32[e + 44 >> 2] | 0;
				HEAP32[e + 44 >> 2] = y + v;
				HEAP32[n >> 2] = o - v;
				if (!v)
					z = r;
				else {
					y = r + -1 | 0;
					x = y - f | 0;
					w = ~o;
					o = x >>> 0 > w >>> 0;
					u = r;
					r = v;
					while (1) {
						r = r + -1 | 0;
						HEAP8[p + u >> 0] = HEAP8[p + (u - t + (u >>> 0 < t >>> 0 ? s : 0)) >> 0] | 0;
						if (!r)
							break;
						else
							u = u + 1 | 0
					}
					z = y - (o ? x : w) | 0
				}
				HEAP32[q >> 2] = z
			}
			HEAP32[k >> 2] = 0;
			a: do
				if ((HEAP32[n >> 2] | 0) != 274) {
					z = e + 76 | 0;
					q = e + 36 | 0;
					w = e + 80 | 0;
					x = e + 88 | 0;
					o = e + 24 | 0;
					y = e + 92 | 0;
					u = y;
					r = e + 4 | 0;
					s = e + 16 | 0;
					t = e + 68 | 0;
					p = e + 64 | 0;
					v = e + 60 | 0;
					A = e + 56 | 0;
					B = e + 52 | 0;
					C = e + 32 | 0;
					D = (j | 0) == 0;
					E = e + 93 | 0;
					F = e + 94 | 0;
					G = e + 95 | 0;
					H = e + 96 | 0;
					I = e + 28 | 0;
					J = g;
					K = m;
					while (1) {
						if (!(HEAP32[z >> 2] | 0)) {
							L = J;
							M = K
						} else {
							b: do
								if (!K) {
									N = J;
									O = 18
								} else {
									P = J;
									Q = K;
									while (1) {
										R = HEAP32[x >> 2] | 0;
										if (R >>> 0 >= 5) {
											S = P;
											T = Q;
											break b
										}
										U = P + 1 | 0;
										V = HEAP8[P >> 0] | 0;
										HEAP32[x >> 2] = R + 1;
										HEAP8[e + R + 92 >> 0] = V;
										HEAP32[h >> 2] = (HEAP32[h >> 2] | 0) + 1;
										Q = Q + -1 | 0;
										if (!Q) {
											N = U;
											O = 18;
											break
										} else
											P = U
									}
								}
							while (0);
							if ((O | 0) == 18) {
								O = 0;
								if ((HEAP32[x >> 2] | 0) >>> 0 < 5) {
									O = 19;
									break
								} else {
									S = N;
									T = 0
								}
							}
							if (HEAP8[y >> 0] | 0) {
								W = 1;
								O = 58;
								break
							}
							HEAP32[C >> 2] = HEAPU8[F >> 0] << 16 | HEAPU8[E >> 0] << 24 | HEAPU8[G >> 0] << 8 | HEAPU8[H >> 0];
							HEAP32[I >> 2] = -1;
							HEAP32[z >> 2] = 0;
							HEAP32[x >> 2] = 0;
							L = S;
							M = T
						}
						if ((HEAP32[q >> 2] | 0) >>> 0 >= f >>> 0) {
							P = (HEAP32[n >> 2] | 0) == 0;
							if (P ? (HEAP32[C >> 2] | 0) == 0 : 0) {
								O = 25;
								break
							}
							if (D) {
								O = 27;
								break
							}
							if (P)
								X = 1;
							else {
								O = 29;
								break
							}
						} else
							X = 0;
						if (HEAP32[w >> 2] | 0) {
							P = (768 << (HEAP32[r >> 2] | 0) + (HEAP32[e >> 2] | 0)) + 1846 | 0;
							Q = HEAP32[s >> 2] | 0;
							if (P) {
								U = 0;
								do {
									HEAP16[Q + (U << 1) >> 1] = 1024;
									U = U + 1 | 0
								} while ((U | 0) != (P | 0))
							}
							HEAP32[t >> 2] = 1;
							HEAP32[p >> 2] = 1;
							HEAP32[v >> 2] = 1;
							HEAP32[A >> 2] = 1;
							HEAP32[B >> 2] = 0;
							HEAP32[w >> 2] = 0
						}
						P = HEAP32[x >> 2] | 0;
						if (!P) {
							U = (X | 0) != 0;
							if (M >>> 0 < 20 | U) {
								Q = hk(e, L, M) | 0;
								if (!Q) {
									O = 39;
									break
								}
								if (U & (Q | 0) != 2) {
									O = 41;
									break
								} else
									Y = L
							} else
								Y = L + (M + -20) | 0;
							HEAP32[o >> 2] = L;
							if (ik(e, f, Y) | 0) {
								W = 1;
								O = 58;
								break
							}
							Q = (HEAP32[o >> 2] | 0) - L | 0;
							HEAP32[h >> 2] = Q + (HEAP32[h >> 2] | 0);
							Z = Q
						} else {
							Q = P >>> 0 < 20;
							if (Q & (M | 0) != 0) {
								U = 0 - M | 0;
								V = P + -20 | 0;
								R = V >>> 0 < U >>> 0 ? U : V;
								V = 0 - R | 0;
								U = 0;
								_ = P;
								do {
									$ = U;
									U = U + 1 | 0;
									aa = _;
									_ = _ + 1 | 0;
									HEAP8[e + aa + 92 >> 0] = HEAP8[L + $ >> 0] | 0
								} while ((U | 0) != (V | 0));
								ba = _ >>> 0 < 20;
								ca = V;
								da = P - R | 0
							} else {
								ba = Q;
								ca = 0;
								da = P
							}
							HEAP32[x >> 2] = da;
							U = (X | 0) != 0;
							if (ba | U) {
								$ = hk(e, y, da) | 0;
								if (!$) {
									O = 49;
									break
								}
								if (U & ($ | 0) != 2) {
									O = 51;
									break
								}
							}
							HEAP32[o >> 2] = y;
							if (ik(e, f, y) | 0) {
								W = 1;
								O = 58;
								break
							}
							$ = ca - (da + u) + (HEAP32[o >> 2] | 0) | 0;
							HEAP32[h >> 2] = $ + (HEAP32[h >> 2] | 0);
							HEAP32[x >> 2] = 0;
							Z = $
						}
						if ((HEAP32[n >> 2] | 0) == 274) {
							ea = C;
							break a
						} else {
							J = L + Z | 0;
							K = M - Z | 0
						}
					}
					if ((O | 0) == 19) {
						HEAP32[k >> 2] = 3;
						W = 0;
						i = l;
						return W | 0
					} else if ((O | 0) == 25) {
						HEAP32[k >> 2] = 4;
						W = 0;
						i = l;
						return W | 0
					} else if ((O | 0) == 27) {
						HEAP32[k >> 2] = 2;
						W = 0;
						i = l;
						return W | 0
					} else if ((O | 0) == 29) {
						HEAP32[k >> 2] = 2;
						W = 1;
						i = l;
						return W | 0
					} else if ((O | 0) == 39) {
						qy(y | 0, L | 0, M | 0) | 0;
						HEAP32[x >> 2] = M;
						HEAP32[h >> 2] = (HEAP32[h >> 2] | 0) + M;
						HEAP32[k >> 2] = 3;
						W = 0;
						i = l;
						return W | 0
					} else if ((O | 0) == 41) {
						HEAP32[k >> 2] = 2;
						W = 1;
						i = l;
						return W | 0
					} else if ((O | 0) == 49) {
						HEAP32[h >> 2] = (HEAP32[h >> 2] | 0) + ca;
						HEAP32[k >> 2] = 3;
						W = 0;
						i = l;
						return W | 0
					} else if ((O | 0) == 51) {
						HEAP32[k >> 2] = 2;
						W = 1;
						i = l;
						return W | 0
					} else if ((O | 0) == 58) {
						i = l;
						return W | 0
					}
				} else
					ea = e + 32 | 0;
			while (0);
			e = HEAP32[ea >> 2] | 0;
			if (!e) {
				HEAP32[k >> 2] = 1;
				fa = HEAP32[ea >> 2] | 0
			} else
				fa = e;
			W = (fa | 0) != 0 & 1;
			i = l;
			return W | 0
		}
		function ek(a, b, d, e, f, g, h) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			var j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0;
			j = i;
			i = i + 16 | 0;
			k = j;
			l = HEAP32[d >> 2] | 0;
			m = HEAP32[f >> 2] | 0;
			HEAP32[d >> 2] = 0;
			HEAP32[f >> 2] = 0;
			n = a + 36 | 0;
			o = a + 40 | 0;
			p = a + 20 | 0;
			q = b;
			b = e;
			e = m;
			m = l;
			while (1) {
				HEAP32[k >> 2] = e;
				l = HEAP32[n >> 2] | 0;
				r = HEAP32[o >> 2] | 0;
				if ((l | 0) == (r | 0)) {
					HEAP32[n >> 2] = 0;
					s = 0
				} else
					s = l;
				l = m >>> 0 > (r - s | 0) >>> 0;
				t = dk(a, l ? r : s + m | 0, b, k, l ? 0 : g, h) | 0;
				l = HEAP32[k >> 2] | 0;
				HEAP32[f >> 2] = (HEAP32[f >> 2] | 0) + l;
				r = HEAP32[n >> 2] | 0;
				u = r - s | 0;
				qy(q | 0, (HEAP32[p >> 2] | 0) + s | 0, u | 0) | 0;
				HEAP32[d >> 2] = (HEAP32[d >> 2] | 0) + u;
				if (t) {
					v = t;
					w = 6;
					break
				}
				if ((r | 0) == (s | 0) | (m | 0) == (u | 0)) {
					v = 0;
					w = 6;
					break
				} else {
					q = q + u | 0;
					b = b + l | 0;
					e = e - l | 0;
					m = m - u | 0
				}
			}
			if ((w | 0) == 6) {
				i = j;
				return v | 0
			}
			return 0
		}
		function fk(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0;
			d = i;
			e = b + 4 | 0;
			f = a + 16 | 0;
			rc[HEAP32[e >> 2] & 127](b, HEAP32[f >> 2] | 0);
			HEAP32[f >> 2] = 0;
			f = a + 20 | 0;
			rc[HEAP32[e >> 2] & 127](b, HEAP32[f >> 2] | 0);
			HEAP32[f >> 2] = 0;
			i = d;
			return
		}
		function gk(b, e, f, g) {
			b = b | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0;
			h = i;
			if (f >>> 0 < 5) {
				j = 4;
				i = h;
				return j | 0
			}
			f = (HEAPU8[e + 2 >> 0] | 0) << 8 | (HEAPU8[e + 1 >> 0] | 0) | (HEAPU8[e + 3 >> 0] | 0) << 16 | (HEAPU8[e + 4 >> 0] | 0) << 24;
			k = f >>> 0 < 4096 ? 4096 : f;
			f = HEAP8[e >> 0] | 0;
			if ((f & 255) > 224) {
				j = 4;
				i = h;
				return j | 0
			}
			e = ((f & 255) % 9 | 0) & 255;
			l = ((f & 255) / 45 | 0) & 255;
			m = ((((f & 255) / 9 | 0) & 255) % 5 | 0) & 255;
			f = (768 << m + e) + 1846 | 0;
			n = b + 16 | 0;
			o = HEAP32[n >> 2] | 0;
			p = b + 84 | 0;
			if (!((o | 0) != 0 ? (f | 0) == (HEAP32[p >> 2] | 0) : 0))
				q = 5;
			if ((q | 0) == 5 ? (rc[HEAP32[g + 4 >> 2] & 127](g, o), HEAP32[n >> 2] = 0, o = Cc[HEAP32[g >> 2] & 31](g, f << 1) | 0, HEAP32[n >> 2] = o, HEAP32[p >> 2] = f, (o | 0) == 0) : 0) {
				j = 2;
				i = h;
				return j | 0
			}
			o = b + 20 | 0;
			f = HEAP32[o >> 2] | 0;
			if ((f | 0) != 0 ? (p = b + 40 | 0, (k | 0) == (HEAP32[p >> 2] | 0)) : 0)
				r = p;
			else
				q = 8;
			do
				if ((q | 0) == 8) {
					p = g + 4 | 0;
					rc[HEAP32[p >> 2] & 127](g, f);
					HEAP32[o >> 2] = 0;
					s = Cc[HEAP32[g >> 2] & 31](g, k) | 0;
					HEAP32[o >> 2] = s;
					if (s) {
						r = b + 40 | 0;
						break
					}
					rc[HEAP32[p >> 2] & 127](g, HEAP32[n >> 2] | 0);
					HEAP32[n >> 2] = 0;
					j = 2;
					i = h;
					return j | 0
				}
			while (0);
			HEAP32[r >> 2] = k;
			HEAP32[b >> 2] = e;
			HEAP32[b + 4 >> 2] = m;
			HEAP32[b + 8 >> 2] = l;
			HEAP32[b + 12 >> 2] = k;
			j = 0;
			i = h;
			return j | 0
		}
		function zv(e, f, g, h, j, k, l, m) {
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			k = k | 0;
			l = l | 0;
			m = m | 0;
			var n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0;
			n = i;
			HEAP32[g >> 2] = e;
			HEAP32[k >> 2] = h;
			h = HEAP32[g >> 2] | 0;
			if (((((m & 4 | 0) != 0 ? (f - h | 0) > 2 : 0) ? (HEAP8[h >> 0] | 0) == -17 : 0) ? (HEAP8[h + 1 >> 0] | 0) == -69 : 0) ? (HEAP8[h + 2 >> 0] | 0) == -65 : 0) {
				m = h + 3 | 0;
				HEAP32[g >> 2] = m;
				o = m
			} else
				o = h;
			a: do
				if (o >>> 0 < f >>> 0) {
					h = f;
					m = j;
					e = HEAP32[k >> 2] | 0;
					p = o;
					b: while (1) {
						if (e >>> 0 >= j >>> 0) {
							q = p;
							break a
						}
						r = HEAP8[p >> 0] | 0;
						s = r & 255;
						if (s >>> 0 > l >>> 0) {
							t = 2;
							u = 41;
							break
						}
						do
							if (r << 24 >> 24 > -1) {
								HEAP16[e >> 1] = r & 255;
								HEAP32[g >> 2] = p + 1
							} else {
								if ((r & 255) < 194) {
									t = 2;
									u = 41;
									break b
								}
								if ((r & 255) < 224) {
									if ((h - p | 0) < 2) {
										t = 1;
										u = 41;
										break b
									}
									v = HEAPU8[p + 1 >> 0] | 0;
									if ((v & 192 | 0) != 128) {
										t = 2;
										u = 41;
										break b
									}
									w = v & 63 | s << 6 & 1984;
									if (w >>> 0 > l >>> 0) {
										t = 2;
										u = 41;
										break b
									}
									HEAP16[e >> 1] = w;
									HEAP32[g >> 2] = p + 2;
									break
								}
								if ((r & 255) < 240) {
									if ((h - p | 0) < 3) {
										t = 1;
										u = 41;
										break b
									}
									w = HEAP8[p + 1 >> 0] | 0;
									v = HEAP8[p + 2 >> 0] | 0;
									if ((s | 0) == 237) {
										if ((w & -32) << 24 >> 24 != -128) {
											t = 2;
											u = 41;
											break b
										}
									} else if ((s | 0) == 224) {
										if ((w & -32) << 24 >> 24 != -96) {
											t = 2;
											u = 41;
											break b
										}
									} else if ((w & -64) << 24 >> 24 != -128) {
										t = 2;
										u = 41;
										break b
									}
									x = v & 255;
									if ((x & 192 | 0) != 128) {
										t = 2;
										u = 41;
										break b
									}
									v = (w & 255) << 6 & 4032 | s << 12 | x & 63;
									if ((v & 65535) >>> 0 > l >>> 0) {
										t = 2;
										u = 41;
										break b
									}
									HEAP16[e >> 1] = v;
									HEAP32[g >> 2] = p + 3;
									break
								}
								if ((r & 255) >= 245) {
									t = 2;
									u = 41;
									break b
								}
								if ((h - p | 0) < 4) {
									t = 1;
									u = 41;
									break b
								}
								v = HEAP8[p + 1 >> 0] | 0;
								x = HEAP8[p + 2 >> 0] | 0;
								w = HEAP8[p + 3 >> 0] | 0;
								if ((s | 0) == 240) {
									if ((v + 112 << 24 >> 24 & 255) >= 48) {
										t = 2;
										u = 41;
										break b
									}
								} else if ((s | 0) == 244) {
									if ((v & -16) << 24 >> 24 != -128) {
										t = 2;
										u = 41;
										break b
									}
								} else if ((v & -64) << 24 >> 24 != -128) {
									t = 2;
									u = 41;
									break b
								}
								y = x & 255;
								if ((y & 192 | 0) != 128) {
									t = 2;
									u = 41;
									break b
								}
								x = w & 255;
								if ((x & 192 | 0) != 128) {
									t = 2;
									u = 41;
									break b
								}
								if ((m - e | 0) < 4) {
									t = 1;
									u = 41;
									break b
								}
								w = s & 7;
								z = v & 255;
								v = y << 6;
								A = x & 63;
								if ((z << 12 & 258048 | w << 18 | v & 4032 | A) >>> 0 > l >>> 0) {
									t = 2;
									u = 41;
									break b
								}
								HEAP16[e >> 1] = z << 2 & 60 | y >>> 4 & 3 | ((z >>> 4 & 3 | w << 2) << 6) + 16320 | 55296;
								w = e + 2 | 0;
								HEAP32[k >> 2] = w;
								HEAP16[w >> 1] = A | v & 960 | 56320;
								HEAP32[g >> 2] = (HEAP32[g >> 2] | 0) + 4
							}
						while (0);
						e = (HEAP32[k >> 2] | 0) + 2 | 0;
						HEAP32[k >> 2] = e;
						s = HEAP32[g >> 2] | 0;
						if (s >>> 0 >= f >>> 0) {
							q = s;
							break a
						} else
							p = s
					}
					if ((u | 0) == 41) {
						i = n;
						return t | 0
					}
				} else
					q = o;
			while (0);
			t = q >>> 0 < f >>> 0 & 1;
			i = n;
			return t | 0
		}
		function Av(b, c, e, f, g) {
			b = b | 0;
			c = c | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0;
			h = i;
			if ((((g & 4 | 0) != 0 ? (c - b | 0) > 2 : 0) ? (HEAP8[b >> 0] | 0) == -17 : 0) ? (HEAP8[b + 1 >> 0] | 0) == -69 : 0)
				j = (HEAP8[b + 2 >> 0] | 0) == -65 ? b + 3 | 0 : b;
			else
				j = b;
			a: do
				if (j >>> 0 < c >>> 0 & (e | 0) != 0) {
					g = c;
					k = j;
					l = 0;
					b: while (1) {
						m = HEAP8[k >> 0] | 0;
						n = m & 255;
						if (n >>> 0 > f >>> 0) {
							o = k;
							break a
						}
						do
							if (m << 24 >> 24 > -1) {
								p = k + 1 | 0;
								q = l
							} else {
								if ((m & 255) < 194) {
									o = k;
									break a
								}
								if ((m & 255) < 224) {
									if ((g - k | 0) < 2) {
										o = k;
										break a
									}
									r = HEAPU8[k + 1 >> 0] | 0;
									if ((r & 192 | 0) != 128) {
										o = k;
										break a
									}
									if ((r & 63 | n << 6 & 1984) >>> 0 > f >>> 0) {
										o = k;
										break a
									}
									p = k + 2 | 0;
									q = l;
									break
								}
								if ((m & 255) < 240) {
									s = k;
									if ((g - s | 0) < 3) {
										o = k;
										break a
									}
									r = HEAP8[k + 1 >> 0] | 0;
									t = HEAP8[k + 2 >> 0] | 0;
									if ((n | 0) == 224) {
										if ((r & -32) << 24 >> 24 != -96) {
											u = 21;
											break b
										}
									} else if ((n | 0) == 237) {
										if ((r & -32) << 24 >> 24 != -128) {
											u = 23;
											break b
										}
									} else if ((r & -64) << 24 >> 24 != -128) {
										u = 25;
										break b
									}
									v = t & 255;
									if ((v & 192 | 0) != 128) {
										o = k;
										break a
									}
									if (((r & 255) << 6 & 4032 | n << 12 & 61440 | v & 63) >>> 0 > f >>> 0) {
										o = k;
										break a
									}
									p = k + 3 | 0;
									q = l;
									break
								}
								if ((m & 255) >= 245) {
									o = k;
									break a
								}
								w = k;
								if ((g - w | 0) < 4 | (e - l | 0) >>> 0 < 2) {
									o = k;
									break a
								}
								v = HEAP8[k + 1 >> 0] | 0;
								r = HEAP8[k + 2 >> 0] | 0;
								t = HEAP8[k + 3 >> 0] | 0;
								if ((n | 0) == 240) {
									if ((v + 112 << 24 >> 24 & 255) >= 48) {
										u = 33;
										break b
									}
								} else if ((n | 0) == 244) {
									if ((v & -16) << 24 >> 24 != -128) {
										u = 35;
										break b
									}
								} else if ((v & -64) << 24 >> 24 != -128) {
									u = 37;
									break b
								}
								x = r & 255;
								if ((x & 192 | 0) != 128) {
									o = k;
									break a
								}
								r = t & 255;
								if ((r & 192 | 0) != 128) {
									o = k;
									break a
								}
								if (((v & 255) << 12 & 258048 | n << 18 & 1835008 | x << 6 & 4032 | r & 63) >>> 0 > f >>> 0) {
									o = k;
									break a
								}
								p = k + 4 | 0;
								q = l + 1 | 0
							}
						while (0);
						l = q + 1 | 0;
						if (!(p >>> 0 < c >>> 0 & l >>> 0 < e >>> 0)) {
							o = p;
							break a
						} else
							k = p
					}
					if ((u | 0) == 21) {
						y = s - b | 0;
						i = h;
						return y | 0
					} else if ((u | 0) == 23) {
						y = s - b | 0;
						i = h;
						return y | 0
					} else if ((u | 0) == 25) {
						y = s - b | 0;
						i = h;
						return y | 0
					} else if ((u | 0) == 33) {
						y = w - b | 0;
						i = h;
						return y | 0
					} else if ((u | 0) == 35) {
						y = w - b | 0;
						i = h;
						return y | 0
					} else if ((u | 0) == 37) {
						y = w - b | 0;
						i = h;
						return y | 0
					}
				} else
					o = j;
			while (0);
			y = o - b | 0;
			i = h;
			return y | 0
		}
		function Bv(b, d, e, f, g, h, j, k) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			k = k | 0;
			var l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0;
			l = i;
			HEAP32[e >> 2] = b;
			HEAP32[h >> 2] = f;
			do
				if (k & 2)
					if ((g - f | 0) < 3) {
						m = 1;
						i = l;
						return m | 0
					} else {
						HEAP32[h >> 2] = f + 1;
						HEAP8[f >> 0] = -17;
						b = HEAP32[h >> 2] | 0;
						HEAP32[h >> 2] = b + 1;
						HEAP8[b >> 0] = -69;
						b = HEAP32[h >> 2] | 0;
						HEAP32[h >> 2] = b + 1;
						HEAP8[b >> 0] = -65;
						break
					}
			while (0);
			f = HEAP32[e >> 2] | 0;
			if (f >>> 0 >= d >>> 0) {
				m = 0;
				i = l;
				return m | 0
			}
			k = g;
			g = f;
			a: while (1) {
				f = HEAP32[g >> 2] | 0;
				if ((f & -2048 | 0) == 55296 | f >>> 0 > j >>> 0) {
					m = 2;
					n = 19;
					break
				}
				do
					if (f >>> 0 >= 128) {
						if (f >>> 0 < 2048) {
							b = HEAP32[h >> 2] | 0;
							if ((k - b | 0) < 2) {
								m = 1;
								n = 19;
								break a
							}
							HEAP32[h >> 2] = b + 1;
							HEAP8[b >> 0] = f >>> 6 | 192;
							b = HEAP32[h >> 2] | 0;
							HEAP32[h >> 2] = b + 1;
							HEAP8[b >> 0] = f & 63 | 128;
							break
						}
						b = HEAP32[h >> 2] | 0;
						o = k - b | 0;
						if (f >>> 0 < 65536) {
							if ((o | 0) < 3) {
								m = 1;
								n = 19;
								break a
							}
							HEAP32[h >> 2] = b + 1;
							HEAP8[b >> 0] = f >>> 12 | 224;
							p = HEAP32[h >> 2] | 0;
							HEAP32[h >> 2] = p + 1;
							HEAP8[p >> 0] = f >>> 6 & 63 | 128;
							p = HEAP32[h >> 2] | 0;
							HEAP32[h >> 2] = p + 1;
							HEAP8[p >> 0] = f & 63 | 128;
							break
						} else {
							if ((o | 0) < 4) {
								m = 1;
								n = 19;
								break a
							}
							HEAP32[h >> 2] = b + 1;
							HEAP8[b >> 0] = f >>> 18 | 240;
							b = HEAP32[h >> 2] | 0;
							HEAP32[h >> 2] = b + 1;
							HEAP8[b >> 0] = f >>> 12 & 63 | 128;
							b = HEAP32[h >> 2] | 0;
							HEAP32[h >> 2] = b + 1;
							HEAP8[b >> 0] = f >>> 6 & 63 | 128;
							b = HEAP32[h >> 2] | 0;
							HEAP32[h >> 2] = b + 1;
							HEAP8[b >> 0] = f & 63 | 128;
							break
						}
					} else {
						b = HEAP32[h >> 2] | 0;
						if ((k - b | 0) < 1) {
							m = 1;
							n = 19;
							break a
						}
						HEAP32[h >> 2] = b + 1;
						HEAP8[b >> 0] = f
					}
				while (0);
				g = (HEAP32[e >> 2] | 0) + 4 | 0;
				HEAP32[e >> 2] = g;
				if (g >>> 0 >= d >>> 0) {
					m = 0;
					n = 19;
					break
				}
			}
			if ((n | 0) == 19) {
				i = l;
				return m | 0
			}
			return 0
		}
		function Cv(b, e, f, g, h, j, k, l) {
			b = b | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			j = j | 0;
			k = k | 0;
			l = l | 0;
			var m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0;
			m = i;
			HEAP32[f >> 2] = b;
			HEAP32[j >> 2] = g;
			g = HEAP32[f >> 2] | 0;
			if (((((l & 4 | 0) != 0 ? (e - g | 0) > 2 : 0) ? (HEAP8[g >> 0] | 0) == -17 : 0) ? (HEAP8[g + 1 >> 0] | 0) == -69 : 0) ? (HEAP8[g + 2 >> 0] | 0) == -65 : 0) {
				l = g + 3 | 0;
				HEAP32[f >> 2] = l;
				n = l
			} else
				n = g;
			a: do
				if (n >>> 0 < e >>> 0) {
					g = e;
					l = HEAP32[j >> 2] | 0;
					b = n;
					while (1) {
						if (l >>> 0 >= h >>> 0) {
							o = b;
							p = 39;
							break a
						}
						q = HEAP8[b >> 0] | 0;
						r = q & 255;
						do
							if (q << 24 >> 24 > -1) {
								if (r >>> 0 > k >>> 0) {
									s = 2;
									break a
								}
								HEAP32[l >> 2] = r;
								HEAP32[f >> 2] = b + 1
							} else {
								if ((q & 255) < 194) {
									s = 2;
									break a
								}
								if ((q & 255) < 224) {
									if ((g - b | 0) < 2) {
										s = 1;
										break a
									}
									t = HEAPU8[b + 1 >> 0] | 0;
									if ((t & 192 | 0) != 128) {
										s = 2;
										break a
									}
									u = t & 63 | r << 6 & 1984;
									if (u >>> 0 > k >>> 0) {
										s = 2;
										break a
									}
									HEAP32[l >> 2] = u;
									HEAP32[f >> 2] = b + 2;
									break
								}
								if ((q & 255) < 240) {
									if ((g - b | 0) < 3) {
										s = 1;
										break a
									}
									u = HEAP8[b + 1 >> 0] | 0;
									t = HEAP8[b + 2 >> 0] | 0;
									if ((r | 0) == 237) {
										if ((u & -32) << 24 >> 24 != -128) {
											s = 2;
											break a
										}
									} else if ((r | 0) == 224) {
										if ((u & -32) << 24 >> 24 != -96) {
											s = 2;
											break a
										}
									} else if ((u & -64) << 24 >> 24 != -128) {
										s = 2;
										break a
									}
									v = t & 255;
									if ((v & 192 | 0) != 128) {
										s = 2;
										break a
									}
									t = (u & 255) << 6 & 4032 | r << 12 & 61440 | v & 63;
									if (t >>> 0 > k >>> 0) {
										s = 2;
										break a
									}
									HEAP32[l >> 2] = t;
									HEAP32[f >> 2] = b + 3;
									break
								}
								if ((q & 255) >= 245) {
									s = 2;
									break a
								}
								if ((g - b | 0) < 4) {
									s = 1;
									break a
								}
								t = HEAP8[b + 1 >> 0] | 0;
								v = HEAP8[b + 2 >> 0] | 0;
								u = HEAP8[b + 3 >> 0] | 0;
								if ((r | 0) == 240) {
									if ((t + 112 << 24 >> 24 & 255) >= 48) {
										s = 2;
										break a
									}
								} else if ((r | 0) == 244) {
									if ((t & -16) << 24 >> 24 != -128) {
										s = 2;
										break a
									}
								} else if ((t & -64) << 24 >> 24 != -128) {
									s = 2;
									break a
								}
								w = v & 255;
								if ((w & 192 | 0) != 128) {
									s = 2;
									break a
								}
								v = u & 255;
								if ((v & 192 | 0) != 128) {
									s = 2;
									break a
								}
								u = (t & 255) << 12 & 258048 | r << 18 & 1835008 | w << 6 & 4032 | v & 63;
								if (u >>> 0 > k >>> 0) {
									s = 2;
									break a
								}
								HEAP32[l >> 2] = u;
								HEAP32[f >> 2] = b + 4
							}
						while (0);
						l = (HEAP32[j >> 2] | 0) + 4 | 0;
						HEAP32[j >> 2] = l;
						r = HEAP32[f >> 2] | 0;
						if (r >>> 0 >= e >>> 0) {
							o = r;
							p = 39;
							break
						} else
							b = r
					}
				} else {
					o = n;
					p = 39
				}
			while (0);
			if ((p | 0) == 39)
				s = o >>> 0 < e >>> 0 & 1;
			i = m;
			return s | 0
		}
		function Dv(b, c, e, f, g) {
			b = b | 0;
			c = c | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0;
			h = i;
			if ((((g & 4 | 0) != 0 ? (c - b | 0) > 2 : 0) ? (HEAP8[b >> 0] | 0) == -17 : 0) ? (HEAP8[b + 1 >> 0] | 0) == -69 : 0)
				j = (HEAP8[b + 2 >> 0] | 0) == -65 ? b + 3 | 0 : b;
			else
				j = b;
			a: do
				if (j >>> 0 < c >>> 0 & (e | 0) != 0) {
					g = c;
					k = j;
					l = 0;
					b: while (1) {
						m = HEAP8[k >> 0] | 0;
						n = m & 255;
						do
							if (m << 24 >> 24 > -1) {
								if (n >>> 0 > f >>> 0) {
									o = k;
									break a
								}
								p = k + 1 | 0
							} else {
								if ((m & 255) < 194) {
									o = k;
									break a
								}
								if ((m & 255) < 224) {
									if ((g - k | 0) < 2) {
										o = k;
										break a
									}
									q = HEAPU8[k + 1 >> 0] | 0;
									if ((q & 192 | 0) != 128) {
										o = k;
										break a
									}
									if ((q & 63 | n << 6 & 1984) >>> 0 > f >>> 0) {
										o = k;
										break a
									}
									p = k + 2 | 0;
									break
								}
								if ((m & 255) < 240) {
									r = k;
									if ((g - r | 0) < 3) {
										o = k;
										break a
									}
									q = HEAP8[k + 1 >> 0] | 0;
									s = HEAP8[k + 2 >> 0] | 0;
									if ((n | 0) == 224) {
										if ((q & -32) << 24 >> 24 != -96) {
											t = 21;
											break b
										}
									} else if ((n | 0) == 237) {
										if ((q & -32) << 24 >> 24 != -128) {
											t = 23;
											break b
										}
									} else if ((q & -64) << 24 >> 24 != -128) {
										t = 25;
										break b
									}
									u = s & 255;
									if ((u & 192 | 0) != 128) {
										o = k;
										break a
									}
									if (((q & 255) << 6 & 4032 | n << 12 & 61440 | u & 63) >>> 0 > f >>> 0) {
										o = k;
										break a
									}
									p = k + 3 | 0;
									break
								}
								if ((m & 255) >= 245) {
									o = k;
									break a
								}
								v = k;
								if ((g - v | 0) < 4) {
									o = k;
									break a
								}
								u = HEAP8[k + 1 >> 0] | 0;
								q = HEAP8[k + 2 >> 0] | 0;
								s = HEAP8[k + 3 >> 0] | 0;
								if ((n | 0) == 240) {
									if ((u + 112 << 24 >> 24 & 255) >= 48) {
										t = 33;
										break b
									}
								} else if ((n | 0) == 244) {
									if ((u & -16) << 24 >> 24 != -128) {
										t = 35;
										break b
									}
								} else if ((u & -64) << 24 >> 24 != -128) {
									t = 37;
									break b
								}
								w = q & 255;
								if ((w & 192 | 0) != 128) {
									o = k;
									break a
								}
								q = s & 255;
								if ((q & 192 | 0) != 128) {
									o = k;
									break a
								}
								if (((u & 255) << 12 & 258048 | n << 18 & 1835008 | w << 6 & 4032 | q & 63) >>> 0 > f >>> 0) {
									o = k;
									break a
								}
								p = k + 4 | 0
							}
						while (0);
						l = l + 1 | 0;
						if (!(p >>> 0 < c >>> 0 & l >>> 0 < e >>> 0)) {
							o = p;
							break a
						} else
							k = p
					}
					if ((t | 0) == 21) {
						x = r - b | 0;
						i = h;
						return x | 0
					} else if ((t | 0) == 23) {
						x = r - b | 0;
						i = h;
						return x | 0
					} else if ((t | 0) == 25) {
						x = r - b | 0;
						i = h;
						return x | 0
					} else if ((t | 0) == 33) {
						x = v - b | 0;
						i = h;
						return x | 0
					} else if ((t | 0) == 35) {
						x = v - b | 0;
						i = h;
						return x | 0
					} else if ((t | 0) == 37) {
						x = v - b | 0;
						i = h;
						return x | 0
					}
				} else
					o = j;
			while (0);
			x = o - b | 0;
			i = h;
			return x | 0
		}
		function Ev(a) {
			a = a | 0;
			a = i;
			bm(138276 | 0);
			bm(138264 | 0);
			bm(138252 | 0);
			bm(138240 | 0);
			bm(138228 | 0);
			bm(138216 | 0);
			bm(138204 | 0);
			bm(138192 | 0);
			bm(138180 | 0);
			bm(138168 | 0);
			bm(138156 | 0);
			bm(138144 | 0);
			bm(138132 | 0);
			bm(138120);
			i = a;
			return
		}
		function Fv(a) {
			a = a | 0;
			a = i;
			pm(137740 | 0);
			pm(137728 | 0);
			pm(137716 | 0);
			pm(137704 | 0);
			pm(137692 | 0);
			pm(137680 | 0);
			pm(137668 | 0);
			pm(137656 | 0);
			pm(137644 | 0);
			pm(137632 | 0);
			pm(137620 | 0);
			pm(137608 | 0);
			pm(137596 | 0);
			pm(137584);
			i = a;
			return
		}
		function Gv(a) {
			a = a | 0;
			a = i;
			bm(137348 | 0);
			bm(137336 | 0);
			bm(137324 | 0);
			bm(137312 | 0);
			bm(137300 | 0);
			bm(137288 | 0);
			bm(137276 | 0);
			bm(137264 | 0);
			bm(137252 | 0);
			bm(137240 | 0);
			bm(137228 | 0);
			bm(137216 | 0);
			bm(137204 | 0);
			bm(137192 | 0);
			bm(137180 | 0);
			bm(137168 | 0);
			bm(137156 | 0);
			bm(137144 | 0);
			bm(137132 | 0);
			bm(137120 | 0);
			bm(137108 | 0);
			bm(137096 | 0);
			bm(137084 | 0);
			bm(137072);
			i = a;
			return
		}
		function Hv(a) {
			a = a | 0;
			a = i;
			pm(136508 | 0);
			pm(136496 | 0);
			pm(136484 | 0);
			pm(136472 | 0);
			pm(136460 | 0);
			pm(136448 | 0);
			pm(136436 | 0);
			pm(136424 | 0);
			pm(136412 | 0);
			pm(136400 | 0);
			pm(136388 | 0);
			pm(136376 | 0);
			pm(136364 | 0);
			pm(136352 | 0);
			pm(136340 | 0);
			pm(136328 | 0);
			pm(136316 | 0);
			pm(136304 | 0);
			pm(136292 | 0);
			pm(136280 | 0);
			pm(136268 | 0);
			pm(136256 | 0);
			pm(136244 | 0);
			pm(136232);
			i = a;
			return
		}
		function Iv(a) {
			a = a | 0;
			a = i;
			bm(136196 | 0);
			bm(136184 | 0);
			bm(136172 | 0);
			bm(136160 | 0);
			bm(136148 | 0);
			bm(136136 | 0);
			bm(136124 | 0);
			bm(136112 | 0);
			bm(136100 | 0);
			bm(136088 | 0);
			bm(136076 | 0);
			bm(136064 | 0);
			bm(136052 | 0);
			bm(136040 | 0);
			bm(136028 | 0);
			bm(136016 | 0);
			bm(136004 | 0);
			bm(135992 | 0);
			bm(135980 | 0);
			bm(135968 | 0);
			bm(135956 | 0);
			bm(135944 | 0);
			bm(135932 | 0);
			bm(135920);
			i = a;
			return
		}
		function Jv(a) {
			a = a | 0;
			a = i;
			pm(135868 | 0);
			pm(135856 | 0);
			pm(135844 | 0);
			pm(135832 | 0);
			pm(135820 | 0);
			pm(135808 | 0);
			pm(135796 | 0);
			pm(135784 | 0);
			pm(135772 | 0);
			pm(135760 | 0);
			pm(135748 | 0);
			pm(135736 | 0);
			pm(135724 | 0);
			pm(135712 | 0);
			pm(135700 | 0);
			pm(135688 | 0);
			pm(135676 | 0);
			pm(135664 | 0);
			pm(135652 | 0);
			pm(135640 | 0);
			pm(135628 | 0);
			pm(135616 | 0);
			pm(135604 | 0);
			pm(135592);
			i = a;
			return
		}
		function Kv(b, d) {
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0;
			e = i;
			i = i + 32 | 0;
			f = e + 16 | 0;
			g = e + 8 | 0;
			h = e + 4 | 0;
			j = e;
			k = b + 52 | 0;
			if (HEAP8[k >> 0] | 0) {
				l = b + 48 | 0;
				m = HEAP32[l >> 2] | 0;
				if (!d) {
					n = m;
					i = e;
					return n | 0
				}
				HEAP32[l >> 2] = -1;
				HEAP8[k >> 0] = 0;
				n = m;
				i = e;
				return n | 0
			}
			m = HEAP32[b + 44 >> 2] | 0;
			k = (m | 0) > 1 ? m : 1;
			a: do
				if ((k | 0) > 0) {
					m = b + 32 | 0;
					l = 0;
					while (1) {
						o = $b(HEAP32[m >> 2] | 0) | 0;
						if ((o | 0) == -1) {
							n = -1;
							break
						}
						HEAP8[f + l >> 0] = o;
						l = l + 1 | 0;
						if ((l | 0) >= (k | 0))
							break a
					}
					i = e;
					return n | 0
				}
			while (0);
			b: do
				if (!(HEAP8[b + 53 >> 0] | 0)) {
					l = b + 40 | 0;
					m = b + 36 | 0;
					o = g + 4 | 0;
					p = b + 32 | 0;
					q = k;
					while (1) {
						r = HEAP32[l >> 2] | 0;
						s = r;
						t = HEAP32[s >> 2] | 0;
						u = HEAP32[s + 4 >> 2] | 0;
						s = HEAP32[m >> 2] | 0;
						v = f + q | 0;
						w = yc[c[(HEAP32[s >> 2] | 0) + 16 >> 2] & 15](s, r, f, v, h, g, o, j) | 0;
						if ((w | 0) == 2) {
							n = -1;
							x = 22;
							break
						} else if ((w | 0) == 3) {
							x = 14;
							break
						} else if ((w | 0) != 1) {
							y = q;
							break b
						}
						w = HEAP32[l >> 2] | 0;
						HEAP32[w >> 2] = t;
						HEAP32[w + 4 >> 2] = u;
						if ((q | 0) == 8) {
							n = -1;
							x = 22;
							break
						}
						u = $b(HEAP32[p >> 2] | 0) | 0;
						if ((u | 0) == -1) {
							n = -1;
							x = 22;
							break
						}
						HEAP8[v >> 0] = u;
						q = q + 1 | 0
					}
					if ((x | 0) == 14) {
						HEAP32[g >> 2] = HEAP8[f >> 0];
						y = q;
						break
					} else if ((x | 0) == 22) {
						i = e;
						return n | 0
					}
				} else {
					HEAP32[g >> 2] = HEAP8[f >> 0];
					y = k
				}
			while (0);
			if (d) {
				d = HEAP32[g >> 2] | 0;
				HEAP32[b + 48 >> 2] = d;
				n = d;
				i = e;
				return n | 0
			}
			d = b + 32 | 0;
			b = y;
			while (1) {
				if ((b | 0) <= 0)
					break;
				b = b + -1 | 0;
				if ((Mb(HEAP8[f + b >> 0] | 0, HEAP32[d >> 2] | 0) | 0) == -1) {
					n = -1;
					x = 22;
					break
				}
			}
			if ((x | 0) == 22) {
				i = e;
				return n | 0
			}
			n = HEAP32[g >> 2] | 0;
			i = e;
			return n | 0
		}
		function Lv(b, e) {
			b = b | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0;
			f = i;
			i = i + 32 | 0;
			g = f + 16 | 0;
			h = f + 8 | 0;
			j = f + 4 | 0;
			k = f;
			l = b + 52 | 0;
			if (HEAP8[l >> 0] | 0) {
				m = b + 48 | 0;
				n = HEAP32[m >> 2] | 0;
				if (!e) {
					o = n;
					i = f;
					return o | 0
				}
				HEAP32[m >> 2] = -1;
				HEAP8[l >> 0] = 0;
				o = n;
				i = f;
				return o | 0
			}
			n = HEAP32[b + 44 >> 2] | 0;
			l = (n | 0) > 1 ? n : 1;
			a: do
				if ((l | 0) > 0) {
					n = b + 32 | 0;
					m = 0;
					while (1) {
						p = $b(HEAP32[n >> 2] | 0) | 0;
						if ((p | 0) == -1) {
							o = -1;
							break
						}
						HEAP8[g + m >> 0] = p;
						m = m + 1 | 0;
						if ((m | 0) >= (l | 0))
							break a
					}
					i = f;
					return o | 0
				}
			while (0);
			b: do
				if (!(HEAP8[b + 53 >> 0] | 0)) {
					m = b + 40 | 0;
					n = b + 36 | 0;
					p = h + 1 | 0;
					q = b + 32 | 0;
					r = l;
					while (1) {
						s = HEAP32[m >> 2] | 0;
						t = s;
						u = HEAP32[t >> 2] | 0;
						v = HEAP32[t + 4 >> 2] | 0;
						t = HEAP32[n >> 2] | 0;
						w = g + r | 0;
						x = yc[c[(HEAP32[t >> 2] | 0) + 16 >> 2] & 15](t, s, g, w, j, h, p, k) | 0;
						if ((x | 0) == 2) {
							o = -1;
							y = 23;
							break
						} else if ((x | 0) == 3) {
							y = 14;
							break
						} else if ((x | 0) != 1) {
							z = r;
							break b
						}
						x = HEAP32[m >> 2] | 0;
						HEAP32[x >> 2] = u;
						HEAP32[x + 4 >> 2] = v;
						if ((r | 0) == 8) {
							o = -1;
							y = 23;
							break
						}
						v = $b(HEAP32[q >> 2] | 0) | 0;
						if ((v | 0) == -1) {
							o = -1;
							y = 23;
							break
						}
						HEAP8[w >> 0] = v;
						r = r + 1 | 0
					}
					if ((y | 0) == 14) {
						HEAP8[h >> 0] = HEAP8[g >> 0] | 0;
						z = r;
						break
					} else if ((y | 0) == 23) {
						i = f;
						return o | 0
					}
				} else {
					HEAP8[h >> 0] = HEAP8[g >> 0] | 0;
					z = l
				}
			while (0);
			do
				if (!e) {
					l = b + 32 | 0;
					k = z;
					while (1) {
						if ((k | 0) <= 0) {
							y = 21;
							break
						}
						k = k + -1 | 0;
						if ((Mb(HEAPU8[g + k >> 0] | 0, HEAP32[l >> 2] | 0) | 0) == -1) {
							o = -1;
							y = 23;
							break
						}
					}
					if ((y | 0) == 21) {
						A = HEAP8[h >> 0] | 0;
						break
					} else if ((y | 0) == 23) {
						i = f;
						return o | 0
					}
				} else {
					l = HEAP8[h >> 0] | 0;
					HEAP32[b + 48 >> 2] = l & 255;
					A = l
				}
			while (0);
			o = A & 255;
			i = f;
			return o | 0
		}
		function Mv(a, b, d, e) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0;
			f = i;
			i = i + 16 | 0;
			g = f;
			if ((a | 0) == (b | 0)) {
				HEAP32[d >> 2] = 4;
				h = 0;
				i = f;
				return h | 0
			}
			j = bc() | 0;
			k = HEAP32[j >> 2] | 0;
			HEAP32[j >> 2] = 0;
			l = bw(a, g, e, ko() | 0) | 0;
			e = H;
			a = HEAP32[j >> 2] | 0;
			if (!a)
				HEAP32[j >> 2] = k;
			if ((HEAP32[g >> 2] | 0) != (b | 0)) {
				HEAP32[d >> 2] = 4;
				h = 0;
				i = f;
				return h | 0
			}
			do
				if ((a | 0) == 34) {
					HEAP32[d >> 2] = 4;
					if ((e | 0) > 0 | (e | 0) == 0 & l >>> 0 > 0) {
						h = 2147483647;
						i = f;
						return h | 0
					}
				} else {
					if ((e | 0) < -1 | (e | 0) == -1 & l >>> 0 < 2147483648) {
						HEAP32[d >> 2] = 4;
						break
					}
					if ((e | 0) > 0 | (e | 0) == 0 & l >>> 0 > 2147483647) {
						HEAP32[d >> 2] = 4;
						h = 2147483647;
						i = f;
						return h | 0
					} else {
						h = l;
						i = f;
						return h | 0
					}
				}
			while (0);
			h = -2147483648;
			i = f;
			return h | 0
		}
		function Nv(a, b, d, e) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0;
			f = i;
			i = i + 16 | 0;
			g = f;
			if ((a | 0) == (b | 0)) {
				HEAP32[d >> 2] = 4;
				h = 0;
				j = 0;
				H = h;
				i = f;
				return j | 0
			}
			k = bc() | 0;
			l = HEAP32[k >> 2] | 0;
			HEAP32[k >> 2] = 0;
			m = bw(a, g, e, ko() | 0) | 0;
			e = H;
			a = HEAP32[k >> 2] | 0;
			if (!a)
				HEAP32[k >> 2] = l;
			if ((HEAP32[g >> 2] | 0) != (b | 0)) {
				HEAP32[d >> 2] = 4;
				h = 0;
				j = 0;
				H = h;
				i = f;
				return j | 0
			}
			if ((a | 0) == 34) {
				HEAP32[d >> 2] = 4;
				d = (e | 0) > 0 | (e | 0) == 0 & m >>> 0 > 0;
				H = d ? 2147483647 : -2147483648;
				i = f;
				return (d ? -1 : 0) | 0
			} else {
				h = e;
				j = m;
				H = h;
				i = f;
				return j | 0
			}
			return 0
		}
		function Ov(b, d, e, f) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0;
			g = i;
			i = i + 16 | 0;
			h = g;
			if ((b | 0) == (d | 0)) {
				HEAP32[e >> 2] = 4;
				j = 0;
				i = g;
				return j | 0
			}
			if ((HEAP8[b >> 0] | 0) == 45) {
				HEAP32[e >> 2] = 4;
				j = 0;
				i = g;
				return j | 0
			}
			k = bc() | 0;
			l = HEAP32[k >> 2] | 0;
			HEAP32[k >> 2] = 0;
			m = aw(b, h, f, ko() | 0) | 0;
			f = H;
			b = HEAP32[k >> 2] | 0;
			if (!b)
				HEAP32[k >> 2] = l;
			if ((HEAP32[h >> 2] | 0) != (d | 0)) {
				HEAP32[e >> 2] = 4;
				j = 0;
				i = g;
				return j | 0
			}
			if ((b | 0) == 34 | (f >>> 0 > 0 | (f | 0) == 0 & m >>> 0 > 65535)) {
				HEAP32[e >> 2] = 4;
				j = -1;
				i = g;
				return j | 0
			} else {
				j = m & 65535;
				i = g;
				return j | 0
			}
			return 0
		}
		function Pv(b, d, e, f) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0;
			g = i;
			i = i + 16 | 0;
			h = g;
			if ((b | 0) == (d | 0)) {
				HEAP32[e >> 2] = 4;
				j = 0;
				i = g;
				return j | 0
			}
			if ((HEAP8[b >> 0] | 0) == 45) {
				HEAP32[e >> 2] = 4;
				j = 0;
				i = g;
				return j | 0
			}
			k = bc() | 0;
			l = HEAP32[k >> 2] | 0;
			HEAP32[k >> 2] = 0;
			m = aw(b, h, f, ko() | 0) | 0;
			f = H;
			b = HEAP32[k >> 2] | 0;
			if (!b)
				HEAP32[k >> 2] = l;
			if ((HEAP32[h >> 2] | 0) != (d | 0)) {
				HEAP32[e >> 2] = 4;
				j = 0;
				i = g;
				return j | 0
			}
			if ((b | 0) == 34 | (f >>> 0 > 0 | (f | 0) == 0 & m >>> 0 > 4294967295)) {
				HEAP32[e >> 2] = 4;
				j = -1;
				i = g;
				return j | 0
			} else {
				j = m;
				i = g;
				return j | 0
			}
			return 0
		}
		function Qv(b, d, e, f) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0;
			g = i;
			i = i + 16 | 0;
			h = g;
			if ((b | 0) == (d | 0)) {
				HEAP32[e >> 2] = 4;
				j = 0;
				i = g;
				return j | 0
			}
			if ((HEAP8[b >> 0] | 0) == 45) {
				HEAP32[e >> 2] = 4;
				j = 0;
				i = g;
				return j | 0
			}
			k = bc() | 0;
			l = HEAP32[k >> 2] | 0;
			HEAP32[k >> 2] = 0;
			m = aw(b, h, f, ko() | 0) | 0;
			f = H;
			b = HEAP32[k >> 2] | 0;
			if (!b)
				HEAP32[k >> 2] = l;
			if ((HEAP32[h >> 2] | 0) != (d | 0)) {
				HEAP32[e >> 2] = 4;
				j = 0;
				i = g;
				return j | 0
			}
			if ((b | 0) == 34 | (f >>> 0 > 0 | (f | 0) == 0 & m >>> 0 > 4294967295)) {
				HEAP32[e >> 2] = 4;
				j = -1;
				i = g;
				return j | 0
			} else {
				j = m;
				i = g;
				return j | 0
			}
			return 0
		}
		function Rv(b, d, e, f) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0;
			g = i;
			i = i + 16 | 0;
			h = g;
			do
				if ((b | 0) != (d | 0)) {
					if ((HEAP8[b >> 0] | 0) == 45) {
						HEAP32[e >> 2] = 4;
						j = 0;
						k = 0;
						break
					}
					l = bc() | 0;
					m = HEAP32[l >> 2] | 0;
					HEAP32[l >> 2] = 0;
					n = aw(b, h, f, ko() | 0) | 0;
					o = HEAP32[l >> 2] | 0;
					if (!o)
						HEAP32[l >> 2] = m;
					if ((HEAP32[h >> 2] | 0) != (d | 0)) {
						HEAP32[e >> 2] = 4;
						j = 0;
						k = 0;
						break
					}
					if ((o | 0) == 34) {
						HEAP32[e >> 2] = 4;
						j = -1;
						k = -1
					} else {
						j = H;
						k = n
					}
				} else {
					HEAP32[e >> 2] = 4;
					j = 0;
					k = 0
				}
			while (0);
			H = j;
			i = g;
			return k | 0
		}
		function Sv(a, b, d) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0.0,
			h = 0,
			j = 0,
			k = 0.0;
			e = i;
			i = i + 16 | 0;
			f = e;
			if ((a | 0) == (b | 0)) {
				HEAP32[d >> 2] = 4;
				g = 0.0;
				i = e;
				return +g
			}
			h = bc() | 0;
			j = HEAP32[h >> 2] | 0;
			HEAP32[h >> 2] = 0;
			k = +Zx(a, f, ko() | 0);
			a = HEAP32[h >> 2] | 0;
			if (!a)
				HEAP32[h >> 2] = j;
			if ((HEAP32[f >> 2] | 0) != (b | 0)) {
				HEAP32[d >> 2] = 4;
				g = 0.0;
				i = e;
				return +g
			}
			if ((a | 0) == 34)
				HEAP32[d >> 2] = 4;
			g = k;
			i = e;
			return +g
		}
		function Tv(a, b, d) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0.0,
			k = 0,
			l = 0.0;
			e = i;
			i = i + 16 | 0;
			f = e;
			do
				if ((a | 0) != (b | 0)) {
					g = bc() | 0;
					h = HEAP32[g >> 2] | 0;
					HEAP32[g >> 2] = 0;
					j = +Zx(a, f, ko() | 0);
					k = HEAP32[g >> 2] | 0;
					if (!k)
						HEAP32[g >> 2] = h;
					if ((HEAP32[f >> 2] | 0) != (b | 0)) {
						HEAP32[d >> 2] = 4;
						l = 0.0;
						break
					}
					if ((k | 0) == 34) {
						HEAP32[d >> 2] = 4;
						l = j
					} else
						l = j
				} else {
					HEAP32[d >> 2] = 4;
					l = 0.0
				}
			while (0);
			i = e;
			return +l
		}
		function Uv(a, b, d) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0.0,
			k = 0,
			l = 0.0;
			e = i;
			i = i + 16 | 0;
			f = e;
			do
				if ((a | 0) != (b | 0)) {
					g = bc() | 0;
					h = HEAP32[g >> 2] | 0;
					HEAP32[g >> 2] = 0;
					j = +Zx(a, f, ko() | 0);
					k = HEAP32[g >> 2] | 0;
					if (!k)
						HEAP32[g >> 2] = h;
					if ((HEAP32[f >> 2] | 0) != (b | 0)) {
						HEAP32[d >> 2] = 4;
						l = 0.0;
						break
					}
					if ((k | 0) == 34) {
						HEAP32[d >> 2] = 4;
						l = j
					} else
						l = j
				} else {
					HEAP32[d >> 2] = 4;
					l = 0.0
				}
			while (0);
			i = e;
			return +l
		}
		function Vv(b, d) {
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0;
			e = i;
			if (d >>> 0 > 1073741823)
				Kr(b);
			f = b + 128 | 0;
			if ((HEAP8[f >> 0] | 0) == 0 & d >>> 0 < 29) {
				HEAP8[f >> 0] = 1;
				g = b + 16 | 0
			} else
				g = il(d << 2) | 0;
			HEAP32[b + 4 >> 2] = g;
			HEAP32[b >> 2] = g;
			HEAP32[b + 8 >> 2] = g + (d << 2);
			i = e;
			return
		}
		function Wv(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0;
			d = i;
			e = a + 4 | 0;
			a = b;
			b = HEAP32[e >> 2] | 0;
			do {
				if (!b)
					f = 0;
				else {
					HEAP32[b >> 2] = 0;
					f = HEAP32[e >> 2] | 0
				}
				b = f + 4 | 0;
				HEAP32[e >> 2] = b;
				a = a + -1 | 0
			} while ((a | 0) != 0);
			i = d;
			return
		}
		function Xv(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0;
			d = i;
			i = i + 32 | 0;
			e = d;
			f = HEAP32[a + 8 >> 2] | 0;
			g = HEAP32[a + 4 >> 2] | 0;
			if (f - g >> 2 >>> 0 >= b >>> 0) {
				Wv(a, b);
				i = d;
				return
			}
			h = HEAP32[a >> 2] | 0;
			j = g - h >> 2;
			g = j + b | 0;
			if (g >>> 0 > 1073741823)
				Kr(a);
			k = f - h | 0;
			if (k >> 2 >>> 0 < 536870911) {
				h = k >> 1;
				l = h >>> 0 < g >>> 0 ? g : h
			} else
				l = 1073741823;
			Yv(e, l, j, a + 16 | 0);
			Zv(e, b);
			_v(a, e);
			$v(e);
			i = d;
			return
		}
		function Yv(b, d, e, f) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0;
			g = i;
			h = b + 12 | 0;
			HEAP32[h >> 2] = 0;
			HEAP32[b + 16 >> 2] = f;
			do
				if (d) {
					j = f + 112 | 0;
					if ((HEAP8[j >> 0] | 0) == 0 & d >>> 0 < 29) {
						HEAP8[j >> 0] = 1;
						k = f;
						break
					} else {
						k = il(d << 2) | 0;
						break
					}
				} else
					k = 0;
			while (0);
			HEAP32[b >> 2] = k;
			f = k + (e << 2) | 0;
			HEAP32[b + 8 >> 2] = f;
			HEAP32[b + 4 >> 2] = f;
			HEAP32[h >> 2] = k + (d << 2);
			i = g;
			return
		}
		function Zv(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0;
			d = i;
			e = a + 8 | 0;
			a = b;
			b = HEAP32[e >> 2] | 0;
			do {
				if (!b)
					f = 0;
				else {
					HEAP32[b >> 2] = 0;
					f = HEAP32[e >> 2] | 0
				}
				b = f + 4 | 0;
				HEAP32[e >> 2] = b;
				a = a + -1 | 0
			} while ((a | 0) != 0);
			i = d;
			return
		}
		function _v(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0;
			d = i;
			e = HEAP32[a >> 2] | 0;
			f = a + 4 | 0;
			g = b + 4 | 0;
			h = (HEAP32[f >> 2] | 0) - e | 0;
			j = (HEAP32[g >> 2] | 0) + (0 - (h >> 2) << 2) | 0;
			HEAP32[g >> 2] = j;
			qy(j | 0, e | 0, h | 0) | 0;
			h = HEAP32[a >> 2] | 0;
			HEAP32[a >> 2] = HEAP32[g >> 2];
			HEAP32[g >> 2] = h;
			h = b + 8 | 0;
			e = HEAP32[f >> 2] | 0;
			HEAP32[f >> 2] = HEAP32[h >> 2];
			HEAP32[h >> 2] = e;
			e = a + 8 | 0;
			a = b + 12 | 0;
			h = HEAP32[e >> 2] | 0;
			HEAP32[e >> 2] = HEAP32[a >> 2];
			HEAP32[a >> 2] = h;
			HEAP32[b >> 2] = HEAP32[g >> 2];
			i = d;
			return
		}
		function $v(b) {
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0,
			g = 0;
			d = i;
			e = HEAP32[b + 4 >> 2] | 0;
			f = b + 8 | 0;
			g = HEAP32[f >> 2] | 0;
			if ((g | 0) != (e | 0))
				HEAP32[f >> 2] = g + (~((g + -4 - e | 0) >>> 2) << 2);
			e = HEAP32[b >> 2] | 0;
			if (!e) {
				i = d;
				return
			}
			g = HEAP32[b + 16 >> 2] | 0;
			if ((g | 0) == (e | 0)) {
				HEAP8[g + 112 >> 0] = 0;
				i = d;
				return
			} else {
				kl(e);
				i = d;
				return
			}
		}
		function aw(a, b, c, d) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			d = d | 0;
			var e = 0;
			d = i;
			e = _x(a, b, c) | 0;
			i = d;
			return e | 0
		}
		function bw(a, b, c, d) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			d = d | 0;
			var e = 0;
			d = i;
			e = $x(a, b, c) | 0;
			i = d;
			return e | 0
		}
		function cw(a, b) {
			a = a | 0;
			b = b | 0;
			return (a + -48 | 0) >>> 0 < 10 | 0
		}
		function dw(a, b) {
			a = a | 0;
			b = b | 0;
			var c = 0;
			b = i;
			c = Cx(a) | 0;
			i = b;
			return c | 0
		}
		function ew(a, b, c) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			var d = 0,
			e = 0;
			d = i;
			e = fw(0, a, b, (c | 0) != 0 ? c : 138640) | 0;
			i = d;
			return e | 0
		}
		function fw(b, d, e, f) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0;
			g = i;
			i = i + 16 | 0;
			h = g;
			HEAP32[h >> 2] = b;
			j = (f | 0) == 0 ? 138648 : f;
			f = HEAP32[j >> 2] | 0;
			a: do
				if (!d) {
					if (!f) {
						k = 0;
						i = g;
						return k | 0
					}
				} else {
					if (!b) {
						HEAP32[h >> 2] = h;
						l = h
					} else
						l = b;
					if (!e) {
						k = -2;
						i = g;
						return k | 0
					}
					do
						if (!f) {
							m = HEAP8[d >> 0] | 0;
							n = m & 255;
							if (m << 24 >> 24 > -1) {
								HEAP32[l >> 2] = n;
								k = m << 24 >> 24 != 0 & 1;
								i = g;
								return k | 0
							} else {
								m = n + -194 | 0;
								if (m >>> 0 > 50)
									break a;
								o = e + -1 | 0;
								p = HEAP32[138432 + (m << 2) >> 2] | 0;
								q = d + 1 | 0;
								break
							}
						} else {
							o = e;
							p = f;
							q = d
						}
					while (0);
					b: do
						if (!o)
							r = p;
						else {
							m = HEAP8[q >> 0] | 0;
							n = (m & 255) >>> 3;
							if ((n + -16 | n + (p >> 26)) >>> 0 > 7)
								break a;
							else {
								s = o;
								t = m;
								u = p;
								v = q
							}
							while (1) {
								v = v + 1 | 0;
								u = (t & 255) + -128 | u << 6;
								s = s + -1 | 0;
								if ((u | 0) >= 0)
									break;
								if (!s) {
									r = u;
									break b
								}
								t = HEAP8[v >> 0] | 0;
								if ((t & -64) << 24 >> 24 != -128)
									break a
							}
							HEAP32[j >> 2] = 0;
							HEAP32[l >> 2] = u;
							k = e - s | 0;
							i = g;
							return k | 0
						}
					while (0);
					HEAP32[j >> 2] = r;
					k = -2;
					i = g;
					return k | 0
				}
			while (0);
			HEAP32[j >> 2] = 0;
			c[(bc() | 0) >> 2] = 84;
			k = -1;
			i = g;
			return k | 0
		}
		function gw(a) {
			a = a | 0;
			var b = 0;
			if (!a)
				b = 1;
			else
				b = (HEAP32[a >> 2] | 0) == 0;
			return b & 1 | 0
		}
		function hw(a, b, d, e, f) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0;
			g = i;
			i = i + 1040 | 0;
			h = g + 8 | 0;
			j = g;
			k = HEAP32[b >> 2] | 0;
			HEAP32[j >> 2] = k;
			l = (a | 0) != 0;
			m = l ? e : 256;
			e = l ? a : h;
			a: do
				if ((k | 0) != 0 & (m | 0) != 0) {
					a = m;
					n = d;
					o = k;
					p = 0;
					q = e;
					while (1) {
						r = n >>> 2;
						s = r >>> 0 >= a >>> 0;
						if (!(s | n >>> 0 > 131)) {
							t = n;
							u = a;
							v = o;
							w = p;
							x = q;
							y = 7;
							break a
						}
						z = s ? a : r;
						r = n - z | 0;
						s = iw(q, j, z, f) | 0;
						if ((s | 0) == -1) {
							A = -1;
							break a
						}
						if ((q | 0) == (h | 0)) {
							B = a;
							C = h
						} else {
							B = a - s | 0;
							C = q + (s << 2) | 0
						}
						z = s + p | 0;
						s = HEAP32[j >> 2] | 0;
						if ((s | 0) != 0 & (B | 0) != 0) {
							a = B;
							n = r;
							o = s;
							p = z;
							q = C
						} else {
							t = r;
							u = B;
							v = s;
							w = z;
							x = C;
							y = 7;
							break
						}
					}
				} else {
					t = d;
					u = m;
					v = k;
					w = 0;
					x = e;
					y = 7
				}
			while (0);
			b: do
				if ((y | 0) == 7)
					if ((v | 0) != 0 & (u | 0) != 0 & (t | 0) != 0) {
						e = t;
						k = u;
						m = v;
						d = w;
						C = x;
						while (1) {
							D = fw(C, m, e, f) | 0;
							if ((D + 2 | 0) >>> 0 < 3)
								break;
							m = (HEAP32[j >> 2] | 0) + D | 0;
							HEAP32[j >> 2] = m;
							k = k + -1 | 0;
							B = d + 1 | 0;
							if (!((k | 0) != 0 & (e | 0) != (D | 0))) {
								A = B;
								break b
							} else {
								e = e - D | 0;
								d = B;
								C = C + 4 | 0
							}
						}
						if (!D) {
							HEAP32[j >> 2] = 0;
							A = d;
							break
						} else if ((D | 0) == -1) {
							A = -1;
							break
						} else {
							HEAP32[f >> 2] = 0;
							A = d;
							break
						}
					} else
						A = w;
			while (0);
			if (!l) {
				i = g;
				return A | 0
			}
			HEAP32[b >> 2] = HEAP32[j >> 2];
			i = g;
			return A | 0
		}
		function iw(b, e, f, g) {
			b = b | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0,
			O = 0,
			P = 0,
			Q = 0,
			R = 0,
			S = 0,
			T = 0,
			U = 0,
			V = 0,
			W = 0,
			X = 0,
			Y = 0,
			Z = 0,
			_ = 0,
			$ = 0,
			aa = 0,
			ba = 0,
			ca = 0,
			da = 0,
			ea = 0,
			fa = 0,
			ga = 0;
			h = i;
			j = HEAP32[e >> 2] | 0;
			if ((g | 0) != 0 ? (k = HEAP32[g >> 2] | 0, (k | 0) != 0) : 0)
				if (!b) {
					l = f;
					m = k;
					n = j;
					o = 16
				} else {
					HEAP32[g >> 2] = 0;
					p = b;
					q = f;
					r = k;
					s = j;
					o = 36
				}
			else if (!b) {
				t = f;
				u = j;
				o = 7
			} else {
				v = b;
				w = f;
				x = j;
				o = 6
			}
			a: while (1)
				if ((o | 0) == 6) {
					o = 0;
					if (!w) {
						y = x;
						o = 26;
						break
					} else {
						z = v;
						A = w;
						B = x
					}
					while (1) {
						j = HEAP8[B >> 0] | 0;
						b: do
							if (((j & 255) + -1 | 0) >>> 0 < 127 ? (B & 3 | 0) == 0 & A >>> 0 > 4 : 0) {
								k = z;
								g = A;
								C = B;
								do {
									D = HEAP32[C >> 2] | 0;
									if ((D + -16843009 | D) & -2139062144) {
										E = k;
										F = g;
										G = D & 255;
										H = C;
										break b
									}
									HEAP32[k >> 2] = D & 255;
									HEAP32[k + 4 >> 2] = HEAPU8[C + 1 >> 0];
									HEAP32[k + 8 >> 2] = HEAPU8[C + 2 >> 0];
									D = C;
									C = C + 4 | 0;
									I = k;
									k = k + 16 | 0;
									HEAP32[I + 12 >> 2] = HEAPU8[D + 3 >> 0];
									g = g + -4 | 0
								} while (g >>> 0 > 4);
								E = k;
								F = g;
								G = HEAP8[C >> 0] | 0;
								H = C
							} else {
								E = z;
								F = A;
								G = j;
								H = B
							}
						while (0);
						J = G & 255;
						if ((J + -1 | 0) >>> 0 >= 127)
							break;
						j = H + 1 | 0;
						HEAP32[E >> 2] = J;
						A = F + -1 | 0;
						if (!A) {
							y = j;
							o = 26;
							break a
						} else {
							z = E + 4 | 0;
							B = j
						}
					}
					j = J + -194 | 0;
					if (j >>> 0 > 50) {
						K = E;
						L = F;
						M = H;
						o = 47;
						break
					}
					p = E;
					q = F;
					r = HEAP32[138432 + (j << 2) >> 2] | 0;
					s = H + 1 | 0;
					o = 36;
					continue
				} else if ((o | 0) == 7) {
					o = 0;
					j = HEAP8[u >> 0] | 0;
					if (((j & 255) + -1 | 0) >>> 0 < 127 ? (u & 3 | 0) == 0 : 0) {
						D = HEAP32[u >> 2] | 0;
						if (!((D + -16843009 | D) & -2139062144)) {
							I = t;
							N = u;
							while (1) {
								O = N + 4 | 0;
								P = I + -4 | 0;
								Q = HEAP32[O >> 2] | 0;
								if (!((Q + -16843009 | Q) & -2139062144)) {
									I = P;
									N = O
								} else {
									R = P;
									S = Q;
									T = O;
									break
								}
							}
						} else {
							R = t;
							S = D;
							T = u
						}
						U = R;
						V = S & 255;
						W = T
					} else {
						U = t;
						V = j;
						W = u
					}
					N = V & 255;
					if ((N + -1 | 0) >>> 0 < 127) {
						t = U + -1 | 0;
						u = W + 1 | 0;
						o = 7;
						continue
					}
					I = N + -194 | 0;
					if (I >>> 0 > 50) {
						K = b;
						L = U;
						M = W;
						o = 47;
						break
					}
					l = U;
					m = HEAP32[138432 + (I << 2) >> 2] | 0;
					n = W + 1 | 0;
					o = 16;
					continue
				} else if ((o | 0) == 16) {
					o = 0;
					I = (HEAPU8[n >> 0] | 0) >>> 3;
					if ((I + -16 | I + (m >> 26)) >>> 0 > 7) {
						o = 17;
						break
					}
					I = n + 1 | 0;
					if (m & 33554432) {
						if ((HEAP8[I >> 0] & -64) << 24 >> 24 != -128) {
							o = 20;
							break
						}
						N = n + 2 | 0;
						if (!(m & 524288))
							X = N;
						else {
							if ((HEAP8[N >> 0] & -64) << 24 >> 24 != -128) {
								o = 23;
								break
							}
							X = n + 3 | 0
						}
					} else
						X = I;
					t = l + -1 | 0;
					u = X;
					o = 7;
					continue
				} else if ((o | 0) == 36) {
					o = 0;
					I = HEAPU8[s >> 0] | 0;
					N = I >>> 3;
					if ((N + -16 | N + (r >> 26)) >>> 0 > 7) {
						o = 37;
						break
					}
					N = s + 1 | 0;
					Y = I + -128 | r << 6;
					if ((Y | 0) < 0) {
						I = HEAPU8[N >> 0] | 0;
						if ((I & 192 | 0) != 128) {
							o = 40;
							break
						}
						O = s + 2 | 0;
						Z = I + -128 | Y << 6;
						if ((Z | 0) < 0) {
							I = HEAPU8[O >> 0] | 0;
							if ((I & 192 | 0) != 128) {
								o = 43;
								break
							}
							_ = I + -128 | Z << 6;
							$ = s + 3 | 0
						} else {
							_ = Z;
							$ = O
						}
					} else {
						_ = Y;
						$ = N
					}
					HEAP32[p >> 2] = _;
					v = p + 4 | 0;
					w = q + -1 | 0;
					x = $;
					o = 6;
					continue
				}
			if ((o | 0) == 17) {
				aa = b;
				ba = l;
				ca = m;
				da = n + -1 | 0;
				o = 46
			} else if ((o | 0) == 20) {
				aa = b;
				ba = l;
				ca = m;
				da = n + -1 | 0;
				o = 46
			} else if ((o | 0) == 23) {
				aa = b;
				ba = l;
				ca = m;
				da = n + -1 | 0;
				o = 46
			} else if ((o | 0) == 26) {
				HEAP32[e >> 2] = y;
				ea = f;
				i = h;
				return ea | 0
			} else if ((o | 0) == 37) {
				aa = p;
				ba = q;
				ca = r;
				da = s + -1 | 0;
				o = 46
			} else if ((o | 0) == 40) {
				aa = p;
				ba = q;
				ca = Y;
				da = s + -1 | 0;
				o = 46
			} else if ((o | 0) == 43) {
				aa = p;
				ba = q;
				ca = Z;
				da = s + -1 | 0;
				o = 46
			}
			if ((o | 0) == 46)
				if (!ca) {
					K = aa;
					L = ba;
					M = da;
					o = 47
				} else {
					fa = aa;
					ga = da
				}
			if ((o | 0) == 47)
				if (!(HEAP8[M >> 0] | 0)) {
					if (K) {
						HEAP32[K >> 2] = 0;
						HEAP32[e >> 2] = 0
					}
					ea = f - L | 0;
					i = h;
					return ea | 0
				} else {
					fa = K;
					ga = M
				}
			c[(bc() | 0) >> 2] = 84;
			if (!fa) {
				ea = -1;
				i = h;
				return ea | 0
			}
			HEAP32[e >> 2] = ga;
			ea = -1;
			i = h;
			return ea | 0
		}
		function jw(b, e, f) {
			b = b | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0;
			g = i;
			i = i + 16 | 0;
			h = g;
			HEAP32[h >> 2] = b;
			if (!e) {
				j = 0;
				i = g;
				return j | 0
			}
			do
				if (f) {
					if (!b) {
						HEAP32[h >> 2] = h;
						k = h
					} else
						k = b;
					l = HEAP8[e >> 0] | 0;
					m = l & 255;
					if (l << 24 >> 24 > -1) {
						HEAP32[k >> 2] = m;
						j = l << 24 >> 24 != 0 & 1;
						i = g;
						return j | 0
					}
					l = m + -194 | 0;
					if (l >>> 0 <= 50) {
						m = e + 1 | 0;
						n = HEAP32[138432 + (l << 2) >> 2] | 0;
						if (f >>> 0 < 4 ? (n & -2147483648 >>> ((f * 6 | 0) + -6 | 0) | 0) != 0 : 0)
							break;
						l = HEAPU8[m >> 0] | 0;
						m = l >>> 3;
						if ((m + -16 | m + (n >> 26)) >>> 0 <= 7) {
							m = l + -128 | n << 6;
							if ((m | 0) >= 0) {
								HEAP32[k >> 2] = m;
								j = 2;
								i = g;
								return j | 0
							}
							n = HEAPU8[e + 2 >> 0] | 0;
							if ((n & 192 | 0) == 128) {
								l = n + -128 | m << 6;
								if ((l | 0) >= 0) {
									HEAP32[k >> 2] = l;
									j = 3;
									i = g;
									return j | 0
								}
								m = HEAPU8[e + 3 >> 0] | 0;
								if ((m & 192 | 0) == 128) {
									HEAP32[k >> 2] = m + -128 | l << 6;
									j = 4;
									i = g;
									return j | 0
								}
							}
						}
					}
				}
			while (0);
			c[(bc() | 0) >> 2] = 84;
			j = -1;
			i = g;
			return j | 0
		}
		function kw(a, b, d, e, f) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0;
			f = i;
			i = i + 272 | 0;
			g = f + 8 | 0;
			h = f;
			j = HEAP32[b >> 2] | 0;
			HEAP32[h >> 2] = j;
			k = (a | 0) != 0;
			l = k ? e : 256;
			e = k ? a : g;
			a: do
				if ((j | 0) != 0 & (l | 0) != 0) {
					a = l;
					m = d;
					n = j;
					o = 0;
					p = e;
					while (1) {
						q = m >>> 0 >= a >>> 0;
						if (!(q | m >>> 0 > 32)) {
							r = m;
							s = a;
							t = n;
							u = o;
							v = p;
							w = 7;
							break a
						}
						x = q ? a : m;
						q = m - x | 0;
						y = lw(p, h, x, 0) | 0;
						if ((y | 0) == -1) {
							z = -1;
							break a
						}
						if ((p | 0) == (g | 0)) {
							A = a;
							B = g
						} else {
							A = a - y | 0;
							B = p + y | 0
						}
						x = y + o | 0;
						y = HEAP32[h >> 2] | 0;
						if ((y | 0) != 0 & (A | 0) != 0) {
							a = A;
							m = q;
							n = y;
							o = x;
							p = B
						} else {
							r = q;
							s = A;
							t = y;
							u = x;
							v = B;
							w = 7;
							break
						}
					}
				} else {
					r = d;
					s = l;
					t = j;
					u = 0;
					v = e;
					w = 7
				}
			while (0);
			b: do
				if ((w | 0) == 7)
					if ((t | 0) != 0 & (s | 0) != 0 & (r | 0) != 0) {
						e = r;
						j = s;
						l = t;
						d = u;
						B = v;
						while (1) {
							C = Qx(B, HEAP32[l >> 2] | 0, 0) | 0;
							if ((C + 1 | 0) >>> 0 < 2)
								break;
							l = (HEAP32[h >> 2] | 0) + 4 | 0;
							HEAP32[h >> 2] = l;
							e = e + -1 | 0;
							A = d + 1 | 0;
							if (!((j | 0) != (C | 0) & (e | 0) != 0)) {
								z = A;
								break b
							} else {
								j = j - C | 0;
								d = A;
								B = B + C | 0
							}
						}
						if (!C) {
							HEAP32[h >> 2] = 0;
							z = d
						} else
							z = -1
					} else
						z = u;
			while (0);
			if (!k) {
				i = f;
				return z | 0
			}
			HEAP32[b >> 2] = HEAP32[h >> 2];
			i = f;
			return z | 0
		}
		function lw(b, d, e, f) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0;
			f = i;
			i = i + 16 | 0;
			g = f;
			if (!b) {
				h = HEAP32[d >> 2] | 0;
				j = HEAP32[h >> 2] | 0;
				if (!j) {
					k = 0;
					i = f;
					return k | 0
				} else {
					l = 0;
					m = j;
					n = h
				}
				while (1) {
					if (m >>> 0 > 127) {
						h = Qx(g, m, 0) | 0;
						if ((h | 0) == -1) {
							k = -1;
							o = 26;
							break
						} else
							p = h
					} else
						p = 1;
					h = p + l | 0;
					n = n + 4 | 0;
					m = HEAP32[n >> 2] | 0;
					if (!m) {
						k = h;
						o = 26;
						break
					} else
						l = h
				}
				if ((o | 0) == 26) {
					i = f;
					return k | 0
				}
			}
			a: do
				if (e >>> 0 > 3) {
					l = b;
					m = e;
					n = HEAP32[d >> 2] | 0;
					while (1) {
						p = HEAP32[n >> 2] | 0;
						if ((p + -1 | 0) >>> 0 > 126) {
							if (!p)
								break;
							h = Qx(l, p, 0) | 0;
							if ((h | 0) == -1) {
								k = -1;
								o = 26;
								break
							}
							q = l + h | 0;
							r = m - h | 0;
							s = n
						} else {
							HEAP8[l >> 0] = p;
							q = l + 1 | 0;
							r = m + -1 | 0;
							s = HEAP32[d >> 2] | 0
						}
						n = s + 4 | 0;
						HEAP32[d >> 2] = n;
						if (r >>> 0 <= 3) {
							t = q;
							u = r;
							break a
						} else {
							l = q;
							m = r
						}
					}
					if ((o | 0) == 26) {
						i = f;
						return k | 0
					}
					HEAP8[l >> 0] = 0;
					HEAP32[d >> 2] = 0;
					k = e - m | 0;
					i = f;
					return k | 0
				} else {
					t = b;
					u = e
				}
			while (0);
			if (!u) {
				k = e;
				i = f;
				return k | 0
			}
			b = t;
			t = u;
			u = HEAP32[d >> 2] | 0;
			while (1) {
				r = HEAP32[u >> 2] | 0;
				if ((r + -1 | 0) >>> 0 > 126) {
					if (!r) {
						o = 19;
						break
					}
					q = Qx(g, r, 0) | 0;
					if ((q | 0) == -1) {
						k = -1;
						o = 26;
						break
					}
					if (t >>> 0 < q >>> 0) {
						o = 22;
						break
					}
					Qx(b, HEAP32[u >> 2] | 0, 0) | 0;
					v = b + q | 0;
					w = t - q | 0;
					x = u
				} else {
					HEAP8[b >> 0] = r;
					v = b + 1 | 0;
					w = t + -1 | 0;
					x = HEAP32[d >> 2] | 0
				}
				u = x + 4 | 0;
				HEAP32[d >> 2] = u;
				if (!w) {
					k = e;
					o = 26;
					break
				} else {
					b = v;
					t = w
				}
			}
			if ((o | 0) == 19) {
				HEAP8[b >> 0] = 0;
				HEAP32[d >> 2] = 0;
				k = e - t | 0;
				i = f;
				return k | 0
			} else if ((o | 0) == 22) {
				k = e - t | 0;
				i = f;
				return k | 0
			} else if ((o | 0) == 26) {
				i = f;
				return k | 0
			}
			return 0
		}
		function mw(a, b, d) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0;
			e = i;
			f = a + 84 | 0;
			g = HEAP32[f >> 2] | 0;
			h = d + 256 | 0;
			j = ay(g, 0, h) | 0;
			if (!j)
				k = h;
			else
				k = j - g | 0;
			j = k >>> 0 < d >>> 0 ? k : d;
			qy(b | 0, g | 0, j | 0) | 0;
			HEAP32[a + 4 >> 2] = g + j;
			b = g + k | 0;
			HEAP32[a + 8 >> 2] = b;
			HEAP32[f >> 2] = b;
			i = e;
			return j | 0
		}
		function nw(a, b, d) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0;
			e = i;
			i = i + 16 | 0;
			f = e;
			HEAP32[f >> 2] = d;
			d = qw(a, b, f) | 0;
			i = e;
			return d | 0
		}
		function ow(a, b, d) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0;
			e = i;
			i = i + 16 | 0;
			f = e;
			g = vx(240) | 0;
			do
				if (g) {
					HEAP32[f >> 2] = HEAP32[d >> 2];
					h = Xx(g, 240, b, f) | 0;
					if (h >>> 0 < 240) {
						j = yx(g, h + 1 | 0) | 0;
						HEAP32[a >> 2] = (j | 0) != 0 ? j : g;
						k = h;
						break
					}
					wx(g);
					if ((h | 0) >= 0 ? (j = h + 1 | 0, h = vx(j) | 0, HEAP32[a >> 2] = h, (h | 0) != 0) : 0)
						k = Xx(h, j, b, d) | 0;
					else
						k = -1
				} else
					k = -1;
			while (0);
			i = e;
			return k | 0
		}
		function pw(e, f, j) {
			e = e | 0;
			f = f | 0;
			j = j | 0;
			var k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0,
			O = 0,
			P = 0,
			Q = 0,
			R = 0,
			S = 0,
			T = 0,
			U = 0,
			V = 0,
			W = 0,
			X = 0,
			Y = 0,
			Z = 0,
			_ = 0,
			$ = 0,
			aa = 0,
			ba = 0,
			ca = 0,
			da = 0,
			ea = 0,
			fa = 0,
			ga = 0,
			ha = 0,
			ia = 0,
			ja = 0,
			ka = 0,
			la = 0,
			ma = 0,
			na = 0.0,
			oa = 0,
			pa = 0,
			qa = 0,
			ra = 0,
			sa = 0,
			ta = 0,
			ua = 0,
			va = 0,
			wa = 0,
			xa = 0,
			ya = 0,
			za = 0,
			Aa = 0,
			Ba = 0,
			Ca = 0,
			Da = 0,
			Ea = 0,
			Fa = 0,
			Ga = 0,
			Ha = 0,
			Ia = 0,
			Ja = 0,
			Ka = 0,
			La = 0,
			Ma = 0,
			Na = 0,
			Oa = 0,
			Pa = 0,
			Qa = 0,
			Ra = 0,
			Sa = 0,
			Ta = 0,
			Ua = 0,
			Va = 0,
			Wa = 0,
			Xa = 0,
			Ya = 0,
			Za = 0,
			_a = 0,
			$a = 0,
			ab = 0,
			bb = 0,
			cb = 0,
			db = 0;
			k = i;
			i = i + 304 | 0;
			l = k + 16 | 0;
			m = k + 8 | 0;
			n = k + 33 | 0;
			o = k;
			p = k + 32 | 0;
			q = HEAP8[f >> 0] | 0;
			if (!(q << 24 >> 24)) {
				r = 0;
				i = k;
				return r | 0
			}
			s = e + 4 | 0;
			t = e + 100 | 0;
			u = e + 108 | 0;
			v = e + 8 | 0;
			w = n + 10 | 0;
			x = n + 33 | 0;
			y = m + 4 | 0;
			z = n + 46 | 0;
			A = n + 94 | 0;
			B = q;
			q = 0;
			C = f;
			f = 0;
			D = 0;
			E = 0;
			a: while (1) {
				b: do
					if (!(Bx(B & 255) | 0)) {
						F = (HEAP8[C >> 0] | 0) == 37;
						c: do
							if (F) {
								G = C + 1 | 0;
								I = HEAP8[G >> 0] | 0;
								do
									if (I << 24 >> 24 == 42) {
										J = 0;
										K = C + 2 | 0
									} else if (I << 24 >> 24 == 37)
										break c;
									else {
										L = (I & 255) + -48 | 0;
										if (L >>> 0 < 10 ? (HEAP8[C + 2 >> 0] | 0) == 36 : 0) {
											HEAP32[l >> 2] = HEAP32[j >> 2];
											M = L;
											while (1) {
												L = HEAP32[l >> 2] | 0;
												N = HEAP32[L >> 2] | 0;
												HEAP32[l >> 2] = L + 4;
												if (M >>> 0 > 1)
													M = M + -1 | 0;
												else
													break
											}
											J = N;
											K = C + 3 | 0;
											break
										}
										M = HEAP32[j >> 2] | 0;
										L = HEAP32[M >> 2] | 0;
										HEAP32[j >> 2] = M + 4;
										J = L;
										K = G
									}
								while (0);
								G = HEAP8[K >> 0] | 0;
								I = G & 255;
								if ((I + -48 | 0) >>> 0 < 10) {
									L = I;
									I = K;
									M = 0;
									while (1) {
										O = (M * 10 | 0) + -48 + L | 0;
										P = I + 1 | 0;
										Q = HEAP8[P >> 0] | 0;
										L = Q & 255;
										if ((L + -48 | 0) >>> 0 >= 10) {
											R = Q;
											S = P;
											T = O;
											break
										} else {
											I = P;
											M = O
										}
									}
								} else {
									R = G;
									S = K;
									T = 0
								}
								if (R << 24 >> 24 == 109) {
									M = S + 1 | 0;
									U = HEAP8[M >> 0] | 0;
									V = (J | 0) != 0 & 1;
									W = M;
									X = 0;
									Y = 0
								} else {
									U = R;
									V = 0;
									W = S;
									X = D;
									Y = E
								}
								M = W + 1 | 0;
								switch (U & 255 | 0) {
								case 106: {
										Z = M;
										_ = 3;
										break
									}
								case 116:
								case 122: {
										Z = M;
										_ = 1;
										break
									}
								case 108: {
										I = (HEAP8[M >> 0] | 0) == 108;
										Z = I ? W + 2 | 0 : M;
										_ = I ? 3 : 1;
										break
									}
								case 76: {
										Z = M;
										_ = 2;
										break
									}
								case 110:
								case 112:
								case 67:
								case 83:
								case 91:
								case 99:
								case 115:
								case 88:
								case 71:
								case 70:
								case 69:
								case 65:
								case 103:
								case 102:
								case 101:
								case 97:
								case 120:
								case 117:
								case 111:
								case 105:
								case 100: {
										Z = W;
										_ = 0;
										break
									}
								case 104: {
										I = (HEAP8[M >> 0] | 0) == 104;
										Z = I ? W + 2 | 0 : M;
										_ = I ? -2 : -1;
										break
									}
								default: {
										$ = V;
										aa = X;
										ba = Y;
										ca = 162;
										break a
									}
								}
								I = HEAPU8[Z >> 0] | 0;
								M = (I & 47 | 0) == 3;
								L = M ? I | 32 : I;
								I = M ? 1 : _;
								if ((L | 0) == 110) {
									if (!J) {
										da = q;
										ea = Z;
										fa = f;
										ga = X;
										ha = Y;
										break b
									}
									switch (I | 0) {
									case 3: {
											M = J;
											HEAP32[M >> 2] = f;
											HEAP32[M + 4 >> 2] = ((f | 0) < 0) << 31 >> 31;
											da = q;
											ea = Z;
											fa = f;
											ga = X;
											ha = Y;
											break b;
											break
										}
									case 1: {
											HEAP32[J >> 2] = f;
											da = q;
											ea = Z;
											fa = f;
											ga = X;
											ha = Y;
											break b;
											break
										}
									case -1: {
											HEAP16[J >> 1] = f;
											da = q;
											ea = Z;
											fa = f;
											ga = X;
											ha = Y;
											break b;
											break
										}
									case 0: {
											HEAP32[J >> 2] = f;
											da = q;
											ea = Z;
											fa = f;
											ga = X;
											ha = Y;
											break b;
											break
										}
									case -2: {
											HEAP8[J >> 0] = f;
											da = q;
											ea = Z;
											fa = f;
											ga = X;
											ha = Y;
											break b;
											break
										}
									default: {
											da = q;
											ea = Z;
											fa = f;
											ga = X;
											ha = Y;
											break b
										}
									}
								} else if ((L | 0) == 99) {
									ia = f;
									ja = (T | 0) < 1 ? 1 : T
								} else if ((L | 0) == 91) {
									ia = f;
									ja = T
								} else {
									Fx(e, 0);
									do {
										M = HEAP32[s >> 2] | 0;
										if (M >>> 0 < (HEAP32[t >> 2] | 0) >>> 0) {
											HEAP32[s >> 2] = M + 1;
											ka = HEAPU8[M >> 0] | 0
										} else
											ka = Gx(e) | 0
									} while ((Bx(ka) | 0) != 0);
									G = HEAP32[s >> 2] | 0;
									if (!(HEAP32[t >> 2] | 0))
										la = G;
									else {
										M = G + -1 | 0;
										HEAP32[s >> 2] = M;
										la = M
									}
									ia = (HEAP32[u >> 2] | 0) + f + la - (HEAP32[v >> 2] | 0) | 0;
									ja = T
								}
								Fx(e, ja);
								M = HEAP32[s >> 2] | 0;
								G = HEAP32[t >> 2] | 0;
								if (M >>> 0 < G >>> 0) {
									HEAP32[s >> 2] = M + 1;
									ma = G
								} else {
									if ((Gx(e) | 0) < 0) {
										$ = V;
										aa = X;
										ba = Y;
										ca = 162;
										break a
									}
									ma = HEAP32[t >> 2] | 0
								}
								if (ma)
									HEAP32[s >> 2] = (HEAP32[s >> 2] | 0) + -1;
								d: do
									switch (L | 0) {
									case 71:
									case 103:
									case 70:
									case 102:
									case 69:
									case 101:
									case 65:
									case 97: {
											na = +Ex(e, I, 0);
											if ((HEAP32[u >> 2] | 0) == ((HEAP32[v >> 2] | 0) - (HEAP32[s >> 2] | 0) | 0)) {
												oa = V;
												pa = q;
												qa = X;
												ra = Y;
												break a
											}
											if (J)
												if (!I) {
													HEAPF32[J >> 2] = na;
													sa = Z;
													ta = X;
													ua = Y;
													break d
												} else if ((I | 0) == 1) {
													HEAPF64[J >> 3] = na;
													sa = Z;
													ta = X;
													ua = Y;
													break d
												} else if ((I | 0) == 2) {
													HEAPF64[J >> 3] = na;
													sa = Z;
													ta = X;
													ua = Y;
													break d
												} else {
													sa = Z;
													ta = X;
													ua = Y;
													break d
												}
											else {
												sa = Z;
												ta = X;
												ua = Y
											}
											break
										}
									case 120:
									case 88:
									case 112: {
											va = 16;
											ca = 144;
											break
										}
									case 111: {
											va = 8;
											ca = 144;
											break
										}
									case 117:
									case 100: {
											va = 10;
											ca = 144;
											break
										}
									case 105: {
											va = 0;
											ca = 144;
											break
										}
									case 91:
									case 99:
									case 115: {
											G = (L | 0) == 99;
											e: do
												if ((L & 239 | 0) == 99) {
													sy(n | 0, -1, 257) | 0;
													HEAP8[n >> 0] = 0;
													if ((L | 0) == 115) {
														HEAP8[x >> 0] = 0;
														HEAP8[w + 0 >> 0] = 0;
														HEAP8[w + 1 >> 0] = 0;
														HEAP8[w + 2 >> 0] = 0;
														HEAP8[w + 3 >> 0] = 0;
														HEAP8[w + 4 >> 0] = 0;
														wa = Z
													} else
														wa = Z
												} else {
													M = Z + 1 | 0;
													O = (HEAP8[M >> 0] | 0) == 94;
													P = O & 1;
													Q = O ? Z + 2 | 0 : M;
													sy(n | 0, O & 1 | 0, 257) | 0;
													HEAP8[n >> 0] = 0;
													O = HEAP8[Q >> 0] | 0;
													if (O << 24 >> 24 == 45) {
														M = (P ^ 1) & 255;
														HEAP8[z >> 0] = M;
														xa = M;
														ya = Q + 1 | 0
													} else if (O << 24 >> 24 == 93) {
														O = (P ^ 1) & 255;
														HEAP8[A >> 0] = O;
														xa = O;
														ya = Q + 1 | 0
													} else {
														xa = (P ^ 1) & 255;
														ya = Q
													}
													Q = ya;
													while (1) {
														P = HEAP8[Q >> 0] | 0;
														if (!(P << 24 >> 24)) {
															$ = V;
															aa = X;
															ba = Y;
															ca = 162;
															break a
														} else if (P << 24 >> 24 == 45) {
															O = Q + 1 | 0;
															M = HEAP8[O >> 0] | 0;
															if (!(M << 24 >> 24 == 93 | M << 24 >> 24 == 0)) {
																za = HEAP8[Q + -1 >> 0] | 0;
																if ((za & 255) < (M & 255)) {
																	Aa = za & 255;
																	do {
																		Aa = Aa + 1 | 0;
																		HEAP8[n + Aa >> 0] = xa;
																		za = HEAP8[O >> 0] | 0
																	} while ((Aa | 0) < (za & 255 | 0));
																	Ba = za;
																	Ca = O
																} else {
																	Ba = M;
																	Ca = O
																}
															} else {
																Ba = 45;
																Ca = Q
															}
														} else if (P << 24 >> 24 == 93) {
															wa = Q;
															break e
														} else {
															Ba = P;
															Ca = Q
														}
														HEAP8[n + ((Ba & 255) + 1) >> 0] = xa;
														Q = Ca + 1 | 0
													}
												}
											while (0);
											Q = G ? ja + 1 | 0 : 31;
											Aa = (I | 0) == 1;
											za = (V | 0) != 0;
											f: do
												if (Aa) {
													if (za) {
														Da = vx(Q << 2) | 0;
														if (!Da) {
															$ = V;
															aa = 0;
															ba = Da;
															ca = 162;
															break a
														} else
															Ea = Da
													} else
														Ea = J;
													HEAP32[m >> 2] = 0;
													HEAP32[y >> 2] = 0;
													Da = 0;
													Fa = Q;
													Ga = Ea;
													g: while (1) {
														if (!Ga)
															while (1) {
																Ha = HEAP32[s >> 2] | 0;
																if (Ha >>> 0 < (HEAP32[t >> 2] | 0) >>> 0) {
																	HEAP32[s >> 2] = Ha + 1;
																	Ia = HEAPU8[Ha >> 0] | 0
																} else
																	Ia = Gx(e) | 0;
																if (!(HEAP8[n + (Ia + 1) >> 0] | 0)) {
																	Ja = Da;
																	Ka = 0;
																	break g
																}
																HEAP8[p >> 0] = Ia;
																Ha = fw(o, p, 1, m) | 0;
																if ((Ha | 0) == -1) {
																	$ = V;
																	aa = 0;
																	ba = 0;
																	ca = 162;
																	break a
																} else if ((Ha | 0) == -2)
																	continue;
																if (za & (Da | 0) == (Fa | 0)) {
																	La = Da;
																	break
																}
															}
														else {
															if (za)
																Ma = Da;
															else {
																Na = Da;
																ca = 98;
																break
															}
															while (1) {
																while (1) {
																	P = HEAP32[s >> 2] | 0;
																	if (P >>> 0 < (HEAP32[t >> 2] | 0) >>> 0) {
																		HEAP32[s >> 2] = P + 1;
																		Oa = HEAPU8[P >> 0] | 0
																	} else
																		Oa = Gx(e) | 0;
																	if (!(HEAP8[n + (Oa + 1) >> 0] | 0)) {
																		Ja = Ma;
																		Ka = Ga;
																		break g
																	}
																	HEAP8[p >> 0] = Oa;
																	P = fw(o, p, 1, m) | 0;
																	if ((P | 0) == -1) {
																		$ = V;
																		aa = 0;
																		ba = Ga;
																		ca = 162;
																		break a
																	} else if ((P | 0) != -2)
																		break
																}
																HEAP32[Ga + (Ma << 2) >> 2] = HEAP32[o >> 2];
																Ma = Ma + 1 | 0;
																if ((Ma | 0) == (Fa | 0)) {
																	La = Fa;
																	break
																}
															}
														}
														P = Fa << 1 | 1;
														O = yx(Ga, P << 2) | 0;
														if (!O) {
															$ = V;
															aa = 0;
															ba = Ga;
															ca = 162;
															break a
														}
														Da = La;
														Fa = P;
														Ga = O
													}
													h: do
														if ((ca | 0) == 98)
															while (1) {
																ca = 0;
																while (1) {
																	Fa = HEAP32[s >> 2] | 0;
																	if (Fa >>> 0 < (HEAP32[t >> 2] | 0) >>> 0) {
																		HEAP32[s >> 2] = Fa + 1;
																		Pa = HEAPU8[Fa >> 0] | 0
																	} else
																		Pa = Gx(e) | 0;
																	if (!(HEAP8[n + (Pa + 1) >> 0] | 0)) {
																		Ja = Na;
																		Ka = Ga;
																		break h
																	}
																	HEAP8[p >> 0] = Pa;
																	Fa = fw(o, p, 1, m) | 0;
																	if ((Fa | 0) == -1) {
																		$ = 0;
																		aa = 0;
																		ba = Ga;
																		ca = 162;
																		break a
																	} else if ((Fa | 0) != -2)
																		break
																}
																HEAP32[Ga + (Na << 2) >> 2] = HEAP32[o >> 2];
																Na = Na + 1 | 0;
																ca = 98
															}
													while (0);
													if (!(gw(m) | 0)) {
														$ = V;
														aa = 0;
														ba = Ka;
														ca = 162;
														break a
													} else {
														Qa = Ja;
														Ra = 0;
														Sa = Ka
													}
												} else {
													if (za) {
														Ga = vx(Q) | 0;
														if (!Ga) {
															$ = V;
															aa = 0;
															ba = 0;
															ca = 162;
															break a
														} else {
															Ta = 0;
															Ua = Q;
															Va = Ga
														}
														while (1) {
															Ga = Ta;
															do {
																Fa = HEAP32[s >> 2] | 0;
																if (Fa >>> 0 < (HEAP32[t >> 2] | 0) >>> 0) {
																	HEAP32[s >> 2] = Fa + 1;
																	Wa = HEAPU8[Fa >> 0] | 0
																} else
																	Wa = Gx(e) | 0;
																if (!(HEAP8[n + (Wa + 1) >> 0] | 0)) {
																	Qa = Ga;
																	Ra = Va;
																	Sa = 0;
																	break f
																}
																HEAP8[Va + Ga >> 0] = Wa;
																Ga = Ga + 1 | 0
															} while ((Ga | 0) != (Ua | 0));
															Ga = Ua << 1 | 1;
															Fa = yx(Va, Ga) | 0;
															if (!Fa) {
																$ = V;
																aa = Va;
																ba = 0;
																ca = 162;
																break a
															} else {
																Da = Ua;
																Ua = Ga;
																Va = Fa;
																Ta = Da
															}
														}
													}
													if (!J) {
														Da = ma;
														while (1) {
															Fa = HEAP32[s >> 2] | 0;
															if (Fa >>> 0 < Da >>> 0) {
																HEAP32[s >> 2] = Fa + 1;
																Xa = HEAPU8[Fa >> 0] | 0
															} else
																Xa = Gx(e) | 0;
															if (!(HEAP8[n + (Xa + 1) >> 0] | 0)) {
																Qa = 0;
																Ra = 0;
																Sa = 0;
																break f
															}
															Da = HEAP32[t >> 2] | 0
														}
													} else {
														Da = ma;
														Fa = 0;
														while (1) {
															Ga = HEAP32[s >> 2] | 0;
															if (Ga >>> 0 < Da >>> 0) {
																HEAP32[s >> 2] = Ga + 1;
																Ya = HEAPU8[Ga >> 0] | 0
															} else
																Ya = Gx(e) | 0;
															if (!(HEAP8[n + (Ya + 1) >> 0] | 0)) {
																Qa = Fa;
																Ra = J;
																Sa = 0;
																break f
															}
															HEAP8[J + Fa >> 0] = Ya;
															Da = HEAP32[t >> 2] | 0;
															Fa = Fa + 1 | 0
														}
													}
												}
											while (0);
											Q = HEAP32[s >> 2] | 0;
											if (!(HEAP32[t >> 2] | 0))
												Za = Q;
											else {
												Fa = Q + -1 | 0;
												HEAP32[s >> 2] = Fa;
												Za = Fa
											}
											Fa = Za - (HEAP32[v >> 2] | 0) + (HEAP32[u >> 2] | 0) | 0;
											if (!Fa) {
												oa = V;
												pa = q;
												qa = Ra;
												ra = Sa;
												break a
											}
											if (!((Fa | 0) == (ja | 0) | G ^ 1)) {
												oa = V;
												pa = q;
												qa = Ra;
												ra = Sa;
												break a
											}
											do
												if (za)
													if (Aa) {
														HEAP32[J >> 2] = Sa;
														break
													} else {
														HEAP32[J >> 2] = Ra;
														break
													}
											while (0);
											if (!G) {
												if (Sa)
													HEAP32[Sa + (Qa << 2) >> 2] = 0;
												if (!Ra) {
													sa = wa;
													ta = 0;
													ua = Sa
												} else {
													HEAP8[Ra + Qa >> 0] = 0;
													sa = wa;
													ta = Ra;
													ua = Sa
												}
											} else {
												sa = wa;
												ta = Ra;
												ua = Sa
											}
											break
										}
									default: {
											sa = Z;
											ta = X;
											ua = Y
										}
									}
								while (0);
								i: do
									if ((ca | 0) == 144) {
										ca = 0;
										Aa = Dx(e, va, 0, -1, -1) | 0;
										if ((HEAP32[u >> 2] | 0) == ((HEAP32[v >> 2] | 0) - (HEAP32[s >> 2] | 0) | 0)) {
											oa = V;
											pa = q;
											qa = X;
											ra = Y;
											break a
										}
										if ((L | 0) == 112 & (J | 0) != 0) {
											HEAP32[J >> 2] = Aa;
											sa = Z;
											ta = X;
											ua = Y;
											break
										}
										if (!J) {
											sa = Z;
											ta = X;
											ua = Y
										} else
											switch (I | 0) {
											case -2: {
													HEAP8[J >> 0] = Aa;
													sa = Z;
													ta = X;
													ua = Y;
													break i;
													break
												}
											case -1: {
													HEAP16[J >> 1] = Aa;
													sa = Z;
													ta = X;
													ua = Y;
													break i;
													break
												}
											case 0: {
													HEAP32[J >> 2] = Aa;
													sa = Z;
													ta = X;
													ua = Y;
													break i;
													break
												}
											case 1: {
													HEAP32[J >> 2] = Aa;
													sa = Z;
													ta = X;
													ua = Y;
													break i;
													break
												}
											case 3: {
													za = J;
													HEAP32[za >> 2] = Aa;
													HEAP32[za + 4 >> 2] = H;
													sa = Z;
													ta = X;
													ua = Y;
													break i;
													break
												}
											default: {
													sa = Z;
													ta = X;
													ua = Y;
													break i
												}
											}
									}
								while (0);
								da = ((J | 0) != 0 & 1) + q | 0;
								ea = sa;
								fa = (HEAP32[u >> 2] | 0) + ia + (HEAP32[s >> 2] | 0) - (HEAP32[v >> 2] | 0) | 0;
								ga = ta;
								ha = ua;
								break b
							}
						while (0);
						I = C + (F & 1) | 0;
						Fx(e, 0);
						L = HEAP32[s >> 2] | 0;
						if (L >>> 0 < (HEAP32[t >> 2] | 0) >>> 0) {
							HEAP32[s >> 2] = L + 1;
							_a = HEAPU8[L >> 0] | 0
						} else
							_a = Gx(e) | 0;
						if ((_a | 0) != (HEAPU8[I >> 0] | 0)) {
							ca = 19;
							break a
						}
						da = q;
						ea = I;
						fa = f + 1 | 0;
						ga = D;
						ha = E
					} else {
						I = C;
						while (1) {
							L = I + 1 | 0;
							if (!(Bx(HEAPU8[L >> 0] | 0) | 0))
								break;
							else
								I = L
						}
						Fx(e, 0);
						do {
							F = HEAP32[s >> 2] | 0;
							if (F >>> 0 < (HEAP32[t >> 2] | 0) >>> 0) {
								HEAP32[s >> 2] = F + 1;
								$a = HEAPU8[F >> 0] | 0
							} else
								$a = Gx(e) | 0
						} while ((Bx($a) | 0) != 0);
						F = HEAP32[s >> 2] | 0;
						if (!(HEAP32[t >> 2] | 0))
							ab = F;
						else {
							L = F + -1 | 0;
							HEAP32[s >> 2] = L;
							ab = L
						}
						da = q;
						ea = I;
						fa = (HEAP32[u >> 2] | 0) + f + ab - (HEAP32[v >> 2] | 0) | 0;
						ga = D;
						ha = E
					}
				while (0);
				C = ea + 1 | 0;
				B = HEAP8[C >> 0] | 0;
				if (!(B << 24 >> 24)) {
					r = da;
					ca = 166;
					break
				} else {
					q = da;
					f = fa;
					D = ga;
					E = ha
				}
			}
			if ((ca | 0) == 19) {
				if (HEAP32[t >> 2] | 0)
					HEAP32[s >> 2] = (HEAP32[s >> 2] | 0) + -1;
				if ((_a | 0) > -1 | (q | 0) != 0) {
					r = q;
					i = k;
					return r | 0
				} else {
					bb = 0;
					cb = D;
					db = E;
					ca = 163
				}
			} else if ((ca | 0) == 162)
				if (!q) {
					bb = $;
					cb = aa;
					db = ba;
					ca = 163
				} else {
					oa = $;
					pa = q;
					qa = aa;
					ra = ba
				}
			else if ((ca | 0) == 166) {
				i = k;
				return r | 0
			}
			if ((ca | 0) == 163) {
				oa = bb;
				pa = -1;
				qa = cb;
				ra = db
			}
			if (!oa) {
				r = pa;
				i = k;
				return r | 0
			}
			wx(qa);
			wx(ra);
			r = pa;
			i = k;
			return r | 0
		}
		function qw(a, b, d) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0;
			e = i;
			i = i + 112 | 0;
			f = e;
			g = f + 0 | 0;
			h = g + 112 | 0;
			do {
				HEAP32[g >> 2] = 0;
				g = g + 4 | 0
			} while ((g | 0) < (h | 0));
			HEAP32[f + 32 >> 2] = 29;
			HEAP32[f + 44 >> 2] = a;
			HEAP32[f + 76 >> 2] = -1;
			HEAP32[f + 84 >> 2] = a;
			a = pw(f, b, d) | 0;
			i = e;
			return a | 0
		}
		function rw(b, c) {
			b = b | 0;
			c = c | 0;
			var d = 0,
			e = 0;
			d = i;
			e = sw(b, c) | 0;
			i = d;
			return ((HEAP8[e >> 0] | 0) == (c & 255) << 24 >> 24 ? e : 0) | 0
		}
		function sw(b, d) {
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0;
			e = i;
			f = d & 255;
			if (!f) {
				g = b + (py(b | 0) | 0) | 0;
				i = e;
				return g | 0
			}
			a: do
				if (!(b & 3))
					h = b;
				else {
					j = d & 255;
					k = b;
					while (1) {
						l = HEAP8[k >> 0] | 0;
						m = k + 1 | 0;
						if (l << 24 >> 24 == 0 ? 1 : l << 24 >> 24 == j << 24 >> 24) {
							g = k;
							break
						}
						if (!(m & 3)) {
							h = m;
							break a
						} else
							k = m
					}
					i = e;
					return g | 0
				}
			while (0);
			b = da(f, 16843009) | 0;
			f = HEAP32[h >> 2] | 0;
			b: do
				if (!((f & -2139062144 ^ -2139062144) & f + -16843009)) {
					k = f;
					j = h;
					while (1) {
						m = k ^ b;
						l = j + 4 | 0;
						if ((m & -2139062144 ^ -2139062144) & m + -16843009) {
							n = j;
							break b
						}
						k = HEAP32[l >> 2] | 0;
						if ((k & -2139062144 ^ -2139062144) & k + -16843009) {
							n = l;
							break
						} else
							j = l
					}
				} else
					n = h;
			while (0);
			h = d & 255;
			d = n;
			while (1) {
				n = HEAP8[d >> 0] | 0;
				if (n << 24 >> 24 == 0 ? 1 : n << 24 >> 24 == h << 24 >> 24) {
					g = d;
					break
				} else
					d = d + 1 | 0
			}
			i = e;
			return g | 0
		}
		function tw(a) {
			a = a | 0;
			var b = 0,
			d = 0;
			b = i;
			d = a;
			while (1)
				if (!(HEAP32[d >> 2] | 0))
					break;
				else
					d = d + 4 | 0;
			i = b;
			return d - a >> 2 | 0
		}
		function uw(a, b, d) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0;
			e = i;
			if (!d) {
				i = e;
				return a | 0
			} else {
				f = d;
				g = b;
				h = a
			}
			while (1) {
				f = f + -1 | 0;
				HEAP32[h >> 2] = HEAP32[g >> 2];
				if (!f)
					break;
				else {
					g = g + 4 | 0;
					h = h + 4 | 0
				}
			}
			i = e;
			return a | 0
		}
		function vw(a, b, d) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0;
			e = i;
			f = (d | 0) == 0;
			if (a - b >> 2 >>> 0 < d >>> 0) {
				if (!f) {
					g = d;
					do {
						g = g + -1 | 0;
						HEAP32[a + (g << 2) >> 2] = HEAP32[b + (g << 2) >> 2]
					} while ((g | 0) != 0)
				}
			} else if (!f) {
				f = b;
				b = a;
				g = d;
				while (1) {
					g = g + -1 | 0;
					HEAP32[b >> 2] = HEAP32[f >> 2];
					if (!g)
						break;
					else {
						f = f + 4 | 0;
						b = b + 4 | 0
					}
				}
			}
			i = e;
			return a | 0
		}
		function ww(a, b, d) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0;
			e = i;
			if (d) {
				f = d;
				d = a;
				while (1) {
					f = f + -1 | 0;
					HEAP32[d >> 2] = b;
					if (!f)
						break;
					else
						d = d + 4 | 0
				}
			}
			i = e;
			return a | 0
		}
		function xw(a, b, c) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			var d = 0,
			e = 0;
			d = i;
			e = mw(a, b, c) | 0;
			i = d;
			return e | 0
		}
		function yw(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0,
			e = 0;
			d = i;
			i = i + 16 | 0;
			e = d;
			HEAP32[e >> 2] = b;
			b = HEAP32[p >> 2] | 0;
			tb(b | 0, a | 0, e | 0) | 0;
			ec(10, b | 0) | 0;
			Gb()
		}
		function zw() {
			var a = 0,
			b = 0;
			a = i;
			i = i + 16 | 0;
			if (!(hb(138848, 3) | 0)) {
				b = Bb(HEAP32[34710] | 0) | 0;
				i = a;
				return b | 0
			} else
				yw(138856, a);
			return 0
		}
		function Aw(a) {
			a = a | 0;
			HEAP32[a >> 2] = 139032;
			return
		}
		function Bw(a) {
			a = a | 0;
			var b = 0;
			b = i;
			kl(a);
			i = b;
			return
		}
		function Cw(a) {
			a = a | 0;
			return
		}
		function Dw(a) {
			a = a | 0;
			return 139048
		}
		function Ew(a) {
			a = a | 0;
			var b = 0;
			b = i;
			i = i + 16 | 0;
			xc[a & 3]();
			yw(139096, b)
		}
		function Fw() {
			var a = 0,
			b = 0;
			a = zw() | 0;
			if (((a | 0) != 0 ? (b = HEAP32[a >> 2] | 0, (b | 0) != 0) : 0) ? (a = b + 48 | 0, (HEAP32[a >> 2] & -256 | 0) == 1126902528 ? (HEAP32[a + 4 >> 2] | 0) == 1129074247 : 0) : 0)
				Ew(HEAP32[b + 12 >> 2] | 0);
			b = HEAP32[34664] | 0;
			HEAP32[34664] = b + 0;
			Ew(b)
		}
		function Gw(a) {
			a = a | 0;
			return
		}
		function Hw(a) {
			a = a | 0;
			return 139192
		}
		function Iw(a) {
			a = a | 0;
			var b = 0;
			b = i;
			Jw(a);
			kl(a);
			i = b;
			return
		}
		function Jw(a) {
			a = a | 0;
			var b = 0;
			b = i;
			HEAP32[a >> 2] = 139240;
			tx(a + 4 | 0);
			i = b;
			return
		}
		function Kw(a) {
			a = a | 0;
			return HEAP32[a + 4 >> 2] | 0
		}
		function Lw(a) {
			a = a | 0;
			var b = 0;
			b = i;
			Mw(a);
			kl(a);
			i = b;
			return
		}
		function Mw(a) {
			a = a | 0;
			var b = 0;
			b = i;
			HEAP32[a >> 2] = 139264;
			tx(a + 4 | 0);
			i = b;
			return
		}
		function Nw(a) {
			a = a | 0;
			return HEAP32[a + 4 >> 2] | 0
		}
		function Ow(a) {
			a = a | 0;
			var b = 0;
			b = i;
			Jw(a);
			kl(a);
			i = b;
			return
		}
		function Pw(a) {
			a = a | 0;
			return
		}
		function Qw(a) {
			a = a | 0;
			HEAP32[a >> 2] = 139424;
			return
		}
		function Rw(a) {
			a = a | 0;
			var b = 0;
			b = i;
			kl(a);
			i = b;
			return
		}
		function Sw(a) {
			a = a | 0;
			return
		}
		function Tw(a) {
			a = a | 0;
			return 139440
		}
		function Uw(a) {
			a = a | 0;
			return
		}
		function Vw(a) {
			a = a | 0;
			return
		}
		function Ww(a) {
			a = a | 0;
			return
		}
		function Xw(a) {
			a = a | 0;
			var b = 0;
			b = i;
			kl(a);
			i = b;
			return
		}
		function Yw(a) {
			a = a | 0;
			var b = 0;
			b = i;
			kl(a);
			i = b;
			return
		}
		function Zw(a) {
			a = a | 0;
			var b = 0;
			b = i;
			kl(a);
			i = b;
			return
		}
		function _w(a, b, d) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0;
			e = i;
			i = i + 64 | 0;
			f = e;
			if ((a | 0) == (b | 0)) {
				g = 1;
				i = e;
				return g | 0
			}
			if (!b) {
				g = 0;
				i = e;
				return g | 0
			}
			h = ex(b, 139552, 139608, 0) | 0;
			if (!h) {
				g = 0;
				i = e;
				return g | 0
			}
			b = f + 0 | 0;
			j = b + 56 | 0;
			do {
				HEAP32[b >> 2] = 0;
				b = b + 4 | 0
			} while ((b | 0) < (j | 0));
			HEAP32[f >> 2] = h;
			HEAP32[f + 8 >> 2] = a;
			HEAP32[f + 12 >> 2] = -1;
			HEAP32[f + 48 >> 2] = 1;
			Ec[c[(HEAP32[h >> 2] | 0) + 28 >> 2] & 15](h, f, HEAP32[d >> 2] | 0, 1);
			if ((HEAP32[f + 24 >> 2] | 0) != 1) {
				g = 0;
				i = e;
				return g | 0
			}
			HEAP32[d >> 2] = HEAP32[f + 16 >> 2];
			g = 1;
			i = e;
			return g | 0
		}
		function $w(b, d, e, f) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0;
			b = i;
			g = d + 16 | 0;
			h = HEAP32[g >> 2] | 0;
			if (!h) {
				HEAP32[g >> 2] = e;
				HEAP32[d + 24 >> 2] = f;
				HEAP32[d + 36 >> 2] = 1;
				i = b;
				return
			}
			if ((h | 0) != (e | 0)) {
				e = d + 36 | 0;
				HEAP32[e >> 2] = (HEAP32[e >> 2] | 0) + 1;
				HEAP32[d + 24 >> 2] = 2;
				HEAP8[d + 54 >> 0] = 1;
				i = b;
				return
			}
			e = d + 24 | 0;
			if ((HEAP32[e >> 2] | 0) != 2) {
				i = b;
				return
			}
			HEAP32[e >> 2] = f;
			i = b;
			return
		}
		function ax(a, b, d, e) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0;
			f = i;
			if ((HEAP32[b + 8 >> 2] | 0) != (a | 0)) {
				i = f;
				return
			}
			$w(0, b, d, e);
			i = f;
			return
		}
		function bx(a, b, d, e) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0;
			f = i;
			if ((a | 0) == (HEAP32[b + 8 >> 2] | 0)) {
				$w(0, b, d, e);
				i = f;
				return
			} else {
				g = HEAP32[a + 8 >> 2] | 0;
				Ec[c[(HEAP32[g >> 2] | 0) + 28 >> 2] & 15](g, b, d, e);
				i = f;
				return
			}
		}
		function cx(a, b, d, e) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0;
			f = i;
			g = HEAP32[a + 4 >> 2] | 0;
			h = g >> 8;
			if (!(g & 1))
				j = h;
			else
				j = HEAP32[(HEAP32[d >> 2] | 0) + h >> 2] | 0;
			h = HEAP32[a >> 2] | 0;
			Ec[c[(HEAP32[h >> 2] | 0) + 28 >> 2] & 15](h, b, d + j | 0, (g & 2 | 0) != 0 ? e : 2);
			i = f;
			return
		}
		function dx(b, d, e, f) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0;
			g = i;
			if ((b | 0) == (HEAP32[d + 8 >> 2] | 0)) {
				$w(0, d, e, f);
				i = g;
				return
			}
			h = HEAP32[b + 12 >> 2] | 0;
			j = b + (h << 3) + 16 | 0;
			cx(b + 16 | 0, d, e, f);
			if ((h | 0) <= 1) {
				i = g;
				return
			}
			h = d + 54 | 0;
			k = b + 24 | 0;
			while (1) {
				cx(k, d, e, f);
				if (HEAP8[h >> 0] | 0) {
					l = 7;
					break
				}
				k = k + 8 | 0;
				if (k >>> 0 >= j >>> 0) {
					l = 7;
					break
				}
			}
			if ((l | 0) == 7) {
				i = g;
				return
			}
		}
		function ex(d, e, f, g) {
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0;
			h = i;
			i = i + 64 | 0;
			j = h;
			k = HEAP32[d >> 2] | 0;
			l = d + (HEAP32[k + -8 >> 2] | 0) | 0;
			m = HEAP32[k + -4 >> 2] | 0;
			HEAP32[j >> 2] = f;
			HEAP32[j + 4 >> 2] = d;
			HEAP32[j + 8 >> 2] = e;
			HEAP32[j + 12 >> 2] = g;
			g = j + 16 | 0;
			e = j + 20 | 0;
			d = j + 24 | 0;
			k = j + 28 | 0;
			n = j + 32 | 0;
			o = j + 40 | 0;
			p = (m | 0) == (f | 0);
			f = g + 0 | 0;
			q = f + 36 | 0;
			do {
				HEAP32[f >> 2] = 0;
				f = f + 4 | 0
			} while ((f | 0) < (q | 0));
			HEAP16[g + 36 >> 1] = 0;
			HEAP8[g + 38 >> 0] = 0;
			if (p) {
				HEAP32[j + 48 >> 2] = 1;
				Bc[c[(HEAP32[m >> 2] | 0) + 20 >> 2] & 31](m, j, l, l, 1, 0);
				r = (HEAP32[d >> 2] | 0) == 1 ? l : 0;
				i = h;
				return r | 0
			}
			oc[c[(HEAP32[m >> 2] | 0) + 24 >> 2] & 3](m, j, l, 1, 0);
			l = HEAP32[j + 36 >> 2] | 0;
			if ((l | 0) == 1) {
				if ((HEAP32[d >> 2] | 0) != 1 ? !((HEAP32[o >> 2] | 0) == 0 & (HEAP32[k >> 2] | 0) == 1 & (HEAP32[n >> 2] | 0) == 1) : 0) {
					r = 0;
					i = h;
					return r | 0
				}
				r = HEAP32[g >> 2] | 0;
				i = h;
				return r | 0
			} else if (!l) {
				r = (HEAP32[o >> 2] | 0) == 1 & (HEAP32[k >> 2] | 0) == 1 & (HEAP32[n >> 2] | 0) == 1 ? HEAP32[e >> 2] | 0 : 0;
				i = h;
				return r | 0
			} else {
				r = 0;
				i = h;
				return r | 0
			}
			return 0
		}
		function fx(b, d, e, f, g) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0;
			b = i;
			HEAP8[d + 53 >> 0] = 1;
			if ((HEAP32[d + 4 >> 2] | 0) != (f | 0)) {
				i = b;
				return
			}
			HEAP8[d + 52 >> 0] = 1;
			f = d + 16 | 0;
			h = HEAP32[f >> 2] | 0;
			if (!h) {
				HEAP32[f >> 2] = e;
				HEAP32[d + 24 >> 2] = g;
				HEAP32[d + 36 >> 2] = 1;
				if (!((g | 0) == 1 ? (HEAP32[d + 48 >> 2] | 0) == 1 : 0)) {
					i = b;
					return
				}
				HEAP8[d + 54 >> 0] = 1;
				i = b;
				return
			}
			if ((h | 0) != (e | 0)) {
				e = d + 36 | 0;
				HEAP32[e >> 2] = (HEAP32[e >> 2] | 0) + 1;
				HEAP8[d + 54 >> 0] = 1;
				i = b;
				return
			}
			e = d + 24 | 0;
			h = HEAP32[e >> 2] | 0;
			if ((h | 0) == 2) {
				HEAP32[e >> 2] = g;
				j = g
			} else
				j = h;
			if (!((j | 0) == 1 ? (HEAP32[d + 48 >> 2] | 0) == 1 : 0)) {
				i = b;
				return
			}
			HEAP8[d + 54 >> 0] = 1;
			i = b;
			return
		}
		function gx(b, d, e, f, g) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0;
			h = i;
			if ((b | 0) == (HEAP32[d + 8 >> 2] | 0)) {
				if ((HEAP32[d + 4 >> 2] | 0) != (e | 0)) {
					i = h;
					return
				}
				j = d + 28 | 0;
				if ((HEAP32[j >> 2] | 0) == 1) {
					i = h;
					return
				}
				HEAP32[j >> 2] = f;
				i = h;
				return
			}
			if ((b | 0) != (HEAP32[d >> 2] | 0)) {
				j = HEAP32[b + 12 >> 2] | 0;
				k = b + (j << 3) + 16 | 0;
				ix(b + 16 | 0, d, e, f, g);
				l = b + 24 | 0;
				if ((j | 0) <= 1) {
					i = h;
					return
				}
				j = HEAP32[b + 8 >> 2] | 0;
				if ((j & 2 | 0) == 0 ? (m = d + 36 | 0, (HEAP32[m >> 2] | 0) != 1) : 0) {
					if (!(j & 1)) {
						j = d + 54 | 0;
						n = l;
						while (1) {
							if (HEAP8[j >> 0] | 0) {
								o = 43;
								break
							}
							if ((HEAP32[m >> 2] | 0) == 1) {
								o = 43;
								break
							}
							ix(n, d, e, f, g);
							n = n + 8 | 0;
							if (n >>> 0 >= k >>> 0) {
								o = 43;
								break
							}
						}
						if ((o | 0) == 43) {
							i = h;
							return
						}
					}
					n = d + 24 | 0;
					j = d + 54 | 0;
					p = l;
					while (1) {
						if (HEAP8[j >> 0] | 0) {
							o = 43;
							break
						}
						if ((HEAP32[m >> 2] | 0) == 1 ? (HEAP32[n >> 2] | 0) == 1 : 0) {
							o = 43;
							break
						}
						ix(p, d, e, f, g);
						p = p + 8 | 0;
						if (p >>> 0 >= k >>> 0) {
							o = 43;
							break
						}
					}
					if ((o | 0) == 43) {
						i = h;
						return
					}
				}
				p = d + 54 | 0;
				n = l;
				while (1) {
					if (HEAP8[p >> 0] | 0) {
						o = 43;
						break
					}
					ix(n, d, e, f, g);
					n = n + 8 | 0;
					if (n >>> 0 >= k >>> 0) {
						o = 43;
						break
					}
				}
				if ((o | 0) == 43) {
					i = h;
					return
				}
			}
			if ((HEAP32[d + 16 >> 2] | 0) != (e | 0) ? (k = d + 20 | 0, (HEAP32[k >> 2] | 0) != (e | 0)) : 0) {
				HEAP32[d + 32 >> 2] = f;
				n = d + 44 | 0;
				if ((HEAP32[n >> 2] | 0) == 4) {
					i = h;
					return
				}
				p = HEAP32[b + 12 >> 2] | 0;
				l = b + (p << 3) + 16 | 0;
				a: do
					if ((p | 0) > 0) {
						m = d + 52 | 0;
						j = d + 53 | 0;
						q = d + 54 | 0;
						r = b + 8 | 0;
						s = d + 24 | 0;
						t = 0;
						u = 0;
						v = b + 16 | 0;
						b: while (1) {
							HEAP8[m >> 0] = 0;
							HEAP8[j >> 0] = 0;
							hx(v, d, e, e, 1, g);
							if (HEAP8[q >> 0] | 0) {
								w = t;
								x = u;
								break
							}
							do
								if (HEAP8[j >> 0] | 0) {
									if (!(HEAP8[m >> 0] | 0))
										if (!(HEAP32[r >> 2] & 1)) {
											w = t;
											x = 1;
											break b
										} else {
											y = t;
											z = 1;
											break
										}
									if ((HEAP32[s >> 2] | 0) == 1) {
										o = 25;
										break a
									}
									if (!(HEAP32[r >> 2] & 2)) {
										o = 25;
										break a
									} else {
										y = 1;
										z = 1
									}
								} else {
									y = t;
									z = u
								}
							while (0);
							v = v + 8 | 0;
							if (v >>> 0 >= l >>> 0) {
								w = y;
								x = z;
								break
							} else {
								t = y;
								u = z
							}
						}
						if (w) {
							A = x;
							o = 24
						} else {
							B = x;
							o = 21
						}
					} else {
						B = 0;
						o = 21
					}
				while (0);
				if ((o | 0) == 21) {
					HEAP32[k >> 2] = e;
					e = d + 40 | 0;
					HEAP32[e >> 2] = (HEAP32[e >> 2] | 0) + 1;
					if ((HEAP32[d + 36 >> 2] | 0) == 1 ? (HEAP32[d + 24 >> 2] | 0) == 2 : 0) {
						HEAP8[d + 54 >> 0] = 1;
						if (B)
							o = 25;
						else
							o = 26
					} else {
						A = B;
						o = 24
					}
				}
				if ((o | 0) == 24)
					if (A)
						o = 25;
					else
						o = 26;
				if ((o | 0) == 25) {
					HEAP32[n >> 2] = 3;
					i = h;
					return
				} else if ((o | 0) == 26) {
					HEAP32[n >> 2] = 4;
					i = h;
					return
				}
			}
			if ((f | 0) != 1) {
				i = h;
				return
			}
			HEAP32[d + 32 >> 2] = 1;
			i = h;
			return
		}
		function hx(a, b, d, e, f, g) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0,
			k = 0,
			l = 0;
			h = i;
			j = HEAP32[a + 4 >> 2] | 0;
			k = j >> 8;
			if (!(j & 1))
				l = k;
			else
				l = HEAP32[(HEAP32[e >> 2] | 0) + k >> 2] | 0;
			k = HEAP32[a >> 2] | 0;
			Bc[c[(HEAP32[k >> 2] | 0) + 20 >> 2] & 31](k, b, d, e + l | 0, (j & 2 | 0) != 0 ? f : 2, g);
			i = h;
			return
		}
		function ix(a, b, d, e, f) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0;
			g = i;
			h = HEAP32[a + 4 >> 2] | 0;
			j = h >> 8;
			if (!(h & 1))
				k = j;
			else
				k = HEAP32[(HEAP32[d >> 2] | 0) + j >> 2] | 0;
			j = HEAP32[a >> 2] | 0;
			oc[c[(HEAP32[j >> 2] | 0) + 24 >> 2] & 3](j, b, d + k | 0, (h & 2 | 0) != 0 ? e : 2, f);
			i = g;
			return
		}
		function jx(b, d, e, f, g) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0;
			h = i;
			if ((b | 0) == (HEAP32[d + 8 >> 2] | 0)) {
				if ((HEAP32[d + 4 >> 2] | 0) != (e | 0)) {
					i = h;
					return
				}
				j = d + 28 | 0;
				if ((HEAP32[j >> 2] | 0) == 1) {
					i = h;
					return
				}
				HEAP32[j >> 2] = f;
				i = h;
				return
			}
			if ((b | 0) != (HEAP32[d >> 2] | 0)) {
				j = HEAP32[b + 8 >> 2] | 0;
				oc[c[(HEAP32[j >> 2] | 0) + 24 >> 2] & 3](j, d, e, f, g);
				i = h;
				return
			}
			if ((HEAP32[d + 16 >> 2] | 0) != (e | 0) ? (j = d + 20 | 0, (HEAP32[j >> 2] | 0) != (e | 0)) : 0) {
				HEAP32[d + 32 >> 2] = f;
				k = d + 44 | 0;
				if ((HEAP32[k >> 2] | 0) == 4) {
					i = h;
					return
				}
				l = d + 52 | 0;
				HEAP8[l >> 0] = 0;
				m = d + 53 | 0;
				HEAP8[m >> 0] = 0;
				n = HEAP32[b + 8 >> 2] | 0;
				Bc[c[(HEAP32[n >> 2] | 0) + 20 >> 2] & 31](n, d, e, e, 1, g);
				if (HEAP8[m >> 0] | 0) {
					if (!(HEAP8[l >> 0] | 0)) {
						o = 1;
						p = 13
					}
				} else {
					o = 0;
					p = 13
				}
				do
					if ((p | 0) == 13) {
						HEAP32[j >> 2] = e;
						l = d + 40 | 0;
						HEAP32[l >> 2] = (HEAP32[l >> 2] | 0) + 1;
						if ((HEAP32[d + 36 >> 2] | 0) == 1 ? (HEAP32[d + 24 >> 2] | 0) == 2 : 0) {
							HEAP8[d + 54 >> 0] = 1;
							if (o)
								break
						} else
							p = 16;
						if ((p | 0) == 16 ? o : 0)
							break;
						HEAP32[k >> 2] = 4;
						i = h;
						return
					}
				while (0);
				HEAP32[k >> 2] = 3;
				i = h;
				return
			}
			if ((f | 0) != 1) {
				i = h;
				return
			}
			HEAP32[d + 32 >> 2] = 1;
			i = h;
			return
		}
		function kx(b, d, e, f, g) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0;
			g = i;
			if ((HEAP32[d + 8 >> 2] | 0) == (b | 0)) {
				if ((HEAP32[d + 4 >> 2] | 0) != (e | 0)) {
					i = g;
					return
				}
				h = d + 28 | 0;
				if ((HEAP32[h >> 2] | 0) == 1) {
					i = g;
					return
				}
				HEAP32[h >> 2] = f;
				i = g;
				return
			}
			if ((HEAP32[d >> 2] | 0) != (b | 0)) {
				i = g;
				return
			}
			if ((HEAP32[d + 16 >> 2] | 0) != (e | 0) ? (b = d + 20 | 0, (HEAP32[b >> 2] | 0) != (e | 0)) : 0) {
				HEAP32[d + 32 >> 2] = f;
				HEAP32[b >> 2] = e;
				e = d + 40 | 0;
				HEAP32[e >> 2] = (HEAP32[e >> 2] | 0) + 1;
				if ((HEAP32[d + 36 >> 2] | 0) == 1 ? (HEAP32[d + 24 >> 2] | 0) == 2 : 0)
					HEAP8[d + 54 >> 0] = 1;
				HEAP32[d + 44 >> 2] = 4;
				i = g;
				return
			}
			if ((f | 0) != 1) {
				i = g;
				return
			}
			HEAP32[d + 32 >> 2] = 1;
			i = g;
			return
		}
		function lx(b, d, e, f, g, h) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			var j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0;
			j = i;
			if ((b | 0) == (HEAP32[d + 8 >> 2] | 0)) {
				fx(0, d, e, f, g);
				i = j;
				return
			}
			k = d + 52 | 0;
			l = HEAP8[k >> 0] | 0;
			m = d + 53 | 0;
			n = HEAP8[m >> 0] | 0;
			o = HEAP32[b + 12 >> 2] | 0;
			p = b + (o << 3) + 16 | 0;
			HEAP8[k >> 0] = 0;
			HEAP8[m >> 0] = 0;
			hx(b + 16 | 0, d, e, f, g, h);
			a: do
				if ((o | 0) > 1) {
					q = d + 24 | 0;
					r = b + 8 | 0;
					s = d + 54 | 0;
					t = b + 24 | 0;
					do {
						if (HEAP8[s >> 0] | 0)
							break a;
						if (!(HEAP8[k >> 0] | 0)) {
							if ((HEAP8[m >> 0] | 0) != 0 ? (HEAP32[r >> 2] & 1 | 0) == 0 : 0)
								break a
						} else {
							if ((HEAP32[q >> 2] | 0) == 1)
								break a;
							if (!(HEAP32[r >> 2] & 2))
								break a
						}
						HEAP8[k >> 0] = 0;
						HEAP8[m >> 0] = 0;
						hx(t, d, e, f, g, h);
						t = t + 8 | 0
					} while (t >>> 0 < p >>> 0)
				}
			while (0);
			HEAP8[k >> 0] = l;
			HEAP8[m >> 0] = n;
			i = j;
			return
		}
		function mx(a, b, d, e, f, g) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			var h = 0,
			j = 0;
			h = i;
			if ((a | 0) == (HEAP32[b + 8 >> 2] | 0)) {
				fx(0, b, d, e, f);
				i = h;
				return
			} else {
				j = HEAP32[a + 8 >> 2] | 0;
				Bc[c[(HEAP32[j >> 2] | 0) + 20 >> 2] & 31](j, b, d, e, f, g);
				i = h;
				return
			}
		}
		function nx(a, b, d, e, f, g) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			g = i;
			if ((HEAP32[b + 8 >> 2] | 0) != (a | 0)) {
				i = g;
				return
			}
			fx(0, b, d, e, f);
			i = g;
			return
		}
		function ox(a, b, d) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0;
			e = i;
			i = i + 16 | 0;
			f = e;
			HEAP32[f >> 2] = HEAP32[d >> 2];
			g = mc[c[(HEAP32[a >> 2] | 0) + 16 >> 2] & 31](a, b, f) | 0;
			b = g & 1;
			if (!g) {
				i = e;
				return b | 0
			}
			HEAP32[d >> 2] = HEAP32[f >> 2];
			i = e;
			return b | 0
		}
		function px(a) {
			a = a | 0;
			var b = 0,
			c = 0;
			b = i;
			if (!a)
				c = 0;
			else
				c = (ex(a, 139552, 139720, 0) | 0) != 0;
			i = b;
			return c & 1 | 0
		}
		function qx() {
			var a = 0;
			a = ub(4) | 0;
			Aw(a);
			fc(a | 0, 139080, 146)
		}
		function rx() {
			var a = 0,
			b = 0,
			d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0;
			a = i;
			i = i + 16 | 0;
			b = a;
			d = a + 12 | 0;
			a = zw() | 0;
			if (!a)
				yw(138824, b);
			e = HEAP32[a >> 2] | 0;
			if (!e)
				yw(138824, b);
			a = e + 48 | 0;
			f = HEAP32[a >> 2] | 0;
			g = HEAP32[a + 4 >> 2] | 0;
			if (!((f & -256 | 0) == 1126902528 & (g | 0) == 1129074247)) {
				HEAP32[b >> 2] = HEAP32[34666];
				yw(138784, b)
			}
			if ((f | 0) == 1126902529 & (g | 0) == 1129074247)
				h = HEAP32[e + 44 >> 2] | 0;
			else
				h = e + 80 | 0;
			HEAP32[d >> 2] = h;
			h = HEAP32[e >> 2] | 0;
			e = HEAP32[h + 4 >> 2] | 0;
			if (mc[c[(HEAP32[139224 >> 2] | 0) + 16 >> 2] & 31](139224, h, d) | 0) {
				h = HEAP32[d >> 2] | 0;
				d = HEAP32[34666] | 0;
				g = tc[c[(HEAP32[h >> 2] | 0) + 8 >> 2] & 127](h) | 0;
				HEAP32[b >> 2] = d;
				HEAP32[b + 4 >> 2] = e;
				HEAP32[b + 8 >> 2] = g;
				yw(138688, b)
			} else {
				HEAP32[b >> 2] = HEAP32[34666];
				HEAP32[b + 4 >> 2] = e;
				yw(138736, b)
			}
		}
		function sx() {
			var a = 0;
			a = i;
			i = i + 16 | 0;
			if (!(Db(138840, 197) | 0)) {
				i = a;
				return
			} else
				yw(138912, a)
		}
		function tx(a) {
			a = a | 0;
			var b = 0,
			d = 0,
			e = 0;
			b = i;
			d = (HEAP32[a >> 2] | 0) + -4 | 0;
			e = HEAP32[d >> 2] | 0;
			HEAP32[d >> 2] = e + -1;
			if ((e + -1 | 0) >= 0) {
				i = b;
				return
			}
			kl((HEAP32[a >> 2] | 0) + -12 | 0);
			i = b;
			return
		}
		function ux(a) {
			a = a | 0;
			var b = 0;
			b = i;
			i = i + 16 | 0;
			wx(a);
			if (!(cc(HEAP32[34710] | 0, 0) | 0)) {
				i = b;
				return
			} else
				yw(138968, b)
		}
		function vx(a) {
			a = a | 0;
			var b = 0,
			d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0,
			O = 0,
			P = 0,
			Q = 0,
			R = 0,
			S = 0,
			T = 0,
			U = 0,
			V = 0,
			W = 0,
			X = 0,
			Y = 0,
			Z = 0,
			_ = 0,
			$ = 0,
			aa = 0,
			ba = 0,
			ca = 0,
			da = 0,
			ea = 0,
			fa = 0,
			ga = 0,
			ha = 0,
			ia = 0,
			ja = 0,
			ka = 0,
			la = 0,
			ma = 0,
			na = 0,
			oa = 0,
			pa = 0,
			qa = 0,
			ra = 0,
			sa = 0,
			ta = 0,
			ua = 0,
			va = 0,
			wa = 0,
			xa = 0,
			ya = 0,
			za = 0,
			Aa = 0,
			Ba = 0,
			Ca = 0,
			Da = 0,
			Ea = 0,
			Fa = 0,
			Ga = 0,
			Ha = 0,
			Ia = 0,
			Ka = 0,
			La = 0,
			Na = 0;
			b = i;
			do
				if (a >>> 0 < 245) {
					if (a >>> 0 < 11)
						d = 16;
					else
						d = a + 11 & -8;
					e = d >>> 3;
					f = HEAP32[34992] | 0;
					g = f >>> e;
					if (g & 3) {
						h = (g & 1 ^ 1) + e | 0;
						j = h << 1;
						k = 140008 + (j << 2) | 0;
						l = 140008 + (j + 2 << 2) | 0;
						j = HEAP32[l >> 2] | 0;
						m = j + 8 | 0;
						n = HEAP32[m >> 2] | 0;
						do
							if ((k | 0) != (n | 0)) {
								if (n >>> 0 < (HEAP32[34996] | 0) >>> 0)
									Gb();
								o = n + 12 | 0;
								if ((HEAP32[o >> 2] | 0) == (j | 0)) {
									HEAP32[o >> 2] = k;
									HEAP32[l >> 2] = n;
									break
								} else
									Gb()
							} else
								HEAP32[34992] = f & ~(1 << h);
						while (0);
						n = h << 3;
						HEAP32[j + 4 >> 2] = n | 3;
						l = j + (n | 4) | 0;
						HEAP32[l >> 2] = HEAP32[l >> 2] | 1;
						p = m;
						i = b;
						return p | 0
					}
					l = HEAP32[34994] | 0;
					if (d >>> 0 > l >>> 0) {
						if (g) {
							n = 2 << e;
							k = g << e & (n | 0 - n);
							n = (k & 0 - k) + -1 | 0;
							k = n >>> 12 & 16;
							o = n >>> k;
							n = o >>> 5 & 8;
							q = o >>> n;
							o = q >>> 2 & 4;
							r = q >>> o;
							q = r >>> 1 & 2;
							s = r >>> q;
							r = s >>> 1 & 1;
							t = (n | k | o | q | r) + (s >>> r) | 0;
							r = t << 1;
							s = 140008 + (r << 2) | 0;
							q = 140008 + (r + 2 << 2) | 0;
							r = HEAP32[q >> 2] | 0;
							o = r + 8 | 0;
							k = HEAP32[o >> 2] | 0;
							do
								if ((s | 0) != (k | 0)) {
									if (k >>> 0 < (HEAP32[34996] | 0) >>> 0)
										Gb();
									n = k + 12 | 0;
									if ((HEAP32[n >> 2] | 0) == (r | 0)) {
										HEAP32[n >> 2] = s;
										HEAP32[q >> 2] = k;
										u = HEAP32[34994] | 0;
										break
									} else
										Gb()
								} else {
									HEAP32[34992] = f & ~(1 << t);
									u = l
								}
							while (0);
							l = t << 3;
							f = l - d | 0;
							HEAP32[r + 4 >> 2] = d | 3;
							k = r + d | 0;
							HEAP32[r + (d | 4) >> 2] = f | 1;
							HEAP32[r + l >> 2] = f;
							if (u) {
								l = HEAP32[34997] | 0;
								q = u >>> 3;
								s = q << 1;
								e = 140008 + (s << 2) | 0;
								g = HEAP32[34992] | 0;
								m = 1 << q;
								if (g & m) {
									q = 140008 + (s + 2 << 2) | 0;
									j = HEAP32[q >> 2] | 0;
									if (j >>> 0 < (HEAP32[34996] | 0) >>> 0)
										Gb();
									else {
										v = q;
										w = j
									}
								} else {
									HEAP32[34992] = g | m;
									v = 140008 + (s + 2 << 2) | 0;
									w = e
								}
								HEAP32[v >> 2] = l;
								HEAP32[w + 12 >> 2] = l;
								HEAP32[l + 8 >> 2] = w;
								HEAP32[l + 12 >> 2] = e
							}
							HEAP32[34994] = f;
							HEAP32[34997] = k;
							p = o;
							i = b;
							return p | 0
						}
						k = HEAP32[34993] | 0;
						if (k) {
							f = (k & 0 - k) + -1 | 0;
							k = f >>> 12 & 16;
							e = f >>> k;
							f = e >>> 5 & 8;
							l = e >>> f;
							e = l >>> 2 & 4;
							s = l >>> e;
							l = s >>> 1 & 2;
							m = s >>> l;
							s = m >>> 1 & 1;
							g = HEAP32[140272 + ((f | k | e | l | s) + (m >>> s) << 2) >> 2] | 0;
							s = (HEAP32[g + 4 >> 2] & -8) - d | 0;
							m = g;
							l = g;
							while (1) {
								g = HEAP32[m + 16 >> 2] | 0;
								if (!g) {
									e = HEAP32[m + 20 >> 2] | 0;
									if (!e)
										break;
									else
										x = e
								} else
									x = g;
								g = (HEAP32[x + 4 >> 2] & -8) - d | 0;
								e = g >>> 0 < s >>> 0;
								s = e ? g : s;
								m = x;
								l = e ? x : l
							}
							m = HEAP32[34996] | 0;
							if (l >>> 0 < m >>> 0)
								Gb();
							o = l + d | 0;
							if (l >>> 0 >= o >>> 0)
								Gb();
							r = HEAP32[l + 24 >> 2] | 0;
							t = HEAP32[l + 12 >> 2] | 0;
							do
								if ((t | 0) == (l | 0)) {
									e = l + 20 | 0;
									g = HEAP32[e >> 2] | 0;
									if (!g) {
										k = l + 16 | 0;
										f = HEAP32[k >> 2] | 0;
										if (!f) {
											y = 0;
											break
										} else {
											z = f;
											A = k
										}
									} else {
										z = g;
										A = e
									}
									while (1) {
										e = z + 20 | 0;
										g = HEAP32[e >> 2] | 0;
										if (g) {
											z = g;
											A = e;
											continue
										}
										e = z + 16 | 0;
										g = HEAP32[e >> 2] | 0;
										if (!g)
											break;
										else {
											z = g;
											A = e
										}
									}
									if (A >>> 0 < m >>> 0)
										Gb();
									else {
										HEAP32[A >> 2] = 0;
										y = z;
										break
									}
								} else {
									e = HEAP32[l + 8 >> 2] | 0;
									if (e >>> 0 < m >>> 0)
										Gb();
									g = e + 12 | 0;
									if ((HEAP32[g >> 2] | 0) != (l | 0))
										Gb();
									k = t + 8 | 0;
									if ((HEAP32[k >> 2] | 0) == (l | 0)) {
										HEAP32[g >> 2] = t;
										HEAP32[k >> 2] = e;
										y = t;
										break
									} else
										Gb()
								}
							while (0);
							do
								if (r) {
									t = HEAP32[l + 28 >> 2] | 0;
									m = 140272 + (t << 2) | 0;
									if ((l | 0) == (HEAP32[m >> 2] | 0)) {
										HEAP32[m >> 2] = y;
										if (!y) {
											HEAP32[34993] = HEAP32[34993] & ~(1 << t);
											break
										}
									} else {
										if (r >>> 0 < (HEAP32[34996] | 0) >>> 0)
											Gb();
										t = r + 16 | 0;
										if ((HEAP32[t >> 2] | 0) == (l | 0))
											HEAP32[t >> 2] = y;
										else
											HEAP32[r + 20 >> 2] = y;
										if (!y)
											break
									}
									t = HEAP32[34996] | 0;
									if (y >>> 0 < t >>> 0)
										Gb();
									HEAP32[y + 24 >> 2] = r;
									m = HEAP32[l + 16 >> 2] | 0;
									do
										if (m)
											if (m >>> 0 < t >>> 0)
												Gb();
											else {
												HEAP32[y + 16 >> 2] = m;
												HEAP32[m + 24 >> 2] = y;
												break
											}
									while (0);
									m = HEAP32[l + 20 >> 2] | 0;
									if (m)
										if (m >>> 0 < (HEAP32[34996] | 0) >>> 0)
											Gb();
										else {
											HEAP32[y + 20 >> 2] = m;
											HEAP32[m + 24 >> 2] = y;
											break
										}
								}
							while (0);
							if (s >>> 0 < 16) {
								r = s + d | 0;
								HEAP32[l + 4 >> 2] = r | 3;
								m = l + (r + 4) | 0;
								HEAP32[m >> 2] = HEAP32[m >> 2] | 1
							} else {
								HEAP32[l + 4 >> 2] = d | 3;
								HEAP32[l + (d | 4) >> 2] = s | 1;
								HEAP32[l + (s + d) >> 2] = s;
								m = HEAP32[34994] | 0;
								if (m) {
									r = HEAP32[34997] | 0;
									t = m >>> 3;
									m = t << 1;
									e = 140008 + (m << 2) | 0;
									k = HEAP32[34992] | 0;
									g = 1 << t;
									if (k & g) {
										t = 140008 + (m + 2 << 2) | 0;
										f = HEAP32[t >> 2] | 0;
										if (f >>> 0 < (HEAP32[34996] | 0) >>> 0)
											Gb();
										else {
											B = t;
											C = f
										}
									} else {
										HEAP32[34992] = k | g;
										B = 140008 + (m + 2 << 2) | 0;
										C = e
									}
									HEAP32[B >> 2] = r;
									HEAP32[C + 12 >> 2] = r;
									HEAP32[r + 8 >> 2] = C;
									HEAP32[r + 12 >> 2] = e
								}
								HEAP32[34994] = s;
								HEAP32[34997] = o
							}
							p = l + 8 | 0;
							i = b;
							return p | 0
						} else
							D = d
					} else
						D = d
				} else if (a >>> 0 <= 4294967231) {
					e = a + 11 | 0;
					r = e & -8;
					m = HEAP32[34993] | 0;
					if (m) {
						g = 0 - r | 0;
						k = e >>> 8;
						if (k)
							if (r >>> 0 > 16777215)
								E = 31;
							else {
								e = (k + 1048320 | 0) >>> 16 & 8;
								f = k << e;
								k = (f + 520192 | 0) >>> 16 & 4;
								t = f << k;
								f = (t + 245760 | 0) >>> 16 & 2;
								j = 14 - (k | e | f) + (t << f >>> 15) | 0;
								E = r >>> (j + 7 | 0) & 1 | j << 1
							}
						else
							E = 0;
						j = HEAP32[140272 + (E << 2) >> 2] | 0;
						a: do
							if (!j) {
								F = g;
								G = 0;
								H = 0
							} else {
								if ((E | 0) == 31)
									I = 0;
								else
									I = 25 - (E >>> 1) | 0;
								f = g;
								t = 0;
								e = r << I;
								k = j;
								q = 0;
								while (1) {
									h = HEAP32[k + 4 >> 2] & -8;
									n = h - r | 0;
									if (n >>> 0 < f >>> 0)
										if ((h | 0) == (r | 0)) {
											F = n;
											G = k;
											H = k;
											break a
										} else {
											J = n;
											K = k
										}
									else {
										J = f;
										K = q
									}
									n = HEAP32[k + 20 >> 2] | 0;
									k = HEAP32[k + (e >>> 31 << 2) + 16 >> 2] | 0;
									h = (n | 0) == 0 | (n | 0) == (k | 0) ? t : n;
									if (!k) {
										F = J;
										G = h;
										H = K;
										break
									} else {
										f = J;
										t = h;
										e = e << 1;
										q = K
									}
								}
							}
						while (0);
						if ((G | 0) == 0 & (H | 0) == 0) {
							j = 2 << E;
							g = m & (j | 0 - j);
							if (!g) {
								D = r;
								break
							}
							j = (g & 0 - g) + -1 | 0;
							g = j >>> 12 & 16;
							l = j >>> g;
							j = l >>> 5 & 8;
							o = l >>> j;
							l = o >>> 2 & 4;
							s = o >>> l;
							o = s >>> 1 & 2;
							q = s >>> o;
							s = q >>> 1 & 1;
							L = HEAP32[140272 + ((j | g | l | o | s) + (q >>> s) << 2) >> 2] | 0
						} else
							L = G;
						if (!L) {
							M = F;
							N = H
						} else {
							s = F;
							q = L;
							o = H;
							while (1) {
								l = (HEAP32[q + 4 >> 2] & -8) - r | 0;
								g = l >>> 0 < s >>> 0;
								j = g ? l : s;
								l = g ? q : o;
								g = HEAP32[q + 16 >> 2] | 0;
								if (g) {
									s = j;
									q = g;
									o = l;
									continue
								}
								q = HEAP32[q + 20 >> 2] | 0;
								if (!q) {
									M = j;
									N = l;
									break
								} else {
									s = j;
									o = l
								}
							}
						}
						if ((N | 0) != 0 ? M >>> 0 < ((HEAP32[34994] | 0) - r | 0) >>> 0 : 0) {
							o = HEAP32[34996] | 0;
							if (N >>> 0 < o >>> 0)
								Gb();
							s = N + r | 0;
							if (N >>> 0 >= s >>> 0)
								Gb();
							q = HEAP32[N + 24 >> 2] | 0;
							m = HEAP32[N + 12 >> 2] | 0;
							do
								if ((m | 0) == (N | 0)) {
									l = N + 20 | 0;
									j = HEAP32[l >> 2] | 0;
									if (!j) {
										g = N + 16 | 0;
										e = HEAP32[g >> 2] | 0;
										if (!e) {
											O = 0;
											break
										} else {
											P = e;
											Q = g
										}
									} else {
										P = j;
										Q = l
									}
									while (1) {
										l = P + 20 | 0;
										j = HEAP32[l >> 2] | 0;
										if (j) {
											P = j;
											Q = l;
											continue
										}
										l = P + 16 | 0;
										j = HEAP32[l >> 2] | 0;
										if (!j)
											break;
										else {
											P = j;
											Q = l
										}
									}
									if (Q >>> 0 < o >>> 0)
										Gb();
									else {
										HEAP32[Q >> 2] = 0;
										O = P;
										break
									}
								} else {
									l = HEAP32[N + 8 >> 2] | 0;
									if (l >>> 0 < o >>> 0)
										Gb();
									j = l + 12 | 0;
									if ((HEAP32[j >> 2] | 0) != (N | 0))
										Gb();
									g = m + 8 | 0;
									if ((HEAP32[g >> 2] | 0) == (N | 0)) {
										HEAP32[j >> 2] = m;
										HEAP32[g >> 2] = l;
										O = m;
										break
									} else
										Gb()
								}
							while (0);
							do
								if (q) {
									m = HEAP32[N + 28 >> 2] | 0;
									o = 140272 + (m << 2) | 0;
									if ((N | 0) == (HEAP32[o >> 2] | 0)) {
										HEAP32[o >> 2] = O;
										if (!O) {
											HEAP32[34993] = HEAP32[34993] & ~(1 << m);
											break
										}
									} else {
										if (q >>> 0 < (HEAP32[34996] | 0) >>> 0)
											Gb();
										m = q + 16 | 0;
										if ((HEAP32[m >> 2] | 0) == (N | 0))
											HEAP32[m >> 2] = O;
										else
											HEAP32[q + 20 >> 2] = O;
										if (!O)
											break
									}
									m = HEAP32[34996] | 0;
									if (O >>> 0 < m >>> 0)
										Gb();
									HEAP32[O + 24 >> 2] = q;
									o = HEAP32[N + 16 >> 2] | 0;
									do
										if (o)
											if (o >>> 0 < m >>> 0)
												Gb();
											else {
												HEAP32[O + 16 >> 2] = o;
												HEAP32[o + 24 >> 2] = O;
												break
											}
									while (0);
									o = HEAP32[N + 20 >> 2] | 0;
									if (o)
										if (o >>> 0 < (HEAP32[34996] | 0) >>> 0)
											Gb();
										else {
											HEAP32[O + 20 >> 2] = o;
											HEAP32[o + 24 >> 2] = O;
											break
										}
								}
							while (0);
							b: do
								if (M >>> 0 >= 16) {
									HEAP32[N + 4 >> 2] = r | 3;
									HEAP32[N + (r | 4) >> 2] = M | 1;
									HEAP32[N + (M + r) >> 2] = M;
									q = M >>> 3;
									if (M >>> 0 < 256) {
										o = q << 1;
										m = 140008 + (o << 2) | 0;
										l = HEAP32[34992] | 0;
										g = 1 << q;
										do
											if (!(l & g)) {
												HEAP32[34992] = l | g;
												R = 140008 + (o + 2 << 2) | 0;
												S = m
											} else {
												q = 140008 + (o + 2 << 2) | 0;
												j = HEAP32[q >> 2] | 0;
												if (j >>> 0 >= (HEAP32[34996] | 0) >>> 0) {
													R = q;
													S = j;
													break
												}
												Gb()
											}
										while (0);
										HEAP32[R >> 2] = s;
										HEAP32[S + 12 >> 2] = s;
										HEAP32[N + (r + 8) >> 2] = S;
										HEAP32[N + (r + 12) >> 2] = m;
										break
									}
									o = M >>> 8;
									if (o)
										if (M >>> 0 > 16777215)
											T = 31;
										else {
											g = (o + 1048320 | 0) >>> 16 & 8;
											l = o << g;
											o = (l + 520192 | 0) >>> 16 & 4;
											j = l << o;
											l = (j + 245760 | 0) >>> 16 & 2;
											q = 14 - (o | g | l) + (j << l >>> 15) | 0;
											T = M >>> (q + 7 | 0) & 1 | q << 1
										}
									else
										T = 0;
									q = 140272 + (T << 2) | 0;
									HEAP32[N + (r + 28) >> 2] = T;
									HEAP32[N + (r + 20) >> 2] = 0;
									HEAP32[N + (r + 16) >> 2] = 0;
									l = HEAP32[34993] | 0;
									j = 1 << T;
									if (!(l & j)) {
										HEAP32[34993] = l | j;
										HEAP32[q >> 2] = s;
										HEAP32[N + (r + 24) >> 2] = q;
										HEAP32[N + (r + 12) >> 2] = s;
										HEAP32[N + (r + 8) >> 2] = s;
										break
									}
									j = HEAP32[q >> 2] | 0;
									if ((T | 0) == 31)
										U = 0;
									else
										U = 25 - (T >>> 1) | 0;
									c: do
										if ((HEAP32[j + 4 >> 2] & -8 | 0) != (M | 0)) {
											q = M << U;
											l = j;
											while (1) {
												V = l + (q >>> 31 << 2) + 16 | 0;
												g = HEAP32[V >> 2] | 0;
												if (!g)
													break;
												if ((HEAP32[g + 4 >> 2] & -8 | 0) == (M | 0)) {
													W = g;
													break c
												} else {
													q = q << 1;
													l = g
												}
											}
											if (V >>> 0 < (HEAP32[34996] | 0) >>> 0)
												Gb();
											else {
												HEAP32[V >> 2] = s;
												HEAP32[N + (r + 24) >> 2] = l;
												HEAP32[N + (r + 12) >> 2] = s;
												HEAP32[N + (r + 8) >> 2] = s;
												break b
											}
										} else
											W = j;
									while (0);
									j = W + 8 | 0;
									m = HEAP32[j >> 2] | 0;
									q = HEAP32[34996] | 0;
									if (W >>> 0 >= q >>> 0 & m >>> 0 >= q >>> 0) {
										HEAP32[m + 12 >> 2] = s;
										HEAP32[j >> 2] = s;
										HEAP32[N + (r + 8) >> 2] = m;
										HEAP32[N + (r + 12) >> 2] = W;
										HEAP32[N + (r + 24) >> 2] = 0;
										break
									} else
										Gb()
								} else {
									m = M + r | 0;
									HEAP32[N + 4 >> 2] = m | 3;
									j = N + (m + 4) | 0;
									HEAP32[j >> 2] = HEAP32[j >> 2] | 1
								}
							while (0);
							p = N + 8 | 0;
							i = b;
							return p | 0
						} else
							D = r
					} else
						D = r
				} else
					D = -1;
			while (0);
			N = HEAP32[34994] | 0;
			if (N >>> 0 >= D >>> 0) {
				M = N - D | 0;
				W = HEAP32[34997] | 0;
				if (M >>> 0 > 15) {
					HEAP32[34997] = W + D;
					HEAP32[34994] = M;
					HEAP32[W + (D + 4) >> 2] = M | 1;
					HEAP32[W + N >> 2] = M;
					HEAP32[W + 4 >> 2] = D | 3
				} else {
					HEAP32[34994] = 0;
					HEAP32[34997] = 0;
					HEAP32[W + 4 >> 2] = N | 3;
					M = W + (N + 4) | 0;
					HEAP32[M >> 2] = HEAP32[M >> 2] | 1
				}
				p = W + 8 | 0;
				i = b;
				return p | 0
			}
			W = HEAP32[34995] | 0;
			if (W >>> 0 > D >>> 0) {
				M = W - D | 0;
				HEAP32[34995] = M;
				W = HEAP32[34998] | 0;
				HEAP32[34998] = W + D;
				HEAP32[W + (D + 4) >> 2] = M | 1;
				HEAP32[W + 4 >> 2] = D | 3;
				p = W + 8 | 0;
				i = b;
				return p | 0
			}
			do
				if (!(HEAP32[35110] | 0)) {
					W = Ma(30) | 0;
					if (!(W + -1 & W)) {
						HEAP32[35112] = W;
						HEAP32[35111] = W;
						HEAP32[35113] = -1;
						HEAP32[35114] = -1;
						HEAP32[35115] = 0;
						HEAP32[35103] = 0;
						HEAP32[35110] = (Ob(0) | 0) & -16 ^ 1431655768;
						break
					} else
						Gb()
				}
			while (0);
			W = D + 48 | 0;
			M = HEAP32[35112] | 0;
			N = D + 47 | 0;
			V = M + N | 0;
			U = 0 - M | 0;
			M = V & U;
			if (M >>> 0 <= D >>> 0) {
				p = 0;
				i = b;
				return p | 0
			}
			T = HEAP32[35102] | 0;
			if ((T | 0) != 0 ? (S = HEAP32[35100] | 0, R = S + M | 0, R >>> 0 <= S >>> 0 | R >>> 0 > T >>> 0) : 0) {
				p = 0;
				i = b;
				return p | 0
			}
			d: do
				if (!(HEAP32[35103] & 4)) {
					T = HEAP32[34998] | 0;
					e: do
						if (T) {
							R = 140416 | 0;
							while (1) {
								S = HEAP32[R >> 2] | 0;
								if (S >>> 0 <= T >>> 0 ? (X = R + 4 | 0, (S + (HEAP32[X >> 2] | 0) | 0) >>> 0 > T >>> 0) : 0)
									break;
								S = HEAP32[R + 8 >> 2] | 0;
								if (!S) {
									Y = 181;
									break e
								} else
									R = S
							}
							if (R) {
								S = V - (HEAP32[34995] | 0) & U;
								if (S >>> 0 < 2147483647) {
									O = Ja(S | 0) | 0;
									if ((O | 0) == ((HEAP32[R >> 2] | 0) + (HEAP32[X >> 2] | 0) | 0)) {
										Z = O;
										_ = S;
										Y = 190
									} else {
										$ = O;
										aa = S;
										Y = 191
									}
								} else
									ba = 0
							} else
								Y = 181
						} else
							Y = 181;
					while (0);
					do
						if ((Y | 0) == 181) {
							T = Ja(0) | 0;
							if ((T | 0) != (-1 | 0)) {
								r = T;
								S = HEAP32[35111] | 0;
								O = S + -1 | 0;
								if (!(O & r))
									ca = M;
								else
									ca = M - r + (O + r & 0 - S) | 0;
								S = HEAP32[35100] | 0;
								r = S + ca | 0;
								if (ca >>> 0 > D >>> 0 & ca >>> 0 < 2147483647) {
									O = HEAP32[35102] | 0;
									if ((O | 0) != 0 ? r >>> 0 <= S >>> 0 | r >>> 0 > O >>> 0 : 0) {
										ba = 0;
										break
									}
									O = Ja(ca | 0) | 0;
									if ((O | 0) == (T | 0)) {
										Z = T;
										_ = ca;
										Y = 190
									} else {
										$ = O;
										aa = ca;
										Y = 191
									}
								} else
									ba = 0
							} else
								ba = 0
						}
					while (0);
					f: do
						if ((Y | 0) == 190)
							if ((Z | 0) == (-1 | 0))
								ba = _;
							else {
								da = Z;
								ea = _;
								Y = 201;
								break d
							}
						else if ((Y | 0) == 191) {
							O = 0 - aa | 0;
							do
								if (($ | 0) != (-1 | 0) & aa >>> 0 < 2147483647 & W >>> 0 > aa >>> 0 ? (T = HEAP32[35112] | 0, r = N - aa + T & 0 - T, r >>> 0 < 2147483647) : 0)
									if ((Ja(r | 0) | 0) == (-1 | 0)) {
										Ja(O | 0) | 0;
										ba = 0;
										break f
									} else {
										fa = r + aa | 0;
										break
									}
								else
									fa = aa;
							while (0);
							if (($ | 0) == (-1 | 0))
								ba = 0;
							else {
								da = $;
								ea = fa;
								Y = 201;
								break d
							}
						}
					while (0);
					HEAP32[35103] = HEAP32[35103] | 4;
					ga = ba;
					Y = 198
				} else {
					ga = 0;
					Y = 198
				}
			while (0);
			if ((((Y | 0) == 198 ? M >>> 0 < 2147483647 : 0) ? (ba = Ja(M | 0) | 0, M = Ja(0) | 0, (ba | 0) != (-1 | 0) & (M | 0) != (-1 | 0) & ba >>> 0 < M >>> 0) : 0) ? (fa = M - ba | 0, M = fa >>> 0 > (D + 40 | 0) >>> 0, M) : 0) {
				da = ba;
				ea = M ? fa : ga;
				Y = 201
			}
			if ((Y | 0) == 201) {
				ga = (HEAP32[35100] | 0) + ea | 0;
				HEAP32[35100] = ga;
				if (ga >>> 0 > (HEAP32[35101] | 0) >>> 0)
					HEAP32[35101] = ga;
				ga = HEAP32[34998] | 0;
				g: do
					if (ga) {
						fa = 140416 | 0;
						while (1) {
							ha = HEAP32[fa >> 2] | 0;
							ia = fa + 4 | 0;
							ja = HEAP32[ia >> 2] | 0;
							if ((da | 0) == (ha + ja | 0)) {
								Y = 213;
								break
							}
							M = HEAP32[fa + 8 >> 2] | 0;
							if (!M)
								break;
							else
								fa = M
						}
						if (((Y | 0) == 213 ? (HEAP32[fa + 12 >> 2] & 8 | 0) == 0 : 0) ? ga >>> 0 >= ha >>> 0 & ga >>> 0 < da >>> 0 : 0) {
							HEAP32[ia >> 2] = ja + ea;
							M = (HEAP32[34995] | 0) + ea | 0;
							ba = ga + 8 | 0;
							if (!(ba & 7))
								ka = 0;
							else
								ka = 0 - ba & 7;
							ba = M - ka | 0;
							HEAP32[34998] = ga + ka;
							HEAP32[34995] = ba;
							HEAP32[ga + (ka + 4) >> 2] = ba | 1;
							HEAP32[ga + (M + 4) >> 2] = 40;
							HEAP32[34999] = HEAP32[35114];
							break
						}
						M = HEAP32[34996] | 0;
						if (da >>> 0 < M >>> 0) {
							HEAP32[34996] = da;
							la = da
						} else
							la = M;
						M = da + ea | 0;
						ba = 140416 | 0;
						while (1) {
							if ((HEAP32[ba >> 2] | 0) == (M | 0)) {
								Y = 223;
								break
							}
							$ = HEAP32[ba + 8 >> 2] | 0;
							if (!$)
								break;
							else
								ba = $
						}
						if ((Y | 0) == 223 ? (HEAP32[ba + 12 >> 2] & 8 | 0) == 0 : 0) {
							HEAP32[ba >> 2] = da;
							M = ba + 4 | 0;
							HEAP32[M >> 2] = (HEAP32[M >> 2] | 0) + ea;
							M = da + 8 | 0;
							if (!(M & 7))
								ma = 0;
							else
								ma = 0 - M & 7;
							M = da + (ea + 8) | 0;
							if (!(M & 7))
								na = 0;
							else
								na = 0 - M & 7;
							M = da + (na + ea) | 0;
							fa = ma + D | 0;
							$ = da + fa | 0;
							aa = M - (da + ma) - D | 0;
							HEAP32[da + (ma + 4) >> 2] = D | 3;
							h: do
								if ((M | 0) != (ga | 0)) {
									if ((M | 0) == (HEAP32[34997] | 0)) {
										N = (HEAP32[34994] | 0) + aa | 0;
										HEAP32[34994] = N;
										HEAP32[34997] = $;
										HEAP32[da + (fa + 4) >> 2] = N | 1;
										HEAP32[da + (N + fa) >> 2] = N;
										break
									}
									N = ea + 4 | 0;
									W = HEAP32[da + (N + na) >> 2] | 0;
									if ((W & 3 | 0) == 1) {
										_ = W & -8;
										Z = W >>> 3;
										i: do
											if (W >>> 0 >= 256) {
												ca = HEAP32[da + ((na | 24) + ea) >> 2] | 0;
												X = HEAP32[da + (ea + 12 + na) >> 2] | 0;
												do
													if ((X | 0) == (M | 0)) {
														U = na | 16;
														V = da + (N + U) | 0;
														O = HEAP32[V >> 2] | 0;
														if (!O) {
															R = da + (U + ea) | 0;
															U = HEAP32[R >> 2] | 0;
															if (!U) {
																oa = 0;
																break
															} else {
																pa = U;
																qa = R
															}
														} else {
															pa = O;
															qa = V
														}
														while (1) {
															V = pa + 20 | 0;
															O = HEAP32[V >> 2] | 0;
															if (O) {
																pa = O;
																qa = V;
																continue
															}
															V = pa + 16 | 0;
															O = HEAP32[V >> 2] | 0;
															if (!O)
																break;
															else {
																pa = O;
																qa = V
															}
														}
														if (qa >>> 0 < la >>> 0)
															Gb();
														else {
															HEAP32[qa >> 2] = 0;
															oa = pa;
															break
														}
													} else {
														V = HEAP32[da + ((na | 8) + ea) >> 2] | 0;
														if (V >>> 0 < la >>> 0)
															Gb();
														O = V + 12 | 0;
														if ((HEAP32[O >> 2] | 0) != (M | 0))
															Gb();
														R = X + 8 | 0;
														if ((HEAP32[R >> 2] | 0) == (M | 0)) {
															HEAP32[O >> 2] = X;
															HEAP32[R >> 2] = V;
															oa = X;
															break
														} else
															Gb()
													}
												while (0);
												if (!ca)
													break;
												X = HEAP32[da + (ea + 28 + na) >> 2] | 0;
												l = 140272 + (X << 2) | 0;
												do
													if ((M | 0) != (HEAP32[l >> 2] | 0)) {
														if (ca >>> 0 < (HEAP32[34996] | 0) >>> 0)
															Gb();
														V = ca + 16 | 0;
														if ((HEAP32[V >> 2] | 0) == (M | 0))
															HEAP32[V >> 2] = oa;
														else
															HEAP32[ca + 20 >> 2] = oa;
														if (!oa)
															break i
													} else {
														HEAP32[l >> 2] = oa;
														if (oa)
															break;
														HEAP32[34993] = HEAP32[34993] & ~(1 << X);
														break i
													}
												while (0);
												X = HEAP32[34996] | 0;
												if (oa >>> 0 < X >>> 0)
													Gb();
												HEAP32[oa + 24 >> 2] = ca;
												l = na | 16;
												V = HEAP32[da + (l + ea) >> 2] | 0;
												do
													if (V)
														if (V >>> 0 < X >>> 0)
															Gb();
														else {
															HEAP32[oa + 16 >> 2] = V;
															HEAP32[V + 24 >> 2] = oa;
															break
														}
												while (0);
												V = HEAP32[da + (N + l) >> 2] | 0;
												if (!V)
													break;
												if (V >>> 0 < (HEAP32[34996] | 0) >>> 0)
													Gb();
												else {
													HEAP32[oa + 20 >> 2] = V;
													HEAP32[V + 24 >> 2] = oa;
													break
												}
											} else {
												V = HEAP32[da + ((na | 8) + ea) >> 2] | 0;
												X = HEAP32[da + (ea + 12 + na) >> 2] | 0;
												ca = 140008 + (Z << 1 << 2) | 0;
												do
													if ((V | 0) != (ca | 0)) {
														if (V >>> 0 < la >>> 0)
															Gb();
														if ((HEAP32[V + 12 >> 2] | 0) == (M | 0))
															break;
														Gb()
													}
												while (0);
												if ((X | 0) == (V | 0)) {
													HEAP32[34992] = HEAP32[34992] & ~(1 << Z);
													break
												}
												do
													if ((X | 0) == (ca | 0))
														ra = X + 8 | 0;
													else {
														if (X >>> 0 < la >>> 0)
															Gb();
														l = X + 8 | 0;
														if ((HEAP32[l >> 2] | 0) == (M | 0)) {
															ra = l;
															break
														}
														Gb()
													}
												while (0);
												HEAP32[V + 12 >> 2] = X;
												HEAP32[ra >> 2] = V
											}
										while (0);
										sa = da + ((_ | na) + ea) | 0;
										ta = _ + aa | 0
									} else {
										sa = M;
										ta = aa
									}
									Z = sa + 4 | 0;
									HEAP32[Z >> 2] = HEAP32[Z >> 2] & -2;
									HEAP32[da + (fa + 4) >> 2] = ta | 1;
									HEAP32[da + (ta + fa) >> 2] = ta;
									Z = ta >>> 3;
									if (ta >>> 0 < 256) {
										N = Z << 1;
										W = 140008 + (N << 2) | 0;
										ca = HEAP32[34992] | 0;
										l = 1 << Z;
										do
											if (!(ca & l)) {
												HEAP32[34992] = ca | l;
												ua = 140008 + (N + 2 << 2) | 0;
												va = W
											} else {
												Z = 140008 + (N + 2 << 2) | 0;
												R = HEAP32[Z >> 2] | 0;
												if (R >>> 0 >= (HEAP32[34996] | 0) >>> 0) {
													ua = Z;
													va = R;
													break
												}
												Gb()
											}
										while (0);
										HEAP32[ua >> 2] = $;
										HEAP32[va + 12 >> 2] = $;
										HEAP32[da + (fa + 8) >> 2] = va;
										HEAP32[da + (fa + 12) >> 2] = W;
										break
									}
									N = ta >>> 8;
									do
										if (!N)
											wa = 0;
										else {
											if (ta >>> 0 > 16777215) {
												wa = 31;
												break
											}
											l = (N + 1048320 | 0) >>> 16 & 8;
											ca = N << l;
											_ = (ca + 520192 | 0) >>> 16 & 4;
											R = ca << _;
											ca = (R + 245760 | 0) >>> 16 & 2;
											Z = 14 - (_ | l | ca) + (R << ca >>> 15) | 0;
											wa = ta >>> (Z + 7 | 0) & 1 | Z << 1
										}
									while (0);
									N = 140272 + (wa << 2) | 0;
									HEAP32[da + (fa + 28) >> 2] = wa;
									HEAP32[da + (fa + 20) >> 2] = 0;
									HEAP32[da + (fa + 16) >> 2] = 0;
									W = HEAP32[34993] | 0;
									Z = 1 << wa;
									if (!(W & Z)) {
										HEAP32[34993] = W | Z;
										HEAP32[N >> 2] = $;
										HEAP32[da + (fa + 24) >> 2] = N;
										HEAP32[da + (fa + 12) >> 2] = $;
										HEAP32[da + (fa + 8) >> 2] = $;
										break
									}
									Z = HEAP32[N >> 2] | 0;
									if ((wa | 0) == 31)
										xa = 0;
									else
										xa = 25 - (wa >>> 1) | 0;
									j: do
										if ((HEAP32[Z + 4 >> 2] & -8 | 0) != (ta | 0)) {
											N = ta << xa;
											W = Z;
											while (1) {
												ya = W + (N >>> 31 << 2) + 16 | 0;
												ca = HEAP32[ya >> 2] | 0;
												if (!ca)
													break;
												if ((HEAP32[ca + 4 >> 2] & -8 | 0) == (ta | 0)) {
													za = ca;
													break j
												} else {
													N = N << 1;
													W = ca
												}
											}
											if (ya >>> 0 < (HEAP32[34996] | 0) >>> 0)
												Gb();
											else {
												HEAP32[ya >> 2] = $;
												HEAP32[da + (fa + 24) >> 2] = W;
												HEAP32[da + (fa + 12) >> 2] = $;
												HEAP32[da + (fa + 8) >> 2] = $;
												break h
											}
										} else
											za = Z;
									while (0);
									Z = za + 8 | 0;
									N = HEAP32[Z >> 2] | 0;
									V = HEAP32[34996] | 0;
									if (za >>> 0 >= V >>> 0 & N >>> 0 >= V >>> 0) {
										HEAP32[N + 12 >> 2] = $;
										HEAP32[Z >> 2] = $;
										HEAP32[da + (fa + 8) >> 2] = N;
										HEAP32[da + (fa + 12) >> 2] = za;
										HEAP32[da + (fa + 24) >> 2] = 0;
										break
									} else
										Gb()
								} else {
									N = (HEAP32[34995] | 0) + aa | 0;
									HEAP32[34995] = N;
									HEAP32[34998] = $;
									HEAP32[da + (fa + 4) >> 2] = N | 1
								}
							while (0);
							p = da + (ma | 8) | 0;
							i = b;
							return p | 0
						}
						fa = 140416 | 0;
						while (1) {
							Aa = HEAP32[fa >> 2] | 0;
							if (Aa >>> 0 <= ga >>> 0 ? (Ba = HEAP32[fa + 4 >> 2] | 0, Ca = Aa + Ba | 0, Ca >>> 0 > ga >>> 0) : 0)
								break;
							fa = HEAP32[fa + 8 >> 2] | 0
						}
						fa = Aa + (Ba + -39) | 0;
						if (!(fa & 7))
							Da = 0;
						else
							Da = 0 - fa & 7;
						fa = Aa + (Ba + -47 + Da) | 0;
						$ = fa >>> 0 < (ga + 16 | 0) >>> 0 ? ga : fa;
						fa = $ + 8 | 0;
						aa = da + 8 | 0;
						if (!(aa & 7))
							Ea = 0;
						else
							Ea = 0 - aa & 7;
						aa = ea + -40 - Ea | 0;
						HEAP32[34998] = da + Ea;
						HEAP32[34995] = aa;
						HEAP32[da + (Ea + 4) >> 2] = aa | 1;
						HEAP32[da + (ea + -36) >> 2] = 40;
						HEAP32[34999] = HEAP32[35114];
						c[$ + 4 >> 2] = 27;
						HEAP32[fa + 0 >> 2] = HEAP32[35104];
						HEAP32[fa + 4 >> 2] = HEAP32[35105];
						HEAP32[fa + 8 >> 2] = HEAP32[35106];
						HEAP32[fa + 12 >> 2] = HEAP32[35107];
						HEAP32[35104] = da;
						HEAP32[35105] = ea;
						HEAP32[35107] = 0;
						HEAP32[35106] = fa;
						fa = $ + 28 | 0;
						HEAP32[fa >> 2] = 7;
						if (($ + 32 | 0) >>> 0 < Ca >>> 0) {
							aa = fa;
							do {
								fa = aa;
								aa = aa + 4 | 0;
								HEAP32[aa >> 2] = 7
							} while ((fa + 8 | 0) >>> 0 < Ca >>> 0)
						}
						if (($ | 0) != (ga | 0)) {
							aa = $ - ga | 0;
							fa = ga + (aa + 4) | 0;
							HEAP32[fa >> 2] = HEAP32[fa >> 2] & -2;
							HEAP32[ga + 4 >> 2] = aa | 1;
							HEAP32[ga + aa >> 2] = aa;
							fa = aa >>> 3;
							if (aa >>> 0 < 256) {
								M = fa << 1;
								ba = 140008 + (M << 2) | 0;
								N = HEAP32[34992] | 0;
								Z = 1 << fa;
								do
									if (!(N & Z)) {
										HEAP32[34992] = N | Z;
										Fa = 140008 + (M + 2 << 2) | 0;
										Ga = ba
									} else {
										fa = 140008 + (M + 2 << 2) | 0;
										V = HEAP32[fa >> 2] | 0;
										if (V >>> 0 >= (HEAP32[34996] | 0) >>> 0) {
											Fa = fa;
											Ga = V;
											break
										}
										Gb()
									}
								while (0);
								HEAP32[Fa >> 2] = ga;
								HEAP32[Ga + 12 >> 2] = ga;
								HEAP32[ga + 8 >> 2] = Ga;
								HEAP32[ga + 12 >> 2] = ba;
								break
							}
							M = aa >>> 8;
							if (M)
								if (aa >>> 0 > 16777215)
									Ha = 31;
								else {
									Z = (M + 1048320 | 0) >>> 16 & 8;
									N = M << Z;
									M = (N + 520192 | 0) >>> 16 & 4;
									$ = N << M;
									N = ($ + 245760 | 0) >>> 16 & 2;
									V = 14 - (M | Z | N) + ($ << N >>> 15) | 0;
									Ha = aa >>> (V + 7 | 0) & 1 | V << 1
								}
							else
								Ha = 0;
							V = 140272 + (Ha << 2) | 0;
							HEAP32[ga + 28 >> 2] = Ha;
							HEAP32[ga + 20 >> 2] = 0;
							HEAP32[ga + 16 >> 2] = 0;
							N = HEAP32[34993] | 0;
							$ = 1 << Ha;
							if (!(N & $)) {
								HEAP32[34993] = N | $;
								HEAP32[V >> 2] = ga;
								HEAP32[ga + 24 >> 2] = V;
								HEAP32[ga + 12 >> 2] = ga;
								HEAP32[ga + 8 >> 2] = ga;
								break
							}
							$ = HEAP32[V >> 2] | 0;
							if ((Ha | 0) == 31)
								Ia = 0;
							else
								Ia = 25 - (Ha >>> 1) | 0;
							k: do
								if ((c[$ + 4 >> 2] & -8 | 0) != (aa | 0)) {
									V = aa << Ia;
									N = $;
									while (1) {
										Ka = N + (V >>> 31 << 2) + 16 | 0;
										Z = HEAP32[Ka >> 2] | 0;
										if (!Z)
											break;
										if ((HEAP32[Z + 4 >> 2] & -8 | 0) == (aa | 0)) {
											La = Z;
											break k
										} else {
											V = V << 1;
											N = Z
										}
									}
									if (Ka >>> 0 < (HEAP32[34996] | 0) >>> 0)
										Gb();
									else {
										HEAP32[Ka >> 2] = ga;
										HEAP32[ga + 24 >> 2] = N;
										HEAP32[ga + 12 >> 2] = ga;
										HEAP32[ga + 8 >> 2] = ga;
										break g
									}
								} else
									La = $;
							while (0);
							$ = La + 8 | 0;
							aa = HEAP32[$ >> 2] | 0;
							ba = HEAP32[34996] | 0;
							if (La >>> 0 >= ba >>> 0 & aa >>> 0 >= ba >>> 0) {
								HEAP32[aa + 12 >> 2] = ga;
								c[$ >> 2] = ga;
								HEAP32[ga + 8 >> 2] = aa;
								HEAP32[ga + 12 >> 2] = La;
								HEAP32[ga + 24 >> 2] = 0;
								break
							} else
								Gb()
						}
					} else {
						aa = HEAP32[34996] | 0;
						if ((aa | 0) == 0 | da >>> 0 < aa >>> 0)
							HEAP32[34996] = da;
						HEAP32[35104] = da;
						HEAP32[35105] = ea;
						HEAP32[35107] = 0;
						HEAP32[35001] = HEAP32[35110];
						HEAP32[35e3] = -1;
						aa = 0;
						do {
							$ = aa << 1;
							ba = 140008 + ($ << 2) | 0;
							HEAP32[140008 + ($ + 3 << 2) >> 2] = ba;
							HEAP32[140008 + ($ + 2 << 2) >> 2] = ba;
							aa = aa + 1 | 0
						} while ((aa | 0) != 32);
						aa = da + 8 | 0;
						if (!(aa & 7))
							Na = 0;
						else
							Na = 0 - aa & 7;
						aa = ea + -40 - Na | 0;
						HEAP32[34998] = da + Na;
						HEAP32[34995] = aa;
						HEAP32[da + (Na + 4) >> 2] = aa | 1;
						HEAP32[da + (ea + -36) >> 2] = 40;
						HEAP32[34999] = HEAP32[35114]
					}
				while (0);
				ea = HEAP32[34995] | 0;
				if (ea >>> 0 > D >>> 0) {
					da = ea - D | 0;
					HEAP32[34995] = da;
					ea = HEAP32[34998] | 0;
					HEAP32[34998] = ea + D;
					HEAP32[ea + (D + 4) >> 2] = da | 1;
					HEAP32[ea + 4 >> 2] = D | 3;
					p = ea + 8 | 0;
					i = b;
					return p | 0
				}
			}
			c[(bc() | 0) >> 2] = 12;
			p = 0;
			i = b;
			return p | 0
		}
		function wx(a) {
			a = a | 0;
			var b = 0,
			d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0,
			I = 0,
			J = 0,
			K = 0;
			b = i;
			if (!a) {
				i = b;
				return
			}
			d = a + -8 | 0;
			e = HEAP32[34996] | 0;
			if (d >>> 0 < e >>> 0)
				Gb();
			f = HEAP32[a + -4 >> 2] | 0;
			g = f & 3;
			if ((g | 0) == 1)
				Gb();
			h = f & -8;
			j = a + (h + -8) | 0;
			do
				if (!(f & 1)) {
					k = HEAP32[d >> 2] | 0;
					if (!g) {
						i = b;
						return
					}
					l = -8 - k | 0;
					m = a + l | 0;
					n = k + h | 0;
					if (m >>> 0 < e >>> 0)
						Gb();
					if ((m | 0) == (HEAP32[34997] | 0)) {
						o = a + (h + -4) | 0;
						p = HEAP32[o >> 2] | 0;
						if ((p & 3 | 0) != 3) {
							q = m;
							r = n;
							break
						}
						HEAP32[34994] = n;
						HEAP32[o >> 2] = p & -2;
						HEAP32[a + (l + 4) >> 2] = n | 1;
						HEAP32[j >> 2] = n;
						i = b;
						return
					}
					p = k >>> 3;
					if (k >>> 0 < 256) {
						k = HEAP32[a + (l + 8) >> 2] | 0;
						o = HEAP32[a + (l + 12) >> 2] | 0;
						s = 140008 + (p << 1 << 2) | 0;
						if ((k | 0) != (s | 0)) {
							if (k >>> 0 < e >>> 0)
								Gb();
							if ((HEAP32[k + 12 >> 2] | 0) != (m | 0))
								Gb()
						}
						if ((o | 0) == (k | 0)) {
							HEAP32[34992] = HEAP32[34992] & ~(1 << p);
							q = m;
							r = n;
							break
						}
						if ((o | 0) != (s | 0)) {
							if (o >>> 0 < e >>> 0)
								Gb();
							s = o + 8 | 0;
							if ((HEAP32[s >> 2] | 0) == (m | 0))
								t = s;
							else
								Gb()
						} else
							t = o + 8 | 0;
						HEAP32[k + 12 >> 2] = o;
						HEAP32[t >> 2] = k;
						q = m;
						r = n;
						break
					}
					k = HEAP32[a + (l + 24) >> 2] | 0;
					o = HEAP32[a + (l + 12) >> 2] | 0;
					do
						if ((o | 0) == (m | 0)) {
							s = a + (l + 20) | 0;
							p = HEAP32[s >> 2] | 0;
							if (!p) {
								u = a + (l + 16) | 0;
								v = HEAP32[u >> 2] | 0;
								if (!v) {
									w = 0;
									break
								} else {
									x = v;
									y = u
								}
							} else {
								x = p;
								y = s
							}
							while (1) {
								s = x + 20 | 0;
								p = HEAP32[s >> 2] | 0;
								if (p) {
									x = p;
									y = s;
									continue
								}
								s = x + 16 | 0;
								p = HEAP32[s >> 2] | 0;
								if (!p)
									break;
								else {
									x = p;
									y = s
								}
							}
							if (y >>> 0 < e >>> 0)
								Gb();
							else {
								HEAP32[y >> 2] = 0;
								w = x;
								break
							}
						} else {
							s = HEAP32[a + (l + 8) >> 2] | 0;
							if (s >>> 0 < e >>> 0)
								Gb();
							p = s + 12 | 0;
							if ((HEAP32[p >> 2] | 0) != (m | 0))
								Gb();
							u = o + 8 | 0;
							if ((HEAP32[u >> 2] | 0) == (m | 0)) {
								HEAP32[p >> 2] = o;
								HEAP32[u >> 2] = s;
								w = o;
								break
							} else
								Gb()
						}
					while (0);
					if (k) {
						o = HEAP32[a + (l + 28) >> 2] | 0;
						s = 140272 + (o << 2) | 0;
						if ((m | 0) == (HEAP32[s >> 2] | 0)) {
							HEAP32[s >> 2] = w;
							if (!w) {
								HEAP32[34993] = HEAP32[34993] & ~(1 << o);
								q = m;
								r = n;
								break
							}
						} else {
							if (k >>> 0 < (HEAP32[34996] | 0) >>> 0)
								Gb();
							o = k + 16 | 0;
							if ((HEAP32[o >> 2] | 0) == (m | 0))
								HEAP32[o >> 2] = w;
							else
								HEAP32[k + 20 >> 2] = w;
							if (!w) {
								q = m;
								r = n;
								break
							}
						}
						o = HEAP32[34996] | 0;
						if (w >>> 0 < o >>> 0)
							Gb();
						HEAP32[w + 24 >> 2] = k;
						s = HEAP32[a + (l + 16) >> 2] | 0;
						do
							if (s)
								if (s >>> 0 < o >>> 0)
									Gb();
								else {
									HEAP32[w + 16 >> 2] = s;
									HEAP32[s + 24 >> 2] = w;
									break
								}
						while (0);
						s = HEAP32[a + (l + 20) >> 2] | 0;
						if (s)
							if (s >>> 0 < (HEAP32[34996] | 0) >>> 0)
								Gb();
							else {
								HEAP32[w + 20 >> 2] = s;
								HEAP32[s + 24 >> 2] = w;
								q = m;
								r = n;
								break
							}
						else {
							q = m;
							r = n
						}
					} else {
						q = m;
						r = n
					}
				} else {
					q = d;
					r = h
				}
			while (0);
			if (q >>> 0 >= j >>> 0)
				Gb();
			d = a + (h + -4) | 0;
			w = HEAP32[d >> 2] | 0;
			if (!(w & 1))
				Gb();
			if (!(w & 2)) {
				if ((j | 0) == (HEAP32[34998] | 0)) {
					e = (HEAP32[34995] | 0) + r | 0;
					HEAP32[34995] = e;
					HEAP32[34998] = q;
					HEAP32[q + 4 >> 2] = e | 1;
					if ((q | 0) != (HEAP32[34997] | 0)) {
						i = b;
						return
					}
					HEAP32[34997] = 0;
					HEAP32[34994] = 0;
					i = b;
					return
				}
				if ((j | 0) == (HEAP32[34997] | 0)) {
					e = (HEAP32[34994] | 0) + r | 0;
					HEAP32[34994] = e;
					HEAP32[34997] = q;
					HEAP32[q + 4 >> 2] = e | 1;
					HEAP32[q + e >> 2] = e;
					i = b;
					return
				}
				e = (w & -8) + r | 0;
				x = w >>> 3;
				do
					if (w >>> 0 >= 256) {
						y = HEAP32[a + (h + 16) >> 2] | 0;
						t = HEAP32[a + (h | 4) >> 2] | 0;
						do
							if ((t | 0) == (j | 0)) {
								g = a + (h + 12) | 0;
								f = HEAP32[g >> 2] | 0;
								if (!f) {
									s = a + (h + 8) | 0;
									o = HEAP32[s >> 2] | 0;
									if (!o) {
										z = 0;
										break
									} else {
										A = o;
										B = s
									}
								} else {
									A = f;
									B = g
								}
								while (1) {
									g = A + 20 | 0;
									f = HEAP32[g >> 2] | 0;
									if (f) {
										A = f;
										B = g;
										continue
									}
									g = A + 16 | 0;
									f = HEAP32[g >> 2] | 0;
									if (!f)
										break;
									else {
										A = f;
										B = g
									}
								}
								if (B >>> 0 < (HEAP32[34996] | 0) >>> 0)
									Gb();
								else {
									HEAP32[B >> 2] = 0;
									z = A;
									break
								}
							} else {
								g = HEAP32[a + h >> 2] | 0;
								if (g >>> 0 < (HEAP32[34996] | 0) >>> 0)
									Gb();
								f = g + 12 | 0;
								if ((HEAP32[f >> 2] | 0) != (j | 0))
									Gb();
								s = t + 8 | 0;
								if ((HEAP32[s >> 2] | 0) == (j | 0)) {
									HEAP32[f >> 2] = t;
									HEAP32[s >> 2] = g;
									z = t;
									break
								} else
									Gb()
							}
						while (0);
						if (y) {
							t = HEAP32[a + (h + 20) >> 2] | 0;
							n = 140272 + (t << 2) | 0;
							if ((j | 0) == (HEAP32[n >> 2] | 0)) {
								HEAP32[n >> 2] = z;
								if (!z) {
									HEAP32[34993] = HEAP32[34993] & ~(1 << t);
									break
								}
							} else {
								if (y >>> 0 < (HEAP32[34996] | 0) >>> 0)
									Gb();
								t = y + 16 | 0;
								if ((HEAP32[t >> 2] | 0) == (j | 0))
									HEAP32[t >> 2] = z;
								else
									HEAP32[y + 20 >> 2] = z;
								if (!z)
									break
							}
							t = HEAP32[34996] | 0;
							if (z >>> 0 < t >>> 0)
								Gb();
							HEAP32[z + 24 >> 2] = y;
							n = HEAP32[a + (h + 8) >> 2] | 0;
							do
								if (n)
									if (n >>> 0 < t >>> 0)
										Gb();
									else {
										HEAP32[z + 16 >> 2] = n;
										HEAP32[n + 24 >> 2] = z;
										break
									}
							while (0);
							n = HEAP32[a + (h + 12) >> 2] | 0;
							if (n)
								if (n >>> 0 < (HEAP32[34996] | 0) >>> 0)
									Gb();
								else {
									HEAP32[z + 20 >> 2] = n;
									HEAP32[n + 24 >> 2] = z;
									break
								}
						}
					} else {
						n = HEAP32[a + h >> 2] | 0;
						t = HEAP32[a + (h | 4) >> 2] | 0;
						y = 140008 + (x << 1 << 2) | 0;
						if ((n | 0) != (y | 0)) {
							if (n >>> 0 < (HEAP32[34996] | 0) >>> 0)
								Gb();
							if ((HEAP32[n + 12 >> 2] | 0) != (j | 0))
								Gb()
						}
						if ((t | 0) == (n | 0)) {
							HEAP32[34992] = HEAP32[34992] & ~(1 << x);
							break
						}
						if ((t | 0) != (y | 0)) {
							if (t >>> 0 < (HEAP32[34996] | 0) >>> 0)
								Gb();
							y = t + 8 | 0;
							if ((HEAP32[y >> 2] | 0) == (j | 0))
								C = y;
							else
								Gb()
						} else
							C = t + 8 | 0;
						HEAP32[n + 12 >> 2] = t;
						HEAP32[C >> 2] = n
					}
				while (0);
				HEAP32[q + 4 >> 2] = e | 1;
				HEAP32[q + e >> 2] = e;
				if ((q | 0) == (HEAP32[34997] | 0)) {
					HEAP32[34994] = e;
					i = b;
					return
				} else
					D = e
			} else {
				HEAP32[d >> 2] = w & -2;
				HEAP32[q + 4 >> 2] = r | 1;
				HEAP32[q + r >> 2] = r;
				D = r
			}
			r = D >>> 3;
			if (D >>> 0 < 256) {
				w = r << 1;
				d = 140008 + (w << 2) | 0;
				e = HEAP32[34992] | 0;
				C = 1 << r;
				if (e & C) {
					r = 140008 + (w + 2 << 2) | 0;
					j = HEAP32[r >> 2] | 0;
					if (j >>> 0 < (HEAP32[34996] | 0) >>> 0)
						Gb();
					else {
						E = r;
						F = j
					}
				} else {
					HEAP32[34992] = e | C;
					E = 140008 + (w + 2 << 2) | 0;
					F = d
				}
				HEAP32[E >> 2] = q;
				HEAP32[F + 12 >> 2] = q;
				HEAP32[q + 8 >> 2] = F;
				HEAP32[q + 12 >> 2] = d;
				i = b;
				return
			}
			d = D >>> 8;
			if (d)
				if (D >>> 0 > 16777215)
					G = 31;
				else {
					F = (d + 1048320 | 0) >>> 16 & 8;
					E = d << F;
					d = (E + 520192 | 0) >>> 16 & 4;
					w = E << d;
					E = (w + 245760 | 0) >>> 16 & 2;
					C = 14 - (d | F | E) + (w << E >>> 15) | 0;
					G = D >>> (C + 7 | 0) & 1 | C << 1
				}
			else
				G = 0;
			C = 140272 + (G << 2) | 0;
			HEAP32[q + 28 >> 2] = G;
			HEAP32[q + 20 >> 2] = 0;
			HEAP32[q + 16 >> 2] = 0;
			E = HEAP32[34993] | 0;
			w = 1 << G;
			a: do
				if (E & w) {
					F = HEAP32[C >> 2] | 0;
					if ((G | 0) == 31)
						H = 0;
					else
						H = 25 - (G >>> 1) | 0;
					b: do
						if ((HEAP32[F + 4 >> 2] & -8 | 0) != (D | 0)) {
							d = D << H;
							e = F;
							while (1) {
								I = e + (d >>> 31 << 2) + 16 | 0;
								j = HEAP32[I >> 2] | 0;
								if (!j)
									break;
								if ((HEAP32[j + 4 >> 2] & -8 | 0) == (D | 0)) {
									J = j;
									break b
								} else {
									d = d << 1;
									e = j
								}
							}
							if (I >>> 0 < (HEAP32[34996] | 0) >>> 0)
								Gb();
							else {
								HEAP32[I >> 2] = q;
								HEAP32[q + 24 >> 2] = e;
								HEAP32[q + 12 >> 2] = q;
								HEAP32[q + 8 >> 2] = q;
								break a
							}
						} else
							J = F;
					while (0);
					F = J + 8 | 0;
					d = HEAP32[F >> 2] | 0;
					j = HEAP32[34996] | 0;
					if (J >>> 0 >= j >>> 0 & d >>> 0 >= j >>> 0) {
						HEAP32[d + 12 >> 2] = q;
						HEAP32[F >> 2] = q;
						HEAP32[q + 8 >> 2] = d;
						HEAP32[q + 12 >> 2] = J;
						HEAP32[q + 24 >> 2] = 0;
						break
					} else
						Gb()
				} else {
					HEAP32[34993] = E | w;
					HEAP32[C >> 2] = q;
					HEAP32[q + 24 >> 2] = C;
					HEAP32[q + 12 >> 2] = q;
					HEAP32[q + 8 >> 2] = q
				}
			while (0);
			q = (HEAP32[35e3] | 0) + -1 | 0;
			HEAP32[35e3] = q;
			if (!q)
				K = 140424 | 0;
			else {
				i = b;
				return
			}
			while (1) {
				q = HEAP32[K >> 2] | 0;
				if (!q)
					break;
				else
					K = q + 8 | 0
			}
			HEAP32[35e3] = -1;
			i = b;
			return
		}
		function xx(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0;
			d = i;
			if (a) {
				e = da(b, a) | 0;
				if ((b | a) >>> 0 > 65535)
					f = ((e >>> 0) / (a >>> 0) | 0 | 0) == (b | 0) ? e : -1;
				else
					f = e
			} else
				f = 0;
			e = vx(f) | 0;
			if (!e) {
				i = d;
				return e | 0
			}
			if (!(HEAP32[e + -4 >> 2] & 3)) {
				i = d;
				return e | 0
			}
			sy(e | 0, 0, f | 0) | 0;
			i = d;
			return e | 0
		}
		function yx(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0;
			d = i;
			do
				if (a) {
					if (b >>> 0 > 4294967231) {
						c[(bc() | 0) >> 2] = 12;
						e = 0;
						break
					}
					if (b >>> 0 < 11)
						f = 16;
					else
						f = b + 11 & -8;
					g = dy(a + -8 | 0, f) | 0;
					if (g) {
						e = g + 8 | 0;
						break
					}
					g = vx(b) | 0;
					if (!g)
						e = 0;
					else {
						h = HEAP32[a + -4 >> 2] | 0;
						j = (h & -8) - ((h & 3 | 0) == 0 ? 8 : 4) | 0;
						qy(g | 0, a | 0, (j >>> 0 < b >>> 0 ? j : b) | 0) | 0;
						wx(a);
						e = g
					}
				} else
					e = vx(b) | 0;
			while (0);
			i = d;
			return e | 0
		}
		function zx(a, b) {
			a = a | 0;
			b = b | 0;
			var c = 0,
			d = 0;
			c = i;
			if (a >>> 0 < 9)
				d = vx(b) | 0;
			else
				d = ey(a, b) | 0;
			i = c;
			return d | 0
		}
		function Ax(a) {
			a = a | 0;
			return (a + -48 | 0) >>> 0 < 10 | 0
		}
		function Bx(a) {
			a = a | 0;
			var b = 0;
			if ((a | 0) == 32)
				b = 1;
			else
				b = (a + -9 | 0) >>> 0 < 5;
			return b & 1 | 0
		}
		function Cx(a) {
			a = a | 0;
			var b = 0;
			if ((a + -48 | 0) >>> 0 < 10)
				b = 1;
			else
				b = ((a | 32) + -97 | 0) >>> 0 < 6;
			return b & 1 | 0
		}
		function Dx(b, e, f, g, h) {
			b = b | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			var j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0,
			O = 0,
			P = 0,
			Q = 0,
			R = 0,
			S = 0,
			T = 0,
			U = 0,
			V = 0,
			W = 0,
			X = 0,
			Y = 0,
			Z = 0,
			_ = 0,
			$ = 0,
			aa = 0,
			ba = 0,
			ca = 0,
			ea = 0,
			fa = 0,
			ga = 0;
			j = i;
			if (e >>> 0 > 36) {
				c[(bc() | 0) >> 2] = 22;
				k = 0;
				l = 0;
				H = k;
				i = j;
				return l | 0
			}
			m = b + 4 | 0;
			n = b + 100 | 0;
			do {
				o = HEAP32[m >> 2] | 0;
				if (o >>> 0 < (HEAP32[n >> 2] | 0) >>> 0) {
					HEAP32[m >> 2] = o + 1;
					p = HEAPU8[o >> 0] | 0
				} else
					p = Gx(b) | 0
			} while ((Bx(p) | 0) != 0);
			do
				if ((p | 0) == 43 | (p | 0) == 45) {
					o = ((p | 0) == 45) << 31 >> 31;
					q = HEAP32[m >> 2] | 0;
					if (q >>> 0 < (HEAP32[n >> 2] | 0) >>> 0) {
						HEAP32[m >> 2] = q + 1;
						r = HEAPU8[q >> 0] | 0;
						s = o;
						break
					} else {
						r = Gx(b) | 0;
						s = o;
						break
					}
				} else {
					r = p;
					s = 0
				}
			while (0);
			p = (e | 0) == 0;
			do
				if ((e & -17 | 0) == 0 & (r | 0) == 48) {
					o = HEAP32[m >> 2] | 0;
					if (o >>> 0 < (HEAP32[n >> 2] | 0) >>> 0) {
						HEAP32[m >> 2] = o + 1;
						t = HEAPU8[o >> 0] | 0
					} else
						t = Gx(b) | 0;
					if ((t | 32 | 0) != 120)
						if (p) {
							u = 8;
							v = t;
							w = 46;
							break
						} else {
							x = e;
							y = t;
							w = 32;
							break
						}
					o = HEAP32[m >> 2] | 0;
					if (o >>> 0 < (HEAP32[n >> 2] | 0) >>> 0) {
						HEAP32[m >> 2] = o + 1;
						z = HEAPU8[o >> 0] | 0
					} else
						z = Gx(b) | 0;
					if ((HEAPU8[z + 140465 >> 0] | 0) > 15) {
						o = (HEAP32[n >> 2] | 0) == 0;
						if (!o)
							HEAP32[m >> 2] = (HEAP32[m >> 2] | 0) + -1;
						if (!f) {
							Fx(b, 0);
							k = 0;
							l = 0;
							H = k;
							i = j;
							return l | 0
						}
						if (o) {
							k = 0;
							l = 0;
							H = k;
							i = j;
							return l | 0
						}
						HEAP32[m >> 2] = (HEAP32[m >> 2] | 0) + -1;
						k = 0;
						l = 0;
						H = k;
						i = j;
						return l | 0
					} else {
						u = 16;
						v = z;
						w = 46
					}
				} else {
					o = p ? 10 : e;
					if ((HEAPU8[r + 140465 >> 0] | 0) >>> 0 < o >>> 0) {
						x = o;
						y = r;
						w = 32
					} else {
						if (HEAP32[n >> 2] | 0)
							HEAP32[m >> 2] = (HEAP32[m >> 2] | 0) + -1;
						Fx(b, 0);
						c[(bc() | 0) >> 2] = 22;
						k = 0;
						l = 0;
						H = k;
						i = j;
						return l | 0
					}
				}
			while (0);
			if ((w | 0) == 32)
				if ((x | 0) == 10) {
					r = y + -48 | 0;
					if (r >>> 0 < 10) {
						e = r;
						r = 0;
						do {
							r = (r * 10 | 0) + e | 0;
							p = HEAP32[m >> 2] | 0;
							if (p >>> 0 < (HEAP32[n >> 2] | 0) >>> 0) {
								HEAP32[m >> 2] = p + 1;
								A = HEAPU8[p >> 0] | 0
							} else
								A = Gx(b) | 0;
							e = A + -48 | 0
						} while (e >>> 0 < 10 & r >>> 0 < 429496729);
						B = r;
						C = 0;
						D = A
					} else {
						B = 0;
						C = 0;
						D = y
					}
					A = D + -48 | 0;
					if (A >>> 0 < 10) {
						r = B;
						e = C;
						p = A;
						A = D;
						while (1) {
							D = By(r | 0, e | 0, 10, 0) | 0;
							z = H;
							f = ((p | 0) < 0) << 31 >> 31;
							t = ~f;
							if (z >>> 0 > t >>> 0 | (z | 0) == (t | 0) & D >>> 0 > ~p >>> 0) {
								E = p;
								F = r;
								G = e;
								I = A;
								break
							}
							t = ky(D | 0, z | 0, p | 0, f | 0) | 0;
							f = H;
							z = HEAP32[m >> 2] | 0;
							if (z >>> 0 < (HEAP32[n >> 2] | 0) >>> 0) {
								HEAP32[m >> 2] = z + 1;
								J = HEAPU8[z >> 0] | 0
							} else
								J = Gx(b) | 0;
							z = J + -48 | 0;
							if (z >>> 0 < 10 & (f >>> 0 < 429496729 | (f | 0) == 429496729 & t >>> 0 < 2576980378)) {
								r = t;
								e = f;
								p = z;
								A = J
							} else {
								E = z;
								F = t;
								G = f;
								I = J;
								break
							}
						}
						if (E >>> 0 > 9) {
							K = G;
							L = F
						} else {
							M = 10;
							N = F;
							O = G;
							P = I;
							w = 72
						}
					} else {
						K = C;
						L = B
					}
				} else {
					u = x;
					v = y;
					w = 46
				}
			a: do
				if ((w | 0) == 46) {
					if (!(u + -1 & u)) {
						y = HEAP8[140728 + ((u * 23 | 0) >>> 5 & 7) >> 0] | 0;
						x = HEAP8[v + 140465 >> 0] | 0;
						B = x & 255;
						if (B >>> 0 < u >>> 0) {
							C = B;
							B = 0;
							do {
								B = C | B << y;
								I = HEAP32[m >> 2] | 0;
								if (I >>> 0 < (HEAP32[n >> 2] | 0) >>> 0) {
									HEAP32[m >> 2] = I + 1;
									Q = HEAPU8[I >> 0] | 0
								} else
									Q = Gx(b) | 0;
								R = HEAP8[Q + 140465 >> 0] | 0;
								C = R & 255
							} while (C >>> 0 < u >>> 0 & B >>> 0 < 134217728);
							S = R;
							T = 0;
							U = B;
							V = Q
						} else {
							S = x;
							T = 0;
							U = 0;
							V = v
						}
						C = ny(-1, -1, y | 0) | 0;
						I = H;
						if ((S & 255) >>> 0 >= u >>> 0 | (T >>> 0 > I >>> 0 | (T | 0) == (I | 0) & U >>> 0 > C >>> 0)) {
							M = u;
							N = U;
							O = T;
							P = V;
							w = 72;
							break
						} else {
							W = U;
							X = T;
							Y = S
						}
						while (1) {
							G = ty(W | 0, X | 0, y | 0) | 0;
							F = H;
							E = Y & 255 | G;
							G = HEAP32[m >> 2] | 0;
							if (G >>> 0 < (HEAP32[n >> 2] | 0) >>> 0) {
								HEAP32[m >> 2] = G + 1;
								Z = HEAPU8[G >> 0] | 0
							} else
								Z = Gx(b) | 0;
							Y = HEAP8[Z + 140465 >> 0] | 0;
							if ((Y & 255) >>> 0 >= u >>> 0 | (F >>> 0 > I >>> 0 | (F | 0) == (I | 0) & E >>> 0 > C >>> 0)) {
								M = u;
								N = E;
								O = F;
								P = Z;
								w = 72;
								break a
							} else {
								W = E;
								X = F
							}
						}
					}
					C = HEAP8[v + 140465 >> 0] | 0;
					I = C & 255;
					if (I >>> 0 < u >>> 0) {
						y = I;
						I = 0;
						do {
							I = y + (da(I, u) | 0) | 0;
							x = HEAP32[m >> 2] | 0;
							if (x >>> 0 < (HEAP32[n >> 2] | 0) >>> 0) {
								HEAP32[m >> 2] = x + 1;
								_ = HEAPU8[x >> 0] | 0
							} else
								_ = Gx(b) | 0;
							$ = HEAP8[_ + 140465 >> 0] | 0;
							y = $ & 255
						} while (y >>> 0 < u >>> 0 & I >>> 0 < 119304647);
						aa = $;
						ba = I;
						ca = 0;
						ea = _
					} else {
						aa = C;
						ba = 0;
						ca = 0;
						ea = v
					}
					if ((aa & 255) >>> 0 < u >>> 0) {
						y = Cy(-1, -1, u | 0, 0) | 0;
						x = H;
						B = ca;
						F = ba;
						E = aa;
						G = ea;
						while (1) {
							if (B >>> 0 > x >>> 0 | (B | 0) == (x | 0) & F >>> 0 > y >>> 0) {
								M = u;
								N = F;
								O = B;
								P = G;
								w = 72;
								break a
							}
							J = By(F | 0, B | 0, u | 0, 0) | 0;
							A = H;
							p = E & 255;
							if (A >>> 0 > 4294967295 | (A | 0) == -1 & J >>> 0 > ~p >>> 0) {
								M = u;
								N = F;
								O = B;
								P = G;
								w = 72;
								break a
							}
							e = ky(p | 0, 0, J | 0, A | 0) | 0;
							A = H;
							J = HEAP32[m >> 2] | 0;
							if (J >>> 0 < (HEAP32[n >> 2] | 0) >>> 0) {
								HEAP32[m >> 2] = J + 1;
								fa = HEAPU8[J >> 0] | 0
							} else
								fa = Gx(b) | 0;
							E = HEAP8[fa + 140465 >> 0] | 0;
							if ((E & 255) >>> 0 >= u >>> 0) {
								M = u;
								N = e;
								O = A;
								P = fa;
								w = 72;
								break
							} else {
								B = A;
								F = e;
								G = fa
							}
						}
					} else {
						M = u;
						N = ba;
						O = ca;
						P = ea;
						w = 72
					}
				}
			while (0);
			if ((w | 0) == 72)
				if ((HEAPU8[P + 140465 >> 0] | 0) >>> 0 < M >>> 0) {
					do {
						P = HEAP32[m >> 2] | 0;
						if (P >>> 0 < (HEAP32[n >> 2] | 0) >>> 0) {
							HEAP32[m >> 2] = P + 1;
							ga = HEAPU8[P >> 0] | 0
						} else
							ga = Gx(b) | 0
					} while ((HEAPU8[ga + 140465 >> 0] | 0) >>> 0 < M >>> 0);
					c[(bc() | 0) >> 2] = 34;
					K = h;
					L = g
				} else {
					K = O;
					L = N
				}
			if (HEAP32[n >> 2] | 0)
				HEAP32[m >> 2] = (HEAP32[m >> 2] | 0) + -1;
			if (!(K >>> 0 < h >>> 0 | (K | 0) == (h | 0) & L >>> 0 < g >>> 0)) {
				if (!((g & 1 | 0) != 0 | 0 != 0 | (s | 0) != 0)) {
					c[(bc() | 0) >> 2] = 34;
					m = ky(g | 0, h | 0, -1, -1) | 0;
					k = H;
					l = m;
					H = k;
					i = j;
					return l | 0
				}
				if (K >>> 0 > h >>> 0 | (K | 0) == (h | 0) & L >>> 0 > g >>> 0) {
					c[(bc() | 0) >> 2] = 34;
					k = h;
					l = g;
					H = k;
					i = j;
					return l | 0
				}
			}
			g = ((s | 0) < 0) << 31 >> 31;
			h = ly(L ^ s | 0, K ^ g | 0, s | 0, g | 0) | 0;
			k = H;
			l = h;
			H = k;
			i = j;
			return l | 0
		}
		function Ex(b, e, f) {
			b = b | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0.0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0,
			O = 0,
			P = 0,
			Q = 0,
			R = 0,
			T = 0.0,
			U = 0,
			V = 0.0,
			W = 0,
			X = 0,
			Y = 0,
			Z = 0,
			_ = 0,
			$ = 0,
			aa = 0,
			ba = 0,
			ca = 0,
			ea = 0,
			fa = 0.0,
			ga = 0,
			ha = 0.0,
			ia = 0,
			ja = 0.0,
			ka = 0,
			la = 0.0,
			ma = 0,
			na = 0.0,
			oa = 0,
			pa = 0,
			qa = 0,
			ra = 0,
			sa = 0,
			ta = 0,
			ua = 0.0,
			va = 0,
			wa = 0.0,
			xa = 0,
			ya = 0,
			za = 0,
			Aa = 0,
			Ba = 0.0,
			Ca = 0,
			Da = 0,
			Ea = 0,
			Fa = 0.0,
			Ga = 0.0,
			Ha = 0,
			Ia = 0,
			Ja = 0,
			Ka = 0,
			La = 0,
			Ma = 0,
			Na = 0,
			Oa = 0,
			Pa = 0,
			Qa = 0,
			Ra = 0,
			Sa = 0,
			Ta = 0,
			Ua = 0,
			Va = 0,
			Wa = 0,
			Xa = 0,
			Ya = 0,
			Za = 0,
			_a = 0,
			$a = 0,
			ab = 0,
			bb = 0,
			cb = 0,
			db = 0,
			eb = 0,
			fb = 0,
			gb = 0,
			hb = 0,
			ib = 0,
			jb = 0,
			kb = 0,
			lb = 0,
			mb = 0,
			nb = 0,
			ob = 0,
			pb = 0,
			qb = 0,
			rb = 0,
			sb = 0,
			tb = 0,
			ub = 0,
			vb = 0,
			wb = 0,
			xb = 0,
			yb = 0,
			zb = 0,
			Ab = 0,
			Bb = 0,
			Cb = 0,
			Db = 0,
			Eb = 0,
			Fb = 0,
			Gb = 0,
			Hb = 0,
			Ib = 0,
			Jb = 0,
			Kb = 0,
			Lb = 0,
			Mb = 0,
			Nb = 0,
			Ob = 0,
			Pb = 0,
			Qb = 0,
			Rb = 0,
			Sb = 0,
			Tb = 0,
			Ub = 0,
			Vb = 0,
			Wb = 0,
			Xb = 0,
			Yb = 0,
			Zb = 0,
			_b = 0,
			$b = 0,
			ac = 0,
			cc = 0,
			dc = 0,
			ec = 0,
			fc = 0,
			gc = 0,
			hc = 0,
			ic = 0,
			jc = 0,
			kc = 0,
			lc = 0,
			mc = 0,
			nc = 0,
			oc = 0,
			pc = 0,
			qc = 0,
			rc = 0,
			sc = 0,
			tc = 0,
			uc = 0,
			vc = 0,
			wc = 0,
			xc = 0,
			yc = 0,
			zc = 0,
			Ac = 0,
			Bc = 0,
			Cc = 0,
			Dc = 0,
			Ec = 0,
			Fc = 0.0,
			Gc = 0,
			Hc = 0,
			Ic = 0,
			Jc = 0,
			Kc = 0,
			Lc = 0.0,
			Mc = 0,
			Nc = 0.0,
			Oc = 0.0,
			Pc = 0.0,
			Qc = 0.0,
			Rc = 0.0,
			Sc = 0,
			Tc = 0,
			Uc = 0.0,
			Vc = 0,
			Wc = 0.0;
			g = i;
			i = i + 512 | 0;
			h = g;
			if ((e | 0) == 2) {
				j = 53;
				k = -1074
			} else if (!e) {
				j = 24;
				k = -149
			} else if ((e | 0) == 1) {
				j = 53;
				k = -1074
			} else {
				l = 0.0;
				i = g;
				return +l
			}
			e = b + 4 | 0;
			m = b + 100 | 0;
			do {
				n = HEAP32[e >> 2] | 0;
				if (n >>> 0 < (HEAP32[m >> 2] | 0) >>> 0) {
					HEAP32[e >> 2] = n + 1;
					o = HEAPU8[n >> 0] | 0
				} else
					o = Gx(b) | 0
			} while ((Bx(o) | 0) != 0);
			do
				if ((o | 0) == 43 | (o | 0) == 45) {
					n = 1 - (((o | 0) == 45 & 1) << 1) | 0;
					p = HEAP32[e >> 2] | 0;
					if (p >>> 0 < (HEAP32[m >> 2] | 0) >>> 0) {
						HEAP32[e >> 2] = p + 1;
						q = HEAPU8[p >> 0] | 0;
						r = n;
						break
					} else {
						q = Gx(b) | 0;
						r = n;
						break
					}
				} else {
					q = o;
					r = 1
				}
			while (0);
			o = q;
			q = 0;
			while (1) {
				if ((o | 32 | 0) != (HEAP8[140744 + q >> 0] | 0)) {
					s = o;
					t = q;
					break
				}
				do
					if (q >>> 0 < 7) {
						n = HEAP32[e >> 2] | 0;
						if (n >>> 0 < (HEAP32[m >> 2] | 0) >>> 0) {
							HEAP32[e >> 2] = n + 1;
							u = HEAPU8[n >> 0] | 0;
							break
						} else {
							u = Gx(b) | 0;
							break
						}
					} else
						u = o;
				while (0);
				n = q + 1 | 0;
				if (n >>> 0 < 8) {
					o = u;
					q = n
				} else {
					s = u;
					t = n;
					break
				}
			}
			do
				if ((t | 0) == 3)
					v = 23;
				else if ((t | 0) != 8) {
					u = (f | 0) != 0;
					if (t >>> 0 > 3 & u)
						if ((t | 0) == 8)
							break;
						else {
							v = 23;
							break
						}
					a: do
						if (!t) {
							q = s;
							o = 0;
							while (1) {
								if ((q | 32 | 0) != (HEAP8[140760 + o >> 0] | 0)) {
									y = q;
									z = o;
									break a
								}
								do
									if (o >>> 0 < 2) {
										n = HEAP32[e >> 2] | 0;
										if (n >>> 0 < (HEAP32[m >> 2] | 0) >>> 0) {
											HEAP32[e >> 2] = n + 1;
											A = HEAPU8[n >> 0] | 0;
											break
										} else {
											A = Gx(b) | 0;
											break
										}
									} else
										A = q;
								while (0);
								n = o + 1 | 0;
								if (n >>> 0 < 3) {
									q = A;
									o = n
								} else {
									y = A;
									z = n;
									break
								}
							}
						} else {
							y = s;
							z = t
						}
					while (0);
					if ((z | 0) == 3) {
						o = HEAP32[e >> 2] | 0;
						if (o >>> 0 < (HEAP32[m >> 2] | 0) >>> 0) {
							HEAP32[e >> 2] = o + 1;
							B = HEAPU8[o >> 0] | 0
						} else
							B = Gx(b) | 0;
						if ((B | 0) == 40)
							C = 1;
						else {
							if (!(HEAP32[m >> 2] | 0)) {
								l = w;
								i = g;
								return +l
							}
							HEAP32[e >> 2] = (HEAP32[e >> 2] | 0) + -1;
							l = w;
							i = g;
							return +l
						}
						while (1) {
							o = HEAP32[e >> 2] | 0;
							if (o >>> 0 < (HEAP32[m >> 2] | 0) >>> 0) {
								HEAP32[e >> 2] = o + 1;
								D = HEAPU8[o >> 0] | 0
							} else
								D = Gx(b) | 0;
							if (!((D + -48 | 0) >>> 0 < 10 | (D + -65 | 0) >>> 0 < 26) ? !((D + -97 | 0) >>> 0 < 26 | (D | 0) == 95) : 0)
								break;
							C = C + 1 | 0
						}
						if ((D | 0) == 41) {
							l = w;
							i = g;
							return +l
						}
						o = (HEAP32[m >> 2] | 0) == 0;
						if (!o)
							HEAP32[e >> 2] = (HEAP32[e >> 2] | 0) + -1;
						if (!u) {
							c[(bc() | 0) >> 2] = 22;
							Fx(b, 0);
							l = 0.0;
							i = g;
							return +l
						}
						if ((C | 0) == 0 | o) {
							l = w;
							i = g;
							return +l
						} else
							E = C;
						do {
							E = E + -1 | 0;
							HEAP32[e >> 2] = (HEAP32[e >> 2] | 0) + -1
						} while ((E | 0) != 0);
						l = w;
						i = g;
						return +l
					} else if (!z) {
						do
							if ((y | 0) == 48) {
								u = HEAP32[e >> 2] | 0;
								if (u >>> 0 < (HEAP32[m >> 2] | 0) >>> 0) {
									HEAP32[e >> 2] = u + 1;
									F = HEAPU8[u >> 0] | 0
								} else
									F = Gx(b) | 0;
								if ((F | 32 | 0) != 120) {
									if (!(HEAP32[m >> 2] | 0)) {
										G = 48;
										break
									}
									HEAP32[e >> 2] = (HEAP32[e >> 2] | 0) + -1;
									G = 48;
									break
								}
								u = HEAP32[e >> 2] | 0;
								if (u >>> 0 < (HEAP32[m >> 2] | 0) >>> 0) {
									HEAP32[e >> 2] = u + 1;
									I = HEAPU8[u >> 0] | 0;
									J = 0
								} else {
									I = Gx(b) | 0;
									J = 0
								}
								while (1) {
									if ((I | 0) == 46) {
										v = 70;
										break
									} else if ((I | 0) != 48) {
										K = 0;
										L = 0;
										M = 0;
										N = 0;
										O = I;
										P = J;
										Q = 0;
										R = 0;
										T = 1.0;
										U = 0;
										V = 0.0;
										break
									}
									u = HEAP32[e >> 2] | 0;
									if (u >>> 0 < (HEAP32[m >> 2] | 0) >>> 0) {
										HEAP32[e >> 2] = u + 1;
										I = HEAPU8[u >> 0] | 0;
										J = 1;
										continue
									} else {
										I = Gx(b) | 0;
										J = 1;
										continue
									}
								}
								if ((v | 0) == 70) {
									u = HEAP32[e >> 2] | 0;
									if (u >>> 0 < (HEAP32[m >> 2] | 0) >>> 0) {
										HEAP32[e >> 2] = u + 1;
										W = HEAPU8[u >> 0] | 0
									} else
										W = Gx(b) | 0;
									if ((W | 0) == 48) {
										u = 0;
										o = 0;
										while (1) {
											q = HEAP32[e >> 2] | 0;
											if (q >>> 0 < (HEAP32[m >> 2] | 0) >>> 0) {
												HEAP32[e >> 2] = q + 1;
												X = HEAPU8[q >> 0] | 0
											} else
												X = Gx(b) | 0;
											q = ky(u | 0, o | 0, -1, -1) | 0;
											n = H;
											if ((X | 0) == 48) {
												u = q;
												o = n
											} else {
												K = 0;
												L = 0;
												M = q;
												N = n;
												O = X;
												P = 1;
												Q = 1;
												R = 0;
												T = 1.0;
												U = 0;
												V = 0.0;
												break
											}
										}
									} else {
										K = 0;
										L = 0;
										M = 0;
										N = 0;
										O = W;
										P = J;
										Q = 1;
										R = 0;
										T = 1.0;
										U = 0;
										V = 0.0
									}
								}
								b: while (1) {
									o = O + -48 | 0;
									do
										if (o >>> 0 >= 10) {
											u = O | 32;
											n = (O | 0) == 46;
											if (!((u + -97 | 0) >>> 0 < 6 | n)) {
												Y = O;
												break b
											}
											if (n)
												if (!Q) {
													Z = L;
													_ = K;
													$ = L;
													aa = K;
													ba = P;
													ca = 1;
													ea = R;
													fa = T;
													ga = U;
													ha = V;
													break
												} else {
													Y = 46;
													break b
												}
											else {
												ia = (O | 0) > 57 ? u + -87 | 0 : o;
												v = 83;
												break
											}
										} else {
											ia = o;
											v = 83
										}
									while (0);
									if ((v | 0) == 83) {
										v = 0;
										do
											if (!((K | 0) < 0 | (K | 0) == 0 & L >>> 0 < 8)) {
												if ((K | 0) < 0 | (K | 0) == 0 & L >>> 0 < 14) {
													ja = T * .0625;
													ka = R;
													la = ja;
													ma = U;
													na = V + ja *  + (ia | 0);
													break
												}
												if ((ia | 0) == 0 | (R | 0) != 0) {
													ka = R;
													la = T;
													ma = U;
													na = V
												} else {
													ka = 1;
													la = T;
													ma = U;
													na = V + T * .5
												}
											} else {
												ka = R;
												la = T;
												ma = ia + (U << 4) | 0;
												na = V
											}
										while (0);
										o = ky(L | 0, K | 0, 1, 0) | 0;
										Z = M;
										_ = N;
										$ = o;
										aa = H;
										ba = 1;
										ca = Q;
										ea = ka;
										fa = la;
										ga = ma;
										ha = na
									}
									o = HEAP32[e >> 2] | 0;
									if (o >>> 0 < (HEAP32[m >> 2] | 0) >>> 0) {
										HEAP32[e >> 2] = o + 1;
										K = aa;
										L = $;
										M = Z;
										N = _;
										O = HEAPU8[o >> 0] | 0;
										P = ba;
										Q = ca;
										R = ea;
										T = fa;
										U = ga;
										V = ha;
										continue
									} else {
										K = aa;
										L = $;
										M = Z;
										N = _;
										O = Gx(b) | 0;
										P = ba;
										Q = ca;
										R = ea;
										T = fa;
										U = ga;
										V = ha;
										continue
									}
								}
								if (!P) {
									o = (HEAP32[m >> 2] | 0) == 0;
									if (!o)
										HEAP32[e >> 2] = (HEAP32[e >> 2] | 0) + -1;
									if (f) {
										if (!o ? (o = HEAP32[e >> 2] | 0, HEAP32[e >> 2] = o + -1, (Q | 0) != 0) : 0)
											HEAP32[e >> 2] = o + -2
									} else
										Fx(b, 0);
									l =  + (r | 0) * 0.0;
									i = g;
									return +l
								}
								o = (Q | 0) == 0;
								u = o ? L : M;
								n = o ? K : N;
								if ((K | 0) < 0 | (K | 0) == 0 & L >>> 0 < 8) {
									o = L;
									q = K;
									p = U;
									while (1) {
										oa = p << 4;
										o = ky(o | 0, q | 0, 1, 0) | 0;
										q = H;
										if (!((q | 0) < 0 | (q | 0) == 0 & o >>> 0 < 8)) {
											pa = oa;
											break
										} else
											p = oa
									}
								} else
									pa = U;
								do
									if ((Y | 32 | 0) == 112) {
										p = gy(b, f) | 0;
										o = H;
										if ((p | 0) == 0 & (o | 0) == -2147483648)
											if (!f) {
												Fx(b, 0);
												l = 0.0;
												i = g;
												return +l
											} else {
												if (!(HEAP32[m >> 2] | 0)) {
													qa = 0;
													ra = 0;
													break
												}
												HEAP32[e >> 2] = (HEAP32[e >> 2] | 0) + -1;
												qa = 0;
												ra = 0;
												break
											}
										else {
											qa = p;
											ra = o
										}
									} else if (!(HEAP32[m >> 2] | 0)) {
										qa = 0;
										ra = 0
									} else {
										HEAP32[e >> 2] = (HEAP32[e >> 2] | 0) + -1;
										qa = 0;
										ra = 0
									}
								while (0);
								o = ty(u | 0, n | 0, 2) | 0;
								p = ky(o | 0, H | 0, -32, -1) | 0;
								o = ky(p | 0, H | 0, qa | 0, ra | 0) | 0;
								p = H;
								if (!pa) {
									l =  + (r | 0) * 0.0;
									i = g;
									return +l
								}
								if ((p | 0) > 0 | (p | 0) == 0 & o >>> 0 > (0 - k | 0) >>> 0) {
									c[(bc() | 0) >> 2] = 34;
									l =  + (r | 0) * 1797693134862315708145274.0e284 * 1797693134862315708145274.0e284;
									i = g;
									return +l
								}
								q = k + -106 | 0;
								oa = ((q | 0) < 0) << 31 >> 31;
								if ((p | 0) < (oa | 0) | (p | 0) == (oa | 0) & o >>> 0 < q >>> 0) {
									c[(bc() | 0) >> 2] = 34;
									l =  + (r | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
									i = g;
									return +l
								}
								if ((pa | 0) > -1) {
									q = o;
									oa = p;
									sa = pa;
									ja = V;
									while (1) {
										ta = sa << 1;
										if (!(ja >= .5)) {
											ua = ja;
											va = ta
										} else {
											ua = ja + -1.0;
											va = ta | 1
										}
										wa = ja + ua;
										ta = ky(q | 0, oa | 0, -1, -1) | 0;
										xa = H;
										if ((va | 0) > -1) {
											q = ta;
											oa = xa;
											sa = va;
											ja = wa
										} else {
											ya = ta;
											za = xa;
											Aa = va;
											Ba = wa;
											break
										}
									}
								} else {
									ya = o;
									za = p;
									Aa = pa;
									Ba = V
								}
								sa = ly(32, 0, k | 0, ((k | 0) < 0) << 31 >> 31 | 0) | 0;
								oa = ky(ya | 0, za | 0, sa | 0, H | 0) | 0;
								sa = H;
								if (0 > (sa | 0) | 0 == (sa | 0) & j >>> 0 > oa >>> 0)
									if ((oa | 0) < 0) {
										Ca = 0;
										v = 126
									} else {
										Da = oa;
										v = 124
									}
								else {
									Da = j;
									v = 124
								}
								if ((v | 0) == 124)
									if ((Da | 0) < 53) {
										Ca = Da;
										v = 126
									} else {
										Ea = Da;
										Fa =  + (r | 0);
										Ga = 0.0
									}
								if ((v | 0) == 126) {
									ja =  + (r | 0);
									Ea = Ca;
									Fa = ja;
									Ga = +Ix(+Nx(1.0, 84 - Ca | 0), ja)
								}
								oa = (Ea | 0) < 32 & Ba != 0.0 & (Aa & 1 | 0) == 0;
								ja = Fa * (oa ? 0.0 : Ba) + (Ga + Fa *  + (((oa & 1) + Aa | 0) >>> 0)) - Ga;
								if (!(ja != 0.0))
									c[(bc() | 0) >> 2] = 34;
								l = +Ox(ja, ya);
								i = g;
								return +l
							} else
								G = y;
						while (0);
						oa = k + j | 0;
						sa = 0 - oa | 0;
						q = G;
						n = 0;
						while (1) {
							if ((q | 0) == 46) {
								v = 137;
								break
							} else if ((q | 0) != 48) {
								Ha = q;
								Ia = 0;
								Ja = 0;
								Ka = n;
								La = 0;
								break
							}
							u = HEAP32[e >> 2] | 0;
							if (u >>> 0 < (HEAP32[m >> 2] | 0) >>> 0) {
								HEAP32[e >> 2] = u + 1;
								q = HEAPU8[u >> 0] | 0;
								n = 1;
								continue
							} else {
								q = Gx(b) | 0;
								n = 1;
								continue
							}
						}
						if ((v | 0) == 137) {
							q = HEAP32[e >> 2] | 0;
							if (q >>> 0 < (HEAP32[m >> 2] | 0) >>> 0) {
								HEAP32[e >> 2] = q + 1;
								Ma = HEAPU8[q >> 0] | 0
							} else
								Ma = Gx(b) | 0;
							if ((Ma | 0) == 48) {
								q = 0;
								u = 0;
								while (1) {
									xa = ky(q | 0, u | 0, -1, -1) | 0;
									ta = H;
									Na = HEAP32[e >> 2] | 0;
									if (Na >>> 0 < (HEAP32[m >> 2] | 0) >>> 0) {
										HEAP32[e >> 2] = Na + 1;
										Oa = HEAPU8[Na >> 0] | 0
									} else
										Oa = Gx(b) | 0;
									if ((Oa | 0) == 48) {
										q = xa;
										u = ta
									} else {
										Ha = Oa;
										Ia = xa;
										Ja = ta;
										Ka = 1;
										La = 1;
										break
									}
								}
							} else {
								Ha = Ma;
								Ia = 0;
								Ja = 0;
								Ka = n;
								La = 1
							}
						}
						HEAP32[h >> 2] = 0;
						u = Ha + -48 | 0;
						q = (Ha | 0) == 46;
						c: do
							if (u >>> 0 < 10 | q) {
								ta = h + 496 | 0;
								xa = Ha;
								Na = 0;
								Pa = 0;
								Qa = q;
								Ra = u;
								Sa = Ia;
								Ta = Ja;
								Ua = Ka;
								Va = La;
								Wa = 0;
								Xa = 0;
								Ya = 0;
								d: while (1) {
									do
										if (Qa)
											if (!Va) {
												Za = Na;
												_a = Pa;
												$a = Na;
												ab = Pa;
												bb = Ua;
												cb = 1;
												db = Wa;
												eb = Xa;
												fb = Ya
											} else
												break d;
										else {
											gb = ky(Na | 0, Pa | 0, 1, 0) | 0;
											hb = H;
											ib = (xa | 0) != 48;
											if ((Xa | 0) >= 125) {
												if (!ib) {
													Za = Sa;
													_a = Ta;
													$a = gb;
													ab = hb;
													bb = Ua;
													cb = Va;
													db = Wa;
													eb = Xa;
													fb = Ya;
													break
												}
												HEAP32[ta >> 2] = HEAP32[ta >> 2] | 1;
												Za = Sa;
												_a = Ta;
												$a = gb;
												ab = hb;
												bb = Ua;
												cb = Va;
												db = Wa;
												eb = Xa;
												fb = Ya;
												break
											}
											jb = h + (Xa << 2) | 0;
											if (!Wa)
												kb = Ra;
											else
												kb = xa + -48 + ((HEAP32[jb >> 2] | 0) * 10 | 0) | 0;
											HEAP32[jb >> 2] = kb;
											jb = Wa + 1 | 0;
											lb = (jb | 0) == 9;
											Za = Sa;
											_a = Ta;
											$a = gb;
											ab = hb;
											bb = 1;
											cb = Va;
											db = lb ? 0 : jb;
											eb = (lb & 1) + Xa | 0;
											fb = ib ? gb : Ya
										}
									while (0);
									gb = HEAP32[e >> 2] | 0;
									if (gb >>> 0 < (HEAP32[m >> 2] | 0) >>> 0) {
										HEAP32[e >> 2] = gb + 1;
										mb = HEAPU8[gb >> 0] | 0
									} else
										mb = Gx(b) | 0;
									Ra = mb + -48 | 0;
									Qa = (mb | 0) == 46;
									if (!(Ra >>> 0 < 10 | Qa)) {
										nb = mb;
										ob = Za;
										pb = $a;
										qb = _a;
										rb = ab;
										sb = bb;
										tb = cb;
										ub = db;
										vb = eb;
										wb = fb;
										v = 160;
										break c
									} else {
										xa = mb;
										Na = $a;
										Pa = ab;
										Sa = Za;
										Ta = _a;
										Ua = bb;
										Va = cb;
										Wa = db;
										Xa = eb;
										Ya = fb
									}
								}
								xb = Na;
								yb = Pa;
								zb = Sa;
								Ab = Ta;
								Bb = (Ua | 0) != 0;
								Cb = Wa;
								Db = Xa;
								Eb = Ya;
								v = 168
							} else {
								nb = Ha;
								ob = Ia;
								pb = 0;
								qb = Ja;
								rb = 0;
								sb = Ka;
								tb = La;
								ub = 0;
								vb = 0;
								wb = 0;
								v = 160
							}
						while (0);
						do
							if ((v | 0) == 160) {
								u = (tb | 0) == 0;
								q = u ? pb : ob;
								n = u ? rb : qb;
								u = (sb | 0) != 0;
								if (!(u & (nb | 32 | 0) == 101))
									if ((nb | 0) > -1) {
										xb = pb;
										yb = rb;
										zb = q;
										Ab = n;
										Bb = u;
										Cb = ub;
										Db = vb;
										Eb = wb;
										v = 168;
										break
									} else {
										Fb = pb;
										Gb = rb;
										Hb = u;
										Ib = q;
										Jb = n;
										Kb = ub;
										Lb = vb;
										Mb = wb;
										v = 170;
										break
									}
								u = gy(b, f) | 0;
								Va = H;
								do
									if ((u | 0) == 0 & (Va | 0) == -2147483648)
										if (!f) {
											Fx(b, 0);
											l = 0.0;
											i = g;
											return +l
										} else {
											if (!(HEAP32[m >> 2] | 0)) {
												Nb = 0;
												Ob = 0;
												break
											}
											HEAP32[e >> 2] = (HEAP32[e >> 2] | 0) + -1;
											Nb = 0;
											Ob = 0;
											break
										}
									else {
										Nb = u;
										Ob = Va
									}
								while (0);
								Va = ky(Nb | 0, Ob | 0, q | 0, n | 0) | 0;
								Pb = Va;
								Qb = pb;
								Rb = H;
								Sb = rb;
								Tb = ub;
								Ub = vb;
								Vb = wb
							}
						while (0);
						if ((v | 0) == 168)
							if (HEAP32[m >> 2] | 0) {
								HEAP32[e >> 2] = (HEAP32[e >> 2] | 0) + -1;
								if (Bb) {
									Pb = zb;
									Qb = xb;
									Rb = Ab;
									Sb = yb;
									Tb = Cb;
									Ub = Db;
									Vb = Eb
								} else
									v = 171
							} else {
								Fb = xb;
								Gb = yb;
								Hb = Bb;
								Ib = zb;
								Jb = Ab;
								Kb = Cb;
								Lb = Db;
								Mb = Eb;
								v = 170
							}
						if ((v | 0) == 170)
							if (Hb) {
								Pb = Ib;
								Qb = Fb;
								Rb = Jb;
								Sb = Gb;
								Tb = Kb;
								Ub = Lb;
								Vb = Mb
							} else
								v = 171;
						if ((v | 0) == 171) {
							c[(bc() | 0) >> 2] = 22;
							Fx(b, 0);
							l = 0.0;
							i = g;
							return +l
						}
						Va = HEAP32[h >> 2] | 0;
						if (!Va) {
							l =  + (r | 0) * 0.0;
							i = g;
							return +l
						}
						if ((Pb | 0) == (Qb | 0) & (Rb | 0) == (Sb | 0) & ((Sb | 0) < 0 | (Sb | 0) == 0 & Qb >>> 0 < 10) ? j >>> 0 > 30 | (Va >>> j | 0) == 0 : 0) {
							l =  + (r | 0) *  + (Va >>> 0);
							i = g;
							return +l
						}
						Va = (k | 0) / -2 | 0;
						u = ((Va | 0) < 0) << 31 >> 31;
						if ((Rb | 0) > (u | 0) | (Rb | 0) == (u | 0) & Pb >>> 0 > Va >>> 0) {
							c[(bc() | 0) >> 2] = 34;
							l =  + (r | 0) * 1797693134862315708145274.0e284 * 1797693134862315708145274.0e284;
							i = g;
							return +l
						}
						Va = k + -106 | 0;
						u = ((Va | 0) < 0) << 31 >> 31;
						if ((Rb | 0) < (u | 0) | (Rb | 0) == (u | 0) & Pb >>> 0 < Va >>> 0) {
							c[(bc() | 0) >> 2] = 34;
							l =  + (r | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
							i = g;
							return +l
						}
						if (!Tb)
							Wb = Ub;
						else {
							if ((Tb | 0) < 9) {
								Va = h + (Ub << 2) | 0;
								u = HEAP32[Va >> 2] | 0;
								Ya = Tb;
								do {
									u = u * 10 | 0;
									Ya = Ya + 1 | 0
								} while ((Ya | 0) != 9);
								HEAP32[Va >> 2] = u
							}
							Wb = Ub + 1 | 0
						}
						if ((Vb | 0) < 9 ? (Vb | 0) <= (Pb | 0) & (Pb | 0) < 18 : 0) {
							if ((Pb | 0) == 9) {
								l =  + (r | 0) *  + ((HEAP32[h >> 2] | 0) >>> 0);
								i = g;
								return +l
							}
							if ((Pb | 0) < 9) {
								l =  + (r | 0) *  + ((HEAP32[h >> 2] | 0) >>> 0) /  + (HEAP32[140776 + (8 - Pb << 2) >> 2] | 0);
								i = g;
								return +l
							}
							Ya = j + 27 + (da(Pb, -3) | 0) | 0;
							Xa = HEAP32[h >> 2] | 0;
							if ((Ya | 0) > 30 | (Xa >>> Ya | 0) == 0) {
								l =  + (r | 0) *  + (Xa >>> 0) *  + (HEAP32[140776 + (Pb + -10 << 2) >> 2] | 0);
								i = g;
								return +l
							}
						}
						Xa = (Pb | 0) % 9 | 0;
						if (!Xa) {
							Xb = 0;
							Yb = 0;
							Zb = Pb;
							_b = Wb
						} else {
							Ya = (Pb | 0) > -1 ? Xa : Xa + 9 | 0;
							Xa = HEAP32[140776 + (8 - Ya << 2) >> 2] | 0;
							if (Wb) {
								Wa = 1e9 / (Xa | 0) | 0;
								Ua = 0;
								Ta = 0;
								Sa = 0;
								Pa = Pb;
								while (1) {
									Na = h + (Sa << 2) | 0;
									xa = HEAP32[Na >> 2] | 0;
									Qa = ((xa >>> 0) / (Xa >>> 0) | 0) + Ta | 0;
									HEAP32[Na >> 2] = Qa;
									Ta = da((xa >>> 0) % (Xa >>> 0) | 0, Wa) | 0;
									xa = Sa;
									Sa = Sa + 1 | 0;
									if ((xa | 0) == (Ua | 0) & (Qa | 0) == 0) {
										$b = Sa & 127;
										ac = Pa + -9 | 0
									} else {
										$b = Ua;
										ac = Pa
									}
									if ((Sa | 0) == (Wb | 0))
										break;
									else {
										Ua = $b;
										Pa = ac
									}
								}
								if (!Ta) {
									cc = $b;
									dc = ac;
									ec = Wb
								} else {
									HEAP32[h + (Wb << 2) >> 2] = Ta;
									cc = $b;
									dc = ac;
									ec = Wb + 1 | 0
								}
							} else {
								cc = 0;
								dc = Pb;
								ec = 0
							}
							Xb = cc;
							Yb = 0;
							Zb = 9 - Ya + dc | 0;
							_b = ec
						}
						e: while (1) {
							Pa = h + (Xb << 2) | 0;
							if ((Zb | 0) < 18) {
								Ua = Yb;
								Sa = _b;
								while (1) {
									Wa = 0;
									Xa = Sa + 127 | 0;
									u = Sa;
									while (1) {
										Va = Xa & 127;
										Qa = h + (Va << 2) | 0;
										xa = ty(HEAP32[Qa >> 2] | 0, 0, 29) | 0;
										Na = ky(xa | 0, H | 0, Wa | 0, 0) | 0;
										xa = H;
										if (xa >>> 0 > 0 | (xa | 0) == 0 & Na >>> 0 > 1e9) {
											Ra = Cy(Na | 0, xa | 0, 1e9, 0) | 0;
											ta = Dy(Na | 0, xa | 0, 1e9, 0) | 0;
											fc = ta;
											gc = Ra
										} else {
											fc = Na;
											gc = 0
										}
										HEAP32[Qa >> 2] = fc;
										Qa = (Va | 0) == (Xb | 0);
										if ((Va | 0) != (u + 127 & 127 | 0) | Qa)
											hc = u;
										else
											hc = (fc | 0) == 0 ? Va : u;
										if (Qa)
											break;
										else {
											Wa = gc;
											Xa = Va + -1 | 0;
											u = hc
										}
									}
									u = Ua + -29 | 0;
									if (!gc) {
										Ua = u;
										Sa = hc
									} else {
										ic = u;
										jc = gc;
										kc = hc;
										break
									}
								}
							} else {
								if ((Zb | 0) == 18) {
									lc = Yb;
									mc = _b
								} else {
									nc = Xb;
									oc = Yb;
									pc = Zb;
									qc = _b;
									break
								}
								while (1) {
									if ((HEAP32[Pa >> 2] | 0) >>> 0 >= 9007199) {
										nc = Xb;
										oc = lc;
										pc = 18;
										qc = mc;
										break e
									}
									Sa = 0;
									Ua = mc + 127 | 0;
									n = mc;
									while (1) {
										q = Ua & 127;
										u = h + (q << 2) | 0;
										Xa = ty(HEAP32[u >> 2] | 0, 0, 29) | 0;
										Wa = ky(Xa | 0, H | 0, Sa | 0, 0) | 0;
										Xa = H;
										if (Xa >>> 0 > 0 | (Xa | 0) == 0 & Wa >>> 0 > 1e9) {
											Va = Cy(Wa | 0, Xa | 0, 1e9, 0) | 0;
											Qa = Dy(Wa | 0, Xa | 0, 1e9, 0) | 0;
											rc = Qa;
											sc = Va
										} else {
											rc = Wa;
											sc = 0
										}
										HEAP32[u >> 2] = rc;
										u = (q | 0) == (Xb | 0);
										if ((q | 0) != (n + 127 & 127 | 0) | u)
											tc = n;
										else
											tc = (rc | 0) == 0 ? q : n;
										if (u)
											break;
										else {
											Sa = sc;
											Ua = q + -1 | 0;
											n = tc
										}
									}
									n = lc + -29 | 0;
									if (!sc) {
										lc = n;
										mc = tc
									} else {
										ic = n;
										jc = sc;
										kc = tc;
										break
									}
								}
							}
							Pa = Xb + 127 & 127;
							if ((Pa | 0) == (kc | 0)) {
								n = kc + 127 & 127;
								Ua = h + ((kc + 126 & 127) << 2) | 0;
								HEAP32[Ua >> 2] = HEAP32[Ua >> 2] | HEAP32[h + (n << 2) >> 2];
								uc = n
							} else
								uc = kc;
							HEAP32[h + (Pa << 2) >> 2] = jc;
							Xb = Pa;
							Yb = ic;
							Zb = Zb + 9 | 0;
							_b = uc
						}
						f: while (1) {
							vc = qc + 1 & 127;
							Ya = h + ((qc + 127 & 127) << 2) | 0;
							Ta = nc;
							Pa = oc;
							n = pc;
							while (1) {
								Ua = (n | 0) == 18;
								Sa = (n | 0) > 27 ? 9 : 1;
								wc = Ta;
								xc = Pa;
								while (1) {
									q = 0;
									while (1) {
										u = q + wc & 127;
										if ((u | 0) == (qc | 0)) {
											yc = 2;
											break
										}
										Wa = HEAP32[h + (u << 2) >> 2] | 0;
										u = HEAP32[140768 + (q << 2) >> 2] | 0;
										if (Wa >>> 0 < u >>> 0) {
											yc = 2;
											break
										}
										Va = q + 1 | 0;
										if (Wa >>> 0 > u >>> 0) {
											yc = q;
											break
										}
										if ((Va | 0) < 2)
											q = Va;
										else {
											yc = Va;
											break
										}
									}
									if ((yc | 0) == 2 & Ua)
										break f;
									zc = Sa + xc | 0;
									if ((wc | 0) == (qc | 0)) {
										wc = qc;
										xc = zc
									} else
										break
								}
								Ua = (1 << Sa) + -1 | 0;
								q = 1e9 >>> Sa;
								Ac = wc;
								Bc = 0;
								Va = wc;
								Cc = n;
								do {
									u = h + (Va << 2) | 0;
									Wa = HEAP32[u >> 2] | 0;
									Qa = (Wa >>> Sa) + Bc | 0;
									HEAP32[u >> 2] = Qa;
									Bc = da(Wa & Ua, q) | 0;
									Wa = (Va | 0) == (Ac | 0) & (Qa | 0) == 0;
									Va = Va + 1 & 127;
									Cc = Wa ? Cc + -9 | 0 : Cc;
									Ac = Wa ? Va : Ac
								} while ((Va | 0) != (qc | 0));
								if (!Bc) {
									Ta = Ac;
									Pa = zc;
									n = Cc;
									continue
								}
								if ((vc | 0) != (Ac | 0))
									break;
								HEAP32[Ya >> 2] = HEAP32[Ya >> 2] | 1;
								Ta = Ac;
								Pa = zc;
								n = Cc
							}
							HEAP32[h + (qc << 2) >> 2] = Bc;
							nc = Ac;
							oc = zc;
							pc = Cc;
							qc = vc
						}
						n = wc & 127;
						if ((n | 0) == (qc | 0)) {
							HEAP32[h + (vc + -1 << 2) >> 2] = 0;
							Dc = vc
						} else
							Dc = qc;
						ja =  + ((HEAP32[h + (n << 2) >> 2] | 0) >>> 0);
						n = wc + 1 & 127;
						if ((n | 0) == (Dc | 0)) {
							Pa = Dc + 1 & 127;
							HEAP32[h + (Pa + -1 << 2) >> 2] = 0;
							Ec = Pa
						} else
							Ec = Dc;
						wa =  + (r | 0);
						Fc = wa * (ja * 1.0e9 +  + ((HEAP32[h + (n << 2) >> 2] | 0) >>> 0));
						n = xc + 53 | 0;
						Pa = n - k | 0;
						if ((Pa | 0) < (j | 0))
							if ((Pa | 0) < 0) {
								Gc = 0;
								Hc = 1;
								v = 244
							} else {
								Ic = Pa;
								Jc = 1;
								v = 243
							}
						else {
							Ic = j;
							Jc = 0;
							v = 243
						}
						if ((v | 0) == 243)
							if ((Ic | 0) < 53) {
								Gc = Ic;
								Hc = Jc;
								v = 244
							} else {
								Kc = Ic;
								Lc = 0.0;
								Mc = Jc;
								Nc = 0.0;
								Oc = Fc
							}
						if ((v | 0) == 244) {
							ja = +Ix(+Nx(1.0, 105 - Gc | 0), Fc);
							Pc = +Kx(Fc, +Nx(1.0, 53 - Gc | 0));
							Kc = Gc;
							Lc = ja;
							Mc = Hc;
							Nc = Pc;
							Oc = ja + (Fc - Pc)
						}
						Ta = wc + 2 & 127;
						do
							if ((Ta | 0) == (Ec | 0))
								Qc = Nc;
							else {
								Ya = HEAP32[h + (Ta << 2) >> 2] | 0;
								do
									if (Ya >>> 0 >= 5e8) {
										if (Ya >>> 0 > 5e8) {
											Rc = wa * .75 + Nc;
											break
										}
										if ((wc + 3 & 127 | 0) == (Ec | 0)) {
											Rc = wa * .5 + Nc;
											break
										} else {
											Rc = wa * .75 + Nc;
											break
										}
									} else {
										if ((Ya | 0) == 0 ? (wc + 3 & 127 | 0) == (Ec | 0) : 0) {
											Rc = Nc;
											break
										}
										Rc = wa * .25 + Nc
									}
								while (0);
								if ((53 - Kc | 0) <= 1) {
									Qc = Rc;
									break
								}
								if (+Kx(Rc, 1.0) != 0.0) {
									Qc = Rc;
									break
								}
								Qc = Rc + 1.0
							}
						while (0);
						wa = Oc + Qc - Lc;
						do
							if ((n & 2147483647 | 0) > (-2 - oa | 0)) {
								if (!(+S(+wa) >= 9007199254740992.0)) {
									Sc = Mc;
									Tc = xc;
									Uc = wa
								} else {
									Sc = (Mc | 0) != 0 & (Kc | 0) == (Pa | 0) ? 0 : Mc;
									Tc = xc + 1 | 0;
									Uc = wa * .5
								}
								if ((Tc + 50 | 0) <= (sa | 0) ? !((Sc | 0) != 0 & Qc != 0.0) : 0) {
									Vc = Tc;
									Wc = Uc;
									break
								}
								c[(bc() | 0) >> 2] = 34;
								Vc = Tc;
								Wc = Uc
							} else {
								Vc = xc;
								Wc = wa
							}
						while (0);
						l = +Ox(Wc, Vc);
						i = g;
						return +l
					} else {
						if (HEAP32[m >> 2] | 0)
							HEAP32[e >> 2] = (HEAP32[e >> 2] | 0) + -1;
						c[(bc() | 0) >> 2] = 22;
						Fx(b, 0);
						l = 0.0;
						i = g;
						return +l
					}
				}
			while (0);
			if ((v | 0) == 23) {
				v = (HEAP32[m >> 2] | 0) == 0;
				if (!v)
					HEAP32[e >> 2] = (HEAP32[e >> 2] | 0) + -1;
				if (!(t >>> 0 < 4 | (f | 0) == 0 | v)) {
					v = t;
					do {
						HEAP32[e >> 2] = (HEAP32[e >> 2] | 0) + -1;
						v = v + -1 | 0
					} while (v >>> 0 > 3)
				}
			}
			l =  + (r | 0) * x;
			i = g;
			return +l
		}
		function Fx(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0,
			g = 0;
			d = i;
			HEAP32[a + 104 >> 2] = b;
			e = HEAP32[a + 8 >> 2] | 0;
			f = HEAP32[a + 4 >> 2] | 0;
			g = e - f | 0;
			HEAP32[a + 108 >> 2] = g;
			if ((b | 0) != 0 & (g | 0) > (b | 0)) {
				HEAP32[a + 100 >> 2] = f + b;
				i = d;
				return
			} else {
				HEAP32[a + 100 >> 2] = e;
				i = d;
				return
			}
		}
		function Gx(b) {
			b = b | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0;
			e = i;
			f = b + 104 | 0;
			g = HEAP32[f >> 2] | 0;
			if (!((g | 0) != 0 ? (HEAP32[b + 108 >> 2] | 0) >= (g | 0) : 0))
				h = 3;
			if ((h | 0) == 3 ? (h = Tx(b) | 0, (h | 0) >= 0) : 0) {
				g = HEAP32[f >> 2] | 0;
				f = HEAP32[b + 8 >> 2] | 0;
				if ((g | 0) != 0 ? (j = HEAP32[b + 4 >> 2] | 0, k = g - (HEAP32[b + 108 >> 2] | 0) + -1 | 0, (f - j | 0) > (k | 0)) : 0)
					HEAP32[b + 100 >> 2] = j + k;
				else
					HEAP32[b + 100 >> 2] = f;
				k = HEAP32[b + 4 >> 2] | 0;
				if (f) {
					j = b + 108 | 0;
					HEAP32[j >> 2] = f + 1 - k + (HEAP32[j >> 2] | 0)
				}
				j = k + -1 | 0;
				if ((HEAPU8[j >> 0] | 0 | 0) == (h | 0)) {
					l = h;
					i = e;
					return l | 0
				}
				HEAP8[j >> 0] = h;
				l = h;
				i = e;
				return l | 0
			}
			HEAP32[b + 100 >> 2] = 0;
			l = -1;
			i = e;
			return l | 0
		}
		function Hx(a, b) {
			a = +a;
			b = +b;
			var d = 0,
			e = 0,
			f = 0,
			g = 0;
			d = i;
			HEAPF64[k >> 3] = a;
			e = HEAP32[k >> 2] | 0;
			f = HEAP32[k + 4 >> 2] | 0;
			HEAPF64[k >> 3] = b;
			g = HEAP32[k + 4 >> 2] & -2147483648 | f & 2147483647;
			HEAP32[k >> 2] = e;
			HEAP32[k + 4 >> 2] = g;
			b = +HEAPF64[k >> 3];
			i = d;
			return +b
		}
		function Ix(a, b) {
			a = +a;
			b = +b;
			var c = 0,
			d = 0.0;
			c = i;
			d = +Hx(a, b);
			i = c;
			return +d
		}
		function Jx(a, b) {
			a = +a;
			b = +b;
			var d = 0,
			e = 0,
			f = 0,
			g = 0,
			j = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0.0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0,
			O = 0,
			P = 0,
			Q = 0,
			R = 0,
			S = 0,
			T = 0,
			U = 0.0;
			d = i;
			HEAPF64[k >> 3] = a;
			e = HEAP32[k >> 2] | 0;
			f = HEAP32[k + 4 >> 2] | 0;
			HEAPF64[k >> 3] = b;
			g = HEAP32[k >> 2] | 0;
			j = HEAP32[k + 4 >> 2] | 0;
			l = ny(e | 0, f | 0, 52) | 0;
			m = l & 2047;
			l = ny(g | 0, j | 0, 52) | 0;
			n = l & 2047;
			l = f & -2147483648;
			o = ty(g | 0, j | 0, 1) | 0;
			p = H;
			if (!((o | 0) == 0 & (p | 0) == 0) ? (q = j & 2147483647, !(q >>> 0 > 2146435072 | (q | 0) == 2146435072 & g >>> 0 > 0 | (m | 0) == 2047)) : 0) {
				q = ty(e | 0, f | 0, 1) | 0;
				r = H;
				if (!(r >>> 0 > p >>> 0 | (r | 0) == (p | 0) & q >>> 0 > o >>> 0)) {
					if (!((q | 0) == (o | 0) & (r | 0) == (p | 0))) {
						s = a;
						i = d;
						return +s
					}
					s = a * 0.0;
					i = d;
					return +s
				}
				if (!m) {
					p = ty(e | 0, f | 0, 12) | 0;
					r = H;
					if ((r | 0) > -1 | (r | 0) == -1 & p >>> 0 > 4294967295) {
						o = p;
						p = r;
						r = 0;
						while (1) {
							q = r + -1 | 0;
							o = ty(o | 0, p | 0, 1) | 0;
							p = H;
							if (!((p | 0) > -1 | (p | 0) == -1 & o >>> 0 > 4294967295)) {
								t = q;
								break
							} else
								r = q
						}
					} else
						t = 0;
					r = ty(e | 0, f | 0, 1 - t | 0) | 0;
					u = r;
					v = H;
					w = t
				} else {
					u = e;
					v = f & 1048575 | 1048576;
					w = m
				}
				if (!n) {
					m = ty(g | 0, j | 0, 12) | 0;
					f = H;
					if ((f | 0) > -1 | (f | 0) == -1 & m >>> 0 > 4294967295) {
						e = m;
						m = f;
						f = 0;
						while (1) {
							t = f + -1 | 0;
							e = ty(e | 0, m | 0, 1) | 0;
							m = H;
							if (!((m | 0) > -1 | (m | 0) == -1 & e >>> 0 > 4294967295)) {
								x = t;
								break
							} else
								f = t
						}
					} else
						x = 0;
					f = ty(g | 0, j | 0, 1 - x | 0) | 0;
					y = f;
					z = H;
					A = x
				} else {
					y = g;
					z = j & 1048575 | 1048576;
					A = n
				}
				n = ly(u | 0, v | 0, y | 0, z | 0) | 0;
				j = H;
				g = (j | 0) > -1 | (j | 0) == -1 & n >>> 0 > 4294967295;
				a: do
					if ((w | 0) > (A | 0)) {
						x = g;
						f = n;
						e = j;
						m = u;
						t = v;
						r = w;
						while (1) {
							if (x)
								if ((m | 0) == (y | 0) & (t | 0) == (z | 0))
									break;
								else {
									B = f;
									C = e
								}
							else {
								B = m;
								C = t
							}
							o = ty(B | 0, C | 0, 1) | 0;
							p = H;
							q = r + -1 | 0;
							D = ly(o | 0, p | 0, y | 0, z | 0) | 0;
							E = H;
							F = (E | 0) > -1 | (E | 0) == -1 & D >>> 0 > 4294967295;
							if ((q | 0) > (A | 0)) {
								x = F;
								f = D;
								e = E;
								m = o;
								t = p;
								r = q
							} else {
								G = F;
								I = o;
								J = p;
								K = D;
								L = E;
								M = q;
								break a
							}
						}
						s = a * 0.0;
						i = d;
						return +s
					} else {
						G = g;
						I = u;
						J = v;
						K = n;
						L = j;
						M = w
					}
				while (0);
				if (G)
					if ((I | 0) == (y | 0) & (J | 0) == (z | 0)) {
						s = a * 0.0;
						i = d;
						return +s
					} else {
						N = L;
						O = K
					}
				else {
					N = J;
					O = I
				}
				if (N >>> 0 < 1048576 | (N | 0) == 1048576 & O >>> 0 < 0) {
					I = O;
					J = N;
					K = M;
					while (1) {
						L = ty(I | 0, J | 0, 1) | 0;
						z = H;
						y = K + -1 | 0;
						if (z >>> 0 < 1048576 | (z | 0) == 1048576 & L >>> 0 < 0) {
							I = L;
							J = z;
							K = y
						} else {
							P = L;
							Q = z;
							R = y;
							break
						}
					}
				} else {
					P = O;
					Q = N;
					R = M
				}
				if ((R | 0) > 0) {
					M = ky(P | 0, Q | 0, 0, -1048576) | 0;
					N = H;
					O = ty(R | 0, 0, 52) | 0;
					S = N | H;
					T = M | O
				} else {
					O = ny(P | 0, Q | 0, 1 - R | 0) | 0;
					S = H;
					T = O
				}
				HEAP32[k >> 2] = T;
				HEAP32[k + 4 >> 2] = S | l;
				s = +HEAPF64[k >> 3];
				i = d;
				return +s
			}
			U = a * b;
			s = U / U;
			i = d;
			return +s
		}
		function Kx(a, b) {
			a = +a;
			b = +b;
			var c = 0,
			d = 0.0;
			c = i;
			d = +Jx(a, b);
			i = c;
			return +d
		}
		function Lx(a, b) {
			a = +a;
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0,
			g = 0,
			j = 0,
			l = 0.0,
			m = 0.0,
			n = 0,
			o = 0.0;
			d = i;
			HEAPF64[k >> 3] = a;
			e = HEAP32[k >> 2] | 0;
			f = HEAP32[k + 4 >> 2] | 0;
			g = ny(e | 0, f | 0, 52) | 0;
			j = g & 2047;
			if (!j) {
				if (a != 0.0) {
					l = +Lx(a * 18446744073709551616.0, b);
					m = l;
					n = (HEAP32[b >> 2] | 0) + -64 | 0
				} else {
					m = a;
					n = 0
				}
				HEAP32[b >> 2] = n;
				o = m;
				i = d;
				return +o
			} else if ((j | 0) == 2047) {
				o = a;
				i = d;
				return +o
			} else {
				HEAP32[b >> 2] = j + -1022;
				HEAP32[k >> 2] = e;
				HEAP32[k + 4 >> 2] = f & -2146435073 | 1071644672;
				o = +HEAPF64[k >> 3];
				i = d;
				return +o
			}
			return  + (0.0)
		}
		function Mx(a, b) {
			a = +a;
			b = b | 0;
			var c = 0,
			d = 0.0;
			c = i;
			d = +Lx(a, b);
			i = c;
			return +d
		}
		function Nx(a, b) {
			a = +a;
			b = b | 0;
			var d = 0,
			e = 0.0,
			f = 0,
			g = 0,
			j = 0,
			l = 0.0;
			d = i;
			if ((b | 0) > 1023) {
				e = a * 8988465674311579538646525.0e283;
				f = b + -1023 | 0;
				if ((f | 0) > 1023) {
					g = b + -2046 | 0;
					j = (g | 0) > 1023 ? 1023 : g;
					l = e * 8988465674311579538646525.0e283
				} else {
					j = f;
					l = e
				}
			} else if ((b | 0) < -1022) {
				e = a * 2.2250738585072014e-308;
				f = b + 1022 | 0;
				if ((f | 0) < -1022) {
					g = b + 2044 | 0;
					j = (g | 0) < -1022 ? -1022 : g;
					l = e * 2.2250738585072014e-308
				} else {
					j = f;
					l = e
				}
			} else {
				j = b;
				l = a
			}
			b = ty(j + 1023 | 0, 0, 52) | 0;
			j = H;
			HEAP32[k >> 2] = b;
			HEAP32[k + 4 >> 2] = j;
			a = l * +HEAPF64[k >> 3];
			i = d;
			return +a
		}
		function Ox(a, b) {
			a = +a;
			b = b | 0;
			var c = 0,
			d = 0.0;
			c = i;
			d = +Nx(a, b);
			i = c;
			return +d
		}
		function Px(a, b) {
			a = a | 0;
			b = b | 0;
			var c = 0,
			d = 0;
			c = i;
			if (!a)
				d = 0;
			else
				d = Qx(a, b, 0) | 0;
			i = c;
			return d | 0
		}
		function Qx(b, d, e) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0;
			e = i;
			if (!b) {
				f = 1;
				i = e;
				return f | 0
			}
			if (d >>> 0 < 128) {
				HEAP8[b >> 0] = d;
				f = 1;
				i = e;
				return f | 0
			}
			if (d >>> 0 < 2048) {
				HEAP8[b >> 0] = d >>> 6 | 192;
				HEAP8[b + 1 >> 0] = d & 63 | 128;
				f = 2;
				i = e;
				return f | 0
			}
			if (d >>> 0 < 55296 | (d & -8192 | 0) == 57344) {
				HEAP8[b >> 0] = d >>> 12 | 224;
				HEAP8[b + 1 >> 0] = d >>> 6 & 63 | 128;
				HEAP8[b + 2 >> 0] = d & 63 | 128;
				f = 3;
				i = e;
				return f | 0
			}
			if ((d + -65536 | 0) >>> 0 < 1048576) {
				HEAP8[b >> 0] = d >>> 18 | 240;
				HEAP8[b + 1 >> 0] = d >>> 12 & 63 | 128;
				HEAP8[b + 2 >> 0] = d >>> 6 & 63 | 128;
				HEAP8[b + 3 >> 0] = d & 63 | 128;
				f = 4;
				i = e;
				return f | 0
			} else {
				c[(bc() | 0) >> 2] = 84;
				f = -1;
				i = e;
				return f | 0
			}
			return 0
		}
		function Rx(b) {
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0;
			d = i;
			e = b + 74 | 0;
			f = HEAP8[e >> 0] | 0;
			HEAP8[e >> 0] = f + 255 | f;
			f = b + 20 | 0;
			e = b + 44 | 0;
			if ((HEAP32[f >> 2] | 0) >>> 0 > (HEAP32[e >> 2] | 0) >>> 0)
				mc[HEAP32[b + 36 >> 2] & 31](b, 0, 0) | 0;
			HEAP32[b + 16 >> 2] = 0;
			HEAP32[b + 28 >> 2] = 0;
			HEAP32[f >> 2] = 0;
			f = HEAP32[b >> 2] | 0;
			if (!(f & 20)) {
				g = HEAP32[e >> 2] | 0;
				HEAP32[b + 8 >> 2] = g;
				HEAP32[b + 4 >> 2] = g;
				h = 0;
				i = d;
				return h | 0
			}
			if (!(f & 4)) {
				h = -1;
				i = d;
				return h | 0
			}
			HEAP32[b >> 2] = f | 32;
			h = -1;
			i = d;
			return h | 0
		}
		function Sx(b) {
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0,
			g = 0;
			d = i;
			e = b + 74 | 0;
			f = HEAP8[e >> 0] | 0;
			HEAP8[e >> 0] = f + 255 | f;
			f = HEAP32[b >> 2] | 0;
			if (!(f & 8)) {
				HEAP32[b + 8 >> 2] = 0;
				HEAP32[b + 4 >> 2] = 0;
				e = HEAP32[b + 44 >> 2] | 0;
				HEAP32[b + 28 >> 2] = e;
				HEAP32[b + 20 >> 2] = e;
				HEAP32[b + 16 >> 2] = e + (HEAP32[b + 48 >> 2] | 0);
				g = 0;
				i = d;
				return g | 0
			} else {
				HEAP32[b >> 2] = f | 32;
				g = -1;
				i = d;
				return g | 0
			}
			return 0
		}
		function Tx(a) {
			a = a | 0;
			var b = 0,
			e = 0,
			f = 0;
			b = i;
			i = i + 16 | 0;
			e = b;
			if ((HEAP32[a + 8 >> 2] | 0) == 0 ? (Rx(a) | 0) != 0 : 0)
				f = -1;
			else if ((mc[HEAP32[a + 32 >> 2] & 31](a, e, 1) | 0) == 1)
				f = HEAPU8[e >> 0] | 0;
			else
				f = -1;
			i = b;
			return f | 0
		}
		function Ux(b, d, e) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0;
			f = i;
			g = e + 16 | 0;
			h = HEAP32[g >> 2] | 0;
			do
				if (!h)
					if (!(Sx(e) | 0)) {
						j = HEAP32[g >> 2] | 0;
						break
					} else {
						k = 0;
						i = f;
						return k | 0
					}
				else
					j = h;
			while (0);
			h = e + 20 | 0;
			g = HEAP32[h >> 2] | 0;
			if ((j - g | 0) >>> 0 < d >>> 0) {
				k = mc[HEAP32[e + 36 >> 2] & 31](e, b, d) | 0;
				i = f;
				return k | 0
			}
			a: do
				if ((HEAP8[e + 75 >> 0] | 0) > -1) {
					j = d;
					while (1) {
						if (!j) {
							l = d;
							m = b;
							n = g;
							o = 0;
							break a
						}
						p = j + -1 | 0;
						if ((HEAP8[b + p >> 0] | 0) == 10)
							break;
						else
							j = p
					}
					if ((mc[HEAP32[e + 36 >> 2] & 31](e, b, j) | 0) >>> 0 < j >>> 0) {
						k = j;
						i = f;
						return k | 0
					} else {
						l = d - j | 0;
						m = b + j | 0;
						n = HEAP32[h >> 2] | 0;
						o = j;
						break
					}
				} else {
					l = d;
					m = b;
					n = g;
					o = 0
				}
			while (0);
			qy(n | 0, m | 0, l | 0) | 0;
			HEAP32[h >> 2] = (HEAP32[h >> 2] | 0) + l;
			k = o + l | 0;
			i = f;
			return k | 0
		}
		function Vx(a, b, d, e) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0;
			f = i;
			i = i + 16 | 0;
			g = f;
			HEAP32[g >> 2] = e;
			e = Xx(a, b, d, g) | 0;
			i = f;
			return e | 0
		}
		function Wx(a, b, d) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0;
			e = i;
			i = i + 224 | 0;
			f = e + 120 | 0;
			g = e + 80 | 0;
			h = e;
			j = e + 136 | 0;
			k = g + 0 | 0;
			l = k + 40 | 0;
			do {
				HEAP32[k >> 2] = 0;
				k = k + 4 | 0
			} while ((k | 0) < (l | 0));
			HEAP32[f >> 2] = HEAP32[d >> 2];
			if ((hy(0, b, f, h, g) | 0) < 0) {
				m = -1;
				i = e;
				return m | 0
			}
			d = a + 48 | 0;
			if (!(HEAP32[d >> 2] | 0)) {
				k = a + 44 | 0;
				l = HEAP32[k >> 2] | 0;
				HEAP32[k >> 2] = j;
				n = a + 28 | 0;
				HEAP32[n >> 2] = j;
				o = a + 20 | 0;
				HEAP32[o >> 2] = j;
				HEAP32[d >> 2] = 80;
				p = a + 16 | 0;
				HEAP32[p >> 2] = j + 80;
				j = hy(a, b, f, h, g) | 0;
				if (!l)
					q = j;
				else {
					mc[HEAP32[a + 36 >> 2] & 31](a, 0, 0) | 0;
					r = (HEAP32[o >> 2] | 0) == 0 ? -1 : j;
					HEAP32[k >> 2] = l;
					HEAP32[d >> 2] = 0;
					HEAP32[p >> 2] = 0;
					HEAP32[n >> 2] = 0;
					HEAP32[o >> 2] = 0;
					q = r
				}
			} else
				q = hy(a, b, f, h, g) | 0;
			m = q;
			i = e;
			return m | 0
		}
		function Xx(b, d, e, f) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0;
			g = i;
			i = i + 128 | 0;
			h = g + 112 | 0;
			j = g;
			k = j + 0 | 0;
			l = 141376 | 0;
			m = k + 112 | 0;
			do {
				HEAP32[k >> 2] = HEAP32[l >> 2];
				k = k + 4 | 0;
				l = l + 4 | 0
			} while ((k | 0) < (m | 0));
			if ((d + -1 | 0) >>> 0 > 2147483646)
				if (!d) {
					n = h;
					o = 1
				} else {
					c[(bc() | 0) >> 2] = 75;
					p = -1;
					i = g;
					return p | 0
				}
			else {
				n = b;
				o = d
			}
			d = -2 - n | 0;
			b = o >>> 0 > d >>> 0 ? d : o;
			HEAP32[j + 48 >> 2] = b;
			o = j + 20 | 0;
			HEAP32[o >> 2] = n;
			HEAP32[j + 44 >> 2] = n;
			d = n + b | 0;
			n = j + 16 | 0;
			HEAP32[n >> 2] = d;
			HEAP32[j + 28 >> 2] = d;
			d = Wx(j, e, f) | 0;
			if (!b) {
				p = d;
				i = g;
				return p | 0
			}
			b = HEAP32[o >> 2] | 0;
			HEAP8[b + (((b | 0) == (HEAP32[n >> 2] | 0)) << 31 >> 31) >> 0] = 0;
			p = d;
			i = g;
			return p | 0
		}
		function Yx(b) {
			b = b | 0;
			var c = 0,
			d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0;
			c = i;
			d = b;
			while (1) {
				e = d + 1 | 0;
				if (!(Bx(HEAP8[d >> 0] | 0) | 0))
					break;
				else
					d = e
			}
			b = HEAP8[d >> 0] | 0;
			f = b << 24 >> 24;
			if ((f | 0) == 43) {
				g = 0;
				h = 5
			} else if ((f | 0) == 45) {
				g = 1;
				h = 5
			} else {
				j = d;
				k = b;
				l = 0
			}
			if ((h | 0) == 5) {
				j = e;
				k = HEAP8[e >> 0] | 0;
				l = g
			}
			if (!(Ax(k << 24 >> 24) | 0)) {
				m = 0;
				n = (l | 0) != 0;
				o = 0 - m | 0;
				p = n ? m : o;
				i = c;
				return p | 0
			} else {
				q = j;
				r = 0
			}
			while (1) {
				j = (r * 10 | 0) + 48 - (HEAP8[q >> 0] | 0) | 0;
				q = q + 1 | 0;
				if (!(Ax(HEAP8[q >> 0] | 0) | 0)) {
					m = j;
					break
				} else
					r = j
			}
			n = (l | 0) != 0;
			o = 0 - m | 0;
			p = n ? m : o;
			i = c;
			return p | 0
		}
		function Zx(a, b, d) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0.0,
			j = 0,
			k = 0;
			d = i;
			i = i + 112 | 0;
			e = d;
			f = e + 0 | 0;
			g = f + 112 | 0;
			do {
				HEAP32[f >> 2] = 0;
				f = f + 4 | 0
			} while ((f | 0) < (g | 0));
			f = e + 4 | 0;
			HEAP32[f >> 2] = a;
			g = e + 8 | 0;
			HEAP32[g >> 2] = -1;
			HEAP32[e + 44 >> 2] = a;
			HEAP32[e + 76 >> 2] = -1;
			Fx(e, 0);
			h = +Ex(e, 2, 1);
			j = (HEAP32[f >> 2] | 0) - (HEAP32[g >> 2] | 0) + (HEAP32[e + 108 >> 2] | 0) | 0;
			if (!b) {
				i = d;
				return +h
			}
			if (!j)
				k = a;
			else
				k = a + j | 0;
			HEAP32[b >> 2] = k;
			i = d;
			return +h
		}
		function _x(a, b, d) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0;
			e = i;
			i = i + 112 | 0;
			f = e;
			HEAP32[f >> 2] = 0;
			g = f + 4 | 0;
			HEAP32[g >> 2] = a;
			HEAP32[f + 44 >> 2] = a;
			if ((a | 0) < 0)
				HEAP32[f + 8 >> 2] = -1;
			else
				HEAP32[f + 8 >> 2] = a + 2147483647;
			HEAP32[f + 76 >> 2] = -1;
			Fx(f, 0);
			h = Dx(f, d, 1, -1, -1) | 0;
			d = H;
			if (!b) {
				H = d;
				i = e;
				return h | 0
			}
			HEAP32[b >> 2] = a + ((HEAP32[g >> 2] | 0) + (HEAP32[f + 108 >> 2] | 0) - (HEAP32[f + 8 >> 2] | 0));
			H = d;
			i = e;
			return h | 0
		}
		function $x(a, b, d) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0;
			e = i;
			i = i + 112 | 0;
			f = e;
			HEAP32[f >> 2] = 0;
			g = f + 4 | 0;
			HEAP32[g >> 2] = a;
			HEAP32[f + 44 >> 2] = a;
			if ((a | 0) < 0)
				HEAP32[f + 8 >> 2] = -1;
			else
				HEAP32[f + 8 >> 2] = a + 2147483647;
			HEAP32[f + 76 >> 2] = -1;
			Fx(f, 0);
			h = Dx(f, d, 1, 0, -2147483648) | 0;
			d = H;
			if (!b) {
				H = d;
				i = e;
				return h | 0
			}
			HEAP32[b >> 2] = a + ((HEAP32[g >> 2] | 0) + (HEAP32[f + 108 >> 2] | 0) - (HEAP32[f + 8 >> 2] | 0));
			H = d;
			i = e;
			return h | 0
		}
		function ay(b, d, e) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0;
			f = i;
			g = d & 255;
			h = (e | 0) != 0;
			a: do
				if ((b & 3 | 0) != 0 & h) {
					j = d & 255;
					k = e;
					l = b;
					while (1) {
						if ((HEAP8[l >> 0] | 0) == j << 24 >> 24) {
							m = k;
							n = l;
							o = 6;
							break a
						}
						p = l + 1 | 0;
						q = k + -1 | 0;
						r = (q | 0) != 0;
						if ((p & 3 | 0) != 0 & r) {
							k = q;
							l = p
						} else {
							s = q;
							t = r;
							u = p;
							o = 5;
							break
						}
					}
				} else {
					s = e;
					t = h;
					u = b;
					o = 5
				}
			while (0);
			if ((o | 0) == 5)
				if (t) {
					m = s;
					n = u;
					o = 6
				} else {
					v = 0;
					w = u
				}
			b: do
				if ((o | 0) == 6) {
					u = d & 255;
					if ((HEAP8[n >> 0] | 0) != u << 24 >> 24) {
						s = da(g, 16843009) | 0;
						c: do
							if (m >>> 0 > 3) {
								t = m;
								b = n;
								while (1) {
									h = HEAP32[b >> 2] ^ s;
									if ((h & -2139062144 ^ -2139062144) & h + -16843009) {
										x = t;
										y = b;
										break c
									}
									h = b + 4 | 0;
									e = t + -4 | 0;
									if (e >>> 0 > 3) {
										t = e;
										b = h
									} else {
										x = e;
										y = h;
										break
									}
								}
							} else {
								x = m;
								y = n
							}
						while (0);
						if (!x) {
							v = 0;
							w = y
						} else {
							s = x;
							b = y;
							while (1) {
								if ((HEAP8[b >> 0] | 0) == u << 24 >> 24) {
									v = s;
									w = b;
									break b
								}
								t = b + 1 | 0;
								s = s + -1 | 0;
								if (!s) {
									v = 0;
									w = t;
									break
								} else
									b = t
							}
						}
					} else {
						v = m;
						w = n
					}
				}
			while (0);
			i = f;
			return ((v | 0) != 0 ? w : 0) | 0
		}
		function by(b, c, d) {
			b = b | 0;
			c = c | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0;
			e = i;
			a: do
				if (!d)
					f = 0;
				else {
					g = d;
					h = b;
					j = c;
					while (1) {
						k = HEAP8[h >> 0] | 0;
						l = HEAP8[j >> 0] | 0;
						if (k << 24 >> 24 != l << 24 >> 24)
							break;
						g = g + -1 | 0;
						if (!g) {
							f = 0;
							break a
						} else {
							h = h + 1 | 0;
							j = j + 1 | 0
						}
					}
					f = (k & 255) - (l & 255) | 0
				}
			while (0);
			i = e;
			return f | 0
		}
		function cy(a, b, d) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0;
			e = i;
			f = a + 20 | 0;
			g = HEAP32[f >> 2] | 0;
			h = (HEAP32[a + 16 >> 2] | 0) - g | 0;
			a = h >>> 0 > d >>> 0 ? d : h;
			qy(g | 0, b | 0, a | 0) | 0;
			HEAP32[f >> 2] = (HEAP32[f >> 2] | 0) + a;
			i = e;
			return d | 0
		}
		function dy(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0;
			d = i;
			e = a + 4 | 0;
			f = HEAP32[e >> 2] | 0;
			g = f & -8;
			h = a + g | 0;
			j = HEAP32[34996] | 0;
			k = f & 3;
			if (!((k | 0) != 1 & a >>> 0 >= j >>> 0 & a >>> 0 < h >>> 0))
				Gb();
			l = a + (g | 4) | 0;
			m = HEAP32[l >> 2] | 0;
			if (!(m & 1))
				Gb();
			if (!k) {
				if (b >>> 0 < 256) {
					n = 0;
					i = d;
					return n | 0
				}
				if (g >>> 0 >= (b + 4 | 0) >>> 0 ? (g - b | 0) >>> 0 <= HEAP32[35112] << 1 >>> 0 : 0) {
					n = a;
					i = d;
					return n | 0
				}
				n = 0;
				i = d;
				return n | 0
			}
			if (g >>> 0 >= b >>> 0) {
				k = g - b | 0;
				if (k >>> 0 <= 15) {
					n = a;
					i = d;
					return n | 0
				}
				HEAP32[e >> 2] = f & 1 | b | 2;
				HEAP32[a + (b + 4) >> 2] = k | 3;
				HEAP32[l >> 2] = HEAP32[l >> 2] | 1;
				fy(a + b | 0, k);
				n = a;
				i = d;
				return n | 0
			}
			if ((h | 0) == (HEAP32[34998] | 0)) {
				k = (HEAP32[34995] | 0) + g | 0;
				if (k >>> 0 <= b >>> 0) {
					n = 0;
					i = d;
					return n | 0
				}
				l = k - b | 0;
				HEAP32[e >> 2] = f & 1 | b | 2;
				HEAP32[a + (b + 4) >> 2] = l | 1;
				HEAP32[34998] = a + b;
				HEAP32[34995] = l;
				n = a;
				i = d;
				return n | 0
			}
			if ((h | 0) == (HEAP32[34997] | 0)) {
				l = (HEAP32[34994] | 0) + g | 0;
				if (l >>> 0 < b >>> 0) {
					n = 0;
					i = d;
					return n | 0
				}
				k = l - b | 0;
				if (k >>> 0 > 15) {
					HEAP32[e >> 2] = f & 1 | b | 2;
					HEAP32[a + (b + 4) >> 2] = k | 1;
					HEAP32[a + l >> 2] = k;
					o = a + (l + 4) | 0;
					HEAP32[o >> 2] = HEAP32[o >> 2] & -2;
					p = a + b | 0;
					q = k
				} else {
					HEAP32[e >> 2] = f & 1 | l | 2;
					k = a + (l + 4) | 0;
					HEAP32[k >> 2] = HEAP32[k >> 2] | 1;
					p = 0;
					q = 0
				}
				HEAP32[34994] = q;
				HEAP32[34997] = p;
				n = a;
				i = d;
				return n | 0
			}
			if (m & 2) {
				n = 0;
				i = d;
				return n | 0
			}
			p = (m & -8) + g | 0;
			if (p >>> 0 < b >>> 0) {
				n = 0;
				i = d;
				return n | 0
			}
			q = p - b | 0;
			k = m >>> 3;
			do
				if (m >>> 0 >= 256) {
					l = HEAP32[a + (g + 24) >> 2] | 0;
					o = HEAP32[a + (g + 12) >> 2] | 0;
					do
						if ((o | 0) == (h | 0)) {
							r = a + (g + 20) | 0;
							s = HEAP32[r >> 2] | 0;
							if (!s) {
								t = a + (g + 16) | 0;
								u = HEAP32[t >> 2] | 0;
								if (!u) {
									v = 0;
									break
								} else {
									w = u;
									x = t
								}
							} else {
								w = s;
								x = r
							}
							while (1) {
								r = w + 20 | 0;
								s = HEAP32[r >> 2] | 0;
								if (s) {
									w = s;
									x = r;
									continue
								}
								r = w + 16 | 0;
								s = HEAP32[r >> 2] | 0;
								if (!s)
									break;
								else {
									w = s;
									x = r
								}
							}
							if (x >>> 0 < j >>> 0)
								Gb();
							else {
								HEAP32[x >> 2] = 0;
								v = w;
								break
							}
						} else {
							r = HEAP32[a + (g + 8) >> 2] | 0;
							if (r >>> 0 < j >>> 0)
								Gb();
							s = r + 12 | 0;
							if ((HEAP32[s >> 2] | 0) != (h | 0))
								Gb();
							t = o + 8 | 0;
							if ((HEAP32[t >> 2] | 0) == (h | 0)) {
								HEAP32[s >> 2] = o;
								HEAP32[t >> 2] = r;
								v = o;
								break
							} else
								Gb()
						}
					while (0);
					if (l) {
						o = HEAP32[a + (g + 28) >> 2] | 0;
						r = 140272 + (o << 2) | 0;
						if ((h | 0) == (HEAP32[r >> 2] | 0)) {
							HEAP32[r >> 2] = v;
							if (!v) {
								HEAP32[34993] = HEAP32[34993] & ~(1 << o);
								break
							}
						} else {
							if (l >>> 0 < (HEAP32[34996] | 0) >>> 0)
								Gb();
							o = l + 16 | 0;
							if ((HEAP32[o >> 2] | 0) == (h | 0))
								HEAP32[o >> 2] = v;
							else
								HEAP32[l + 20 >> 2] = v;
							if (!v)
								break
						}
						o = HEAP32[34996] | 0;
						if (v >>> 0 < o >>> 0)
							Gb();
						HEAP32[v + 24 >> 2] = l;
						r = HEAP32[a + (g + 16) >> 2] | 0;
						do
							if (r)
								if (r >>> 0 < o >>> 0)
									Gb();
								else {
									HEAP32[v + 16 >> 2] = r;
									HEAP32[r + 24 >> 2] = v;
									break
								}
						while (0);
						r = HEAP32[a + (g + 20) >> 2] | 0;
						if (r)
							if (r >>> 0 < (HEAP32[34996] | 0) >>> 0)
								Gb();
							else {
								HEAP32[v + 20 >> 2] = r;
								HEAP32[r + 24 >> 2] = v;
								break
							}
					}
				} else {
					r = HEAP32[a + (g + 8) >> 2] | 0;
					o = HEAP32[a + (g + 12) >> 2] | 0;
					l = 140008 + (k << 1 << 2) | 0;
					if ((r | 0) != (l | 0)) {
						if (r >>> 0 < j >>> 0)
							Gb();
						if ((HEAP32[r + 12 >> 2] | 0) != (h | 0))
							Gb()
					}
					if ((o | 0) == (r | 0)) {
						HEAP32[34992] = HEAP32[34992] & ~(1 << k);
						break
					}
					if ((o | 0) != (l | 0)) {
						if (o >>> 0 < j >>> 0)
							Gb();
						l = o + 8 | 0;
						if ((HEAP32[l >> 2] | 0) == (h | 0))
							y = l;
						else
							Gb()
					} else
						y = o + 8 | 0;
					HEAP32[r + 12 >> 2] = o;
					HEAP32[y >> 2] = r
				}
			while (0);
			if (q >>> 0 < 16) {
				HEAP32[e >> 2] = p | f & 1 | 2;
				y = a + (p | 4) | 0;
				HEAP32[y >> 2] = HEAP32[y >> 2] | 1;
				n = a;
				i = d;
				return n | 0
			} else {
				HEAP32[e >> 2] = f & 1 | b | 2;
				HEAP32[a + (b + 4) >> 2] = q | 3;
				f = a + (p | 4) | 0;
				HEAP32[f >> 2] = HEAP32[f >> 2] | 1;
				fy(a + b | 0, q);
				n = a;
				i = d;
				return n | 0
			}
			return 0
		}
		function ey(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0;
			d = i;
			e = a >>> 0 < 16 ? 16 : a;
			if (!(e + -1 & e))
				f = e;
			else {
				a = 16;
				while (1)
					if (a >>> 0 < e >>> 0)
						a = a << 1;
					else {
						f = a;
						break
					}
			}
			if ((-64 - f | 0) >>> 0 <= b >>> 0) {
				c[(bc() | 0) >> 2] = 12;
				g = 0;
				i = d;
				return g | 0
			}
			if (b >>> 0 < 11)
				h = 16;
			else
				h = b + 11 & -8;
			b = vx(f + 12 + h | 0) | 0;
			if (!b) {
				g = 0;
				i = d;
				return g | 0
			}
			a = b + -8 | 0;
			e = f + -1 | 0;
			do
				if (b & e) {
					j = b + e & 0 - f;
					k = j + -8 | 0;
					l = a;
					if ((k - l | 0) >>> 0 > 15)
						m = k;
					else
						m = j + (f + -8) | 0;
					j = m - l | 0;
					l = b + -4 | 0;
					k = HEAP32[l >> 2] | 0;
					n = (k & -8) - j | 0;
					if (!(k & 3)) {
						HEAP32[m >> 2] = (HEAP32[a >> 2] | 0) + j;
						HEAP32[m + 4 >> 2] = n;
						o = m;
						break
					} else {
						k = m + 4 | 0;
						HEAP32[k >> 2] = n | HEAP32[k >> 2] & 1 | 2;
						k = m + (n + 4) | 0;
						HEAP32[k >> 2] = HEAP32[k >> 2] | 1;
						HEAP32[l >> 2] = j | HEAP32[l >> 2] & 1 | 2;
						l = b + (j + -4) | 0;
						HEAP32[l >> 2] = HEAP32[l >> 2] | 1;
						fy(a, j);
						o = m;
						break
					}
				} else
					o = a;
			while (0);
			a = o + 4 | 0;
			m = HEAP32[a >> 2] | 0;
			if ((m & 3 | 0) != 0 ? (b = m & -8, b >>> 0 > (h + 16 | 0) >>> 0) : 0) {
				f = b - h | 0;
				HEAP32[a >> 2] = h | m & 1 | 2;
				HEAP32[o + (h | 4) >> 2] = f | 3;
				m = o + (b | 4) | 0;
				HEAP32[m >> 2] = HEAP32[m >> 2] | 1;
				fy(o + h | 0, f)
			}
			g = o + 8 | 0;
			i = d;
			return g | 0
		}
		function fy(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0,
			e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			H = 0;
			d = i;
			e = a + b | 0;
			f = HEAP32[a + 4 >> 2] | 0;
			do
				if (!(f & 1)) {
					g = HEAP32[a >> 2] | 0;
					if (!(f & 3)) {
						i = d;
						return
					}
					h = a + (0 - g) | 0;
					j = g + b | 0;
					k = HEAP32[34996] | 0;
					if (h >>> 0 < k >>> 0)
						Gb();
					if ((h | 0) == (HEAP32[34997] | 0)) {
						l = a + (b + 4) | 0;
						m = HEAP32[l >> 2] | 0;
						if ((m & 3 | 0) != 3) {
							n = h;
							o = j;
							break
						}
						HEAP32[34994] = j;
						HEAP32[l >> 2] = m & -2;
						HEAP32[a + (4 - g) >> 2] = j | 1;
						HEAP32[e >> 2] = j;
						i = d;
						return
					}
					m = g >>> 3;
					if (g >>> 0 < 256) {
						l = HEAP32[a + (8 - g) >> 2] | 0;
						p = HEAP32[a + (12 - g) >> 2] | 0;
						q = 140008 + (m << 1 << 2) | 0;
						if ((l | 0) != (q | 0)) {
							if (l >>> 0 < k >>> 0)
								Gb();
							if ((HEAP32[l + 12 >> 2] | 0) != (h | 0))
								Gb()
						}
						if ((p | 0) == (l | 0)) {
							HEAP32[34992] = HEAP32[34992] & ~(1 << m);
							n = h;
							o = j;
							break
						}
						if ((p | 0) != (q | 0)) {
							if (p >>> 0 < k >>> 0)
								Gb();
							q = p + 8 | 0;
							if ((HEAP32[q >> 2] | 0) == (h | 0))
								r = q;
							else
								Gb()
						} else
							r = p + 8 | 0;
						HEAP32[l + 12 >> 2] = p;
						HEAP32[r >> 2] = l;
						n = h;
						o = j;
						break
					}
					l = HEAP32[a + (24 - g) >> 2] | 0;
					p = HEAP32[a + (12 - g) >> 2] | 0;
					do
						if ((p | 0) == (h | 0)) {
							q = 16 - g | 0;
							m = a + (q + 4) | 0;
							s = HEAP32[m >> 2] | 0;
							if (!s) {
								t = a + q | 0;
								q = HEAP32[t >> 2] | 0;
								if (!q) {
									u = 0;
									break
								} else {
									v = q;
									w = t
								}
							} else {
								v = s;
								w = m
							}
							while (1) {
								m = v + 20 | 0;
								s = HEAP32[m >> 2] | 0;
								if (s) {
									v = s;
									w = m;
									continue
								}
								m = v + 16 | 0;
								s = HEAP32[m >> 2] | 0;
								if (!s)
									break;
								else {
									v = s;
									w = m
								}
							}
							if (w >>> 0 < k >>> 0)
								Gb();
							else {
								HEAP32[w >> 2] = 0;
								u = v;
								break
							}
						} else {
							m = HEAP32[a + (8 - g) >> 2] | 0;
							if (m >>> 0 < k >>> 0)
								Gb();
							s = m + 12 | 0;
							if ((HEAP32[s >> 2] | 0) != (h | 0))
								Gb();
							t = p + 8 | 0;
							if ((HEAP32[t >> 2] | 0) == (h | 0)) {
								HEAP32[s >> 2] = p;
								HEAP32[t >> 2] = m;
								u = p;
								break
							} else
								Gb()
						}
					while (0);
					if (l) {
						p = HEAP32[a + (28 - g) >> 2] | 0;
						k = 140272 + (p << 2) | 0;
						if ((h | 0) == (HEAP32[k >> 2] | 0)) {
							HEAP32[k >> 2] = u;
							if (!u) {
								HEAP32[34993] = HEAP32[34993] & ~(1 << p);
								n = h;
								o = j;
								break
							}
						} else {
							if (l >>> 0 < (HEAP32[34996] | 0) >>> 0)
								Gb();
							p = l + 16 | 0;
							if ((HEAP32[p >> 2] | 0) == (h | 0))
								HEAP32[p >> 2] = u;
							else
								HEAP32[l + 20 >> 2] = u;
							if (!u) {
								n = h;
								o = j;
								break
							}
						}
						p = HEAP32[34996] | 0;
						if (u >>> 0 < p >>> 0)
							Gb();
						HEAP32[u + 24 >> 2] = l;
						k = 16 - g | 0;
						m = HEAP32[a + k >> 2] | 0;
						do
							if (m)
								if (m >>> 0 < p >>> 0)
									Gb();
								else {
									HEAP32[u + 16 >> 2] = m;
									HEAP32[m + 24 >> 2] = u;
									break
								}
						while (0);
						m = HEAP32[a + (k + 4) >> 2] | 0;
						if (m)
							if (m >>> 0 < (HEAP32[34996] | 0) >>> 0)
								Gb();
							else {
								HEAP32[u + 20 >> 2] = m;
								HEAP32[m + 24 >> 2] = u;
								n = h;
								o = j;
								break
							}
						else {
							n = h;
							o = j
						}
					} else {
						n = h;
						o = j
					}
				} else {
					n = a;
					o = b
				}
			while (0);
			u = HEAP32[34996] | 0;
			if (e >>> 0 < u >>> 0)
				Gb();
			v = a + (b + 4) | 0;
			w = HEAP32[v >> 2] | 0;
			if (!(w & 2)) {
				if ((e | 0) == (HEAP32[34998] | 0)) {
					r = (HEAP32[34995] | 0) + o | 0;
					HEAP32[34995] = r;
					HEAP32[34998] = n;
					HEAP32[n + 4 >> 2] = r | 1;
					if ((n | 0) != (HEAP32[34997] | 0)) {
						i = d;
						return
					}
					HEAP32[34997] = 0;
					HEAP32[34994] = 0;
					i = d;
					return
				}
				if ((e | 0) == (HEAP32[34997] | 0)) {
					r = (HEAP32[34994] | 0) + o | 0;
					HEAP32[34994] = r;
					HEAP32[34997] = n;
					HEAP32[n + 4 >> 2] = r | 1;
					HEAP32[n + r >> 2] = r;
					i = d;
					return
				}
				r = (w & -8) + o | 0;
				f = w >>> 3;
				do
					if (w >>> 0 >= 256) {
						m = HEAP32[a + (b + 24) >> 2] | 0;
						p = HEAP32[a + (b + 12) >> 2] | 0;
						do
							if ((p | 0) == (e | 0)) {
								g = a + (b + 20) | 0;
								l = HEAP32[g >> 2] | 0;
								if (!l) {
									t = a + (b + 16) | 0;
									s = HEAP32[t >> 2] | 0;
									if (!s) {
										x = 0;
										break
									} else {
										y = s;
										z = t
									}
								} else {
									y = l;
									z = g
								}
								while (1) {
									g = y + 20 | 0;
									l = HEAP32[g >> 2] | 0;
									if (l) {
										y = l;
										z = g;
										continue
									}
									g = y + 16 | 0;
									l = HEAP32[g >> 2] | 0;
									if (!l)
										break;
									else {
										y = l;
										z = g
									}
								}
								if (z >>> 0 < u >>> 0)
									Gb();
								else {
									HEAP32[z >> 2] = 0;
									x = y;
									break
								}
							} else {
								g = HEAP32[a + (b + 8) >> 2] | 0;
								if (g >>> 0 < u >>> 0)
									Gb();
								l = g + 12 | 0;
								if ((HEAP32[l >> 2] | 0) != (e | 0))
									Gb();
								t = p + 8 | 0;
								if ((HEAP32[t >> 2] | 0) == (e | 0)) {
									HEAP32[l >> 2] = p;
									HEAP32[t >> 2] = g;
									x = p;
									break
								} else
									Gb()
							}
						while (0);
						if (m) {
							p = HEAP32[a + (b + 28) >> 2] | 0;
							j = 140272 + (p << 2) | 0;
							if ((e | 0) == (HEAP32[j >> 2] | 0)) {
								HEAP32[j >> 2] = x;
								if (!x) {
									HEAP32[34993] = HEAP32[34993] & ~(1 << p);
									break
								}
							} else {
								if (m >>> 0 < (HEAP32[34996] | 0) >>> 0)
									Gb();
								p = m + 16 | 0;
								if ((HEAP32[p >> 2] | 0) == (e | 0))
									HEAP32[p >> 2] = x;
								else
									HEAP32[m + 20 >> 2] = x;
								if (!x)
									break
							}
							p = HEAP32[34996] | 0;
							if (x >>> 0 < p >>> 0)
								Gb();
							HEAP32[x + 24 >> 2] = m;
							j = HEAP32[a + (b + 16) >> 2] | 0;
							do
								if (j)
									if (j >>> 0 < p >>> 0)
										Gb();
									else {
										HEAP32[x + 16 >> 2] = j;
										HEAP32[j + 24 >> 2] = x;
										break
									}
							while (0);
							j = HEAP32[a + (b + 20) >> 2] | 0;
							if (j)
								if (j >>> 0 < (HEAP32[34996] | 0) >>> 0)
									Gb();
								else {
									HEAP32[x + 20 >> 2] = j;
									HEAP32[j + 24 >> 2] = x;
									break
								}
						}
					} else {
						j = HEAP32[a + (b + 8) >> 2] | 0;
						p = HEAP32[a + (b + 12) >> 2] | 0;
						m = 140008 + (f << 1 << 2) | 0;
						if ((j | 0) != (m | 0)) {
							if (j >>> 0 < u >>> 0)
								Gb();
							if ((HEAP32[j + 12 >> 2] | 0) != (e | 0))
								Gb()
						}
						if ((p | 0) == (j | 0)) {
							HEAP32[34992] = HEAP32[34992] & ~(1 << f);
							break
						}
						if ((p | 0) != (m | 0)) {
							if (p >>> 0 < u >>> 0)
								Gb();
							m = p + 8 | 0;
							if ((HEAP32[m >> 2] | 0) == (e | 0))
								A = m;
							else
								Gb()
						} else
							A = p + 8 | 0;
						HEAP32[j + 12 >> 2] = p;
						HEAP32[A >> 2] = j
					}
				while (0);
				HEAP32[n + 4 >> 2] = r | 1;
				HEAP32[n + r >> 2] = r;
				if ((n | 0) == (HEAP32[34997] | 0)) {
					HEAP32[34994] = r;
					i = d;
					return
				} else
					B = r
			} else {
				HEAP32[v >> 2] = w & -2;
				HEAP32[n + 4 >> 2] = o | 1;
				HEAP32[n + o >> 2] = o;
				B = o
			}
			o = B >>> 3;
			if (B >>> 0 < 256) {
				w = o << 1;
				v = 140008 + (w << 2) | 0;
				r = HEAP32[34992] | 0;
				A = 1 << o;
				if (r & A) {
					o = 140008 + (w + 2 << 2) | 0;
					e = HEAP32[o >> 2] | 0;
					if (e >>> 0 < (HEAP32[34996] | 0) >>> 0)
						Gb();
					else {
						C = o;
						D = e
					}
				} else {
					HEAP32[34992] = r | A;
					C = 140008 + (w + 2 << 2) | 0;
					D = v
				}
				HEAP32[C >> 2] = n;
				HEAP32[D + 12 >> 2] = n;
				HEAP32[n + 8 >> 2] = D;
				HEAP32[n + 12 >> 2] = v;
				i = d;
				return
			}
			v = B >>> 8;
			if (v)
				if (B >>> 0 > 16777215)
					E = 31;
				else {
					D = (v + 1048320 | 0) >>> 16 & 8;
					C = v << D;
					v = (C + 520192 | 0) >>> 16 & 4;
					w = C << v;
					C = (w + 245760 | 0) >>> 16 & 2;
					A = 14 - (v | D | C) + (w << C >>> 15) | 0;
					E = B >>> (A + 7 | 0) & 1 | A << 1
				}
			else
				E = 0;
			A = 140272 + (E << 2) | 0;
			HEAP32[n + 28 >> 2] = E;
			HEAP32[n + 20 >> 2] = 0;
			HEAP32[n + 16 >> 2] = 0;
			C = HEAP32[34993] | 0;
			w = 1 << E;
			if (!(C & w)) {
				HEAP32[34993] = C | w;
				HEAP32[A >> 2] = n;
				HEAP32[n + 24 >> 2] = A;
				HEAP32[n + 12 >> 2] = n;
				HEAP32[n + 8 >> 2] = n;
				i = d;
				return
			}
			w = HEAP32[A >> 2] | 0;
			if ((E | 0) == 31)
				F = 0;
			else
				F = 25 - (E >>> 1) | 0;
			a: do
				if ((HEAP32[w + 4 >> 2] & -8 | 0) == (B | 0))
					G = w;
				else {
					E = B << F;
					A = w;
					while (1) {
						H = A + (E >>> 31 << 2) + 16 | 0;
						C = HEAP32[H >> 2] | 0;
						if (!C)
							break;
						if ((HEAP32[C + 4 >> 2] & -8 | 0) == (B | 0)) {
							G = C;
							break a
						} else {
							E = E << 1;
							A = C
						}
					}
					if (H >>> 0 < (HEAP32[34996] | 0) >>> 0)
						Gb();
					HEAP32[H >> 2] = n;
					HEAP32[n + 24 >> 2] = A;
					HEAP32[n + 12 >> 2] = n;
					HEAP32[n + 8 >> 2] = n;
					i = d;
					return
				}
			while (0);
			H = G + 8 | 0;
			B = HEAP32[H >> 2] | 0;
			w = HEAP32[34996] | 0;
			if (!(G >>> 0 >= w >>> 0 & B >>> 0 >= w >>> 0))
				Gb();
			HEAP32[B + 12 >> 2] = n;
			HEAP32[H >> 2] = n;
			HEAP32[n + 8 >> 2] = B;
			HEAP32[n + 12 >> 2] = G;
			HEAP32[n + 24 >> 2] = 0;
			i = d;
			return
		}
		function gy(a, b) {
			a = a | 0;
			b = b | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0;
			e = i;
			f = a + 4 | 0;
			g = HEAP32[f >> 2] | 0;
			h = a + 100 | 0;
			if (g >>> 0 < (HEAP32[h >> 2] | 0) >>> 0) {
				HEAP32[f >> 2] = g + 1;
				j = HEAPU8[g >> 0] | 0
			} else
				j = Gx(a) | 0;
			if ((j | 0) == 43 | (j | 0) == 45) {
				g = HEAP32[f >> 2] | 0;
				k = (j | 0) == 45 & 1;
				if (g >>> 0 < (HEAP32[h >> 2] | 0) >>> 0) {
					HEAP32[f >> 2] = g + 1;
					l = HEAPU8[g >> 0] | 0
				} else
					l = Gx(a) | 0;
				if ((l + -48 | 0) >>> 0 > 9 & (b | 0) != 0 ? (HEAP32[h >> 2] | 0) != 0 : 0) {
					HEAP32[f >> 2] = (HEAP32[f >> 2] | 0) + -1;
					m = l;
					n = k
				} else {
					m = l;
					n = k
				}
			} else {
				m = j;
				n = 0
			}
			if ((m + -48 | 0) >>> 0 > 9) {
				if (!(HEAP32[h >> 2] | 0)) {
					o = -2147483648;
					p = 0;
					H = o;
					i = e;
					return p | 0
				}
				HEAP32[f >> 2] = (HEAP32[f >> 2] | 0) + -1;
				o = -2147483648;
				p = 0;
				H = o;
				i = e;
				return p | 0
			} else {
				q = m;
				r = 0
			}
			while (1) {
				r = q + -48 + (r * 10 | 0) | 0;
				m = HEAP32[f >> 2] | 0;
				if (m >>> 0 < (HEAP32[h >> 2] | 0) >>> 0) {
					HEAP32[f >> 2] = m + 1;
					s = HEAPU8[m >> 0] | 0
				} else
					s = Gx(a) | 0;
				if (!((s + -48 | 0) >>> 0 < 10 & (r | 0) < 214748364))
					break;
				else
					q = s
			}
			q = ((r | 0) < 0) << 31 >> 31;
			if ((s + -48 | 0) >>> 0 < 10) {
				m = r;
				j = q;
				k = s;
				while (1) {
					l = By(m | 0, j | 0, 10, 0) | 0;
					b = H;
					g = ky(k | 0, ((k | 0) < 0) << 31 >> 31 | 0, -48, -1) | 0;
					t = ky(g | 0, H | 0, l | 0, b | 0) | 0;
					b = H;
					l = HEAP32[f >> 2] | 0;
					if (l >>> 0 < (HEAP32[h >> 2] | 0) >>> 0) {
						HEAP32[f >> 2] = l + 1;
						u = HEAPU8[l >> 0] | 0
					} else
						u = Gx(a) | 0;
					if ((u + -48 | 0) >>> 0 < 10 & ((b | 0) < 21474836 | (b | 0) == 21474836 & t >>> 0 < 2061584302)) {
						m = t;
						j = b;
						k = u
					} else {
						v = t;
						w = b;
						x = u;
						break
					}
				}
			} else {
				v = r;
				w = q;
				x = s
			}
			if ((x + -48 | 0) >>> 0 < 10)
				do {
					x = HEAP32[f >> 2] | 0;
					if (x >>> 0 < (HEAP32[h >> 2] | 0) >>> 0) {
						HEAP32[f >> 2] = x + 1;
						y = HEAPU8[x >> 0] | 0
					} else
						y = Gx(a) | 0
				} while ((y + -48 | 0) >>> 0 < 10);
			if (HEAP32[h >> 2] | 0)
				HEAP32[f >> 2] = (HEAP32[f >> 2] | 0) + -1;
			f = (n | 0) != 0;
			n = ly(0, 0, v | 0, w | 0) | 0;
			o = f ? H : w;
			p = f ? n : v;
			H = o;
			i = e;
			return p | 0
		}
		function hy(e, f, g, j, l) {
			e = e | 0;
			f = f | 0;
			g = g | 0;
			j = j | 0;
			l = l | 0;
			var m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0,
			I = 0,
			J = 0,
			K = 0,
			L = 0,
			M = 0,
			N = 0,
			O = 0,
			P = 0,
			Q = 0,
			R = 0,
			S = 0,
			T = 0,
			U = 0,
			V = 0,
			W = 0,
			X = 0,
			Y = 0,
			Z = 0,
			_ = 0,
			$ = 0,
			aa = 0,
			ba = 0,
			ca = 0,
			ea = 0,
			fa = 0,
			ga = 0,
			ha = 0,
			ia = 0,
			ja = 0,
			ka = 0,
			la = 0,
			ma = 0,
			na = 0,
			oa = 0,
			pa = 0,
			qa = 0,
			ra = 0,
			sa = 0,
			ta = 0,
			ua = 0,
			va = 0,
			wa = 0,
			xa = 0,
			ya = 0,
			za = 0,
			Aa = 0,
			Ba = 0,
			Ca = 0,
			Da = 0,
			Ea = 0,
			Fa = 0,
			Ga = 0,
			Ha = 0,
			Ia = 0,
			Ja = 0.0,
			Ka = 0,
			La = 0,
			Ma = 0,
			Na = 0,
			Oa = 0,
			Pa = 0,
			Qa = 0,
			Ra = 0,
			Sa = 0,
			Ta = 0.0,
			Ua = 0,
			Va = 0,
			Wa = 0,
			Xa = 0,
			Ya = 0,
			Za = 0,
			_a = 0,
			$a = 0,
			ab = 0,
			bb = 0,
			cb = 0,
			db = 0,
			eb = 0,
			fb = 0.0,
			gb = 0.0,
			hb = 0,
			ib = 0,
			jb = 0,
			kb = 0,
			lb = 0,
			mb = 0.0,
			nb = 0,
			ob = 0,
			pb = 0,
			qb = 0,
			rb = 0,
			sb = 0,
			tb = 0,
			ub = 0,
			vb = 0,
			wb = 0,
			xb = 0.0,
			yb = 0,
			zb = 0,
			Ab = 0,
			Bb = 0,
			Cb = 0,
			Db = 0,
			Eb = 0,
			Fb = 0,
			Gb = 0,
			Hb = 0,
			Ib = 0,
			Jb = 0,
			Kb = 0,
			Lb = 0,
			Mb = 0,
			Nb = 0,
			Ob = 0,
			Pb = 0,
			Qb = 0,
			Rb = 0,
			Sb = 0,
			Ub = 0,
			Vb = 0,
			Wb = 0,
			Xb = 0,
			Yb = 0,
			Zb = 0,
			_b = 0,
			$b = 0,
			ac = 0,
			cc = 0.0,
			dc = 0.0,
			ec = 0.0,
			fc = 0,
			gc = 0,
			hc = 0,
			ic = 0,
			jc = 0,
			kc = 0,
			lc = 0,
			mc = 0,
			nc = 0,
			oc = 0,
			pc = 0,
			qc = 0,
			rc = 0,
			sc = 0,
			tc = 0,
			uc = 0,
			vc = 0,
			wc = 0,
			xc = 0,
			yc = 0,
			zc = 0,
			Ac = 0,
			Bc = 0,
			Cc = 0,
			Dc = 0,
			Ec = 0,
			Fc = 0,
			Gc = 0,
			Hc = 0,
			Ic = 0,
			Jc = 0,
			Kc = 0,
			Lc = 0,
			Mc = 0,
			Nc = 0,
			Oc = 0,
			Pc = 0,
			Qc = 0,
			Rc = 0,
			Sc = 0,
			Tc = 0,
			Uc = 0,
			Vc = 0,
			Wc = 0,
			Xc = 0,
			Yc = 0,
			Zc = 0,
			_c = 0,
			$c = 0,
			ad = 0,
			bd = 0,
			cd = 0,
			dd = 0,
			ed = 0,
			fd = 0,
			gd = 0,
			hd = 0,
			id = 0,
			jd = 0,
			kd = 0,
			ld = 0,
			md = 0,
			nd = 0,
			od = 0,
			pd = 0,
			qd = 0,
			rd = 0,
			sd = 0,
			td = 0,
			ud = 0,
			vd = 0,
			wd = 0;
			m = i;
			i = i + 864 | 0;
			n = m + 16 | 0;
			o = m + 8 | 0;
			p = m + 836 | 0;
			q = p;
			r = m + 824 | 0;
			s = m + 568 | 0;
			t = m + 528 | 0;
			u = m;
			v = m + 520 | 0;
			w = (e | 0) != 0;
			x = t + 40 | 0;
			y = x;
			z = t + 39 | 0;
			t = u + 4 | 0;
			A = u;
			B = r + 12 | 0;
			C = r + 11 | 0;
			r = B;
			D = r - q | 0;
			E = -2 - q | 0;
			F = r + 2 | 0;
			G = n + 288 | 0;
			I = p + 9 | 0;
			J = I;
			K = p + 8 | 0;
			L = 0;
			M = 0;
			N = f;
			f = 0;
			O = 0;
			P = 0;
			a: while (1) {
				do
					if ((f | 0) > -1)
						if ((O | 0) > (2147483647 - f | 0)) {
							c[(bc() | 0) >> 2] = 75;
							Q = -1;
							break
						} else {
							Q = O + f | 0;
							break
						}
					else
						Q = f;
				while (0);
				R = HEAP8[N >> 0] | 0;
				if (!(R << 24 >> 24)) {
					S = 352;
					break
				} else {
					T = R;
					U = N
				}
				while (1) {
					if (!(T << 24 >> 24)) {
						V = U;
						W = U;
						break
					} else if (T << 24 >> 24 == 37) {
						X = U;
						Y = U;
						S = 9;
						break
					}
					R = U + 1 | 0;
					T = HEAP8[R >> 0] | 0;
					U = R
				}
				b: do
					if ((S | 0) == 9)
						while (1) {
							S = 0;
							if ((HEAP8[X + 1 >> 0] | 0) != 37) {
								V = X;
								W = Y;
								break b
							}
							R = Y + 1 | 0;
							Z = X + 2 | 0;
							if ((HEAP8[Z >> 0] | 0) == 37) {
								X = Z;
								Y = R;
								S = 9
							} else {
								V = Z;
								W = R;
								break
							}
						}
				while (0);
				R = W - N | 0;
				if (w)
					Ux(N, R, e) | 0;
				if ((W | 0) != (N | 0)) {
					N = V;
					f = Q;
					O = R;
					continue
				}
				Z = V + 1 | 0;
				_ = HEAP8[Z >> 0] | 0;
				$ = (_ << 24 >> 24) + -48 | 0;
				if ($ >>> 0 < 10 ? (HEAP8[V + 2 >> 0] | 0) == 36 : 0) {
					aa = V + 3 | 0;
					ba = HEAP8[aa >> 0] | 0;
					ca = $;
					ea = 1;
					fa = aa
				} else {
					ba = _;
					ca = -1;
					ea = P;
					fa = Z
				}
				Z = ba << 24 >> 24;
				c: do
					if ((Z & -32 | 0) == 32) {
						_ = ba;
						aa = Z;
						$ = 0;
						ga = fa;
						while (1) {
							ha = 1 << aa + -32;
							if (!(ha & 75913)) {
								ia = _;
								ja = $;
								ka = ga;
								break c
							}
							la = ha | $;
							ha = ga + 1 | 0;
							ma = HEAP8[ha >> 0] | 0;
							aa = ma << 24 >> 24;
							if ((aa & -32 | 0) != 32) {
								ia = ma;
								ja = la;
								ka = ha;
								break
							} else {
								_ = ma;
								$ = la;
								ga = ha
							}
						}
					} else {
						ia = ba;
						ja = 0;
						ka = fa
					}
				while (0);
				do
					if (ia << 24 >> 24 == 42) {
						Z = ka + 1 | 0;
						ga = (HEAP8[Z >> 0] | 0) + -48 | 0;
						if (ga >>> 0 < 10 ? (HEAP8[ka + 2 >> 0] | 0) == 36 : 0) {
							HEAP32[l + (ga << 2) >> 2] = 10;
							na = 1;
							oa = ka + 3 | 0;
							pa = HEAP32[j + ((HEAP8[Z >> 0] | 0) + -48 << 3) >> 2] | 0
						} else {
							if (ea) {
								qa = -1;
								S = 370;
								break a
							}
							if (!w) {
								ra = Z;
								sa = ja;
								ta = 0;
								ua = 0;
								break
							}
							ga = HEAP32[g >> 2] | 0;
							$ = HEAP32[ga >> 2] | 0;
							HEAP32[g >> 2] = ga + 4;
							na = 0;
							oa = Z;
							pa = $
						}
						if ((pa | 0) < 0) {
							ra = oa;
							sa = ja | 8192;
							ta = na;
							ua = 0 - pa | 0
						} else {
							ra = oa;
							sa = ja;
							ta = na;
							ua = pa
						}
					} else {
						$ = ia << 24 >> 24;
						if (($ + -48 | 0) >>> 0 < 10) {
							Z = $;
							$ = ka;
							ga = 0;
							do {
								ga = Z + -48 + (ga * 10 | 0) | 0;
								$ = $ + 1 | 0;
								Z = HEAP8[$ >> 0] | 0
							} while ((Z + -48 | 0) >>> 0 < 10);
							if ((ga | 0) < 0) {
								qa = -1;
								S = 370;
								break a
							} else {
								ra = $;
								sa = ja;
								ta = ea;
								ua = ga
							}
						} else {
							ra = ka;
							sa = ja;
							ta = ea;
							ua = 0
						}
					}
				while (0);
				d: do
					if ((HEAP8[ra >> 0] | 0) == 46) {
						Z = ra + 1 | 0;
						_ = HEAP8[Z >> 0] | 0;
						if (_ << 24 >> 24 != 42) {
							aa = _ << 24 >> 24;
							if ((aa + -48 | 0) >>> 0 < 10) {
								va = aa;
								wa = Z;
								xa = 0
							} else {
								ya = Z;
								za = 0;
								break
							}
							while (1) {
								Z = va + -48 + (xa * 10 | 0) | 0;
								aa = wa + 1 | 0;
								va = HEAP8[aa >> 0] | 0;
								if ((va + -48 | 0) >>> 0 >= 10) {
									ya = aa;
									za = Z;
									break d
								} else {
									wa = aa;
									xa = Z
								}
							}
						}
						ga = ra + 2 | 0;
						$ = (HEAP8[ga >> 0] | 0) + -48 | 0;
						if ($ >>> 0 < 10 ? (HEAP8[ra + 3 >> 0] | 0) == 36 : 0) {
							HEAP32[l + ($ << 2) >> 2] = 10;
							ya = ra + 4 | 0;
							za = HEAP32[j + ((HEAP8[ga >> 0] | 0) + -48 << 3) >> 2] | 0;
							break
						}
						if (ta) {
							qa = -1;
							S = 370;
							break a
						}
						if (w) {
							$ = HEAP32[g >> 2] | 0;
							Z = HEAP32[$ >> 2] | 0;
							HEAP32[g >> 2] = $ + 4;
							ya = ga;
							za = Z
						} else {
							ya = ga;
							za = 0
						}
					} else {
						ya = ra;
						za = -1
					}
				while (0);
				ga = ya;
				Z = 0;
				while (1) {
					Aa = HEAP8[ga >> 0] | 0;
					$ = (Aa << 24 >> 24) + -65 | 0;
					if ($ >>> 0 > 57) {
						qa = -1;
						S = 370;
						break a
					}
					Ba = ga + 1 | 0;
					Ca = HEAP8[140808 + (Z * 58 | 0) + $ >> 0] | 0;
					Da = Ca & 255;
					if ((Da + -1 | 0) >>> 0 < 8) {
						ga = Ba;
						Z = Da
					} else
						break
				}
				if (!(Ca << 24 >> 24)) {
					qa = -1;
					S = 370;
					break
				}
				$ = (ca | 0) > -1;
				e: do
					if (Ca << 24 >> 24 == 19)
						if ($) {
							qa = -1;
							S = 370;
							break a
						} else {
							Ea = L;
							Fa = M;
							S = 63
						}
					else {
						if ($) {
							HEAP32[l + (ca << 2) >> 2] = Da;
							aa = j + (ca << 3) | 0;
							Ea = HEAP32[aa >> 2] | 0;
							Fa = HEAP32[aa + 4 >> 2] | 0;
							S = 63;
							break
						}
						if (!w) {
							qa = 0;
							S = 370;
							break a
						}
						if ((Ca & 255) > 20) {
							Ga = Aa;
							Ha = L;
							Ia = M
						} else
							do
								switch (Da | 0) {
								case 18: {
										aa = HEAP32[g >> 2] | 0;
										HEAP32[k >> 2] = HEAP32[aa >> 2];
										HEAP32[k + 4 >> 2] = HEAP32[aa + 4 >> 2];
										Ja = +HEAPF64[k >> 3];
										HEAP32[g >> 2] = aa + 8;
										HEAPF64[k >> 3] = Ja;
										Ea = HEAP32[k >> 2] | 0;
										Fa = HEAP32[k + 4 >> 2] | 0;
										S = 63;
										break e;
										break
									}
								case 16: {
										aa = HEAP32[g >> 2] | 0;
										_ = HEAP32[aa >> 2] | 0;
										HEAP32[g >> 2] = aa + 4;
										Ka = 0;
										La = _ & 255;
										S = 64;
										break e;
										break
									}
								case 15: {
										_ = HEAP32[g >> 2] | 0;
										aa = HEAP32[_ >> 2] | 0;
										HEAP32[g >> 2] = _ + 4;
										Ka = (((aa & 255) << 24 >> 24 | 0) < 0) << 31 >> 31;
										La = aa << 24 >> 24;
										S = 64;
										break e;
										break
									}
								case 10: {
										aa = HEAP32[g >> 2] | 0;
										_ = HEAP32[aa >> 2] | 0;
										HEAP32[g >> 2] = aa + 4;
										Ka = ((_ | 0) < 0) << 31 >> 31;
										La = _;
										S = 64;
										break e;
										break
									}
								case 14: {
										_ = HEAP32[g >> 2] | 0;
										aa = HEAP32[_ >> 2] | 0;
										HEAP32[g >> 2] = _ + 4;
										Ka = 0;
										La = aa & 65535;
										S = 64;
										break e;
										break
									}
								case 11: {
										aa = HEAP32[g >> 2] | 0;
										_ = HEAP32[aa >> 2] | 0;
										HEAP32[g >> 2] = aa + 4;
										Ka = 0;
										La = _;
										S = 64;
										break e;
										break
									}
								case 9: {
										_ = HEAP32[g >> 2] | 0;
										aa = HEAP32[_ >> 2] | 0;
										HEAP32[g >> 2] = _ + 4;
										Ka = M;
										La = aa;
										S = 64;
										break e;
										break
									}
								case 12: {
										aa = HEAP32[g >> 2] | 0;
										_ = aa;
										ha = HEAP32[_ >> 2] | 0;
										la = HEAP32[_ + 4 >> 2] | 0;
										HEAP32[g >> 2] = aa + 8;
										Ka = la;
										La = ha;
										S = 64;
										break e;
										break
									}
								case 13: {
										ha = HEAP32[g >> 2] | 0;
										la = HEAP32[ha >> 2] | 0;
										HEAP32[g >> 2] = ha + 4;
										Ka = (((la & 65535) << 16 >> 16 | 0) < 0) << 31 >> 31;
										La = la << 16 >> 16;
										S = 64;
										break e;
										break
									}
								case 17: {
										la = HEAP32[g >> 2] | 0;
										HEAP32[k >> 2] = HEAP32[la >> 2];
										HEAP32[k + 4 >> 2] = HEAP32[la + 4 >> 2];
										Ja = +HEAPF64[k >> 3];
										HEAP32[g >> 2] = la + 8;
										HEAPF64[k >> 3] = Ja;
										Ka = HEAP32[k + 4 >> 2] | 0;
										La = HEAP32[k >> 2] | 0;
										S = 64;
										break e;
										break
									}
								default: {
										Ka = M;
										La = L;
										S = 64;
										break e
									}
								}
							while (0)
					}
				while (0);
				if ((S | 0) == 63) {
					S = 0;
					if (w) {
						Ka = Fa;
						La = Ea;
						S = 64
					} else {
						L = Ea;
						M = Fa;
						N = Ba;
						f = Q;
						O = R;
						P = ta;
						continue
					}
				}
				if ((S | 0) == 64) {
					S = 0;
					Ga = HEAP8[ga >> 0] | 0;
					Ha = La;
					Ia = Ka
				}
				$ = Ga << 24 >> 24;
				la = (Z | 0) != 0 & ($ & 15 | 0) == 3 ? $ & -33 : $;
				$ = sa & -65537;
				ha = (sa & 8192 | 0) == 0 ? sa : $;
				f: do
					switch (la | 0) {
					case 88:
					case 120: {
							Ma = ha;
							Na = za;
							Oa = la;
							S = 75;
							break
						}
					case 109: {
							Pa = Tb(c[(bc() | 0) >> 2] | 0) | 0;
							S = 96;
							break
						}
					case 110: {
							switch (Z | 0) {
							case 3: {
									HEAP16[Ha >> 1] = Q;
									L = Ha;
									M = Ia;
									N = Ba;
									f = Q;
									O = R;
									P = ta;
									continue a;
									break
								}
							case 0: {
									HEAP32[Ha >> 2] = Q;
									L = Ha;
									M = Ia;
									N = Ba;
									f = Q;
									O = R;
									P = ta;
									continue a;
									break
								}
							case 1: {
									HEAP32[Ha >> 2] = Q;
									L = Ha;
									M = Ia;
									N = Ba;
									f = Q;
									O = R;
									P = ta;
									continue a;
									break
								}
							case 7: {
									aa = Ha;
									HEAP32[aa >> 2] = Q;
									HEAP32[aa + 4 >> 2] = ((Q | 0) < 0) << 31 >> 31;
									L = Ha;
									M = Ia;
									N = Ba;
									f = Q;
									O = R;
									P = ta;
									continue a;
									break
								}
							case 2: {
									aa = Ha;
									HEAP32[aa >> 2] = Q;
									HEAP32[aa + 4 >> 2] = ((Q | 0) < 0) << 31 >> 31;
									L = Ha;
									M = Ia;
									N = Ba;
									f = Q;
									O = R;
									P = ta;
									continue a;
									break
								}
							case 4: {
									HEAP8[Ha >> 0] = Q;
									L = Ha;
									M = Ia;
									N = Ba;
									f = Q;
									O = R;
									P = ta;
									continue a;
									break
								}
							case 6: {
									HEAP32[Ha >> 2] = Q;
									L = Ha;
									M = Ia;
									N = Ba;
									f = Q;
									O = R;
									P = ta;
									continue a;
									break
								}
							default: {
									L = Ha;
									M = Ia;
									N = Ba;
									f = Q;
									O = R;
									P = ta;
									continue a
								}
							}
							break
						}
					case 67: {
							HEAP32[u >> 2] = Ha;
							HEAP32[t >> 2] = 0;
							Qa = u;
							Ra = A;
							Sa = -1;
							S = 101;
							break
						}
					case 112: {
							Ma = ha | 8;
							Na = za >>> 0 > 8 ? za : 8;
							Oa = 120;
							S = 75;
							break
						}
					case 65:
					case 71:
					case 70:
					case 69:
					case 97:
					case 103:
					case 102:
					case 101: {
							HEAP32[k >> 2] = Ha;
							HEAP32[k + 4 >> 2] = Ia;
							Ja = +HEAPF64[k >> 3];
							HEAP32[o >> 2] = 0;
							if ((Ia | 0) >= 0)
								if (!(ha & 2048)) {
									aa = ha & 1;
									Ta = Ja;
									Ua = aa;
									Va = (aa | 0) == 0 ? 141297 : 141302
								} else {
									Ta = Ja;
									Ua = 1;
									Va = 141299
								}
							else {
								Ta = -Ja;
								Ua = 1;
								Va = 141296
							}
							HEAPF64[k >> 3] = Ta;
							aa = HEAP32[k + 4 >> 2] & 2146435072;
							if (!(aa >>> 0 < 2146435072 | (aa | 0) == 2146435072 & 0 < 0)) {
								aa = (la & 32 | 0) != 0;
								if (Ta != Ta | 0.0 != 0.0) {
									Wa = 0;
									Xa = aa ? 141336 : 141344
								} else {
									Wa = Ua;
									Xa = aa ? 141320 : 141328
								}
								aa = Wa + 3 | 0;
								_ = (ua | 0) > (aa | 0);
								if ((ha & 8192 | 0) == 0 & _) {
									ma = ua - aa | 0;
									sy(s | 0, 32, (ma >>> 0 > 256 ? 256 : ma) | 0) | 0;
									if (ma >>> 0 > 255) {
										Ya = ma;
										do {
											Ux(s, 256, e) | 0;
											Ya = Ya + -256 | 0
										} while (Ya >>> 0 > 255);
										Za = ma & 255
									} else
										Za = ma;
									Ux(s, Za, e) | 0
								}
								Ux(Va, Wa, e) | 0;
								Ux(Xa, 3, e) | 0;
								if ((ha & 73728 | 0) == 8192 & _) {
									Ya = ua - aa | 0;
									sy(s | 0, 32, (Ya >>> 0 > 256 ? 256 : Ya) | 0) | 0;
									if (Ya >>> 0 > 255) {
										_a = Ya;
										do {
											Ux(s, 256, e) | 0;
											_a = _a + -256 | 0
										} while (_a >>> 0 > 255);
										$a = Ya & 255
									} else
										$a = Ya;
									Ux(s, $a, e) | 0
								}
								L = Ha;
								M = Ia;
								N = Ba;
								f = Q;
								O = _ ? ua : aa;
								P = ta;
								continue a
							}
							Ja = +Mx(Ta, o) * 2.0;
							_a = Ja != 0.0;
							if (_a)
								HEAP32[o >> 2] = (HEAP32[o >> 2] | 0) + -1;
							ma = la | 32;
							if ((ma | 0) == 97) {
								ab = la & 32;
								bb = (ab | 0) == 0 ? Va : Va + 9 | 0;
								cb = Ua | 2;
								db = za >>> 0 > 11 ? 0 : 12 - za | 0;
								do
									if (db) {
										eb = db;
										fb = 8.0;
										do {
											eb = eb + -1 | 0;
											fb = fb * 16.0
										} while ((eb | 0) != 0);
										if ((HEAP8[bb >> 0] | 0) == 45) {
											gb =  - (fb + (-Ja - fb));
											break
										} else {
											gb = Ja + fb - fb;
											break
										}
									} else
										gb = Ja;
								while (0);
								db = HEAP32[o >> 2] | 0;
								aa = (db | 0) < 0 ? 0 - db | 0 : db;
								if ((aa | 0) < 0) {
									db = B;
									_ = aa;
									Ya = ((aa | 0) < 0) << 31 >> 31;
									while (1) {
										eb = Dy(_ | 0, Ya | 0, 10, 0) | 0;
										db = db + -1 | 0;
										HEAP8[db >> 0] = eb | 48;
										eb = _;
										_ = Cy(_ | 0, Ya | 0, 10, 0) | 0;
										if (!(Ya >>> 0 > 9 | (Ya | 0) == 9 & eb >>> 0 > 4294967295))
											break;
										else
											Ya = H
									}
									hb = db;
									ib = _
								} else {
									hb = B;
									ib = aa
								}
								if (!ib)
									jb = hb;
								else {
									Ya = hb;
									eb = ib;
									while (1) {
										kb = Ya + -1 | 0;
										HEAP8[kb >> 0] = (eb >>> 0) % 10 | 0 | 48;
										if (eb >>> 0 < 10) {
											jb = kb;
											break
										} else {
											Ya = kb;
											eb = (eb >>> 0) / 10 | 0
										}
									}
								}
								if ((jb | 0) == (B | 0)) {
									HEAP8[C >> 0] = 48;
									lb = C
								} else
									lb = jb;
								HEAP8[lb + -1 >> 0] = (HEAP32[o >> 2] >> 31 & 2) + 43;
								eb = lb + -2 | 0;
								HEAP8[eb >> 0] = la + 15;
								if ((za | 0) < 1)
									if (!(ha & 8)) {
										mb = gb;
										Ya = p;
										while (1) {
											aa = ~~mb;
											_ = Ya + 1 | 0;
											HEAP8[Ya >> 0] = HEAPU8[141352 + aa >> 0] | ab;
											mb = (mb -  + (aa | 0)) * 16.0;
											if ((_ - q | 0) != 1 | mb == 0.0)
												nb = _;
											else {
												HEAP8[_ >> 0] = 46;
												nb = Ya + 2 | 0
											}
											if (!(mb != 0.0)) {
												ob = nb;
												break
											} else
												Ya = nb
										}
									} else {
										mb = gb;
										Ya = p;
										while (1) {
											_ = ~~mb;
											aa = Ya + 1 | 0;
											HEAP8[Ya >> 0] = HEAPU8[141352 + _ >> 0] | ab;
											mb = (mb -  + (_ | 0)) * 16.0;
											if ((aa - q | 0) == 1) {
												HEAP8[aa >> 0] = 46;
												pb = Ya + 2 | 0
											} else
												pb = aa;
											if (!(mb != 0.0)) {
												ob = pb;
												break
											} else
												Ya = pb
										}
									}
								else {
									mb = gb;
									Ya = p;
									while (1) {
										aa = ~~mb;
										_ = Ya + 1 | 0;
										HEAP8[Ya >> 0] = HEAPU8[141352 + aa >> 0] | ab;
										mb = (mb -  + (aa | 0)) * 16.0;
										if ((_ - q | 0) == 1) {
											HEAP8[_ >> 0] = 46;
											qb = Ya + 2 | 0
										} else
											qb = _;
										if (!(mb != 0.0)) {
											ob = qb;
											break
										} else
											Ya = qb
									}
								}
								Ya = ob;
								ab = eb;
								if ((za | 0) != 0 & (E + Ya | 0) < (za | 0))
									rb = F + za - ab | 0;
								else
									rb = D - ab + Ya | 0;
								ab = rb + cb | 0;
								_ = ha & 73728;
								aa = (ua | 0) > (ab | 0);
								if ((_ | 0) == 0 & aa) {
									db = ua - ab | 0;
									sy(s | 0, 32, (db >>> 0 > 256 ? 256 : db) | 0) | 0;
									if (db >>> 0 > 255) {
										kb = db;
										do {
											Ux(s, 256, e) | 0;
											kb = kb + -256 | 0
										} while (kb >>> 0 > 255);
										sb = db & 255
									} else
										sb = db;
									Ux(s, sb, e) | 0
								}
								Ux(bb, cb, e) | 0;
								if ((_ | 0) == 65536 & aa) {
									kb = ua - ab | 0;
									sy(s | 0, 48, (kb >>> 0 > 256 ? 256 : kb) | 0) | 0;
									if (kb >>> 0 > 255) {
										tb = kb;
										do {
											Ux(s, 256, e) | 0;
											tb = tb + -256 | 0
										} while (tb >>> 0 > 255);
										ub = kb & 255
									} else
										ub = kb;
									Ux(s, ub, e) | 0
								}
								tb = Ya - q | 0;
								Ux(p, tb, e) | 0;
								cb = r - eb | 0;
								bb = rb - cb - tb | 0;
								if ((bb | 0) > 0) {
									sy(s | 0, 48, (bb >>> 0 > 256 ? 256 : bb) | 0) | 0;
									if (bb >>> 0 > 255) {
										tb = bb;
										do {
											Ux(s, 256, e) | 0;
											tb = tb + -256 | 0
										} while (tb >>> 0 > 255);
										vb = bb & 255
									} else
										vb = bb;
									Ux(s, vb, e) | 0
								}
								Ux(eb, cb, e) | 0;
								if ((_ | 0) == 8192 & aa) {
									tb = ua - ab | 0;
									sy(s | 0, 32, (tb >>> 0 > 256 ? 256 : tb) | 0) | 0;
									if (tb >>> 0 > 255) {
										Ya = tb;
										do {
											Ux(s, 256, e) | 0;
											Ya = Ya + -256 | 0
										} while (Ya >>> 0 > 255);
										wb = tb & 255
									} else
										wb = tb;
									Ux(s, wb, e) | 0
								}
								L = Ha;
								M = Ia;
								N = Ba;
								f = Q;
								O = aa ? ua : ab;
								P = ta;
								continue a
							}
							Ya = (za | 0) < 0 ? 6 : za;
							if (_a) {
								_ = (HEAP32[o >> 2] | 0) + -28 | 0;
								HEAP32[o >> 2] = _;
								xb = Ja * 268435456.0;
								yb = _
							} else {
								xb = Ja;
								yb = HEAP32[o >> 2] | 0
							}
							_ = (yb | 0) < 0 ? n : G;
							cb = _;
							mb = xb;
							eb = _;
							do {
								bb = ~~mb >>> 0;
								HEAP32[eb >> 2] = bb;
								eb = eb + 4 | 0;
								mb = (mb -  + (bb >>> 0)) * 1.0e9
							} while (mb != 0.0);
							_a = HEAP32[o >> 2] | 0;
							if ((_a | 0) > 0) {
								ab = _a;
								aa = _;
								tb = eb;
								while (1) {
									bb = (ab | 0) > 29 ? 29 : ab;
									kb = tb + -4 | 0;
									do
										if (kb >>> 0 < aa >>> 0)
											zb = aa;
										else {
											db = 0;
											Ab = kb;
											do {
												Bb = ty(HEAP32[Ab >> 2] | 0, 0, bb | 0) | 0;
												Cb = ky(Bb | 0, H | 0, db | 0, 0) | 0;
												Bb = H;
												Db = Dy(Cb | 0, Bb | 0, 1e9, 0) | 0;
												HEAP32[Ab >> 2] = Db;
												db = Cy(Cb | 0, Bb | 0, 1e9, 0) | 0;
												Ab = Ab + -4 | 0
											} while (Ab >>> 0 >= aa >>> 0);
											if (!db) {
												zb = aa;
												break
											}
											Ab = aa + -4 | 0;
											HEAP32[Ab >> 2] = db;
											zb = Ab
										}
									while (0);
									kb = tb;
									while (1) {
										if (kb >>> 0 <= zb >>> 0)
											break;
										Ab = kb + -4 | 0;
										if (!(HEAP32[Ab >> 2] | 0))
											kb = Ab;
										else
											break
									}
									Ab = (HEAP32[o >> 2] | 0) - bb | 0;
									HEAP32[o >> 2] = Ab;
									if ((Ab | 0) > 0) {
										ab = Ab;
										aa = zb;
										tb = kb
									} else {
										Eb = Ab;
										Fb = zb;
										Gb = kb;
										break
									}
								}
							} else {
								Eb = _a;
								Fb = _;
								Gb = eb
							}
							g: do
								if ((Eb | 0) < 0) {
									tb = ((Ya + 25 | 0) / 9 | 0) + 1 | 0;
									if ((ma | 0) == 102) {
										aa = _ + (tb << 2) | 0;
										ab = Eb;
										Ab = Fb;
										Bb = Gb;
										while (1) {
											Cb = 0 - ab | 0;
											Db = (Cb | 0) > 9 ? 9 : Cb;
											do
												if (Ab >>> 0 < Bb >>> 0) {
													Cb = (1 << Db) + -1 | 0;
													Hb = 1e9 >>> Db;
													Ib = 0;
													Jb = Ab;
													do {
														Kb = HEAP32[Jb >> 2] | 0;
														HEAP32[Jb >> 2] = (Kb >>> Db) + Ib;
														Ib = da(Kb & Cb, Hb) | 0;
														Jb = Jb + 4 | 0
													} while (Jb >>> 0 < Bb >>> 0);
													Jb = (HEAP32[Ab >> 2] | 0) == 0 ? Ab + 4 | 0 : Ab;
													if (!Ib) {
														Lb = Jb;
														Mb = Bb;
														break
													}
													HEAP32[Bb >> 2] = Ib;
													Lb = Jb;
													Mb = Bb + 4 | 0
												} else {
													Lb = (HEAP32[Ab >> 2] | 0) == 0 ? Ab + 4 | 0 : Ab;
													Mb = Bb
												}
											while (0);
											db = (Mb - cb >> 2 | 0) > (tb | 0) ? aa : Mb;
											ab = (HEAP32[o >> 2] | 0) + Db | 0;
											HEAP32[o >> 2] = ab;
											if ((ab | 0) >= 0) {
												Nb = Lb;
												Ob = db;
												break g
											} else {
												Ab = Lb;
												Bb = db
											}
										}
									} else {
										Pb = Eb;
										Qb = Fb;
										Rb = Gb
									}
									while (1) {
										Bb = 0 - Pb | 0;
										Ab = (Bb | 0) > 9 ? 9 : Bb;
										do
											if (Qb >>> 0 < Rb >>> 0) {
												Bb = (1 << Ab) + -1 | 0;
												ab = 1e9 >>> Ab;
												aa = 0;
												kb = Qb;
												do {
													bb = HEAP32[kb >> 2] | 0;
													HEAP32[kb >> 2] = (bb >>> Ab) + aa;
													aa = da(bb & Bb, ab) | 0;
													kb = kb + 4 | 0
												} while (kb >>> 0 < Rb >>> 0);
												kb = (HEAP32[Qb >> 2] | 0) == 0 ? Qb + 4 | 0 : Qb;
												if (!aa) {
													Sb = kb;
													Ub = Rb;
													break
												}
												HEAP32[Rb >> 2] = aa;
												Sb = kb;
												Ub = Rb + 4 | 0
											} else {
												Sb = (HEAP32[Qb >> 2] | 0) == 0 ? Qb + 4 | 0 : Qb;
												Ub = Rb
											}
										while (0);
										if ((Ub - Sb >> 2 | 0) > (tb | 0))
											Vb = Sb + (tb << 2) | 0;
										else
											Vb = Ub;
										Pb = (HEAP32[o >> 2] | 0) + Ab | 0;
										HEAP32[o >> 2] = Pb;
										if ((Pb | 0) >= 0) {
											Nb = Sb;
											Ob = Vb;
											break
										} else {
											Qb = Sb;
											Rb = Vb
										}
									}
								} else {
									Nb = Fb;
									Ob = Gb
								}
							while (0);
							do
								if (Nb >>> 0 < Ob >>> 0) {
									eb = (cb - Nb >> 2) * 9 | 0;
									_a = HEAP32[Nb >> 2] | 0;
									if (_a >>> 0 < 10) {
										Wb = eb;
										break
									} else {
										Xb = eb;
										Yb = 10
									}
									while (1) {
										Yb = Yb * 10 | 0;
										eb = Xb + 1 | 0;
										if (_a >>> 0 < Yb >>> 0) {
											Wb = eb;
											break
										} else
											Xb = eb
									}
								} else
									Wb = 0;
							while (0);
							_a = (ma | 0) == 103;
							eb = Ya - ((ma | 0) != 102 ? Wb : 0) + ((_a & (Ya | 0) != 0) << 31 >> 31) | 0;
							if ((eb | 0) < (((Ob - cb >> 2) * 9 | 0) + -9 | 0)) {
								tb = eb + 9216 | 0;
								eb = (tb | 0) / 9 | 0;
								Db = _ + (eb + -1023 << 2) | 0;
								kb = ((tb | 0) % 9 | 0) + 1 | 0;
								if ((kb | 0) < 9) {
									tb = 10;
									ab = kb;
									while (1) {
										kb = tb * 10 | 0;
										ab = ab + 1 | 0;
										if ((ab | 0) == 9) {
											Zb = kb;
											break
										} else
											tb = kb
									}
								} else
									Zb = 10;
								tb = HEAP32[Db >> 2] | 0;
								ab = (tb >>> 0) % (Zb >>> 0) | 0;
								if ((ab | 0) == 0 ? (_ + (eb + -1022 << 2) | 0) == (Ob | 0) : 0) {
									_b = Nb;
									$b = Db;
									ac = Wb
								} else
									S = 232;
								do
									if ((S | 0) == 232) {
										S = 0;
										fb = (((tb >>> 0) / (Zb >>> 0) | 0) & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0;
										ma = (Zb | 0) / 2 | 0;
										do
											if (ab >>> 0 < ma >>> 0)
												cc = .5;
											else {
												if ((ab | 0) == (ma | 0) ? (_ + (eb + -1022 << 2) | 0) == (Ob | 0) : 0) {
													cc = 1.0;
													break
												}
												cc = 1.5
											}
										while (0);
										do
											if (!Ua) {
												dc = fb;
												ec = cc
											} else {
												if ((HEAP8[Va >> 0] | 0) != 45) {
													dc = fb;
													ec = cc;
													break
												}
												dc = fb * -1.0;
												ec = cc * -1.0
											}
										while (0);
										ma = tb - ab | 0;
										HEAP32[Db >> 2] = ma;
										if (!(dc + ec != dc)) {
											_b = Nb;
											$b = Db;
											ac = Wb;
											break
										}
										kb = ma + Zb | 0;
										HEAP32[Db >> 2] = kb;
										if (kb >>> 0 > 999999999) {
											kb = Nb;
											ma = Db;
											while (1) {
												Bb = ma + -4 | 0;
												HEAP32[ma >> 2] = 0;
												if (Bb >>> 0 < kb >>> 0) {
													Ib = kb + -4 | 0;
													HEAP32[Ib >> 2] = 0;
													fc = Ib
												} else
													fc = kb;
												Ib = (HEAP32[Bb >> 2] | 0) + 1 | 0;
												HEAP32[Bb >> 2] = Ib;
												if (Ib >>> 0 > 999999999) {
													kb = fc;
													ma = Bb
												} else {
													gc = fc;
													hc = Bb;
													break
												}
											}
										} else {
											gc = Nb;
											hc = Db
										}
										ma = (cb - gc >> 2) * 9 | 0;
										kb = HEAP32[gc >> 2] | 0;
										if (kb >>> 0 < 10) {
											_b = gc;
											$b = hc;
											ac = ma;
											break
										} else {
											ic = ma;
											jc = 10
										}
										while (1) {
											jc = jc * 10 | 0;
											ma = ic + 1 | 0;
											if (kb >>> 0 < jc >>> 0) {
												_b = gc;
												$b = hc;
												ac = ma;
												break
											} else
												ic = ma
										}
									}
								while (0);
								Db = $b + 4 | 0;
								kc = _b;
								lc = ac;
								mc = Ob >>> 0 > Db >>> 0 ? Db : Ob
							} else {
								kc = Nb;
								lc = Wb;
								mc = Ob
							}
							Db = 0 - lc | 0;
							ab = mc;
							while (1) {
								if (ab >>> 0 <= kc >>> 0) {
									nc = 0;
									break
								}
								tb = ab + -4 | 0;
								if (!(HEAP32[tb >> 2] | 0))
									ab = tb;
								else {
									nc = 1;
									break
								}
							}
							do
								if (_a) {
									tb = ((Ya | 0) == 0 & 1) + Ya | 0;
									if ((tb | 0) > (lc | 0) & (lc | 0) > -5) {
										oc = la + -1 | 0;
										pc = tb + -1 - lc | 0
									} else {
										oc = la + -2 | 0;
										pc = tb + -1 | 0
									}
									if (ha & 8) {
										qc = oc;
										rc = pc;
										break
									}
									do
										if (nc) {
											tb = HEAP32[ab + -4 >> 2] | 0;
											if (!tb) {
												sc = 9;
												break
											}
											if (!((tb >>> 0) % 10 | 0)) {
												tc = 10;
												uc = 0
											} else {
												sc = 0;
												break
											}
											while (1) {
												tc = tc * 10 | 0;
												eb = uc + 1 | 0;
												if ((tb >>> 0) % (tc >>> 0) | 0) {
													sc = eb;
													break
												} else
													uc = eb
											}
										} else
											sc = 9;
									while (0);
									tb = ((ab - cb >> 2) * 9 | 0) + -9 | 0;
									if ((oc | 32 | 0) == 102) {
										Ab = tb - sc | 0;
										eb = (Ab | 0) < 0 ? 0 : Ab;
										qc = oc;
										rc = (pc | 0) < (eb | 0) ? pc : eb;
										break
									} else {
										eb = tb + lc - sc | 0;
										tb = (eb | 0) < 0 ? 0 : eb;
										qc = oc;
										rc = (pc | 0) < (tb | 0) ? pc : tb;
										break
									}
								} else {
									qc = la;
									rc = Ya
								}
							while (0);
							Ya = (rc | 0) != 0;
							if (Ya)
								vc = 1;
							else
								vc = (ha & 8 | 0) != 0;
							cb = vc & 1;
							_a = (qc | 32 | 0) == 102;
							if (_a) {
								wc = (lc | 0) > 0 ? lc : 0;
								xc = 0
							} else {
								tb = (lc | 0) < 0 ? Db : lc;
								if ((tb | 0) < 0) {
									eb = B;
									Ab = tb;
									kb = ((tb | 0) < 0) << 31 >> 31;
									while (1) {
										ma = Dy(Ab | 0, kb | 0, 10, 0) | 0;
										eb = eb + -1 | 0;
										HEAP8[eb >> 0] = ma | 48;
										ma = Ab;
										Ab = Cy(Ab | 0, kb | 0, 10, 0) | 0;
										if (!(kb >>> 0 > 9 | (kb | 0) == 9 & ma >>> 0 > 4294967295))
											break;
										else
											kb = H
									}
									yc = eb;
									zc = Ab
								} else {
									yc = B;
									zc = tb
								}
								if (!zc)
									Ac = yc;
								else {
									kb = yc;
									Db = zc;
									while (1) {
										ma = kb + -1 | 0;
										HEAP8[ma >> 0] = (Db >>> 0) % 10 | 0 | 48;
										if (Db >>> 0 < 10) {
											Ac = ma;
											break
										} else {
											kb = ma;
											Db = (Db >>> 0) / 10 | 0
										}
									}
								}
								if ((r - Ac | 0) < 2) {
									Db = Ac;
									while (1) {
										kb = Db + -1 | 0;
										HEAP8[kb >> 0] = 48;
										if ((r - kb | 0) < 2)
											Db = kb;
										else {
											Bc = kb;
											break
										}
									}
								} else
									Bc = Ac;
								HEAP8[Bc + -1 >> 0] = (lc >> 31 & 2) + 43;
								Db = Bc + -2 | 0;
								HEAP8[Db >> 0] = qc;
								wc = r - Db | 0;
								xc = Db
							}
							Db = Ua + 1 + rc + cb + wc | 0;
							kb = ha & 73728;
							tb = (ua | 0) > (Db | 0);
							if ((kb | 0) == 0 & tb) {
								Ab = ua - Db | 0;
								sy(s | 0, 32, (Ab >>> 0 > 256 ? 256 : Ab) | 0) | 0;
								if (Ab >>> 0 > 255) {
									eb = Ab;
									do {
										Ux(s, 256, e) | 0;
										eb = eb + -256 | 0
									} while (eb >>> 0 > 255);
									Cc = Ab & 255
								} else
									Cc = Ab;
								Ux(s, Cc, e) | 0
							}
							Ux(Va, Ua, e) | 0;
							if ((kb | 0) == 65536 & tb) {
								eb = ua - Db | 0;
								sy(s | 0, 48, (eb >>> 0 > 256 ? 256 : eb) | 0) | 0;
								if (eb >>> 0 > 255) {
									cb = eb;
									do {
										Ux(s, 256, e) | 0;
										cb = cb + -256 | 0
									} while (cb >>> 0 > 255);
									Dc = eb & 255
								} else
									Dc = eb;
								Ux(s, Dc, e) | 0
							}
							do
								if (_a) {
									cb = kc >>> 0 > _ >>> 0 ? _ : kc;
									Ab = cb;
									do {
										ma = HEAP32[Ab >> 2] | 0;
										if (!ma)
											Ec = I;
										else {
											Bb = I;
											Ib = ma;
											while (1) {
												ma = Bb + -1 | 0;
												HEAP8[ma >> 0] = (Ib >>> 0) % 10 | 0 | 48;
												if (Ib >>> 0 < 10) {
													Ec = ma;
													break
												} else {
													Bb = ma;
													Ib = (Ib >>> 0) / 10 | 0
												}
											}
										}
										do
											if ((Ab | 0) == (cb | 0)) {
												if ((Ec | 0) != (I | 0)) {
													Fc = Ec;
													break
												}
												HEAP8[K >> 0] = 48;
												Fc = K
											} else {
												if (Ec >>> 0 > p >>> 0)
													Gc = Ec;
												else {
													Fc = Ec;
													break
												}
												while (1) {
													Ib = Gc + -1 | 0;
													HEAP8[Ib >> 0] = 48;
													if (Ib >>> 0 > p >>> 0)
														Gc = Ib;
													else {
														Fc = Ib;
														break
													}
												}
											}
										while (0);
										Ux(Fc, J - Fc | 0, e) | 0;
										Ab = Ab + 4 | 0
									} while (Ab >>> 0 <= _ >>> 0);
									if (!((ha & 8 | 0) == 0 & (Ya ^ 1)))
										Ux(141368, 1, e) | 0;
									if (Ab >>> 0 < ab >>> 0 & (rc | 0) > 0) {
										cb = rc;
										aa = Ab;
										while (1) {
											Ib = HEAP32[aa >> 2] | 0;
											if (Ib) {
												Bb = I;
												ma = Ib;
												while (1) {
													Bb = Bb + -1 | 0;
													HEAP8[Bb >> 0] = (ma >>> 0) % 10 | 0 | 48;
													if (ma >>> 0 < 10)
														break;
													else
														ma = (ma >>> 0) / 10 | 0
												}
												if (Bb >>> 0 > p >>> 0) {
													Hc = Bb;
													S = 301
												} else
													Ic = Bb
											} else {
												Hc = I;
												S = 301
											}
											if ((S | 0) == 301)
												while (1) {
													S = 0;
													ma = Hc + -1 | 0;
													HEAP8[ma >> 0] = 48;
													if (ma >>> 0 > p >>> 0) {
														Hc = ma;
														S = 301
													} else {
														Ic = ma;
														break
													}
												}
											Ux(Ic, (cb | 0) > 9 ? 9 : cb, e) | 0;
											aa = aa + 4 | 0;
											Bb = cb + -9 | 0;
											if (!(aa >>> 0 < ab >>> 0 & (Bb | 0) > 0)) {
												Jc = Bb;
												break
											} else
												cb = Bb
										}
									} else
										Jc = rc;
									if ((Jc | 0) <= 0)
										break;
									sy(s | 0, 48, (Jc >>> 0 > 256 ? 256 : Jc) | 0) | 0;
									if (Jc >>> 0 > 255) {
										cb = Jc;
										do {
											Ux(s, 256, e) | 0;
											cb = cb + -256 | 0
										} while (cb >>> 0 > 255);
										Kc = Jc & 255
									} else
										Kc = Jc;
									Ux(s, Kc, e) | 0
								} else {
									cb = nc ? ab : kc + 4 | 0;
									do
										if ((rc | 0) > -1) {
											aa = (ha & 8 | 0) == 0;
											Ab = rc;
											Bb = kc;
											do {
												ma = HEAP32[Bb >> 2] | 0;
												if (ma) {
													Ib = I;
													bb = ma;
													while (1) {
														Ib = Ib + -1 | 0;
														HEAP8[Ib >> 0] = (bb >>> 0) % 10 | 0 | 48;
														if (bb >>> 0 < 10)
															break;
														else
															bb = (bb >>> 0) / 10 | 0
													}
													if ((Ib | 0) != (I | 0))
														Lc = Ib;
													else
														S = 313
												} else
													S = 313;
												if ((S | 0) == 313) {
													S = 0;
													HEAP8[K >> 0] = 48;
													Lc = K
												}
												do
													if ((Bb | 0) == (kc | 0)) {
														bb = Lc + 1 | 0;
														Ux(Lc, 1, e) | 0;
														if ((Ab | 0) < 1 & aa) {
															Mc = bb;
															break
														}
														Ux(141368, 1, e) | 0;
														Mc = bb
													} else {
														if (Lc >>> 0 > p >>> 0)
															Nc = Lc;
														else {
															Mc = Lc;
															break
														}
														while (1) {
															bb = Nc + -1 | 0;
															HEAP8[bb >> 0] = 48;
															if (bb >>> 0 > p >>> 0)
																Nc = bb;
															else {
																Mc = bb;
																break
															}
														}
													}
												while (0);
												Ib = J - Mc | 0;
												Ux(Mc, (Ab | 0) > (Ib | 0) ? Ib : Ab, e) | 0;
												Ab = Ab - Ib | 0;
												Bb = Bb + 4 | 0
											} while (Bb >>> 0 < cb >>> 0 & (Ab | 0) > -1);
											if ((Ab | 0) <= 0)
												break;
											sy(s | 0, 48, (Ab >>> 0 > 256 ? 256 : Ab) | 0) | 0;
											if (Ab >>> 0 > 255) {
												Bb = Ab;
												do {
													Ux(s, 256, e) | 0;
													Bb = Bb + -256 | 0
												} while (Bb >>> 0 > 255);
												Oc = Ab & 255
											} else
												Oc = Ab;
											Ux(s, Oc, e) | 0
										}
									while (0);
									Ux(xc, r - xc | 0, e) | 0
								}
							while (0);
							if ((kb | 0) == 8192 & tb) {
								ab = ua - Db | 0;
								sy(s | 0, 32, (ab >>> 0 > 256 ? 256 : ab) | 0) | 0;
								if (ab >>> 0 > 255) {
									Ya = ab;
									do {
										Ux(s, 256, e) | 0;
										Ya = Ya + -256 | 0
									} while (Ya >>> 0 > 255);
									Pc = ab & 255
								} else
									Pc = ab;
								Ux(s, Pc, e) | 0
							}
							L = Ha;
							M = Ia;
							N = Ba;
							f = Q;
							O = tb ? ua : Db;
							P = ta;
							continue a;
							break
						}
					case 117: {
							Qc = Ia;
							Rc = Ha;
							Sc = 0;
							Tc = 141272;
							S = 86;
							break
						}
					case 111: {
							Ya = (Ha | 0) == 0 & (Ia | 0) == 0;
							if (Ya)
								Uc = x;
							else {
								kb = x;
								_ = Ha;
								_a = Ia;
								while (1) {
									eb = kb + -1 | 0;
									HEAP8[eb >> 0] = _ & 7 | 48;
									_ = ny(_ | 0, _a | 0, 3) | 0;
									_a = H;
									if ((_ | 0) == 0 & (_a | 0) == 0) {
										Uc = eb;
										break
									} else
										kb = eb
								}
							}
							kb = (ha & 8 | 0) == 0 | Ya;
							Vc = Ha;
							Wc = Ia;
							Xc = Uc;
							Yc = ha;
							Zc = za;
							_c = kb & 1 ^ 1;
							$c = kb ? 141272 : 141277;
							S = 91;
							break
						}
					case 105:
					case 100: {
							if ((Ia | 0) < 0) {
								kb = ly(0, 0, Ha | 0, Ia | 0) | 0;
								Qc = H;
								Rc = kb;
								Sc = 1;
								Tc = 141272;
								S = 86;
								break f
							}
							if (!(ha & 2048)) {
								kb = ha & 1;
								Qc = Ia;
								Rc = Ha;
								Sc = kb;
								Tc = (kb | 0) == 0 ? 141272 : 141274;
								S = 86
							} else {
								Qc = Ia;
								Rc = Ha;
								Sc = 1;
								Tc = 141273;
								S = 86
							}
							break
						}
					case 115: {
							Pa = (Ha | 0) == 0 ? 141288 : Ha;
							S = 96;
							break
						}
					case 99: {
							HEAP8[z >> 0] = Ha;
							ad = Ha;
							bd = Ia;
							cd = z;
							dd = $;
							ed = 1;
							fd = 0;
							gd = 141272;
							hd = x;
							break
						}
					case 83: {
							kb = Ha;
							if (!za) {
								id = Ha;
								jd = kb;
								kd = 0;
								S = 106
							} else {
								Qa = kb;
								Ra = Ha;
								Sa = za;
								S = 101
							}
							break
						}
					default: {
							ad = Ha;
							bd = Ia;
							cd = N;
							dd = ha;
							ed = za;
							fd = 0;
							gd = 141272;
							hd = x
						}
					}
				while (0);
				do
					if ((S | 0) == 75) {
						S = 0;
						la = Oa & 32;
						if (!((Ha | 0) == 0 & (Ia | 0) == 0)) {
							R = x;
							Z = Ha;
							ga = Ia;
							do {
								R = R + -1 | 0;
								HEAP8[R >> 0] = HEAPU8[141352 + (Z & 15) >> 0] | la;
								Z = ny(Z | 0, ga | 0, 4) | 0;
								ga = H
							} while (!((Z | 0) == 0 & (ga | 0) == 0));
							if (!(Ma & 8)) {
								Vc = Ha;
								Wc = Ia;
								Xc = R;
								Yc = Ma;
								Zc = Na;
								_c = 0;
								$c = 141272;
								S = 91
							} else {
								Vc = Ha;
								Wc = Ia;
								Xc = R;
								Yc = Ma;
								Zc = Na;
								_c = 2;
								$c = 141272 + (Oa >> 4) | 0;
								S = 91
							}
						} else {
							Vc = Ha;
							Wc = Ia;
							Xc = x;
							Yc = Ma;
							Zc = Na;
							_c = 0;
							$c = 141272;
							S = 91
						}
					} else if ((S | 0) == 86) {
						S = 0;
						if (Qc >>> 0 > 0 | (Qc | 0) == 0 & Rc >>> 0 > 4294967295) {
							ga = x;
							Z = Rc;
							la = Qc;
							while (1) {
								Ya = Dy(Z | 0, la | 0, 10, 0) | 0;
								ga = ga + -1 | 0;
								HEAP8[ga >> 0] = Ya | 48;
								Ya = Z;
								Z = Cy(Z | 0, la | 0, 10, 0) | 0;
								if (!(la >>> 0 > 9 | (la | 0) == 9 & Ya >>> 0 > 4294967295))
									break;
								else
									la = H
							}
							ld = ga;
							md = Z
						} else {
							ld = x;
							md = Rc
						}
						if (!md) {
							Vc = Rc;
							Wc = Qc;
							Xc = ld;
							Yc = ha;
							Zc = za;
							_c = Sc;
							$c = Tc;
							S = 91
						} else {
							la = ld;
							R = md;
							while (1) {
								Ya = la + -1 | 0;
								HEAP8[Ya >> 0] = (R >>> 0) % 10 | 0 | 48;
								if (R >>> 0 < 10) {
									Vc = Rc;
									Wc = Qc;
									Xc = Ya;
									Yc = ha;
									Zc = za;
									_c = Sc;
									$c = Tc;
									S = 91;
									break
								} else {
									la = Ya;
									R = (R >>> 0) / 10 | 0
								}
							}
						}
					} else if ((S | 0) == 96) {
						S = 0;
						R = ay(Pa, 0, za) | 0;
						if (!R) {
							ad = Ha;
							bd = Ia;
							cd = Pa;
							dd = $;
							ed = za;
							fd = 0;
							gd = 141272;
							hd = Pa + za | 0;
							break
						} else {
							ad = Ha;
							bd = Ia;
							cd = Pa;
							dd = $;
							ed = R - Pa | 0;
							fd = 0;
							gd = 141272;
							hd = R;
							break
						}
					} else if ((S | 0) == 101) {
						S = 0;
						R = 0;
						la = 0;
						Z = Qa;
						while (1) {
							ga = HEAP32[Z >> 2] | 0;
							if (!ga) {
								nd = R;
								od = la;
								break
							}
							Ya = Px(v, ga) | 0;
							if ((Ya | 0) < 0 | Ya >>> 0 > (Sa - R | 0) >>> 0) {
								nd = R;
								od = Ya;
								break
							}
							ga = Ya + R | 0;
							if (Sa >>> 0 > ga >>> 0) {
								R = ga;
								la = Ya;
								Z = Z + 4 | 0
							} else {
								nd = ga;
								od = Ya;
								break
							}
						}
						if ((od | 0) < 0) {
							qa = -1;
							S = 370;
							break a
						} else {
							id = Ra;
							jd = Qa;
							kd = nd;
							S = 106
						}
					}
				while (0);
				if ((S | 0) == 91) {
					S = 0;
					$ = (Zc | 0) > -1 ? Yc & -65537 : Yc;
					Z = (Vc | 0) != 0 | (Wc | 0) != 0;
					if (Z | (Zc | 0) != 0) {
						la = (Z & 1 ^ 1) + (y - Xc) | 0;
						ad = Vc;
						bd = Wc;
						cd = Xc;
						dd = $;
						ed = (Zc | 0) > (la | 0) ? Zc : la;
						fd = _c;
						gd = $c;
						hd = x
					} else {
						ad = Vc;
						bd = Wc;
						cd = x;
						dd = $;
						ed = 0;
						fd = _c;
						gd = $c;
						hd = x
					}
				} else if ((S | 0) == 106) {
					S = 0;
					$ = ha & 73728;
					la = (ua | 0) > (kd | 0);
					if (($ | 0) == 0 & la) {
						Z = ua - kd | 0;
						sy(s | 0, 32, (Z >>> 0 > 256 ? 256 : Z) | 0) | 0;
						if (Z >>> 0 > 255) {
							R = Z;
							do {
								Ux(s, 256, e) | 0;
								R = R + -256 | 0
							} while (R >>> 0 > 255);
							pd = Z & 255
						} else
							pd = Z;
						Ux(s, pd, e) | 0
					}
					h: do
						if (kd) {
							R = 0;
							ha = jd;
							while (1) {
								Ya = HEAP32[ha >> 2] | 0;
								if (!Ya)
									break h;
								ga = Px(v, Ya) | 0;
								R = ga + R | 0;
								if ((R | 0) > (kd | 0))
									break h;
								Ux(v, ga, e) | 0;
								if (R >>> 0 >= kd >>> 0)
									break;
								else
									ha = ha + 4 | 0
							}
						}
					while (0);
					if (($ | 0) == 8192 & la) {
						Z = ua - kd | 0;
						sy(s | 0, 32, (Z >>> 0 > 256 ? 256 : Z) | 0) | 0;
						if (Z >>> 0 > 255) {
							ha = Z;
							do {
								Ux(s, 256, e) | 0;
								ha = ha + -256 | 0
							} while (ha >>> 0 > 255);
							qd = Z & 255
						} else
							qd = Z;
						Ux(s, qd, e) | 0
					}
					L = id;
					M = Ia;
					N = Ba;
					f = Q;
					O = la ? ua : kd;
					P = ta;
					continue
				}
				ha = hd - cd | 0;
				$ = (ed | 0) < (ha | 0) ? ha : ed;
				R = fd + $ | 0;
				ga = (ua | 0) < (R | 0) ? R : ua;
				Ya = dd & 73728;
				kb = (ga | 0) > (R | 0);
				if ((Ya | 0) == 0 & kb) {
					_a = ga - R | 0;
					sy(s | 0, 32, (_a >>> 0 > 256 ? 256 : _a) | 0) | 0;
					if (_a >>> 0 > 255) {
						_ = _a;
						do {
							Ux(s, 256, e) | 0;
							_ = _ + -256 | 0
						} while (_ >>> 0 > 255);
						rd = _a & 255
					} else
						rd = _a;
					Ux(s, rd, e) | 0
				}
				Ux(gd, fd, e) | 0;
				if ((Ya | 0) == 65536 & kb) {
					_ = ga - R | 0;
					sy(s | 0, 48, (_ >>> 0 > 256 ? 256 : _) | 0) | 0;
					if (_ >>> 0 > 255) {
						la = _;
						do {
							Ux(s, 256, e) | 0;
							la = la + -256 | 0
						} while (la >>> 0 > 255);
						sd = _ & 255
					} else
						sd = _;
					Ux(s, sd, e) | 0
				}
				if (($ | 0) > (ha | 0)) {
					la = $ - ha | 0;
					sy(s | 0, 48, (la >>> 0 > 256 ? 256 : la) | 0) | 0;
					if (la >>> 0 > 255) {
						_a = la;
						do {
							Ux(s, 256, e) | 0;
							_a = _a + -256 | 0
						} while (_a >>> 0 > 255);
						td = la & 255
					} else
						td = la;
					Ux(s, td, e) | 0
				}
				Ux(cd, ha, e) | 0;
				if (!((Ya | 0) == 8192 & kb)) {
					L = ad;
					M = bd;
					N = Ba;
					f = Q;
					O = ga;
					P = ta;
					continue
				}
				_a = ga - R | 0;
				sy(s | 0, 32, (_a >>> 0 > 256 ? 256 : _a) | 0) | 0;
				if (_a >>> 0 > 255) {
					$ = _a;
					do {
						Ux(s, 256, e) | 0;
						$ = $ + -256 | 0
					} while ($ >>> 0 > 255);
					ud = _a & 255
				} else
					ud = _a;
				Ux(s, ud, e) | 0;
				L = ad;
				M = bd;
				N = Ba;
				f = Q;
				O = ga;
				P = ta
			}
			if ((S | 0) == 352) {
				if (e) {
					qa = Q;
					i = m;
					return qa | 0
				}
				if (!P) {
					qa = 0;
					i = m;
					return qa | 0
				} else
					vd = 1;
				while (1) {
					P = HEAP32[l + (vd << 2) >> 2] | 0;
					if (!P) {
						wd = vd;
						break
					}
					Q = j + (vd << 3) | 0;
					i: do
						if (P >>> 0 <= 20)
							do
								switch (P | 0) {
								case 9: {
										e = HEAP32[g >> 2] | 0;
										ta = HEAP32[e >> 2] | 0;
										HEAP32[g >> 2] = e + 4;
										HEAP32[Q >> 2] = ta;
										break i;
										break
									}
								case 12: {
										ta = HEAP32[g >> 2] | 0;
										e = ta;
										O = HEAP32[e >> 2] | 0;
										f = HEAP32[e + 4 >> 2] | 0;
										HEAP32[g >> 2] = ta + 8;
										ta = Q;
										HEAP32[ta >> 2] = O;
										HEAP32[ta + 4 >> 2] = f;
										break i;
										break
									}
								case 13: {
										f = HEAP32[g >> 2] | 0;
										ta = HEAP32[f >> 2] | 0;
										HEAP32[g >> 2] = f + 4;
										f = (ta & 65535) << 16 >> 16;
										ta = Q;
										HEAP32[ta >> 2] = f;
										HEAP32[ta + 4 >> 2] = ((f | 0) < 0) << 31 >> 31;
										break i;
										break
									}
								case 14: {
										f = HEAP32[g >> 2] | 0;
										ta = HEAP32[f >> 2] | 0;
										HEAP32[g >> 2] = f + 4;
										f = Q;
										HEAP32[f >> 2] = ta & 65535;
										HEAP32[f + 4 >> 2] = 0;
										break i;
										break
									}
								case 15: {
										f = HEAP32[g >> 2] | 0;
										ta = HEAP32[f >> 2] | 0;
										HEAP32[g >> 2] = f + 4;
										f = (ta & 255) << 24 >> 24;
										ta = Q;
										HEAP32[ta >> 2] = f;
										HEAP32[ta + 4 >> 2] = ((f | 0) < 0) << 31 >> 31;
										break i;
										break
									}
								case 16: {
										f = HEAP32[g >> 2] | 0;
										ta = HEAP32[f >> 2] | 0;
										HEAP32[g >> 2] = f + 4;
										f = Q;
										HEAP32[f >> 2] = ta & 255;
										HEAP32[f + 4 >> 2] = 0;
										break i;
										break
									}
								case 17: {
										f = HEAP32[g >> 2] | 0;
										HEAP32[k >> 2] = HEAP32[f >> 2];
										HEAP32[k + 4 >> 2] = HEAP32[f + 4 >> 2];
										dc = +HEAPF64[k >> 3];
										HEAP32[g >> 2] = f + 8;
										HEAPF64[Q >> 3] = dc;
										break i;
										break
									}
								case 18: {
										f = HEAP32[g >> 2] | 0;
										HEAP32[k >> 2] = HEAP32[f >> 2];
										HEAP32[k + 4 >> 2] = HEAP32[f + 4 >> 2];
										dc = +HEAPF64[k >> 3];
										HEAP32[g >> 2] = f + 8;
										HEAPF64[Q >> 3] = dc;
										break i;
										break
									}
								case 10: {
										f = HEAP32[g >> 2] | 0;
										ta = HEAP32[f >> 2] | 0;
										HEAP32[g >> 2] = f + 4;
										f = Q;
										HEAP32[f >> 2] = ta;
										HEAP32[f + 4 >> 2] = ((ta | 0) < 0) << 31 >> 31;
										break i;
										break
									}
								case 11: {
										ta = HEAP32[g >> 2] | 0;
										f = HEAP32[ta >> 2] | 0;
										HEAP32[g >> 2] = ta + 4;
										ta = Q;
										HEAP32[ta >> 2] = f;
										HEAP32[ta + 4 >> 2] = 0;
										break i;
										break
									}
								default:
									break i
								}
							while (0);
					while (0);
					vd = vd + 1 | 0;
					if ((vd | 0) >= 10) {
						qa = 1;
						S = 370;
						break
					}
				}
				if ((S | 0) == 370) {
					i = m;
					return qa | 0
				}
				while (1) {
					if (HEAP32[l + (wd << 2) >> 2] | 0) {
						qa = -1;
						S = 370;
						break
					}
					wd = wd + 1 | 0;
					if ((wd | 0) >= 10) {
						qa = 1;
						S = 370;
						break
					}
				}
				if ((S | 0) == 370) {
					i = m;
					return qa | 0
				}
			} else if ((S | 0) == 370) {
				i = m;
				return qa | 0
			}
			return 0
		}
		function iy() {}
		function jy(a) {
			a = a | 0;
			return (a & 255) << 24 | (a >> 8 & 255) << 16 | (a >> 16 & 255) << 8 | a >>> 24 | 0
		}
		function ky(a, b, c, d) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			d = d | 0;
			var e = 0;
			e = a + c >>> 0;
			return (H = b + d + (e >>> 0 < a >>> 0 | 0) >>> 0, e | 0) | 0
		}
		function ly(a, b, c, d) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			d = d | 0;
			var e = 0;
			e = b - d >>> 0;
			e = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0;
			return (H = e, a - c >>> 0 | 0) | 0
		}
		function my(a, b, d) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			var e = 0;
			u = u + 1 | 0;
			HEAP32[a >> 2] = u;
			while ((e | 0) < 20) {
				if (!(HEAP32[d + (e << 3) >> 2] | 0)) {
					HEAP32[d + (e << 3) >> 2] = u;
					HEAP32[d + ((e << 3) + 4) >> 2] = b;
					HEAP32[d + ((e << 3) + 8) >> 2] = 0;
					return 0
				}
				e = e + 1 | 0
			}
			gb(116);
			gb(111);
			gb(111);
			gb(32);
			gb(109);
			gb(97);
			gb(110);
			gb(121);
			gb(32);
			gb(115);
			gb(101);
			gb(116);
			gb(106);
			gb(109);
			gb(112);
			gb(115);
			gb(32);
			gb(105);
			gb(110);
			gb(32);
			gb(97);
			gb(32);
			gb(102);
			gb(117);
			gb(110);
			gb(99);
			gb(116);
			gb(105);
			gb(111);
			gb(110);
			gb(32);
			gb(99);
			gb(97);
			gb(108);
			gb(108);
			gb(44);
			gb(32);
			gb(98);
			gb(117);
			gb(105);
			gb(108);
			gb(100);
			gb(32);
			gb(119);
			gb(105);
			gb(116);
			gb(104);
			gb(32);
			gb(97);
			gb(32);
			gb(104);
			gb(105);
			gb(103);
			gb(104);
			gb(101);
			gb(114);
			gb(32);
			gb(118);
			gb(97);
			gb(108);
			gb(117);
			gb(101);
			gb(32);
			gb(102);
			gb(111);
			gb(114);
			gb(32);
			gb(77);
			gb(65);
			gb(88);
			gb(95);
			gb(83);
			gb(69);
			gb(84);
			gb(74);
			gb(77);
			gb(80);
			gb(83);
			gb(10);
			ea(0);
			return 0
		}
		function ny(a, b, c) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			if ((c | 0) < 32) {
				H = b >>> c;
				return a >>> c | (b & (1 << c) - 1) << 32 - c
			}
			H = 0;
			return b >>> c - 32 | 0
		}
		function oy(a, b) {
			a = a | 0;
			b = b | 0;
			var d = 0,
			e = 0;
			while ((d | 0) < 20) {
				e = HEAP32[b + (d << 3) >> 2] | 0;
				if (!e)
					break;
				if ((e | 0) == (a | 0))
					return HEAP32[b + ((d << 3) + 4) >> 2] | 0;
				d = d + 1 | 0
			}
			return 0
		}
		function py(b) {
			b = b | 0;
			var c = 0;
			c = b;
			while (HEAP8[c >> 0] | 0)
				c = c + 1 | 0;
			return c - b | 0
		}
		function qy(b, d, e) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0;
			if ((e | 0) >= 4096)
				return La(b | 0, d | 0, e | 0) | 0;
			f = b | 0;
			if ((b & 3) == (d & 3)) {
				while (b & 3) {
					if (!e)
						return f | 0;
					HEAP8[b >> 0] = HEAP8[d >> 0] | 0;
					b = b + 1 | 0;
					d = d + 1 | 0;
					e = e - 1 | 0
				}
				while ((e | 0) >= 4) {
					HEAP32[b >> 2] = HEAP32[d >> 2];
					b = b + 4 | 0;
					d = d + 4 | 0;
					e = e - 4 | 0
				}
			}
			while ((e | 0) > 0) {
				HEAP8[b >> 0] = HEAP8[d >> 0] | 0;
				b = b + 1 | 0;
				d = d + 1 | 0;
				e = e - 1 | 0
			}
			return f | 0
		}
		function ry(b, c, d) {
			b = b | 0;
			c = c | 0;
			d = d | 0;
			var e = 0;
			if ((c | 0) < (b | 0) & (b | 0) < (c + d | 0)) {
				e = b;
				c = c + d | 0;
				b = b + d | 0;
				while ((d | 0) > 0) {
					b = b - 1 | 0;
					c = c - 1 | 0;
					d = d - 1 | 0;
					HEAP8[b >> 0] = HEAP8[c >> 0] | 0
				}
				b = e
			} else
				qy(b, c, d) | 0;
			return b | 0
		}
		function sy(b, d, e) {
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			i = 0;
			f = b + e | 0;
			if ((e | 0) >= 20) {
				d = d & 255;
				g = b & 3;
				h = d | d << 8 | d << 16 | d << 24;
				i = f & ~3;
				if (g) {
					g = b + 4 - g | 0;
					while ((b | 0) < (g | 0)) {
						HEAP8[b >> 0] = d;
						b = b + 1 | 0
					}
				}
				while ((b | 0) < (i | 0)) {
					HEAP32[b >> 2] = h;
					b = b + 4 | 0
				}
			}
			while ((b | 0) < (f | 0)) {
				HEAP8[b >> 0] = d;
				b = b + 1 | 0
			}
			return b - e | 0
		}
		function ty(a, b, c) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			if ((c | 0) < 32) {
				H = b << c | (a & (1 << c) - 1 << 32 - c) >>> 32 - c;
				return a << c
			}
			H = a << c - 32;
			return 0
		}
		function uy(b, c) {
			b = b | 0;
			c = c | 0;
			var d = 0;
			do {
				HEAP8[b + d >> 0] = HEAP8[c + d >> 0];
				d = d + 1 | 0
			} while (HEAP8[c + (d - 1) >> 0] | 0);
			return b | 0
		}
		function vy(a, b, c) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			if ((c | 0) < 32) {
				H = b >> c;
				return a >>> c | (b & (1 << c) - 1) << 32 - c
			}
			H = (b | 0) < 0 ? -1 : 0;
			return b >> c - 32 | 0
		}
		function wy(b) {
			b = b | 0;
			var c = 0;
			c = HEAP8[n + (b >>> 24) >> 0] | 0;
			if ((c | 0) < 8)
				return c | 0;
			c = HEAP8[n + (b >> 16 & 255) >> 0] | 0;
			if ((c | 0) < 8)
				return c + 8 | 0;
			c = HEAP8[n + (b >> 8 & 255) >> 0] | 0;
			if ((c | 0) < 8)
				return c + 16 | 0;
			return (HEAP8[n + (b & 255) >> 0] | 0) + 24 | 0
		}
		function xy(b) {
			b = b | 0;
			var c = 0;
			c = HEAP8[m + (b & 255) >> 0] | 0;
			if ((c | 0) < 8)
				return c | 0;
			c = HEAP8[m + (b >> 8 & 255) >> 0] | 0;
			if ((c | 0) < 8)
				return c + 8 | 0;
			c = HEAP8[m + (b >> 16 & 255) >> 0] | 0;
			if ((c | 0) < 8)
				return c + 16 | 0;
			return (HEAP8[m + (b >>> 24) >> 0] | 0) + 24 | 0
		}
		function yy(a, b) {
			a = a | 0;
			b = b | 0;
			var c = 0,
			d = 0,
			e = 0,
			f = 0;
			c = a & 65535;
			d = b & 65535;
			e = da(d, c) | 0;
			f = a >>> 16;
			a = (e >>> 16) + (da(d, f) | 0) | 0;
			d = b >>> 16;
			b = da(d, c) | 0;
			return (H = (a >>> 16) + (da(d, f) | 0) + (((a & 65535) + b | 0) >>> 16) | 0, a + b << 16 | e & 65535 | 0) | 0
		}
		function zy(a, b, c, d) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			d = d | 0;
			var e = 0,
			f = 0,
			g = 0,
			h = 0,
			i = 0;
			e = b >> 31 | ((b | 0) < 0 ? -1 : 0) << 1;
			f = ((b | 0) < 0 ? -1 : 0) >> 31 | ((b | 0) < 0 ? -1 : 0) << 1;
			g = d >> 31 | ((d | 0) < 0 ? -1 : 0) << 1;
			h = ((d | 0) < 0 ? -1 : 0) >> 31 | ((d | 0) < 0 ? -1 : 0) << 1;
			i = ly(e ^ a, f ^ b, e, f) | 0;
			b = H;
			a = g ^ e;
			e = h ^ f;
			f = ly((Ey(i, b, ly(g ^ c, h ^ d, g, h) | 0, H, 0) | 0) ^ a, H ^ e, a, e) | 0;
			return f | 0
		}
		function Ay(a, b, d, e) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0,
			h = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0;
			f = i;
			i = i + 8 | 0;
			g = f | 0;
			h = b >> 31 | ((b | 0) < 0 ? -1 : 0) << 1;
			j = ((b | 0) < 0 ? -1 : 0) >> 31 | ((b | 0) < 0 ? -1 : 0) << 1;
			k = e >> 31 | ((e | 0) < 0 ? -1 : 0) << 1;
			l = ((e | 0) < 0 ? -1 : 0) >> 31 | ((e | 0) < 0 ? -1 : 0) << 1;
			m = ly(h ^ a, j ^ b, h, j) | 0;
			b = H;
			Ey(m, b, ly(k ^ d, l ^ e, k, l) | 0, H, g) | 0;
			l = ly(HEAP32[g >> 2] ^ h, HEAP32[g + 4 >> 2] ^ j, h, j) | 0;
			j = H;
			i = f;
			return (H = j, l) | 0
		}
		function By(a, b, c, d) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			d = d | 0;
			var e = 0,
			f = 0;
			e = a;
			a = c;
			c = yy(e, a) | 0;
			f = H;
			return (H = (da(b, a) | 0) + (da(d, e) | 0) + f | f & 0, c | 0 | 0) | 0
		}
		function Cy(a, b, c, d) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			d = d | 0;
			var e = 0;
			e = Ey(a, b, c, d, 0) | 0;
			return e | 0
		}
		function Dy(a, b, d, e) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			var f = 0,
			g = 0;
			f = i;
			i = i + 8 | 0;
			g = f | 0;
			Ey(a, b, d, e, g) | 0;
			i = f;
			return (H = HEAP32[g + 4 >> 2] | 0, HEAP32[g >> 2] | 0) | 0
		}
		function Ey(a, b, d, e, f) {
			a = a | 0;
			b = b | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			var g = 0,
			h = 0,
			i = 0,
			j = 0,
			k = 0,
			l = 0,
			m = 0,
			n = 0,
			o = 0,
			p = 0,
			q = 0,
			r = 0,
			s = 0,
			t = 0,
			u = 0,
			v = 0,
			w = 0,
			x = 0,
			y = 0,
			z = 0,
			A = 0,
			B = 0,
			C = 0,
			D = 0,
			E = 0,
			F = 0,
			G = 0;
			g = a;
			h = b;
			i = h;
			j = d;
			k = e;
			l = k;
			if (!i) {
				m = (f | 0) != 0;
				if (!l) {
					if (m) {
						HEAP32[f >> 2] = (g >>> 0) % (j >>> 0);
						HEAP32[f + 4 >> 2] = 0
					}
					n = 0;
					o = (g >>> 0) / (j >>> 0) >>> 0;
					return (H = n, o) | 0
				} else {
					if (!m) {
						n = 0;
						o = 0;
						return (H = n, o) | 0
					}
					HEAP32[f >> 2] = a | 0;
					HEAP32[f + 4 >> 2] = b & 0;
					n = 0;
					o = 0;
					return (H = n, o) | 0
				}
			}
			m = (l | 0) == 0;
			do
				if (j) {
					if (!m) {
						p = (wy(l | 0) | 0) - (wy(i | 0) | 0) | 0;
						if (p >>> 0 <= 31) {
							q = p + 1 | 0;
							r = 31 - p | 0;
							s = p - 31 >> 31;
							t = q;
							u = g >>> (q >>> 0) & s | i << r;
							v = i >>> (q >>> 0) & s;
							w = 0;
							x = g << r;
							break
						}
						if (!f) {
							n = 0;
							o = 0;
							return (H = n, o) | 0
						}
						HEAP32[f >> 2] = a | 0;
						HEAP32[f + 4 >> 2] = h | b & 0;
						n = 0;
						o = 0;
						return (H = n, o) | 0
					}
					r = j - 1 | 0;
					if (r & j) {
						s = (wy(j | 0) | 0) + 33 - (wy(i | 0) | 0) | 0;
						q = 64 - s | 0;
						p = 32 - s | 0;
						y = p >> 31;
						z = s - 32 | 0;
						A = z >> 31;
						t = s;
						u = p - 1 >> 31 & i >>> (z >>> 0) | (i << p | g >>> (s >>> 0)) & A;
						v = A & i >>> (s >>> 0);
						w = g << q & y;
						x = (i << q | g >>> (z >>> 0)) & y | g << p & s - 33 >> 31;
						break
					}
					if (f) {
						HEAP32[f >> 2] = r & g;
						HEAP32[f + 4 >> 2] = 0
					}
					if ((j | 0) == 1) {
						n = h | b & 0;
						o = a | 0 | 0;
						return (H = n, o) | 0
					} else {
						r = xy(j | 0) | 0;
						n = i >>> (r >>> 0) | 0;
						o = i << 32 - r | g >>> (r >>> 0) | 0;
						return (H = n, o) | 0
					}
				} else {
					if (m) {
						if (f) {
							HEAP32[f >> 2] = (i >>> 0) % (j >>> 0);
							HEAP32[f + 4 >> 2] = 0
						}
						n = 0;
						o = (i >>> 0) / (j >>> 0) >>> 0;
						return (H = n, o) | 0
					}
					if (!g) {
						if (f) {
							HEAP32[f >> 2] = 0;
							HEAP32[f + 4 >> 2] = (i >>> 0) % (l >>> 0)
						}
						n = 0;
						o = (i >>> 0) / (l >>> 0) >>> 0;
						return (H = n, o) | 0
					}
					r = l - 1 | 0;
					if (!(r & l)) {
						if (f) {
							HEAP32[f >> 2] = a | 0;
							HEAP32[f + 4 >> 2] = r & i | b & 0
						}
						n = 0;
						o = i >>> ((xy(l | 0) | 0) >>> 0);
						return (H = n, o) | 0
					}
					r = (wy(l | 0) | 0) - (wy(i | 0) | 0) | 0;
					if (r >>> 0 <= 30) {
						s = r + 1 | 0;
						p = 31 - r | 0;
						t = s;
						u = i << p | g >>> (s >>> 0);
						v = i >>> (s >>> 0);
						w = 0;
						x = g << p;
						break
					}
					if (!f) {
						n = 0;
						o = 0;
						return (H = n, o) | 0
					}
					HEAP32[f >> 2] = a | 0;
					HEAP32[f + 4 >> 2] = h | b & 0;
					n = 0;
					o = 0;
					return (H = n, o) | 0
				}
			while (0);
			if (!t) {
				B = x;
				C = w;
				D = v;
				E = u;
				F = 0;
				G = 0
			} else {
				b = d | 0 | 0;
				d = k | e & 0;
				e = ky(b, d, -1, -1) | 0;
				k = H;
				h = x;
				x = w;
				w = v;
				v = u;
				u = t;
				t = 0;
				do {
					a = h;
					h = x >>> 31 | h << 1;
					x = t | x << 1;
					g = v << 1 | a >>> 31 | 0;
					a = v >>> 31 | w << 1 | 0;
					ly(e, k, g, a) | 0;
					i = H;
					l = i >> 31 | ((i | 0) < 0 ? -1 : 0) << 1;
					t = l & 1;
					v = ly(g, a, l & b, (((i | 0) < 0 ? -1 : 0) >> 31 | ((i | 0) < 0 ? -1 : 0) << 1) & d) | 0;
					w = H;
					u = u - 1 | 0
				} while ((u | 0) != 0);
				B = h;
				C = x;
				D = w;
				E = v;
				F = 0;
				G = t
			}
			t = C;
			C = 0;
			if (f) {
				HEAP32[f >> 2] = E;
				HEAP32[f + 4 >> 2] = D
			}
			n = (t | 0) >>> 31 | (B | C) << 1 | (C << 1 | t >>> 31) & 0 | F;
			o = (t << 1 | 0 >>> 31) & -2 | G;
			return (H = n, o) | 0
		}
		function Fy(a, b) {
			a = a | 0;
			b = b | 0;
			lc[a & 255](b | 0)
		}
		function Gy(a, b, c, d) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			d = d | 0;
			return mc[a & 31](b | 0, c | 0, d | 0) | 0
		}
		function Hy(a, b, c) {
			a = a | 0;
			b = b | 0;
			c = +c;
			nc[a & 3](b | 0, +c)
		}
		function Iy(a, b, c, d, e, f) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			oc[a & 3](b | 0, c | 0, d | 0, e | 0, f | 0)
		}
		function Jy(a, b, c, d, e, f, g, h, i, j) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			i = i | 0;
			j = j | 0;
			return pc[a & 1](b | 0, c | 0, d | 0, e | 0, f | 0, g | 0, h | 0, i | 0, j | 0) | 0
		}
		function Ky(a, b, c, d, e, f, g, h) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			qc[a & 63](b | 0, c | 0, d | 0, e | 0, f | 0, g | 0, h | 0)
		}
		function Ly(a, b, c) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			rc[a & 127](b | 0, c | 0)
		}
		function My(a, b, c, d, e, f, g, h, i, j) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			i = i | 0;
			j = j | 0;
			sc[a & 3](b | 0, c | 0, d | 0, e | 0, f | 0, g | 0, h | 0, i | 0, j | 0)
		}
		function Ny(a, b) {
			a = a | 0;
			b = b | 0;
			return tc[a & 127](b | 0) | 0
		}
		function Oy(a, b, c, d, e, f, g, h) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = +h;
			uc[a & 3](b | 0, c | 0, d | 0, e | 0, f | 0, g | 0, +h)
		}
		function Py(a, b, c, d) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			d = d | 0;
			vc[a & 31](b | 0, c | 0, d | 0)
		}
		function Qy(a, b, c, d, e, f, g) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = +g;
			wc[a & 7](b | 0, c | 0, d | 0, e | 0, f | 0, +g)
		}
		function Ry(a) {
			a = a | 0;
			xc[a & 3]()
		}
		function Sy(a, b, c, d, e, f, g, h, i) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			i = i | 0;
			return yc[a & 15](b | 0, c | 0, d | 0, e | 0, f | 0, g | 0, h | 0, i | 0) | 0
		}
		function Ty(a, b, c, d, e) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			d = d | 0;
			e = e | 0;
			return zc[a & 15](b | 0, c | 0, d | 0, e | 0) | 0
		}
		function Uy(a, b, c, d, e, f, g, h, i) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			i = i | 0;
			Ac[a & 7](b | 0, c | 0, d | 0, e | 0, f | 0, g | 0, h | 0, i | 0)
		}
		function Vy(a, b, c, d, e, f, g) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			Bc[a & 31](b | 0, c | 0, d | 0, e | 0, f | 0, g | 0)
		}
		function Wy(a, b, c) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			return Cc[a & 31](b | 0, c | 0) | 0
		}
		function Xy(a, b, c, d, e, f) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			return Dc[a & 15](b | 0, c | 0, d | 0, e | 0, f | 0) | 0
		}
		function Yy(a, b, c, d, e) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			d = d | 0;
			e = e | 0;
			Ec[a & 15](b | 0, c | 0, d | 0, e | 0)
		}
		function Zy(a) {
			a = a | 0;
			ea(0)
		}
		function _y(a) {
			a = a | 0;
			Qc(a | 0)
		}
		function $y(a) {
			a = a | 0;
			Tc(a | 0)
		}
		function az(a) {
			a = a | 0;
			Uc(a | 0)
		}
		function bz(a) {
			a = a | 0;
			gf(a | 0)
		}
		function cz(a) {
			a = a | 0;
			kf(a | 0)
		}
		function dz(a) {
			a = a | 0;
			lf(a | 0)
		}
		function ez(a) {
			a = a | 0;
			qf(a | 0)
		}
		function fz(a) {
			a = a | 0;
			tf(a | 0)
		}
		function gz(a) {
			a = a | 0;
			uf(a | 0)
		}
		function hz(a) {
			a = a | 0;
			wf(a | 0)
		}
		function iz(a) {
			a = a | 0;
			zf(a | 0)
		}
		function jz(a) {
			a = a | 0;
			Af(a | 0)
		}
		function kz(a) {
			a = a | 0;
			Cf(a | 0)
		}
		function lz(a) {
			a = a | 0;
			Ff(a | 0)
		}
		function mz(a) {
			a = a | 0;
			Gf(a | 0)
		}
		function nz(a, b, c) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			ea(1);
			return 0
		}
		function oz(a, b, c) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			return Qb(a | 0, b | 0, c | 0) | 0
		}
		function pz(a, b) {
			a = a | 0;
			b = +b;
			ea(2)
		}
		function qz(a, b, c, d, e) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			d = d | 0;
			e = e | 0;
			ea(3)
		}
		function rz(a, b, c, d, e, f, g, h, i) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			i = i | 0;
			ea(4);
			return 0
		}
		function sz(a, b, c, d, e, f, g) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			ea(5)
		}
		function tz(a, b) {
			a = a | 0;
			b = b | 0;
			ea(6)
		}
		function uz(a, b) {
			a = a | 0;
			b = b | 0;
			Sc(a | 0, b | 0)
		}
		function vz(a, b) {
			a = a | 0;
			b = b | 0;
			jf(a | 0, b | 0)
		}
		function wz(a, b) {
			a = a | 0;
			b = b | 0;
			sf(a | 0, b | 0)
		}
		function xz(a, b) {
			a = a | 0;
			b = b | 0;
			yf(a | 0, b | 0)
		}
		function yz(a, b) {
			a = a | 0;
			b = b | 0;
			Ef(a | 0, b | 0)
		}
		function zz(a, b) {
			a = a | 0;
			b = b | 0;
			hc(a | 0, b | 0)
		}
		function Az(a, b, c, d, e, f, g, h, i) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			i = i | 0;
			ea(7)
		}
		function Bz(a) {
			a = a | 0;
			ea(8);
			return 0
		}
		function Cz(a) {
			a = a | 0;
			return Rc(a | 0) | 0
		}
		function Dz(a) {
			a = a | 0;
			return Vc(a | 0) | 0
		}
		function Ez(a) {
			a = a | 0;
			return hf(a | 0) | 0
		}
		function Fz(a) {
			a = a | 0;
			return rf(a | 0) | 0
		}
		function Gz(a) {
			a = a | 0;
			return xf(a | 0) | 0
		}
		function Hz(a) {
			a = a | 0;
			return Df(a | 0) | 0
		}
		function Iz(a, b, c, d, e, f, g) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = +g;
			ea(9)
		}
		function Jz(a, b, c) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			ea(10)
		}
		function Kz(a, b, c, d, e, f) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			d = d | 0;
			e = e | 0;
			f = +f;
			ea(11)
		}
		function Lz() {
			ea(12)
		}
		function Mz(a, b, c, d, e, f, g, h) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			ea(13);
			return 0
		}
		function Nz(a, b, c, d) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			d = d | 0;
			ea(14);
			return 0
		}
		function Oz(a, b, c, d, e, f, g, h) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			g = g | 0;
			h = h | 0;
			ea(15)
		}
		function Pz(a, b, c, d, e, f) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			ea(16)
		}
		function Qz(a, b, c, d, e, f) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			mf(a | 0, b | 0, c | 0, d | 0, e | 0, f | 0)
		}
		function Rz(a, b, c, d, e, f) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			vf(a | 0, b | 0, c | 0, d | 0, e | 0, f | 0)
		}
		function Sz(a, b, c, d, e, f) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			Bf(a | 0, b | 0, c | 0, d | 0, e | 0, f | 0)
		}
		function Tz(a, b, c, d, e, f) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			d = d | 0;
			e = e | 0;
			f = f | 0;
			Hf(a | 0, b | 0, c | 0, d | 0, e | 0, f | 0)
		}
		function Uz(a, b) {
			a = a | 0;
			b = b | 0;
			ea(17);
			return 0
		}
		function Vz(a, b) {
			a = a | 0;
			b = b | 0;
			return ec(a | 0, b | 0) | 0
		}
		function Wz(a, b, c, d, e) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			d = d | 0;
			e = e | 0;
			ea(18);
			return 0
		}
		function Xz(a, b, c, d) {
			a = a | 0;
			b = b | 0;
			c = c | 0;
			d = d | 0;
			ea(19)
		}

		// EMSCRIPTEN_END_FUNCS
		var lc = [Zy, $c, _y, $y, az, pd, od, wd, Bd, Cd, Fd, Gd, Ad, Id, Jd, Kd, Gw, Ld, af, bf, ff, bz, cz, dz, nf, of, pf, ez, fz, gz, hz, iz, jz, kz, lz, mz, If, Jf, Kf, Lf, Mf, Nf, Of, Pf, Qf, Ik, Jk, Qk, Rk, Tk, Wk, Zk, $k, Vm, Nt, St, Fm, Xt, au, Ul, Tl, Em, Dm, Um, Tm, jn, hn, ln, kn, pn, on, rn, qn, un, tn, wn, vn, An, zn, Cn, Bn, Kn, Jn, xm, Ln, Vl, fu, Nn, Mn, _r, Tn, Sn, Yn, Xn, mo, lo, Go, Fo, Vo, Uo, gp, fp, Fp, Ep, bq, aq, gq, fq, kq, jq, vq, uq, Gq, Fq, Rq, Qq, ar, $q, jr, ir, pr, or, vr, ur, Br, Ar, Gr, Fr, Pr, Or, ss, rs, Lt, Ks, jt, it, lt, kt, On, Zr, as, Bs, Ss, _s, gt, ht, Cw, Bw, Jw, Iw, Mw, Lw, Ow, Sw, Rw, Uw, Xw, Vw, Ww, Yw, Zw, Md, Od, Zj, ig, kg, lg, mg, Ph, Qh, Oh, pi, xg, wx, ll, Pi, Qi, Ri, nj, oj, rj, sj, xl, Bl, El, cr, $r, xv, Ev, Fv, Gv, Hv, Iv, Jv, bm, pm, Gl, ux, Zy, Zy, Zy, Zy, Zy, Zy, Zy, Zy, Zy, Zy, Zy, Zy, Zy, Zy, Zy, Zy, Zy, Zy, Zy, Zy, Zy, Zy, Zy, Zy, Zy, Zy, Zy, Zy, Zy, Zy, Zy, Zy, Zy, Zy, Zy, Zy, Zy, Zy, Zy, Zy, Zy, Zy, Zy, Zy, Zy, Zy, Zy, Zy, Zy, Zy, Zy, Zy, Zy, Zy, Zy, Zy, Zy, Zy];
		var mc = [nz, Ym, bn, Qt, fn, Im, Nm, _t, Rm, Ol, Pl, Rn, Wn, Cr, Hr, us, ws, zs, bs, is, ls, os, _w, cy, bh, oz, Fg, pk, Bk, xw, nz, nz];
		var nc = [pz, ud, Qe, pz];
		var oc = [qz, kx, jx, gx];
		var pc = [rz, ch];
		var qc = [sz, Zn, _n, $n, ao, bo, co, eo, fo, go, ho, io, no, oo, po, qo, ro, so, to, uo, vo, wo, xo, Mo, Oo, Zo, $o, ip, jp, kp, mp, op, Hp, Ip, Jp, Lp, Np, tr, zr, sz, sz, sz, sz, sz, sz, sz, sz, sz, sz, sz, sz, sz, sz, sz, sz, sz, sz, sz, sz, sz, sz, sz, sz, sz];
		var rc = [tz, uz, qd, rd, vd, xd, Ed, Hd, $e, cf, df, Ce, ef, vz, wz, xz, yz, Yk, _k, Ot, Tt, Yt, bu, Hm, Xm, nq, oq, pq, qq, sq, tq, yq, zq, Aq, Bq, Dq, Eq, Jq, Kq, Lq, Mq, Oq, Pq, Uq, Vq, Wq, Xq, Zq, _q, Er, Jr, qt, st, ut, rt, tt, vt, zg, Ag, Dh, Lh, Mh, zz, Gg, Cj, qk, Ck, tz, tz, tz, tz, tz, tz, tz, tz, tz, tz, tz, tz, tz, tz, tz, tz, tz, tz, tz, tz, tz, tz, tz, tz, tz, tz, tz, tz, tz, tz, tz, tz, tz, tz, tz, tz, tz, tz, tz, tz, tz, tz, tz, tz, tz, tz, tz, tz, tz, tz, tz, tz, tz, tz, tz, tz, tz, tz, tz, tz, tz];
		var sc = [Az, qp, Pp, Az];
		var tc = [Bz, Cz, Dz, sd, Dd, Hw, Ez, Fz, Gz, Hz, Ok, Pk, Sk, Uk, Xk, Pt, an, cn, dn, $m, Ut, Vt, Zt, Mm, Om, Pm, Lm, cu, du, Nw, Fn, hp, xt, zt, Bt, Ht, Jt, Dt, Ft, Gp, yt, At, Ct, It, Kt, Et, Gt, lq, mq, rq, wq, xq, Cq, Hq, Iq, Nq, Sq, Tq, Yq, Os, Ps, Rs, mt, ot, nt, pt, Fs, Gs, Is, Ws, Xs, Zs, ct, dt, ft, Dw, Kw, Tw, Jg, vx, Bz, Bz, Bz, Bz, Bz, Bz, Bz, Bz, Bz, Bz, Bz, Bz, Bz, Bz, Bz, Bz, Bz, Bz, Bz, Bz, Bz, Bz, Bz, Bz, Bz, Bz, Bz, Bz, Bz, Bz, Bz, Bz, Bz, Bz, Bz, Bz, Bz, Bz, Bz, Bz, Bz, Bz, Bz, Bz, Bz, Bz, Bz, Bz];
		var uc = [Iz, qr, wr, Iz];
		var vc = [Jz, Mk, Nk, Vk, Hk, Nl, Gn, Bh, Bg, qi, Nh, Rh, Bi, Ci, Di, Fi, Ei, Oi, Jz, Jz, Jz, Jz, Jz, Jz, Jz, Jz, Jz, Jz, Jz, Jz, Jz, Jz];
		var wc = [Kz, Po, So, ap, cp, Kz, Kz, Kz];
		var xc = [Lz, rx, ad, sx];
		var yc = [Mz, Ls, Ms, Cs, Ds, Ts, Us, $s, at, Mz, Mz, Mz, Mz, Mz, Mz, Mz];
		var zc = [Nz, Kk, ys, ds, es, fs, ns, Ch, wg, Nz, Nz, Nz, Nz, Nz, Nz, Nz];
		var Ac = [Oz, dq, hq, br, fr, kr, mr, Oz];
		var Bc = [Pz, Qz, Rz, Sz, Tz, Zm, Jm, Ho, Io, No, To, Wo, Xo, _o, dp, Dr, Ir, nx, mx, lx, Pz, Pz, Pz, Pz, Pz, Pz, Pz, Pz, Pz, Pz, Pz, Pz];
		var Cc = [Uz, _e, en, Rt, Wt, gn, Qm, $t, eu, Sm, ts, vs, xs, gs, js, ms, xx, Hg, Vz, Uz, Uz, Uz, Uz, Uz, Uz, Uz, Uz, Uz, Uz, Uz, Uz, Uz];
		var Dc = [Wz, Lk, Pn, Un, As, Ns, Qs, ps, Es, Hs, Vs, Ys, bt, et, Wz, Wz];
		var Ec = [Xz, _m, Km, Qn, Vn, ax, bx, dx, zj, Aj, Bj, Xz, Xz, Xz, Xz, Xz];
		return {
			_strlen: py,
			_main: Pc,
			_taskrunner_receive_worker_finished: kd,
			_taskrunner_receive_ready: gd,
			_filesystem_js_handle_callback_LIST: ej,
			_bitshift64Lshr: ny,
			_calloc: xx,
			_bitshift64Shl: ty,
			_filesystem_js_handle_callback_FE: cj,
			___cxa_is_pointer_type: px,
			_taskrunner_receive_worker_serial: jd,
			_memcpy: qy,
			_taskrunner_receive_message: fd,
			_i64Subtract: ly,
			_memset: sy,
			_realloc: yx,
			_i64Add: ky,
			___cxa_can_catch: ox,
			_saveSetjmp: my,
			_filesystem_js_handle_callback: dj,
			_llvm_bswap_i32: jy,
			_testSetjmp: oy,
			_filesystem_js_handle_callback_F: aj,
			_taskrunner_receive_serialized: cd,
			_free: wx,
			_memmove: ry,
			_taskrunner_receive_response: id,
			_malloc: vx,
			_taskrunner_interval_callback: ad,
			_filesystem_js_handle_callback_FDS: bj,
			_strcpy: uy,
			__ZL25HelperNxtGlobalInitializev: Nc,
			___cxx_global_var_init13: Ue,
			___cxx_global_var_init14: Ve,
			___cxx_global_var_init15: We,
			___cxx_global_var_init16: Xe,
			___cxx_global_var_init17: Ye,
			__GLOBAL__I_a: Ze,
			__GLOBAL__I_a28: Cg,
			___cxx_global_var_init7: fj,
			___cxx_global_var_init8: gj,
			__GLOBAL__I_a404: hj,
			__GLOBAL__I_a431: qj,
			__GLOBAL__I_a778: wl,
			__GLOBAL__I_a794: Dl,
			__GLOBAL__I_a948: Mt,
			runPostSets: iy,
			stackAlloc: Fc,
			stackSave: Gc,
			stackRestore: Hc,
			setThrew: Ic,
			setTempRet0: Lc,
			getTempRet0: Mc,
			dynCall_vi: Fy,
			dynCall_iiii: Gy,
			dynCall_vid: Hy,
			dynCall_viiiii: Iy,
			dynCall_iiiiiiiiii: Jy,
			dynCall_viiiiiii: Ky,
			dynCall_vii: Ly,
			dynCall_viiiiiiiii: My,
			dynCall_ii: Ny,
			dynCall_viiiiiid: Oy,
			dynCall_viii: Py,
			dynCall_viiiiid: Qy,
			dynCall_v: Ry,
			dynCall_iiiiiiiii: Sy,
			dynCall_iiiii: Ty,
			dynCall_viiiiiiii: Uy,
			dynCall_viiiiii: Vy,
			dynCall_iii: Wy,
			dynCall_iiiiii: Xy,
			dynCall_viiii: Yy
		}
	})
